package com.oculus.config.updater;

import X.AbstractC06640p5;
import X.AnonymousClass006;
import X.AnonymousClass0CC;
import X.AnonymousClass0DC;
import X.AnonymousClass0DD;
import X.AnonymousClass0NO;
import X.AnonymousClass0Pi;
import X.AnonymousClass0QC;
import X.AnonymousClass0p1;
import X.AnonymousClass117;
import X.C01010Iv;
import android.content.SharedPreferences;
import com.facebook.inject.ApplicationScoped;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Eager;
import com.google.common.base.Preconditions;
import com.google.common.base.Strings;
import com.google.common.collect.ImmutableList;
import com.oculus.config.ConfigModule;
import com.oculus.config.annotations.GatekeeperSharedPrefs;
import com.oculus.config.gatekeeper.DynamicGatekeeperRegistry;
import com.oculus.config.gatekeeper.GatekeeperRegistry;
import com.oculus.config.interfaces.ConfigInterfacesModule;
import com.oculus.config.interfaces.Configuration;
import com.oculus.config.updater.logging.ConfigUpdaterLogger;
import com.oculus.http.core.base.ApiCallback;
import com.oculus.http.core.base.ApiError;
import com.oculus.mobileconfigservice.MobileConfigUpdater;
import java.util.List;
import java.util.Set;
import javax.annotation.Nullable;
import javax.inject.Inject;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_config_gatekeeper_GatekeeperRegistry_ULSEP_BINDING_ID", "_UL__ULSEP_android_content_SharedPreferences_ULSEP_com_oculus_config_annotations_GatekeeperSharedPrefs_ULSEP_BINDING_ID", "_UL__ULSEP_java_util_Set_ULLT_com_oculus_config_interfaces_Configuration_ULGT__ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_config_updater_logging_ConfigUpdaterLogger_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_config_gatekeeper_DynamicGatekeeperRegistry_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_config_updater_ConfigUpdaterMethods_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_mobileconfigservice_MobileConfigUpdater_ULSEP_BINDING_ID"})
@ApplicationScoped
public class ConfigUpdater {
    public static final String TAG = "ConfigUpdater";
    public static volatile ConfigUpdater _UL__ULSEP_com_oculus_config_updater_ConfigUpdater_ULSEP_INSTANCE;
    public AnonymousClass0QC _UL_mInjectionContext;
    @Inject
    @Eager
    public final ConfigUpdaterLogger mConfigUpdaterLogger;
    @Inject
    @Eager
    public final ConfigUpdaterMethods mConfigUpdaterMethods;
    @Inject
    @Eager
    public final Set<Configuration> mConfigurations;
    @Inject
    @Eager
    public final DynamicGatekeeperRegistry mDynamicGatekeeperRegistry;
    @Inject
    @Eager
    public final GatekeeperRegistry mGatekeeperRegistry;
    @Inject
    @Eager
    public final MobileConfigUpdater mMobileConfigUpdater;
    @Inject
    @Eager
    @GatekeeperSharedPrefs
    public final SharedPreferences mSharedPreferences;

    public interface Callback {
        void onConfigUpdateComplete();

        void onConfigUpdateFailed(ApiError apiError);
    }

    @AutoGeneratedAccessMethod
    public static final AnonymousClass0p1 _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_config_updater_ConfigUpdater_ULGT__ULSEP_ACCESS_METHOD(AbstractC06640p5 r2) {
        return new C01010Iv(157, r2);
    }

    @AutoGeneratedAccessMethod
    public static final ConfigUpdater _UL__ULSEP_com_oculus_config_updater_ConfigUpdater_ULSEP_ACCESS_METHOD(AbstractC06640p5 r1) {
        return (ConfigUpdater) AnonymousClass117.A00(157, r1);
    }

    @AutoGeneratedFactoryMethod
    public static final ConfigUpdater _UL__ULSEP_com_oculus_config_updater_ConfigUpdater_ULSEP_FACTORY_METHOD(AbstractC06640p5 r4) {
        if (_UL__ULSEP_com_oculus_config_updater_ConfigUpdater_ULSEP_INSTANCE == null) {
            synchronized (ConfigUpdater.class) {
                AnonymousClass0Pi A00 = AnonymousClass0Pi.A00(_UL__ULSEP_com_oculus_config_updater_ConfigUpdater_ULSEP_INSTANCE, r4);
                if (A00 != null) {
                    try {
                        _UL__ULSEP_com_oculus_config_updater_ConfigUpdater_ULSEP_INSTANCE = new ConfigUpdater(r4.getApplicationInjector());
                    } finally {
                        A00.A01();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_config_updater_ConfigUpdater_ULSEP_INSTANCE;
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_config_updater_ConfigUpdater_ULGT__ULSEP_ACCESS_METHOD(AbstractC06640p5 r2) {
        return new C01010Iv(157, r2);
    }

    private void forceUpdateGks(@Nullable final Callback callback) {
        AnonymousClass0CC r1 = new AnonymousClass0CC();
        r1.A03(this.mGatekeeperRegistry.getRegisteredGatekeepers());
        r1.A03(this.mDynamicGatekeeperRegistry.getRegisteredGatekeepers());
        final ImmutableList A0C = ImmutableList.A0C(r1.build());
        if (!A0C.isEmpty()) {
            RefreshGatekeepersRequest refreshGatekeepersRequest = new RefreshGatekeepersRequest(A0C);
            refreshGatekeepersRequest.mCallback = new ApiCallback<RefreshGatekeepersResponse>() {
                /* class com.oculus.config.updater.ConfigUpdater.AnonymousClass3 */

                @Override // com.oculus.http.core.base.ApiCallback
                public void onError(ApiError apiError) {
                    ConfigUpdater.this.onError(apiError, callback);
                }

                public void onResponse(RefreshGatekeepersResponse refreshGatekeepersResponse) {
                    ConfigUpdater.this.onRefreshGatekeepers(A0C, refreshGatekeepersResponse.getGatekeeperValues(), callback);
                }
            };
            this.mConfigUpdaterMethods.fetchGatekeepers(refreshGatekeepersRequest);
        } else if (callback != null) {
            callback.onConfigUpdateComplete();
        }
    }

    private long getLastConfigUpdateTime() {
        return this.mSharedPreferences.getLong(ConfigModule.LAST_CONFIG_UPDATE_MS, -1);
    }

    private boolean isGatekeeperRegistered(String str) {
        if (this.mGatekeeperRegistry.isGatekeeperRegistered(str) || this.mDynamicGatekeeperRegistry.isGatekeeperRegistered(str)) {
            return true;
        }
        return false;
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private void onError(ApiError apiError, @Nullable Callback callback) {
        AnonymousClass0NO.A0B(TAG, "Error refreshing gatekeepers", apiError);
        if (callback != null) {
            callback.onConfigUpdateFailed(apiError);
        }
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private void updateLastConfigUpdateTime() {
        this.mSharedPreferences.edit().putLong(ConfigModule.LAST_CONFIG_UPDATE_MS, System.currentTimeMillis()).apply();
    }

    public void clearSharedPreferences() {
        synchronized (this.mSharedPreferences) {
            this.mSharedPreferences.edit().clear().apply();
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:3:0x0018, code lost:
        if (r1 == false) goto L_0x001a;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public X.AnonymousClass0DC<java.lang.Void> fetchAsync() {
        /*
        // Method dump skipped, instructions count: 235
        */
        throw new UnsupportedOperationException("Method not decompiled: com.oculus.config.updater.ConfigUpdater.fetchAsync():X.0DC");
    }

    public AnonymousClass0DC<Void> forceUpdateGksAsync() {
        final AnonymousClass0DD r1 = new AnonymousClass0DD();
        forceUpdateGks(new Callback() {
            /* class com.oculus.config.updater.ConfigUpdater.AnonymousClass2 */

            @Override // com.oculus.config.updater.ConfigUpdater.Callback
            public void onConfigUpdateComplete() {
                r1.A02(null);
            }

            @Override // com.oculus.config.updater.ConfigUpdater.Callback
            public void onConfigUpdateFailed(ApiError apiError) {
                ConfigUpdater.this.mConfigUpdaterLogger.logConfigUpdateFailed(apiError);
                r1.A01(apiError);
            }
        });
        return r1.A00;
    }

    public void removeGatekeeper(String str) {
        synchronized (this.mSharedPreferences) {
            this.mSharedPreferences.edit().remove(AnonymousClass006.A05(ConfigModule.SHARED_PREF_KEY_OVERRIDE_ROOT, str)).remove(AnonymousClass006.A05(ConfigModule.SHARED_PREF_KEY_ROOT_GATEKEEPERS, str)).apply();
        }
    }

    @Inject
    public ConfigUpdater(AbstractC06640p5 r3) {
        this._UL_mInjectionContext = new AnonymousClass0QC(2, r3);
        this.mGatekeeperRegistry = ConfigModule._UL__ULSEP_com_oculus_config_gatekeeper_GatekeeperRegistry_ULSEP_ACCESS_METHOD(r3);
        this.mSharedPreferences = ConfigModule._UL__ULSEP_android_content_SharedPreferences_ULSEP_com_oculus_config_annotations_GatekeeperSharedPrefs_ULSEP_ACCESS_METHOD(r3);
        this.mConfigurations = ConfigInterfacesModule._UL__ULSEP_java_util_Set_ULLT_com_oculus_config_interfaces_Configuration_ULGT__ULSEP_ACCESS_METHOD(r3);
        this.mConfigUpdaterLogger = ConfigUpdaterLogger._UL__ULSEP_com_oculus_config_updater_logging_ConfigUpdaterLogger_ULSEP_ACCESS_METHOD(r3);
        this.mDynamicGatekeeperRegistry = ConfigModule._UL__ULSEP_com_oculus_config_gatekeeper_DynamicGatekeeperRegistry_ULSEP_ACCESS_METHOD(r3);
        this.mConfigUpdaterMethods = ConfigUpdaterMethods._UL__ULSEP_com_oculus_config_updater_ConfigUpdaterMethods_ULSEP_ACCESS_METHOD(r3);
        this.mMobileConfigUpdater = (MobileConfigUpdater) AnonymousClass117.A00(590, r3);
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private void onRefreshGatekeepers(List<String> list, List<Boolean> list2, @Nullable Callback callback) {
        boolean z = false;
        if (list.size() == list2.size()) {
            z = true;
        }
        int size = list.size();
        int size2 = list2.size();
        if (z) {
            SharedPreferences.Editor edit = this.mSharedPreferences.edit();
            for (int i = 0; i < list.size(); i++) {
                edit.putBoolean(AnonymousClass006.A05(ConfigModule.SHARED_PREF_KEY_ROOT_GATEKEEPERS, list.get(i)), list2.get(i).booleanValue());
            }
            edit.apply();
            if (callback != null) {
                callback.onConfigUpdateComplete();
                return;
            }
            return;
        }
        throw new IllegalArgumentException(Strings.lenientFormat("Size mismatch between gatekeeper names (%d) and values (%d)", Integer.valueOf(size), Integer.valueOf(size2)));
    }

    public void clearGatekeeperOverride(String str) {
        Preconditions.checkArgument(isGatekeeperRegistered(str));
        synchronized (this.mSharedPreferences) {
            this.mSharedPreferences.edit().remove(AnonymousClass006.A05(ConfigModule.SHARED_PREF_KEY_OVERRIDE_ROOT, str)).apply();
        }
    }

    public AnonymousClass0DC<Void> forceUpdateConfigAsync() {
        return forceUpdateGksAsync();
    }

    public long getTimeSinceLastUpdate() {
        long lastConfigUpdateTime = getLastConfigUpdateTime();
        if (lastConfigUpdateTime >= 0) {
            return Math.max(0L, System.currentTimeMillis() - lastConfigUpdateTime);
        }
        return -1;
    }

    public void setGatekeeperOverride(String str, boolean z) {
        Preconditions.checkArgument(isGatekeeperRegistered(str));
        synchronized (this.mSharedPreferences) {
            this.mSharedPreferences.edit().putBoolean(AnonymousClass006.A05(ConfigModule.SHARED_PREF_KEY_OVERRIDE_ROOT, str), z).apply();
        }
    }
}
