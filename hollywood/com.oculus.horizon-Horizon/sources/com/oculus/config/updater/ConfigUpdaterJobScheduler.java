package com.oculus.config.updater;

import X.AbstractC06640p5;
import X.AnonymousClass006;
import X.AnonymousClass0p1;
import X.AnonymousClass117;
import X.C003008y;
import X.C003108z;
import X.C01020Iw;
import android.annotation.TargetApi;
import android.app.job.JobInfo;
import android.app.job.JobScheduler;
import android.content.ComponentName;
import android.content.Context;
import com.facebook.inject.ForAppContext;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.oculus.config.annotations.ConfigRefreshInterval;
import com.oculus.errorreporting.ErrorReporter;
import com.oculus.platform.OVRServiceSynchronous;
import com.oculus.util.constants.JobSchedulerIds;
import javax.inject.Inject;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID", "_UL__ULSEP_java_lang_Long_ULSEP_com_oculus_config_annotations_ConfigRefreshInterval_ULSEP_BINDING_ID"})
@TargetApi(21)
public class ConfigUpdaterJobScheduler {
    public static final String TAG = "ConfigUpdaterJobScheduler";
    public final Context mContext;
    public final long mRefreshIntervalMs;

    @AutoGeneratedAccessMethod
    public static final AnonymousClass0p1 _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_config_updater_ConfigUpdaterJobScheduler_ULGT__ULSEP_ACCESS_METHOD(AbstractC06640p5 r2) {
        return new C003008y(264, r2);
    }

    @AutoGeneratedAccessMethod
    public static final ConfigUpdaterJobScheduler _UL__ULSEP_com_oculus_config_updater_ConfigUpdaterJobScheduler_ULSEP_ACCESS_METHOD(AbstractC06640p5 r1) {
        return (ConfigUpdaterJobScheduler) AnonymousClass117.A00(264, r1);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_config_updater_ConfigUpdaterJobScheduler_ULGT__ULSEP_ACCESS_METHOD(AbstractC06640p5 r2) {
        return new C01020Iw(264, r2);
    }

    private JobScheduler getJobScheduler() {
        return (JobScheduler) this.mContext.getSystemService("jobscheduler");
    }

    @Inject
    public ConfigUpdaterJobScheduler(@ForAppContext Context context, @ConfigRefreshInterval Long l) {
        this.mContext = context;
        this.mRefreshIntervalMs = l.longValue();
    }

    @AutoGeneratedFactoryMethod
    public static final ConfigUpdaterJobScheduler _UL__ULSEP_com_oculus_config_updater_ConfigUpdaterJobScheduler_ULSEP_FACTORY_METHOD(AbstractC06640p5 r3) {
        return new ConfigUpdaterJobScheduler(C003108z.A00(r3), ConfigUpdaterModule._UL__ULSEP_java_lang_Long_ULSEP_com_oculus_config_annotations_ConfigRefreshInterval_ULSEP_ACCESS_METHOD(r3));
    }

    private boolean isJobScheduled() {
        for (JobInfo jobInfo : getJobScheduler().getAllPendingJobs()) {
            if (jobInfo.getId() == 1828726820) {
                return true;
            }
        }
        return false;
    }

    public void schedule() {
        int schedule;
        if (!isJobScheduled() && (schedule = getJobScheduler().schedule(new JobInfo.Builder(JobSchedulerIds.CONFIG_UPDATE, new ComponentName(this.mContext, ConfigUpdaterJobService.class.getName())).setPeriodic(this.mRefreshIntervalMs).setRequiredNetworkType(1).setPersisted(true).setBackoffCriteria(OVRServiceSynchronous.SERVICE_CONNECTION_TIMEOUT_MILLIS, 1).build())) != 1) {
            ErrorReporter.A02(TAG, AnonymousClass006.A02("Config-update job schedule failed (error code: ", schedule, ")"));
        }
    }

    public void unschedule() {
        getJobScheduler().cancel(JobSchedulerIds.CONFIG_UPDATE);
    }
}
