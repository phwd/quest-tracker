package com.oculus.config.updater;

import X.AbstractC06640p5;
import X.AbstractC07380s1;
import X.AnonymousClass006;
import X.AnonymousClass0dH;
import X.AnonymousClass0dL;
import X.AnonymousClass0dM;
import X.AnonymousClass0p1;
import X.AnonymousClass117;
import X.C003008y;
import X.C01020Iw;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.oculus.config.ConfigController;
import com.oculus.config.ConfigModule;
import com.oculus.config.gatekeeper.GatekeeperRegistry;
import com.oculus.horizon.vr_lifecycle.MountStatusPoller;
import java.io.PrintStream;
import java.util.List;
import java.util.concurrent.TimeUnit;
import javax.inject.Inject;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_config_gatekeeper_GatekeeperRegistry_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_config_ConfigController_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_config_updater_ConfigUpdater_ULSEP_BINDING_ID"})
public class ConfigUpdaterDumperPlugin implements AnonymousClass0dM {
    public static final String COLOR_RED = "\u001b[31m";
    public static final String COLOR_RESET = "\u001b[0m";
    public static final String COLOR_YELLOW = "\u001b[33m";
    public static final String COMMAND_CLEAR = "clear";
    public static final String COMMAND_PRINT = "print";
    public static final String COMMAND_REMOVE = "remove";
    public static final String COMMAND_SET = "set";
    public static final String COMMAND_STATUS = "status";
    public static final String COMMAND_UNSET = "unset";
    public static final String COMMAND_UPDATE = "update";
    public static final String NAME = "config";
    public final ConfigController mConfigController;
    public final ConfigUpdater mConfigUpdater;
    public final GatekeeperRegistry mGatekeeperRegistry;

    public String getName() {
        return NAME;
    }

    @AutoGeneratedAccessMethod
    public static final AnonymousClass0p1 _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_config_updater_ConfigUpdaterDumperPlugin_ULGT__ULSEP_ACCESS_METHOD(AbstractC06640p5 r2) {
        return new C003008y(MountStatusPoller.POLL_INTERVAL_MS, r2);
    }

    @AutoGeneratedAccessMethod
    public static final ConfigUpdaterDumperPlugin _UL__ULSEP_com_oculus_config_updater_ConfigUpdaterDumperPlugin_ULSEP_ACCESS_METHOD(AbstractC06640p5 r1) {
        return (ConfigUpdaterDumperPlugin) AnonymousClass117.A00(MountStatusPoller.POLL_INTERVAL_MS, r1);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_config_updater_ConfigUpdaterDumperPlugin_ULGT__ULSEP_ACCESS_METHOD(AbstractC06640p5 r2) {
        return new C01020Iw(MountStatusPoller.POLL_INTERVAL_MS, r2);
    }

    private void clear(PrintStream printStream) {
        this.mConfigUpdater.clearSharedPreferences();
        printStream.println("All gatekeepers and QEs have been cleared");
    }

    private void printGk(PrintStream printStream, String str) {
        String str2;
        Boolean gatekeeper = this.mConfigController.getGatekeeper(str, false);
        boolean isGatekeeperOverrideEnabled = this.mConfigController.isGatekeeperOverrideEnabled(str);
        boolean isGatekeeperFetched = this.mConfigController.isGatekeeperFetched(str);
        if (isGatekeeperOverrideEnabled) {
            str2 = COLOR_RED;
        } else if (!isGatekeeperFetched) {
            str2 = COLOR_YELLOW;
        } else {
            str2 = COLOR_RESET;
        }
        printStream.println(String.format("%s = %s%s\u001b[0m", str, str2, Boolean.toString(gatekeeper.booleanValue())));
    }

    public static void printUsage(PrintStream printStream) {
        String A05 = AnonymousClass006.A05("Usage: ", "dumpapp config");
        String A052 = AnonymousClass006.A05("       ", "dumpapp config");
        printStream.format("%s <command>\n", A05);
        printStream.format("%s %s\n", A052, "status");
        printStream.format("%s %s [regex]\n", A052, COMMAND_PRINT);
        printStream.format("%s %s\n", A052, COMMAND_UPDATE);
        printStream.format("%s %s\n", A052, COMMAND_CLEAR);
        printStream.format("%s %s <config_name> <new_value>\n", A052, COMMAND_SET);
        printStream.format("%s %s <config_name>\n", A052, COMMAND_UNSET);
        printStream.format("%s %s <config_name>\n", A052, COMMAND_REMOVE);
        printStream.println();
        printStream.format("%s %s: Print the elapsed time since last update\n", "dumpapp config", "status");
        printStream.println();
        printStream.format("%s %s: Print all matching GKs\n", "dumpapp config", COMMAND_PRINT);
        printStream.println();
        printStream.format("%s %s: Triggers an update for all GK/QEs\n", "dumpapp config", COMMAND_UPDATE);
        printStream.println();
        printStream.format("%s %s: Clears all config data (time since last update, GK/QEs)\n", "dumpapp config", COMMAND_CLEAR);
        printStream.println();
        printStream.format("%s %s: Override a GK\n", "dumpapp config", COMMAND_SET);
        printStream.println();
        printStream.format("%s %s: Clear GK override\n", "dumpapp config", COMMAND_UNSET);
        printStream.println();
        printStream.format("%s %s: Force GK to unassigned\n", "dumpapp config", COMMAND_REMOVE);
        printStream.println();
    }

    private void status(PrintStream printStream) {
        long timeSinceLastUpdate = this.mConfigUpdater.getTimeSinceLastUpdate();
        if (timeSinceLastUpdate == -1) {
            printStream.println("Has yet to update");
            return;
        }
        printStream.format("Elapsed time since last update: %d days, %02d:%02d\n", Long.valueOf(TimeUnit.MILLISECONDS.toDays(timeSinceLastUpdate)), Long.valueOf(TimeUnit.MILLISECONDS.toHours(timeSinceLastUpdate)), Long.valueOf(TimeUnit.MILLISECONDS.toSeconds(timeSinceLastUpdate)));
    }

    private void update(PrintStream printStream) {
        this.mConfigUpdater.fetchAsync();
        printStream.println("Updating configs");
    }

    @Inject
    public ConfigUpdaterDumperPlugin(GatekeeperRegistry gatekeeperRegistry, ConfigController configController, ConfigUpdater configUpdater) {
        this.mGatekeeperRegistry = gatekeeperRegistry;
        this.mConfigController = configController;
        this.mConfigUpdater = configUpdater;
    }

    @AutoGeneratedFactoryMethod
    public static final ConfigUpdaterDumperPlugin _UL__ULSEP_com_oculus_config_updater_ConfigUpdaterDumperPlugin_ULSEP_FACTORY_METHOD(AbstractC06640p5 r4) {
        return new ConfigUpdaterDumperPlugin(ConfigModule._UL__ULSEP_com_oculus_config_gatekeeper_GatekeeperRegistry_ULSEP_ACCESS_METHOD(r4), ConfigController._UL__ULSEP_com_oculus_config_ConfigController_ULSEP_ACCESS_METHOD(r4), ConfigUpdater._UL__ULSEP_com_oculus_config_updater_ConfigUpdater_ULSEP_ACCESS_METHOD(r4));
    }

    private void print(PrintStream printStream, List<String> list) {
        String str;
        if (list.size() > 0) {
            str = list.get(0);
        } else {
            str = null;
        }
        AbstractC07380s1<String> A0K = this.mGatekeeperRegistry.getRegisteredGatekeepers().iterator();
        while (A0K.hasNext()) {
            String next = A0K.next();
            if (str == null || next.contains(str)) {
                printGk(printStream, next);
            }
        }
    }

    private void remove(PrintStream printStream, List<String> list) {
        if (list.size() != 1) {
            printStream.println("Invalid command");
            return;
        }
        String str = list.get(0);
        this.mConfigUpdater.removeGatekeeper(str);
        printStream.format("Removed %s\n", str);
    }

    private void set(PrintStream printStream, List<String> list) {
        if (list.size() != 2) {
            printStream.println("Invalid command");
            return;
        }
        String str = list.get(0);
        this.mConfigUpdater.setGatekeeperOverride(str, Boolean.valueOf(list.get(1)).booleanValue());
        printGk(printStream, str);
    }

    private void unset(PrintStream printStream, List<String> list) {
        if (list.size() != 1) {
            printStream.println("Invalid command");
            return;
        }
        String str = list.get(0);
        this.mConfigUpdater.clearGatekeeperOverride(str);
        printGk(printStream, str);
    }

    public void dump(AnonymousClass0dL r2) throws AnonymousClass0dH {
        throw null;
    }
}
