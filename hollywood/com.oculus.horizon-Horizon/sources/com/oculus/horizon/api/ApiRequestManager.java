package com.oculus.horizon.api;

import X.AbstractC06640p5;
import X.AnonymousClass0p1;
import X.AnonymousClass117;
import X.C003008y;
import X.C01020Iw;
import androidx.annotation.VisibleForTesting;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.google.common.base.Preconditions;
import com.oculus.http.core.base.ApiCallback;
import com.oculus.http.core.base.ApiRequest;
import com.oculus.util.thread.ThreadUtils;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import javax.inject.Inject;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_horizon_api_ApiDispatcher_ULSEP_BINDING_ID"})
public class ApiRequestManager {
    public final ApiDispatcher mApiDispatcher;
    public boolean mIsPaused;
    @VisibleForTesting
    public final List<ApiRequest> mRequests = new ArrayList();

    public void post(ApiRequest apiRequest, ApiCallback apiCallback) {
        postInternal(apiRequest, apiCallback, false);
    }

    public void postUnique(ApiRequest apiRequest, ApiCallback apiCallback) {
        postInternal(apiRequest, apiCallback, true);
    }

    @AutoGeneratedAccessMethod
    public static final AnonymousClass0p1 _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_horizon_api_ApiRequestManager_ULGT__ULSEP_ACCESS_METHOD(AbstractC06640p5 r2) {
        return new C003008y(407, r2);
    }

    @AutoGeneratedAccessMethod
    public static final ApiRequestManager _UL__ULSEP_com_oculus_horizon_api_ApiRequestManager_ULSEP_ACCESS_METHOD(AbstractC06640p5 r1) {
        return (ApiRequestManager) AnonymousClass117.A00(407, r1);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_horizon_api_ApiRequestManager_ULGT__ULSEP_ACCESS_METHOD(AbstractC06640p5 r2) {
        return new C01020Iw(407, r2);
    }

    private <T> void postInternal(ApiRequest<T> apiRequest, ApiCallback<T> apiCallback, boolean z) {
        apiRequest.mCallback = apiCallback;
        synchronized (this.mRequests) {
            removeCompletedRequests();
            if (z) {
                for (ApiRequest apiRequest2 : this.mRequests) {
                    if (apiRequest2.getClass().equals(apiRequest.getClass())) {
                        return;
                    }
                }
            }
            if (this.mIsPaused) {
                apiCallback.mIsPaused = true;
            }
            this.mRequests.add(apiRequest);
            this.mApiDispatcher.post(apiRequest);
        }
    }

    private void removeCompletedRequests() {
        Iterator<ApiRequest> it = this.mRequests.iterator();
        while (it.hasNext()) {
            if (it.next().getCallback().mIsComplete) {
                it.remove();
            }
        }
    }

    public void destroy() {
        synchronized (this.mRequests) {
            Iterator<ApiRequest> it = this.mRequests.iterator();
            while (it.hasNext()) {
                it.next().getCallback().mIsPaused = true;
                it.remove();
            }
        }
    }

    public void pause() {
        if (ThreadUtils.A04()) {
            Preconditions.checkArgument(!this.mIsPaused);
            this.mIsPaused = true;
            synchronized (this.mRequests) {
                removeCompletedRequests();
                for (ApiRequest apiRequest : this.mRequests) {
                    apiRequest.getCallback().mIsPaused = true;
                }
            }
            return;
        }
        throw new IllegalStateException(ThreadUtils.MUST_BE_UI_THREAD);
    }

    public void resume() {
        if (!ThreadUtils.A04()) {
            throw new IllegalStateException(ThreadUtils.MUST_BE_UI_THREAD);
        } else if (this.mIsPaused) {
            this.mIsPaused = false;
            LinkedList linkedList = new LinkedList();
            synchronized (this.mRequests) {
                linkedList.addAll(this.mRequests);
                Iterator it = linkedList.iterator();
                while (it.hasNext()) {
                    ((ApiRequest) it.next()).getCallback().resume();
                }
                removeCompletedRequests();
            }
        }
    }

    @Inject
    public ApiRequestManager(ApiDispatcher apiDispatcher) {
        this.mApiDispatcher = apiDispatcher;
    }

    @AutoGeneratedFactoryMethod
    public static final ApiRequestManager _UL__ULSEP_com_oculus_horizon_api_ApiRequestManager_ULSEP_FACTORY_METHOD(AbstractC06640p5 r1) {
        return new ApiRequestManager(ApiDispatcher._UL__ULSEP_com_oculus_horizon_api_ApiDispatcher_ULSEP_ACCESS_METHOD(r1));
    }
}
