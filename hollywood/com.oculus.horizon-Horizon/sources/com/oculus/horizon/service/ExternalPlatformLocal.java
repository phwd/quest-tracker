package com.oculus.horizon.service;

import X.AbstractC06640p5;
import X.AbstractC07380s1;
import X.AnonymousClass006;
import X.AnonymousClass0CC;
import X.AnonymousClass0NO;
import X.AnonymousClass0Pi;
import X.AnonymousClass0QC;
import X.AnonymousClass0p1;
import X.AnonymousClass117;
import X.C01010Iv;
import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.os.Binder;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.text.TextUtils;
import com.facebook.inject.ApplicationScoped;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.google.common.collect.ImmutableMap;
import com.google.inject.name.Named;
import com.oculus.errorreporting.ErrorReporter;
import com.oculus.horizon.deeplinking.contract.StoreContract;
import com.oculus.library.model.App;
import com.oculus.library.model.AppMediaCapability;
import com.oculus.library.model.AppStatus;
import com.oculus.library.model.GrantReason;
import com.oculus.library.model.MicrophoneUsage;
import com.oculus.library.utils.AppStatusConverter;
import com.oculus.libraryapi.OVRLibrary;
import com.oculus.libraryapi.OVRLibraryModule;
import com.oculus.model.ProductStatus;
import com.oculus.util.device.DeviceUtils;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import javax.annotation.Nullable;
import javax.inject.Provider;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.JSONTokener;

@Dependencies({"_UL__ULSEP_java_lang_Boolean_ULSEP_com_google_inject_name_Named_ULUNDERSCORE_oculus_ULUNDERSCORE_livestreaming_ULUNDERSCORE_enable_ULUNDERSCORE_all_ULUNDERSCORE_apps_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID", "_UL__ULSEP_java_lang_Boolean_ULSEP_com_google_inject_name_Named_ULUNDERSCORE_oculus_ULUNDERSCORE_livestreaming_ULUNDERSCORE_enable_ULUNDERSCORE_all_ULUNDERSCORE_apps_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_horizon_platformsdk_DeeplinkIntentUtils_ULSEP_BINDING_ID"})
@ApplicationScoped
public class ExternalPlatformLocal {
    public static final String CONFIG_MICROPHONE_USAGE = "app_microphone_usage";
    public static final String TAG = "ExternalPlatformLocal";
    public static volatile ExternalPlatformLocal _UL__ULSEP_com_oculus_horizon_service_ExternalPlatformLocal_ULSEP_INSTANCE;
    public static final File configFile = new File(Environment.getExternalStorageDirectory(), "oculus_platform_config.json");
    public static final Set<String> getsAppMediaCapabilitiesBlackList;
    public static final Set<String> sAppMediaCapabilitiesWhiteList;
    public static final Map<String, String> sWhitelistedAppPackageNameToId;
    public AnonymousClass0QC _UL_mInjectionContext;
    public JSONObject config = parseConfig();
    @Inject
    @Named(OVRModule.LIVESTREAMING_ENABLE_ALL_APPS_GK)
    public Provider<Boolean> mEnableAllAppsGK;
    public final OVRLibrary mLibrary;

    public static final class AppMediaCapabilities {
        public boolean mAllowLivestreaming;
        public boolean mAllowScreenRecording;
        public boolean mAllowVrCasting;
    }

    public static class PackageNotInLibraryException extends Exception {
        public PackageNotInLibraryException(String str) {
            super(AnonymousClass006.A07("Package ", str, " not in users library"));
        }
    }

    public static boolean isDeviceAndOSVersionSupportedForLiveStreaming() {
        boolean z;
        boolean z2 = false;
        if (Build.VERSION.SDK_INT <= 28) {
            z2 = true;
        }
        String A02 = DeviceUtils.A02();
        AbstractC07380s1<String> A0K = DeviceUtils.NOTE4_MODELS.iterator();
        while (true) {
            if (A0K.hasNext()) {
                if (A02.contains(A0K.next())) {
                    z = true;
                    break;
                }
            } else {
                z = false;
                break;
            }
        }
        return z2 && (z ^ true);
    }

    /* renamed from: com.oculus.horizon.service.ExternalPlatformLocal$1  reason: invalid class name */
    public static /* synthetic */ class AnonymousClass1 {
        public static final /* synthetic */ int[] $SwitchMap$com$oculus$library$model$AppMediaCapability;

        /* JADX WARNING: Can't wrap try/catch for region: R(8:0|1|2|3|4|5|6|8) */
        /* JADX WARNING: Failed to process nested try/catch */
        /* JADX WARNING: Missing exception handler attribute for start block: B:3:0x0012 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:5:0x001b */
        static {
            /*
                com.oculus.library.model.AppMediaCapability[] r0 = com.oculus.library.model.AppMediaCapability.values()
                int r0 = r0.length
                int[] r2 = new int[r0]
                com.oculus.horizon.service.ExternalPlatformLocal.AnonymousClass1.$SwitchMap$com$oculus$library$model$AppMediaCapability = r2
                com.oculus.library.model.AppMediaCapability r0 = com.oculus.library.model.AppMediaCapability.LIVESTREAMING     // Catch:{ NoSuchFieldError -> 0x0012 }
                int r1 = r0.ordinal()     // Catch:{ NoSuchFieldError -> 0x0012 }
                r0 = 1
                r2[r1] = r0     // Catch:{ NoSuchFieldError -> 0x0012 }
            L_0x0012:
                com.oculus.library.model.AppMediaCapability r0 = com.oculus.library.model.AppMediaCapability.SCREENRECORDING     // Catch:{ NoSuchFieldError -> 0x001b }
                int r1 = r0.ordinal()     // Catch:{ NoSuchFieldError -> 0x001b }
                r0 = 2
                r2[r1] = r0     // Catch:{ NoSuchFieldError -> 0x001b }
            L_0x001b:
                com.oculus.library.model.AppMediaCapability r0 = com.oculus.library.model.AppMediaCapability.VRCASTING     // Catch:{ NoSuchFieldError -> 0x0024 }
                int r1 = r0.ordinal()     // Catch:{ NoSuchFieldError -> 0x0024 }
                r0 = 3
                r2[r1] = r0     // Catch:{ NoSuchFieldError -> 0x0024 }
            L_0x0024:
                return
            */
            throw new UnsupportedOperationException("Method not decompiled: com.oculus.horizon.service.ExternalPlatformLocal.AnonymousClass1.<clinit>():void");
        }
    }

    @AutoGeneratedAccessMethod
    public static final AnonymousClass0p1 _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_horizon_service_ExternalPlatformLocal_ULGT__ULSEP_ACCESS_METHOD(AbstractC06640p5 r2) {
        return new C01010Iv(514, r2);
    }

    @AutoGeneratedAccessMethod
    public static final ExternalPlatformLocal _UL__ULSEP_com_oculus_horizon_service_ExternalPlatformLocal_ULSEP_ACCESS_METHOD(AbstractC06640p5 r1) {
        return (ExternalPlatformLocal) AnonymousClass117.A00(514, r1);
    }

    @AutoGeneratedFactoryMethod
    public static final ExternalPlatformLocal _UL__ULSEP_com_oculus_horizon_service_ExternalPlatformLocal_ULSEP_FACTORY_METHOD(AbstractC06640p5 r6) {
        if (_UL__ULSEP_com_oculus_horizon_service_ExternalPlatformLocal_ULSEP_INSTANCE == null) {
            synchronized (ExternalPlatformLocal.class) {
                AnonymousClass0Pi A00 = AnonymousClass0Pi.A00(_UL__ULSEP_com_oculus_horizon_service_ExternalPlatformLocal_ULSEP_INSTANCE, r6);
                if (A00 != null) {
                    try {
                        AbstractC06640p5 applicationInjector = r6.getApplicationInjector();
                        _UL__ULSEP_com_oculus_horizon_service_ExternalPlatformLocal_ULSEP_INSTANCE = new ExternalPlatformLocal(applicationInjector, OVRModule._UL__ULSEP_javax_inject_Provider_ULLT_java_lang_Boolean_ULGT__ULSEP_com_google_inject_name_Named_ULUNDERSCORE_oculus_ULUNDERSCORE_livestreaming_ULUNDERSCORE_enable_ULUNDERSCORE_all_ULUNDERSCORE_apps_ULSEP_ACCESS_METHOD(applicationInjector), OVRLibraryModule.A00(applicationInjector));
                    } finally {
                        A00.A01();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_horizon_service_ExternalPlatformLocal_ULSEP_INSTANCE;
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_horizon_service_ExternalPlatformLocal_ULGT__ULSEP_ACCESS_METHOD(AbstractC06640p5 r2) {
        return new C01010Iv(514, r2);
    }

    public static JSONObject parseConfig() {
        try {
            if (configFile.exists()) {
                StringBuilder sb = new StringBuilder();
                BufferedReader bufferedReader = new BufferedReader(new FileReader(configFile));
                while (true) {
                    try {
                        String readLine = bufferedReader.readLine();
                        if (readLine == null) {
                            return new JSONObject(new JSONTokener(sb.toString()));
                        }
                        sb.append(readLine);
                        sb.append('\n');
                    } catch (Exception e) {
                        AnonymousClass0NO.A0B(TAG, "Exception reading config", e);
                    } finally {
                        bufferedReader.close();
                    }
                }
            }
        } catch (Exception e2) {
            AnonymousClass0NO.A0B(TAG, "Exception reading config", e2);
        }
        return new JSONObject();
    }

    public AppMediaCapabilities checkAppMediaCapabilityGranted(@Nullable String str) {
        AppMediaCapabilities appMediaCapabilities = new AppMediaCapabilities();
        if (!TextUtils.isEmpty(str) && !getsAppMediaCapabilitiesBlackList.contains(str)) {
            if (sAppMediaCapabilitiesWhiteList.contains(str)) {
                appMediaCapabilities.mAllowLivestreaming = true;
            } else {
                long clearCallingIdentity = Binder.clearCallingIdentity();
                try {
                    App A01 = this.mLibrary.A01(str);
                    if (A01 != null) {
                        for (AppMediaCapability appMediaCapability : A01.appMediaCapabilities) {
                            switch (appMediaCapability.ordinal()) {
                                case 1:
                                    appMediaCapabilities.mAllowLivestreaming = true;
                                    break;
                                case 2:
                                    appMediaCapabilities.mAllowVrCasting = true;
                                    break;
                                case 3:
                                    appMediaCapabilities.mAllowScreenRecording = true;
                                    break;
                                default:
                                    AnonymousClass0NO.A0F(TAG, "received unrecognized app media capability(%s), ignore it.", appMediaCapability);
                                    break;
                            }
                        }
                    }
                } finally {
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                }
            }
            appMediaCapabilities.mAllowVrCasting = true;
            appMediaCapabilities.mAllowScreenRecording = true;
        }
        return appMediaCapabilities;
    }

    public Bundle getAppVersionInformation(Bundle bundle, String str) throws IOException, PackageNotInLibraryException {
        String appID = getAppID(bundle, str, this.mLibrary);
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            App A02 = this.mLibrary.A02(appID);
            if (A02 != null) {
                Bundle bundle2 = new Bundle();
                bundle2.putInt("latest_version_code", (int) A02.latestVersionCode);
                bundle2.putString("latest_version_name", A02.latestVersionName);
                return bundle2;
            }
            throw new PackageNotInLibraryException(str);
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public Bundle getInstalledVRApplications(Context context, Bundle bundle, String str) throws IOException, PackageNotInLibraryException, JSONException {
        ProductStatus productStatus;
        PackageManager packageManager = context.getPackageManager();
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            Bundle bundle2 = new Bundle();
            App[] A08 = this.mLibrary.A08();
            ArrayList arrayList = new ArrayList();
            for (App app : A08) {
                if (AppStatus.DOWNLOAD_QUEUED.equals(app.status) || AppStatus.DOWNLOADING.equals(app.status) || AppStatus.INSTALLING.equals(app.status) || AppStatus.INSTALLED.equals(app.status)) {
                    arrayList.add(app);
                }
            }
            JSONArray jSONArray = new JSONArray();
            Iterator it = arrayList.iterator();
            while (it.hasNext()) {
                App app2 = (App) it.next();
                JSONObject jSONObject = new JSONObject();
                jSONObject.put("application_id", app2.id);
                jSONObject.put("package_name", app2.packageName);
                AppStatus appStatus = app2.status;
                switch (appStatus.ordinal()) {
                    case 1:
                    case 2:
                        productStatus = ProductStatus.NOT_DOWNLOADED;
                        break;
                    case 3:
                        productStatus = ProductStatus.QUEUED;
                        break;
                    case 4:
                        productStatus = ProductStatus.DOWNLOADING;
                        break;
                    case 5:
                        productStatus = ProductStatus.INSTALLING;
                        break;
                    case 6:
                        productStatus = ProductStatus.INSTALLED;
                        break;
                    case 7:
                        productStatus = ProductStatus.UNINSTALLING;
                        break;
                    default:
                        ErrorReporter.A02(AppStatusConverter.TAG, AnonymousClass006.A05("Cannot convert status to legacy status: ", appStatus.name()));
                        productStatus = null;
                        break;
                }
                jSONObject.put("status", productStatus.name());
                try {
                    PackageInfo packageInfo = packageManager.getPackageInfo(app2.packageName, 0);
                    jSONObject.put("version_name", packageInfo.versionName);
                    jSONObject.put(StoreContract.ARG_DEFAULT_VERSION_CODE, packageInfo.versionCode);
                } catch (PackageManager.NameNotFoundException e) {
                    AnonymousClass0NO.A0B(TAG, "", e);
                    jSONObject.put("version_name", "0");
                    jSONObject.put(StoreContract.ARG_DEFAULT_VERSION_CODE, 0);
                }
                jSONArray.put(jSONObject);
            }
            JSONObject jSONObject2 = new JSONObject();
            jSONObject2.put("data", jSONArray);
            bundle2.putString("result", jSONObject2.toString());
            return bundle2;
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public boolean isMicrophoneUsageExclusive(String str) {
        if ("com.oculus.home".equals(str) || "com.oculus.systemactivities".equals(str)) {
            return false;
        }
        JSONObject optJSONObject = this.config.optJSONObject(CONFIG_MICROPHONE_USAGE);
        if (optJSONObject != null && optJSONObject.has(str)) {
            try {
                if (MicrophoneUsage.valueOf(optJSONObject.getString(str)) == MicrophoneUsage.EXCLUSIVE) {
                    return true;
                }
                return false;
            } catch (Exception e) {
                AnonymousClass0NO.A0B(TAG, "Config lookup for microphone usage failed", e);
            }
        }
        App A01 = this.mLibrary.A01(str);
        if (A01 == null || A01.microphoneUsage != MicrophoneUsage.EXCLUSIVE) {
            return false;
        }
        return true;
    }

    static {
        ImmutableMap.Builder A01 = ImmutableMap.A01();
        A01.put("com.oculus.horizon", "826037204154824");
        A01.put("com.oculus.systemactivities", "939044786184977");
        A01.put("com.oculus.home", "1102518876432898");
        A01.put("com.oculus.explore", "2646830762095036");
        A01.put("com.oculus.updater", "1556285957737177");
        A01.put("com.oculus.vrshell", "1031607236937163");
        A01.put("com.oculus.telemetry", "1193470664101395");
        A01.put("com.facebook.spatial_persistence_service", "2837826999666071");
        A01.put("com.oculus.socialplatform", "1953748974690454");
        A01.put("com.oculus.firsttimenux", "3331068290248074");
        sWhitelistedAppPackageNameToId = A01.build();
        AnonymousClass0CC r1 = new AnonymousClass0CC();
        r1.A04("com.android.systemui");
        getsAppMediaCapabilitiesBlackList = r1.build();
        AnonymousClass0CC r12 = new AnonymousClass0CC();
        r12.A04("com.oculus.vrshell");
        r12.A04("com.oculus.shellenv");
        r12.A04("com.oculus.companion.server");
        r12.A04("com.oculus.vrcast");
        sAppMediaCapabilitiesWhiteList = r12.build();
    }

    @Inject
    public ExternalPlatformLocal(AbstractC06640p5 r3, @Named("oculus_livestreaming_enable_all_apps") Provider<Boolean> provider, OVRLibrary oVRLibrary) {
        this._UL_mInjectionContext = new AnonymousClass0QC(1, r3);
        this.mEnableAllAppsGK = OVRModule._UL__ULSEP_javax_inject_Provider_ULLT_java_lang_Boolean_ULGT__ULSEP_com_google_inject_name_Named_ULUNDERSCORE_oculus_ULUNDERSCORE_livestreaming_ULUNDERSCORE_enable_ULUNDERSCORE_all_ULUNDERSCORE_apps_ULSEP_ACCESS_METHOD(r3);
        this.mEnableAllAppsGK = provider;
        this.mLibrary = oVRLibrary;
    }

    public static String getAppIdFromPackageName(OVRLibrary oVRLibrary, String str) {
        String str2;
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            App A01 = oVRLibrary.A01(str);
            if (A01 == null) {
                str2 = null;
            } else {
                str2 = A01.id;
            }
            return str2;
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    @Nullable
    public static String getPackageNameFromAppId(OVRLibrary oVRLibrary, String str) {
        String str2;
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            App A02 = oVRLibrary.A02(str);
            if (A02 == null) {
                str2 = null;
            } else {
                str2 = A02.packageName;
            }
            return str2;
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public static boolean isDeveloperOfApp(OVRLibrary oVRLibrary, String str) {
        boolean z;
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            App A02 = oVRLibrary.A02(str);
            if (A02 == null) {
                z = false;
            } else {
                GrantReason grantReason = A02.grantReason;
                z = false;
                if (grantReason == GrantReason.DEVELOPER) {
                    z = true;
                }
            }
            return z;
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public String getAppName(String str) {
        String str2;
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            App A01 = this.mLibrary.A01(str);
            if (A01 == null) {
                str2 = null;
            } else {
                str2 = A01.displayName;
            }
            return str2;
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public static String getAppID(Bundle bundle, String str, OVRLibrary oVRLibrary) throws IOException, PackageNotInLibraryException {
        if (sWhitelistedAppPackageNameToId.containsKey(str)) {
            return sWhitelistedAppPackageNameToId.get(str);
        }
        if (!"com.oculus.vrshell.home".equals(str)) {
            if (bundle.containsKey("app_id")) {
                String trim = bundle.getString("app_id").trim();
                if (trim.equals(getAppIdFromPackageName(oVRLibrary, str))) {
                    return trim;
                }
                if (isDeveloperOfApp(oVRLibrary, trim)) {
                    AnonymousClass0NO.A09(TAG, "Developer sideloading app without valid binary uploaded. Not all Platform SDK features will work");
                    return trim;
                }
                AnonymousClass0NO.A08(TAG, "AppID found in Library does NOT match the appID in the bundle.");
            } else {
                String appIdFromPackageName = getAppIdFromPackageName(oVRLibrary, str);
                if (appIdFromPackageName != null) {
                    return appIdFromPackageName;
                }
            }
            throw new PackageNotInLibraryException(str);
        } else if (bundle.getBoolean("request_core_app_token")) {
            return "1880592348624904";
        } else {
            return "1481000308606657";
        }
    }

    public String getAppID(Bundle bundle, String str) throws IOException, PackageNotInLibraryException {
        return getAppID(bundle, str, this.mLibrary);
    }

    public String getAppID(String str) throws IOException, PackageNotInLibraryException {
        return getAppID(new Bundle(), str, this.mLibrary);
    }
}
