package com.oculus.horizon.service;

import X.AbstractC06640p5;
import X.AnonymousClass0NO;
import X.AnonymousClass0QC;
import X.AnonymousClass0bU;
import X.AnonymousClass0p1;
import X.AnonymousClass117;
import X.C003008y;
import X.C01020Iw;
import android.content.Context;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.text.TextUtils;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.google.inject.name.Named;
import com.oculus.auth.credentials.Credentials;
import com.oculus.auth.credentials.CredentialsModule;
import com.oculus.config.trusted_user.TrustedUserModule;
import com.oculus.content.PermissionChecks;
import com.oculus.horizon.api.platformsdk.TokenResponse;
import com.oculus.horizon.notifications.core.NotificationBuilder;
import com.oculus.horizon.push.PushTokenSharedPreferencesHelper;
import com.oculus.horizon.service.ExternalPlatformLocal;
import com.oculus.http.core.ApiModule;
import com.oculus.http.core.annotations.OculusRestAdapter;
import com.oculus.http.core.base.ApiError;
import com.oculus.http.core.base.ApiErrorCodes;
import com.oculus.http.core.common.DsatAuthorization;
import com.oculus.signature.SignatureHelper;
import com.oculus.unlockulus_helper.UnlockulusHelper;
import java.io.IOException;
import javax.annotation.Nullable;
import javax.inject.Inject;
import javax.inject.Provider;
import retrofit.RestAdapter;
import retrofit.RetrofitError;
import retrofit.http.Field;
import retrofit.http.FormUrlEncoded;
import retrofit.http.Headers;
import retrofit.http.POST;

@Dependencies({"_UL__ULSEP_retrofit_RestAdapter_ULSEP_com_oculus_http_core_annotations_OculusRestAdapter_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_horizon_service_ExternalPlatformLocal_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_auth_credentials_Credentials_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_unlockulus_ULUNDERSCORE_helper_UnlockulusHelper_ULSEP_BINDING_ID", "_UL__ULSEP_java_lang_Boolean_ULSEP_com_google_inject_name_Named_ULUNDERSCORE_oculus_ULUNDERSCORE_is_ULUNDERSCORE_trusted_ULUNDERSCORE_user_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_horizon_notifications_core_NotificationBuilder_ULSEP_BINDING_ID"})
public class ExternalPlatformNetwork {
    public static final String TAG = "ExternalPlatformNetwork";
    public AnonymousClass0QC _UL_mInjectionContext;
    public final Provider<Credentials> mCredentialsProvider;
    public final ExternalPlatformLocal mExternalPlatformLocal;
    public final Provider<Boolean> mIsTrustedUser;
    public final Methods mMethods;
    public final UnlockulusHelper mUnlockulusHelper;

    public interface Methods {
        @POST("/authenticate_application")
        @Headers({DsatAuthorization.ENABLE})
        @FormUrlEncoded
        TokenResponse getAppScopedToken(@Field("app_id") String str, @Field("push_token") String str2, @Nullable @Field("app_signer") String str3, @Nullable @Field("app_installer") String str4, @Nullable @Field("app_version") int i);
    }

    @AutoGeneratedFactoryMethod
    public static final ExternalPlatformNetwork _UL__ULSEP_com_oculus_horizon_service_ExternalPlatformNetwork_ULSEP_FACTORY_METHOD(AbstractC06640p5 r6) {
        return new ExternalPlatformNetwork(r6, ApiModule.A0C(r6), ExternalPlatformLocal._UL__ULSEP_com_oculus_horizon_service_ExternalPlatformLocal_ULSEP_ACCESS_METHOD(r6), CredentialsModule._UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_auth_credentials_Credentials_ULGT__ULSEP_ACCESS_METHOD(r6), (UnlockulusHelper) AnonymousClass117.A00(296, r6), TrustedUserModule._UL__ULSEP_javax_inject_Provider_ULLT_java_lang_Boolean_ULGT__ULSEP_com_google_inject_name_Named_ULUNDERSCORE_oculus_ULUNDERSCORE_is_ULUNDERSCORE_trusted_ULUNDERSCORE_user_ULSEP_ACCESS_METHOD(r6));
    }

    @AutoGeneratedAccessMethod
    public static final AnonymousClass0p1 _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_horizon_service_ExternalPlatformNetwork_ULGT__ULSEP_ACCESS_METHOD(AbstractC06640p5 r2) {
        return new C003008y(202, r2);
    }

    @AutoGeneratedAccessMethod
    public static final ExternalPlatformNetwork _UL__ULSEP_com_oculus_horizon_service_ExternalPlatformNetwork_ULSEP_ACCESS_METHOD(AbstractC06640p5 r1) {
        return (ExternalPlatformNetwork) AnonymousClass117.A00(202, r1);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_horizon_service_ExternalPlatformNetwork_ULGT__ULSEP_ACCESS_METHOD(AbstractC06640p5 r2) {
        return new C01020Iw(202, r2);
    }

    private boolean isTrustedUser(Context context) {
        if (this.mIsTrustedUser.get().booleanValue() || this.mUnlockulusHelper.A00(context)) {
            return true;
        }
        return false;
    }

    @Nullable
    public String getAppScopedAccessToken(Context context, Bundle bundle, String str) throws IOException, ExternalPlatformLocal.PackageNotInLibraryException {
        String str2;
        ApiError.FBApiErrorResponse.Error error;
        if ("com.oculus.horizon".equals(str)) {
            Credentials credentials = this.mCredentialsProvider.get();
            if (credentials != null) {
                return credentials.mAccessToken;
            }
            return null;
        }
        String string = bundle.getString("app_id", null);
        try {
            String appID = ExternalPlatformLocal.getAppID(bundle, str, this.mExternalPlatformLocal.mLibrary);
            if (!PermissionChecks.A00(context) || TextUtils.equals(string, appID)) {
                string = appID;
                String string2 = context.getSharedPreferences(PushTokenSharedPreferencesHelper.SHARED_PREFS_NAME, 0).getString(PushTokenSharedPreferencesHelper.PUSH_TOKEN_KEY_NAME, null);
                PackageManager packageManager = context.getPackageManager();
                if (packageManager != null) {
                    str2 = packageManager.getInstallerPackageName(str);
                } else {
                    str2 = null;
                }
                try {
                    return this.mMethods.getAppScopedToken(string, string2, AnonymousClass0bU.A03(context, str).sha256Hash, str2, AnonymousClass0bU.A01(context, str).versionCode).access_token;
                } catch (RetrofitError e) {
                    AnonymousClass0NO.A0B(TAG, "could not get access token from the server", e);
                    ApiError apiError = new ApiError(e);
                    if (apiError.A01(ApiErrorCodes.ERROR_SUBCODE_PLATFORM_SERVICES_DENIED)) {
                        String str3 = null;
                        ApiError.FBApiErrorResponse fBApiErrorResponse = apiError.fbApiErrorResponse;
                        if (!(fBApiErrorResponse == null || (error = fBApiErrorResponse.error) == null)) {
                            str3 = error.error_user_title;
                        }
                        String A00 = apiError.A00(null);
                        if (!(str3 == null || A00 == null)) {
                            new NotificationBuilder.Builder(str3, A00).A01();
                        }
                    }
                    throw e;
                }
            } else {
                AnonymousClass0NO.A08(TAG, "failed to verify the app id used by the caller");
                return null;
            }
        } catch (ExternalPlatformLocal.PackageNotInLibraryException unused) {
            if (!SignatureHelper.A00(context, str) && !SignatureHelper.A02(context, str, isTrustedUser(context))) {
                AnonymousClass0NO.A08(TAG, "failed to verify first party application check");
                return null;
            }
        }
    }

    @Inject
    public ExternalPlatformNetwork(AbstractC06640p5 r3, @OculusRestAdapter RestAdapter restAdapter, ExternalPlatformLocal externalPlatformLocal, Provider<Credentials> provider, UnlockulusHelper unlockulusHelper, @Named("oculus_is_trusted_user") Provider<Boolean> provider2) {
        this._UL_mInjectionContext = new AnonymousClass0QC(1, r3);
        this.mMethods = (Methods) restAdapter.create(Methods.class);
        this.mExternalPlatformLocal = externalPlatformLocal;
        this.mCredentialsProvider = provider;
        this.mUnlockulusHelper = unlockulusHelper;
        this.mIsTrustedUser = provider2;
    }
}
