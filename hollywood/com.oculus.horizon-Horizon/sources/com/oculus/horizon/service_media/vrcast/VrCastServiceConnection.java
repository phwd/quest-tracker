package com.oculus.horizon.service_media.vrcast;

import X.AbstractC06640p5;
import X.AnonymousClass0D4;
import X.AnonymousClass0DC;
import X.AnonymousClass0DD;
import X.AnonymousClass0J2;
import X.AnonymousClass0NO;
import X.AnonymousClass0QC;
import X.AnonymousClass0p1;
import X.AnonymousClass117;
import X.C003008y;
import X.C01020Iw;
import android.content.Context;
import android.os.Bundle;
import com.facebook.infer.annotation.Nullsafe;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.google.common.collect.ImmutableList;
import com.oculus.vrcast.VrCastController;
import java.util.List;
import javax.annotation.Nullable;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID"})
@Nullsafe(Nullsafe.Mode.LOCAL)
public class VrCastServiceConnection {
    public static final String TAG = "VrCastServiceConnection";
    public AnonymousClass0QC _UL_mInjectionContext;
    @Nullable
    public DeviceListener mDeviceListener;
    @Nullable
    public AnonymousClass0DD<VrCastController> mServiceConnectionCompletion;
    @Nullable
    public AnonymousClass0DC<VrCastController> mServiceConnectionTask;
    @Nullable
    public VrCastController mVrCastController;

    public interface DeviceListener {
        void onCurrentDeviceUpdated(VrCastController.VrShellCastDevice vrShellCastDevice);

        void onDeviceListUpdated(ImmutableList<VrCastController.VrShellCastDevice> immutableList);

        void onError(int i);
    }

    public class VrCastCallbackImpl extends VrCastController.VrCastCallback {
        public void onBindServiceFailed() {
            AnonymousClass0NO.A08(VrCastServiceConnection.TAG, "onBindServiceFailed() called");
            VrCastServiceConnection.this.unbindServiceWithError(new RuntimeException("Could not connect to service"));
        }

        public void onBindServiceSucceeded(VrCastController.VrShellCastDevice vrShellCastDevice) {
            VrCastServiceConnection vrCastServiceConnection = VrCastServiceConnection.this;
            DeviceListener deviceListener = vrCastServiceConnection.mDeviceListener;
            if (deviceListener != null && vrCastServiceConnection.mServiceConnectionCompletion != null && vrCastServiceConnection.mVrCastController != null) {
                deviceListener.onCurrentDeviceUpdated(vrShellCastDevice);
                VrCastServiceConnection vrCastServiceConnection2 = VrCastServiceConnection.this;
                AnonymousClass0DD<VrCastController> r0 = vrCastServiceConnection2.mServiceConnectionCompletion;
                r0.A00.A0N(vrCastServiceConnection2.mVrCastController);
            }
        }

        public void onDeviceStateUpdated(VrCastController.VrShellCastDevice vrShellCastDevice) {
            if (vrShellCastDevice != null) {
                vrShellCastDevice.toString();
            }
            DeviceListener deviceListener = VrCastServiceConnection.this.mDeviceListener;
            if (deviceListener != null) {
                deviceListener.onCurrentDeviceUpdated(vrShellCastDevice);
            }
        }

        public void onRemoteServiceDied() {
            AnonymousClass0NO.A08(VrCastServiceConnection.TAG, "onRemoteServiceDied() called");
            VrCastServiceConnection.this.unbindServiceWithError(new RuntimeException("Remote service died unexpectedly"));
        }

        public void onDevicesFound(List<VrCastController.VrShellCastDevice> list) {
            list.size();
            DeviceListener deviceListener = VrCastServiceConnection.this.mDeviceListener;
            if (deviceListener != null) {
                deviceListener.onDeviceListUpdated(ImmutableList.A0C(list));
            }
        }

        public void onError(int i, Bundle bundle) {
            VrCastServiceConnection.super.onError(i, bundle);
            DeviceListener deviceListener = VrCastServiceConnection.this.mDeviceListener;
            if (deviceListener != null) {
                deviceListener.onError(i);
            }
        }

        public VrCastCallbackImpl() {
        }
    }

    @AutoGeneratedAccessMethod
    public static final AnonymousClass0p1 _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_horizon_service_ULUNDERSCORE_media_vrcast_VrCastServiceConnection_ULGT__ULSEP_ACCESS_METHOD(AbstractC06640p5 r2) {
        return new C003008y(309, r2);
    }

    @AutoGeneratedAccessMethod
    public static final VrCastServiceConnection _UL__ULSEP_com_oculus_horizon_service_ULUNDERSCORE_media_vrcast_VrCastServiceConnection_ULSEP_ACCESS_METHOD(AbstractC06640p5 r1) {
        return (VrCastServiceConnection) AnonymousClass117.A00(309, r1);
    }

    @AutoGeneratedFactoryMethod
    public static final VrCastServiceConnection _UL__ULSEP_com_oculus_horizon_service_ULUNDERSCORE_media_vrcast_VrCastServiceConnection_ULSEP_FACTORY_METHOD(AbstractC06640p5 r1) {
        return new VrCastServiceConnection(r1);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_horizon_service_ULUNDERSCORE_media_vrcast_VrCastServiceConnection_ULGT__ULSEP_ACCESS_METHOD(AbstractC06640p5 r2) {
        return new C01020Iw(309, r2);
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private void unbindServiceWithError(Exception exc) {
        AnonymousClass0DD<VrCastController> r0 = this.mServiceConnectionCompletion;
        if (r0 != null) {
            r0.A03(exc);
            this.mServiceConnectionCompletion = null;
        }
        this.mServiceConnectionTask = null;
        VrCastController vrCastController = this.mVrCastController;
        if (vrCastController != null && vrCastController.isServiceBound()) {
            this.mVrCastController.unbindVrCastService();
            this.mVrCastController = null;
        }
    }

    public AnonymousClass0DC<VrCastController> connectToServiceAsync() {
        if (this.mServiceConnectionTask == null) {
            AnonymousClass0DD<VrCastController> r0 = new AnonymousClass0DD<>();
            this.mServiceConnectionCompletion = r0;
            this.mServiceConnectionTask = r0.A00;
            this.mVrCastController = new VrCastController((Context) AnonymousClass0J2.A03(0, 294, this._UL_mInjectionContext), new VrCastCallbackImpl());
        }
        return this.mServiceConnectionTask;
    }

    @Inject
    public VrCastServiceConnection(AbstractC06640p5 r3) {
        this._UL_mInjectionContext = new AnonymousClass0QC(1, r3);
    }

    public static /* synthetic */ String access$100() {
        return TAG;
    }

    public void unbindService() {
        connectToServiceAsync().A0C(new AnonymousClass0D4<VrCastController, Void>() {
            /* class com.oculus.horizon.service_media.vrcast.VrCastServiceConnection.AnonymousClass1 */

            @Override // X.AnonymousClass0D4
            public Void then(AnonymousClass0DC<VrCastController> r4) throws Exception {
                r4.A0G().stopDiscovery();
                VrCastServiceConnection.this.unbindServiceWithError(new RuntimeException("Unbinding service because of tear down."));
                return null;
            }
        }, AnonymousClass0DC.A0B);
    }

    public void setDeviceListener(DeviceListener deviceListener) {
        this.mDeviceListener = deviceListener;
    }
}
