package com.oculus.horizon.service_media.vrcast;

import X.AbstractC06640p5;
import X.AbstractC07380s1;
import X.AnonymousClass0Cy;
import X.AnonymousClass0D4;
import X.AnonymousClass0DC;
import X.AnonymousClass0DD;
import X.AnonymousClass0J2;
import X.AnonymousClass0NO;
import X.AnonymousClass0QC;
import X.AnonymousClass0p1;
import X.AnonymousClass117;
import X.C003008y;
import X.C01020Iw;
import X.C07100r5;
import android.content.Context;
import android.content.Intent;
import android.os.Handler;
import android.os.Looper;
import androidx.annotation.VisibleForTesting;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.google.common.collect.ImmutableList;
import com.oculus.horizon.R;
import com.oculus.horizon.service_media.OVRMediaServiceNotification;
import com.oculus.horizon.service_media.contract.OVRMediaServiceContract;
import com.oculus.horizon.service_media.vrcast.VrCastServiceConnection;
import com.oculus.os.Version;
import com.oculus.util.task.TaskDelayFactory;
import com.oculus.vrcast.VrCastController;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.Executor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.atomic.AtomicBoolean;
import javax.annotation.Nullable;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_horizon_service_ULUNDERSCORE_media_OVRMediaServiceNotification_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_horizon_service_ULUNDERSCORE_media_vrcast_VrCastServiceConnection_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_util_task_TaskDelayFactory_ULSEP_BINDING_ID"})
public class VrCastManager {
    public static final String CALLER_CONTEXT_ANOTHER_CAPTURE = "another_capture";
    public static final String CALLER_CONTEXT_HORIZON = "horizon";
    public static final String CALLER_CONTEXT_TWILIGHT = "twilight";
    public static final int DISCOVER_DURATION_SECONDS = 3;
    public static final int DISCOVER_TIMEOUT_SECONDS = 10;
    public static final int START_CASTING_TIMEOUT_SECONDS = 5;
    public static final String TAG = "VrCastManager";
    public AnonymousClass0QC _UL_mInjectionContext;
    public volatile ImmutableList<VrCastController.VrShellCastDevice> mCachedDeviceList;
    public Runnable mDiscoverTimeoutRunnable = new Runnable() {
        /* class com.oculus.horizon.service_media.vrcast.VrCastManager.AnonymousClass1 */

        public void run() {
            VrCastManager.this.onDiscoverTimeout();
        }
    };
    @Nullable
    public volatile ErrorCallback mErrorCallback;
    public final Handler mHandler;
    @Nullable
    public AnonymousClass0DD<Void> mStartCastCompletion;
    @Nullable
    public volatile VrCastController.VrShellCastDevice mVrCastDevice;

    public interface ErrorCallback {
        void onVrCastError();
    }

    private synchronized void completeStartCastingTask() {
        if (this.mStartCastCompletion != null && VrCastDeviceUtils.isCasting(this.mVrCastDevice)) {
            this.mStartCastCompletion.A02(null);
            this.mStartCastCompletion = null;
        }
    }

    private synchronized void completeStartCastingTaskWithError() {
        AnonymousClass0DD<Void> r2 = this.mStartCastCompletion;
        if (r2 != null) {
            r2.A01(new RuntimeException("Error during start casting"));
            this.mStartCastCompletion = null;
        }
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private synchronized AnonymousClass0DD<Void> startCastingAsync(VrCastController vrCastController, String str, String str2) {
        AnonymousClass0DD<Void> r0 = this.mStartCastCompletion;
        if (r0 != null) {
            r0.A00.A0L();
            this.mStartCastCompletion = null;
        }
        this.mStartCastCompletion = new AnonymousClass0DD<>();
        vrCastController.startCast(str, str2);
        return this.mStartCastCompletion;
    }

    @AutoGeneratedAccessMethod
    public static final AnonymousClass0p1 _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_horizon_service_ULUNDERSCORE_media_vrcast_VrCastManager_ULGT__ULSEP_ACCESS_METHOD(AbstractC06640p5 r2) {
        return new C003008y(232, r2);
    }

    @AutoGeneratedAccessMethod
    public static final VrCastManager _UL__ULSEP_com_oculus_horizon_service_ULUNDERSCORE_media_vrcast_VrCastManager_ULSEP_ACCESS_METHOD(AbstractC06640p5 r1) {
        return (VrCastManager) AnonymousClass117.A00(232, r1);
    }

    @AutoGeneratedFactoryMethod
    public static final VrCastManager _UL__ULSEP_com_oculus_horizon_service_ULUNDERSCORE_media_vrcast_VrCastManager_ULSEP_FACTORY_METHOD(AbstractC06640p5 r1) {
        return new VrCastManager(r1);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_horizon_service_ULUNDERSCORE_media_vrcast_VrCastManager_ULGT__ULSEP_ACCESS_METHOD(AbstractC06640p5 r2) {
        return new C01020Iw(232, r2);
    }

    public static boolean isCompatibleOSVersion() {
        if (Version.CURRENT_SDK_VERSION >= 23) {
            return true;
        }
        return false;
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private boolean isDeviceInDiscoveredList(String str) {
        AbstractC07380s1<VrCastController.VrShellCastDevice> A0K = this.mCachedDeviceList.iterator();
        while (A0K.hasNext()) {
            if (str.equals(A0K.next().id)) {
                return true;
            }
        }
        return false;
    }

    private void resetDiscoverTimeout() {
        this.mHandler.removeCallbacks(this.mDiscoverTimeoutRunnable);
        this.mHandler.postDelayed(this.mDiscoverTimeoutRunnable, TimeUnit.SECONDS.toMillis(10));
    }

    private void updateVrCastStateInAUI() {
        Intent intent = new Intent(OVRMediaServiceContract.LOCALSTREAMING_STATUS_CHANGE);
        intent.setPackage("com.oculus.vrshell");
        intent.putExtra("is_capture_running", VrCastDeviceUtils.isCasting(this.mVrCastDevice) ? 1 : 0);
        ((Context) AnonymousClass0J2.A03(0, 294, this._UL_mInjectionContext)).sendBroadcast(intent);
    }

    public void resumeVrCastState() {
        if (this.mVrCastDevice != null) {
            this.mVrCastDevice.toString();
            updateVrCastStateInAUI();
        }
    }

    public void setCurrentDevice(VrCastController.VrShellCastDevice vrShellCastDevice) {
        VrCastController.VrShellCastDevice vrShellCastDevice2 = this.mVrCastDevice;
        this.mVrCastDevice = vrShellCastDevice;
        updateVrCastStateInAUI();
        showCastNotification(vrShellCastDevice2, vrShellCastDevice);
        completeStartCastingTask();
    }

    public AnonymousClass0DC<Void> startCastingWithTimeoutAsync(final String str, final String str2) {
        AnonymousClass0DC<VrCastController> connectToServiceAsync = ((VrCastServiceConnection) AnonymousClass0J2.A03(2, 309, this._UL_mInjectionContext)).connectToServiceAsync();
        AnonymousClass7 r0 = new AnonymousClass0D4<VrCastController, AnonymousClass0DC<VrCastController>>() {
            /* class com.oculus.horizon.service_media.vrcast.VrCastManager.AnonymousClass7 */

            @Override // X.AnonymousClass0D4
            public AnonymousClass0DC<VrCastController> then(AnonymousClass0DC<VrCastController> r5) {
                final VrCastController A0G = r5.A0G();
                if (!VrCastManager.this.isDeviceInDiscoveredList(str)) {
                    return VrCastManager.this.discoverAsync(r5.A0G(), str2).A0B(new AnonymousClass0D4<ImmutableList<VrCastController.VrShellCastDevice>, VrCastController>() {
                        /* class com.oculus.horizon.service_media.vrcast.VrCastManager.AnonymousClass7.AnonymousClass1 */

                        @Override // X.AnonymousClass0D4
                        public VrCastController then(AnonymousClass0DC<ImmutableList<VrCastController.VrShellCastDevice>> r2) {
                            return A0G;
                        }
                    });
                }
                return r5;
            }
        };
        Executor executor = AnonymousClass0DC.A0A;
        return connectToServiceAsync.A0D(r0, executor).A0D(new AnonymousClass0D4<VrCastController, AnonymousClass0DC<Void>>() {
            /* class com.oculus.horizon.service_media.vrcast.VrCastManager.AnonymousClass6 */

            @Override // X.AnonymousClass0D4
            public AnonymousClass0DC<Void> then(AnonymousClass0DC<VrCastController> r8) {
                AnonymousClass0DC r2;
                VrCastManager vrCastManager = VrCastManager.this;
                TaskDelayFactory taskDelayFactory = (TaskDelayFactory) AnonymousClass0J2.A03(3, 156, vrCastManager._UL_mInjectionContext);
                AnonymousClass0DD startCastingAsync = vrCastManager.startCastingAsync(r8.A0G(), str, str2);
                List<AnonymousClass0DC> asList = Arrays.asList(startCastingAsync.A00, AnonymousClass0DC.A00(TimeUnit.SECONDS.toMillis(5), AnonymousClass0Cy.A03.A02, null));
                if (asList.size() == 0) {
                    r2 = AnonymousClass0DC.A08;
                } else {
                    AnonymousClass0DD r4 = new AnonymousClass0DD();
                    AtomicBoolean atomicBoolean = new AtomicBoolean(false);
                    for (AnonymousClass0DC r1 : asList) {
                        r1.A09(new C07100r5(atomicBoolean, r4));
                    }
                    r2 = r4.A00;
                }
                return r2.A0D(new AnonymousClass0D4<AnonymousClass0DC<Void>, AnonymousClass0DC<Void>>(startCastingAsync) {
                    /* class com.oculus.util.task.TaskDelayFactory.AnonymousClass1 */
                    public final /* synthetic */ AnonymousClass0DD val$completionSource;

                    {
                        this.val$completionSource = r2;
                    }

                    /* Return type fixed from 'java.lang.Object' to match base method */
                    /* JADX DEBUG: Method arguments types fixed to match base method, original types: [X.0DC] */
                    @Override // X.AnonymousClass0D4
                    public final AnonymousClass0DC<Void> then(AnonymousClass0DC<AnonymousClass0DC<Void>> r3) throws Exception {
                        AnonymousClass0DC<TResult> r1 = this.val$completionSource.A00;
                        if (r1 == null || !r1.A0J() || r1.A0I()) {
                            return AnonymousClass0DC.A03(new TimeoutException());
                        }
                        return r1;
                    }
                }, AnonymousClass0DC.A0A);
            }
        }, executor);
    }

    public void stopCast(final String str) {
        ((VrCastServiceConnection) AnonymousClass0J2.A03(2, 309, this._UL_mInjectionContext)).connectToServiceAsync().A0B(new AnonymousClass0D4<VrCastController, Void>() {
            /* class com.oculus.horizon.service_media.vrcast.VrCastManager.AnonymousClass3 */

            @Override // X.AnonymousClass0D4
            public Void then(AnonymousClass0DC<VrCastController> r4) {
                VrCastController.VrShellCastDevice vrShellCastDevice = VrCastManager.this.mVrCastDevice;
                if (!VrCastDeviceUtils.isCasting(vrShellCastDevice)) {
                    return null;
                }
                r4.A0G().stopCast(vrShellCastDevice.id, str);
                return null;
            }
        });
    }

    public void stopCastWithError(final String str, final String str2) {
        if (Version.CURRENT_SDK_VERSION < 62) {
            AnonymousClass0NO.A0E(TAG, "The OSSDK version must be at least %d to request stop cast with error.", 62);
            stopCast(str);
            return;
        }
        ((VrCastServiceConnection) AnonymousClass0J2.A03(2, 309, this._UL_mInjectionContext)).connectToServiceAsync().A0B(new AnonymousClass0D4<VrCastController, Void>() {
            /* class com.oculus.horizon.service_media.vrcast.VrCastManager.AnonymousClass4 */

            @Override // X.AnonymousClass0D4
            public Void then(AnonymousClass0DC<VrCastController> r5) {
                VrCastController.VrShellCastDevice vrShellCastDevice = VrCastManager.this.mVrCastDevice;
                if (!VrCastDeviceUtils.isCasting(vrShellCastDevice)) {
                    return null;
                }
                r5.A0G().stopCastWithError(vrShellCastDevice.id, str2, str);
                return null;
            }
        });
    }

    public void unbindVrCastService() {
        ((VrCastServiceConnection) AnonymousClass0J2.A03(2, 309, this._UL_mInjectionContext)).unbindService();
        this.mHandler.removeCallbacks(this.mDiscoverTimeoutRunnable);
    }

    @Inject
    public VrCastManager(AbstractC06640p5 r4) {
        this._UL_mInjectionContext = new AnonymousClass0QC(4, r4);
        this.mHandler = new Handler(Looper.getMainLooper());
        VrCastServiceConnection vrCastServiceConnection = (VrCastServiceConnection) AnonymousClass0J2.A03(2, 309, this._UL_mInjectionContext);
        vrCastServiceConnection.mDeviceListener = new VrCastServiceConnection.DeviceListener() {
            /* class com.oculus.horizon.service_media.vrcast.VrCastManager.AnonymousClass2 */

            @Override // com.oculus.horizon.service_media.vrcast.VrCastServiceConnection.DeviceListener
            public void onCurrentDeviceUpdated(VrCastController.VrShellCastDevice vrShellCastDevice) {
                VrCastManager.this.setCurrentDevice(vrShellCastDevice);
            }

            @Override // com.oculus.horizon.service_media.vrcast.VrCastServiceConnection.DeviceListener
            public void onDeviceListUpdated(ImmutableList<VrCastController.VrShellCastDevice> immutableList) {
                VrCastManager.this.mCachedDeviceList = immutableList;
            }

            @Override // com.oculus.horizon.service_media.vrcast.VrCastServiceConnection.DeviceListener
            public void onError(int i) {
                VrCastManager.this.onError(i);
            }
        };
        vrCastServiceConnection.connectToServiceAsync();
    }

    public static /* synthetic */ String access$300() {
        return TAG;
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private void onDiscoverTimeout() {
        this.mCachedDeviceList = ImmutableList.of();
        ((VrCastServiceConnection) AnonymousClass0J2.A03(2, 309, this._UL_mInjectionContext)).connectToServiceAsync().A0B(new AnonymousClass0D4<VrCastController, Void>() {
            /* class com.oculus.horizon.service_media.vrcast.VrCastManager.AnonymousClass5 */

            @Override // X.AnonymousClass0D4
            public Void then(AnonymousClass0DC<VrCastController> r3) {
                r3.A0G().stopDiscovery("twilight");
                return null;
            }
        });
    }

    private void showCastNotification(VrCastController.VrShellCastDevice vrShellCastDevice, VrCastController.VrShellCastDevice vrShellCastDevice2) {
        OVRMediaServiceNotification oVRMediaServiceNotification;
        Context context;
        int i;
        if (VrCastDeviceUtils.isCasting(vrShellCastDevice2) && VrCastDeviceUtils.isConnecting(vrShellCastDevice)) {
            oVRMediaServiceNotification = (OVRMediaServiceNotification) AnonymousClass0J2.A03(1, 149, this._UL_mInjectionContext);
            context = oVRMediaServiceNotification.mContext;
            i = R.string.casting_started_message;
        } else if (!VrCastDeviceUtils.isConnecting(vrShellCastDevice) && VrCastDeviceUtils.isConnecting(vrShellCastDevice2)) {
            oVRMediaServiceNotification = (OVRMediaServiceNotification) AnonymousClass0J2.A03(1, 149, this._UL_mInjectionContext);
            context = oVRMediaServiceNotification.mContext;
            i = R.string.casting_connecting_message;
        } else {
            return;
        }
        OVRMediaServiceNotification.A03(oVRMediaServiceNotification, context.getString(i), null);
    }

    @Nullable
    public VrCastController.VrShellCastDevice getCastingDevice() {
        return this.mVrCastDevice;
    }

    public void onError(int i) {
        completeStartCastingTaskWithError();
        ErrorCallback errorCallback = this.mErrorCallback;
        if (errorCallback != null) {
            errorCallback.onVrCastError();
        }
    }

    @VisibleForTesting
    public void setDeviceList(ImmutableList<VrCastController.VrShellCastDevice> immutableList) {
        this.mCachedDeviceList = immutableList;
    }

    public void setErrorCallback(ErrorCallback errorCallback) {
        this.mErrorCallback = errorCallback;
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private AnonymousClass0DC<ImmutableList<VrCastController.VrShellCastDevice>> discoverAsync(VrCastController vrCastController, String str) {
        vrCastController.startDiscovery(str);
        resetDiscoverTimeout();
        return AnonymousClass0DC.A00(TimeUnit.SECONDS.toMillis(3), AnonymousClass0Cy.A03.A02, null).A0A(new AnonymousClass0D4<Void, AnonymousClass0DC<ImmutableList<VrCastController.VrShellCastDevice>>>() {
            /* class com.oculus.horizon.service_media.vrcast.VrCastManager.AnonymousClass9 */

            @Override // X.AnonymousClass0D4
            public AnonymousClass0DC<ImmutableList<VrCastController.VrShellCastDevice>> then(AnonymousClass0DC<Void> r2) {
                return AnonymousClass0DC.A04(VrCastManager.this.mCachedDeviceList);
            }
        });
    }

    private boolean isCasting() {
        return VrCastDeviceUtils.isCasting(this.mVrCastDevice);
    }

    private boolean isCasting(VrCastController.VrShellCastDevice vrShellCastDevice) {
        return VrCastDeviceUtils.isCasting(vrShellCastDevice);
    }

    public AnonymousClass0DC<ImmutableList<VrCastController.VrShellCastDevice>> discoverAsync(final String str) {
        return ((VrCastServiceConnection) AnonymousClass0J2.A03(2, 309, this._UL_mInjectionContext)).connectToServiceAsync().A0D(new AnonymousClass0D4<VrCastController, AnonymousClass0DC<ImmutableList<VrCastController.VrShellCastDevice>>>() {
            /* class com.oculus.horizon.service_media.vrcast.VrCastManager.AnonymousClass8 */

            @Override // X.AnonymousClass0D4
            public AnonymousClass0DC<ImmutableList<VrCastController.VrShellCastDevice>> then(AnonymousClass0DC<VrCastController> r4) {
                return VrCastManager.this.discoverAsync(r4.A0G(), str);
            }
        }, AnonymousClass0DC.A0A);
    }
}
