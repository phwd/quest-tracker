package com.oculus.horizon.fbconnect;

import X.AbstractC06640p5;
import X.AnonymousClass0Cz;
import X.AnonymousClass0D2;
import X.AnonymousClass0D4;
import X.AnonymousClass0DC;
import X.AnonymousClass0DD;
import X.AnonymousClass0J2;
import X.AnonymousClass0L8;
import X.AnonymousClass0NO;
import X.AnonymousClass0Pi;
import X.AnonymousClass0QC;
import X.AnonymousClass0p1;
import X.AnonymousClass117;
import X.C003108z;
import X.C01010Iv;
import X.C07120rA;
import android.content.Context;
import android.content.SharedPreferences;
import android.net.NetworkInfo;
import androidx.annotation.VisibleForTesting;
import com.facebook.AccessToken;
import com.facebook.AccessTokenManager;
import com.facebook.FacebookSdk;
import com.facebook.Profile;
import com.facebook.ProfileManager;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.UnsafeContextInjection;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Eager;
import com.facebook.ultralight.Inject;
import com.oculus.auth.credentials.CredentialsManager;
import com.oculus.errorreporting.interfaces.IErrorReporter;
import com.oculus.horizon.api.fbconnect.FBConnectAccount;
import com.oculus.horizon.api.fbconnect.FBConnectAccountResponse;
import com.oculus.horizon.api.fbconnect.FBConnectAccountResponseWithToken;
import com.oculus.horizon.api.fbconnect.FBConnectAccountWithToken;
import com.oculus.horizon.api.fbconnect.FBConnectFetchAccountResponse;
import com.oculus.horizon.api.fbconnect.FBDisconnectMutationResponse;
import com.oculus.horizon.api.fbconnect.FBFriendPolicy;
import com.oculus.horizon.api.fbconnect.FBTokenGenerateMutationResponse;
import com.oculus.horizon.fbconnect.contract.FBConnectContent;
import com.oculus.http.core.base.ApiCallback;
import com.oculus.http.core.base.ApiError;
import com.oculus.util.constants.OculusConstants;
import com.oculus.util.device.DeviceUtils;
import com.oculus.util.network.NetworkUtils;
import java.util.concurrent.Callable;
import javax.annotation.Nullable;
import javax.inject.Provider;
import org.json.JSONException;
import org.json.JSONObject;

@Dependencies({"_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_UnsafeContextInjection_ULSEP_BINDING_ID", "_UL__ULSEP_android_content_SharedPreferences_ULSEP_com_oculus_horizon_fbconnect_FBConnectSharedPrefs_ULSEP_BINDING_ID", "_UL__ULSEP_com_facebook_login_LoginManager_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_horizon_logging_OculusLogger_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_BINDING_ID", "_UL__ULSEP_android_content_pm_PackageManager_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_horizon_fbconnect_FBConnectMethods_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_auth_credentials_CredentialsManager_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_util_device_DeviceUtils_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_horizon_fbconnect_FBConnectLogger_ULSEP_BINDING_ID"})
@ApplicationScoped
public class FBConnectHelper {
    public static final String FACEBOOK_DATA_ACCESS_TOKEN_KEY = "access_token";
    public static final String FACEBOOK_DATA_PROFILE_KEY = "profile";
    public static final String FACEBOOK_DATA_PROFILE_NAME_KEY = "name";
    public static final String FACEBOOK_DATA_UID_KEY = "uid";
    public static final String FACEBOOK_KATANA_PACKAGE_NAME = "com.facebook.katana";
    public static final String FACEBOOK_WAKIZASHI_PACKAGE_NAME = "com.facebook.wakizashi";
    public static final String TAG = "FBConnectHelper";
    public static volatile FBConnectHelper _UL__ULSEP_com_oculus_horizon_fbconnect_FBConnectHelper_ULSEP_INSTANCE;
    public AnonymousClass0QC _UL_mInjectionContext;
    @UnsafeContextInjection
    @Inject
    @Eager
    public final Context mContext;
    @Nullable
    public FBConnectDelegate mFBConnectDelegate;
    @Nullable
    public AnonymousClass0D2 mFetchFBDataCancellationToken;
    @Inject
    @Eager
    @FBConnectSharedPrefs
    public final SharedPreferences mSharedPreferences;

    public interface FBConnectDelegate {
        void onFBAccountLinkError(@Nullable ApiError apiError);

        void onFBAccountLinkSuccess();

        void onFBAccountUnlinkError(@Nullable ApiError apiError);

        void onFBAccountUnlinkSuccess();

        void onFBAuthCancelled();

        void onFBAuthError(@Nullable ApiError apiError);

        void onFBAuthSuccess(AccessToken accessToken);

        void onFBDataFetchComplete(@Nullable FacebookData facebookData);

        void onFBSyncFriendsError(@Nullable ApiError apiError);

        void onFBSyncFriendsSuccess();

        void onFBUnsyncFriendsError(@Nullable ApiError apiError);

        void onFBUnsyncFriendsSuccess();
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    /* JADX WARNING: Removed duplicated region for block: B:14:0x0049  */
    /* JADX WARNING: Removed duplicated region for block: B:17:0x0052 A[SYNTHETIC, Splitter:B:17:0x0052] */
    /* JADX WARNING: Removed duplicated region for block: B:29:0x006c A[DONT_GENERATE] */
    @javax.annotation.Nullable
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private org.json.JSONObject fetchFBDataFromPackage(java.lang.String r9) {
        /*
        // Method dump skipped, instructions count: 120
        */
        throw new UnsupportedOperationException("Method not decompiled: com.oculus.horizon.fbconnect.FBConnectHelper.fetchFBDataFromPackage(java.lang.String):org.json.JSONObject");
    }

    @Nullable
    public static FacebookData validateFetchedFBData(JSONObject jSONObject) {
        if (jSONObject != null) {
            try {
                JSONObject jSONObject2 = jSONObject.getJSONObject(FACEBOOK_DATA_PROFILE_KEY);
                String optString = optString(jSONObject, "uid");
                String optString2 = optString(jSONObject2, "name");
                String optString3 = optString(jSONObject, "access_token");
                if (!AnonymousClass0L8.A00(optString, optString2, optString3)) {
                    return new FacebookData(optString, optString2, optString3);
                }
            } catch (JSONException e) {
                AnonymousClass0NO.A0H(TAG, e, "Corrupted Facebook data");
                return null;
            }
        }
        return null;
    }

    public synchronized void clearCurrentFBAccessToken() {
        ((FBConnectLogger) AnonymousClass0J2.A03(7, 387, this._UL_mInjectionContext)).maybeReportFbAccessTokenUpdate(getCurrentFBAccessToken(), null);
        if (FacebookSdk.isInitialized()) {
            AccessToken.setCurrentAccessToken(null);
            Profile.setCurrentProfile(null);
            setAccessTokenValid(false);
        } else {
            ((IErrorReporter) AnonymousClass0J2.A03(2, 428, this._UL_mInjectionContext)).A96(TAG, "trying to clearCurrentFBAccessToken before FB SDK is initialized");
        }
    }

    @Nullable
    public synchronized AccessToken getCurrentFBAccessToken() {
        AccessToken accessToken;
        if (FacebookSdk.isInitialized()) {
            accessToken = AccessTokenManager.getInstance().currentAccessToken;
        } else {
            accessToken = null;
        }
        return accessToken;
    }

    @Nullable
    public synchronized Profile getCurrentFBProfile() {
        Profile profile;
        if (FacebookSdk.isInitialized()) {
            profile = ProfileManager.getInstance().currentProfile;
        } else {
            profile = null;
        }
        return profile;
    }

    @Nullable
    public synchronized String getCurrentFBUserID() {
        String str;
        AccessToken currentFBAccessToken = getCurrentFBAccessToken();
        if (currentFBAccessToken != null) {
            str = currentFBAccessToken.userId;
        } else {
            str = null;
        }
        return str;
    }

    public synchronized boolean isFacebookLinked() {
        boolean z;
        z = false;
        if (getCurrentFBAccessToken() != null) {
            z = true;
        }
        return z;
    }

    public AnonymousClass0DC<Void> refreshFBTokenAsync() {
        return fetchFBTokenAsync(null).A0A(new AnonymousClass0D4<AccessToken, AnonymousClass0DC<Void>>() {
            /* class com.oculus.horizon.fbconnect.FBConnectHelper.AnonymousClass5 */

            @Override // X.AnonymousClass0D4
            public AnonymousClass0DC<Void> then(AnonymousClass0DC<AccessToken> r3) {
                if (r3.A0F() == null) {
                    FBConnectHelper.this.setCurrentFBAccessToken(r3.A0G());
                    FBConnectHelper.this.setAccessTokenValid(true);
                    return null;
                }
                AnonymousClass0DD r1 = new AnonymousClass0DD();
                r1.A01(r3.A0F());
                return r1.A00;
            }
        });
    }

    public synchronized void setCurrentFBAccessToken(@Nullable AccessToken accessToken) {
        if (!FacebookSdk.isInitialized()) {
            ((IErrorReporter) AnonymousClass0J2.A03(2, 428, this._UL_mInjectionContext)).A96(TAG, "trying to setCurrentFBAccessToken before FB SDK is initialized");
        } else if (accessToken == null) {
            clearCurrentFBAccessToken();
        } else {
            ((FBConnectLogger) AnonymousClass0J2.A03(7, 387, this._UL_mInjectionContext)).maybeReportFbAccessTokenUpdate(getCurrentFBAccessToken(), accessToken);
            AccessToken.setCurrentAccessToken(accessToken);
            setAccessTokenValid(true);
        }
    }

    @AutoGeneratedAccessMethod
    public static final AnonymousClass0p1 _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_horizon_fbconnect_FBConnectHelper_ULGT__ULSEP_ACCESS_METHOD(AbstractC06640p5 r2) {
        return new C01010Iv(486, r2);
    }

    @AutoGeneratedAccessMethod
    public static final FBConnectHelper _UL__ULSEP_com_oculus_horizon_fbconnect_FBConnectHelper_ULSEP_ACCESS_METHOD(AbstractC06640p5 r1) {
        return (FBConnectHelper) AnonymousClass117.A00(486, r1);
    }

    @AutoGeneratedFactoryMethod
    public static final FBConnectHelper _UL__ULSEP_com_oculus_horizon_fbconnect_FBConnectHelper_ULSEP_FACTORY_METHOD(AbstractC06640p5 r4) {
        if (_UL__ULSEP_com_oculus_horizon_fbconnect_FBConnectHelper_ULSEP_INSTANCE == null) {
            synchronized (FBConnectHelper.class) {
                AnonymousClass0Pi A00 = AnonymousClass0Pi.A00(_UL__ULSEP_com_oculus_horizon_fbconnect_FBConnectHelper_ULSEP_INSTANCE, r4);
                if (A00 != null) {
                    try {
                        _UL__ULSEP_com_oculus_horizon_fbconnect_FBConnectHelper_ULSEP_INSTANCE = new FBConnectHelper(r4.getApplicationInjector());
                    } finally {
                        A00.A01();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_horizon_fbconnect_FBConnectHelper_ULSEP_INSTANCE;
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_horizon_fbconnect_FBConnectHelper_ULGT__ULSEP_ACCESS_METHOD(AbstractC06640p5 r2) {
        return new C01010Iv(486, r2);
    }

    private AnonymousClass0DC<FBConnectAccount> fetchFBConnectAccountTask(final String str) {
        final AnonymousClass0DD r3 = new AnonymousClass0DD();
        ((FBConnectMethods) AnonymousClass0J2.A03(4, 155, this._UL_mInjectionContext)).fetchFBConnectAccount(new ApiCallback<FBConnectFetchAccountResponse>() {
            /* class com.oculus.horizon.fbconnect.FBConnectHelper.AnonymousClass7 */

            @Override // com.oculus.http.core.base.ApiCallback
            public void onError(ApiError apiError) {
                ((IErrorReporter) AnonymousClass0J2.A03(2, 428, FBConnectHelper.this._UL_mInjectionContext)).A97(FBConnectHelper.TAG, "updateFBConnectAccountAsync failed with error: ", apiError.getCause());
                r3.A01(apiError);
                ((FBConnectLogger) AnonymousClass0J2.A03(7, 387, FBConnectHelper.this._UL_mInjectionContext)).reportFbAccountFetchFailure(str, apiError);
            }

            public void onResponse(FBConnectFetchAccountResponse fBConnectFetchAccountResponse) {
                r3.A02(fBConnectFetchAccountResponse.linked_accounts_info.facebook_account);
                ((FBConnectLogger) AnonymousClass0J2.A03(7, 387, FBConnectHelper.this._UL_mInjectionContext)).reportFbAccountFetchSuccess(str);
            }
        });
        return r3.A00;
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private void setAccessTokenValid(boolean z) {
        this.mSharedPreferences.edit().putBoolean(FBConnectSharedPrefs.KEY_MAYBE_ACCESS_TOKEN_VALID, z).apply();
    }

    public void cancelFetchFBData() {
        AnonymousClass0D2 r0 = this.mFetchFBDataCancellationToken;
        if (r0 != null) {
            r0.A02();
            this.mFetchFBDataCancellationToken = null;
        }
    }

    public AnonymousClass0DC<AccessToken> fetchFBTokenAsync(@Nullable String str) {
        String str2;
        final AnonymousClass0DD r4 = new AnonymousClass0DD();
        AccessToken currentFBAccessToken = getCurrentFBAccessToken();
        FBConnectMethods fBConnectMethods = (FBConnectMethods) AnonymousClass0J2.A03(4, 155, this._UL_mInjectionContext);
        if (currentFBAccessToken != null) {
            str2 = currentFBAccessToken.token;
        } else {
            str2 = null;
        }
        fBConnectMethods.generateFBAccessToken(str2, str, new ApiCallback<FBTokenGenerateMutationResponse>() {
            /* class com.oculus.horizon.fbconnect.FBConnectHelper.AnonymousClass4 */

            @Override // com.oculus.http.core.base.ApiCallback
            public void onError(ApiError apiError) {
                ((IErrorReporter) AnonymousClass0J2.A03(2, 428, FBConnectHelper.this._UL_mInjectionContext)).A97(FBConnectHelper.TAG, "fetchFBTokenAsync failed with error: ", apiError.getCause());
                r4.A01(apiError);
            }

            public void onResponse(FBTokenGenerateMutationResponse fBTokenGenerateMutationResponse) {
                if (fBTokenGenerateMutationResponse != null) {
                    if (!AnonymousClass0L8.A00(fBTokenGenerateMutationResponse.access_token)) {
                        r4.A02(new AccessToken(fBTokenGenerateMutationResponse.access_token, Long.toString(fBTokenGenerateMutationResponse.fb_app_id), Long.toString(fBTokenGenerateMutationResponse.fb_user_id), null, null, null, null, null));
                    }
                }
            }
        });
        return r4.A00;
    }

    public boolean maybeAccessTokenValid() {
        SharedPreferences sharedPreferences = this.mSharedPreferences;
        boolean z = false;
        if (getCurrentFBAccessToken() != null) {
            z = true;
        }
        return sharedPreferences.getBoolean(FBConnectSharedPrefs.KEY_MAYBE_ACCESS_TOKEN_VALID, z);
    }

    public void syncFBFriends() {
        ((FBConnectMethods) AnonymousClass0J2.A03(4, 155, this._UL_mInjectionContext)).syncFacebookFriends(new ApiCallback<FBConnectAccountResponse>() {
            /* class com.oculus.horizon.fbconnect.FBConnectHelper.AnonymousClass10 */

            @Override // com.oculus.http.core.base.ApiCallback
            public void onError(ApiError apiError) {
                ((IErrorReporter) AnonymousClass0J2.A03(2, 428, FBConnectHelper.this._UL_mInjectionContext)).A96(FBConnectHelper.TAG, apiError.getMessage());
                FBConnectDelegate fBConnectDelegate = FBConnectHelper.this.mFBConnectDelegate;
                if (fBConnectDelegate != null) {
                    fBConnectDelegate.onFBSyncFriendsError(apiError);
                }
            }

            public void onResponse(FBConnectAccountResponse fBConnectAccountResponse) {
                FBConnectDelegate fBConnectDelegate = FBConnectHelper.this.mFBConnectDelegate;
                if (fBConnectDelegate != null) {
                    fBConnectDelegate.onFBSyncFriendsSuccess();
                }
            }
        });
    }

    public void triggerFBConnectOnChange() {
        this.mContext.getContentResolver().notifyChange(FBConnectContent.Account.CONTENT_URI, null);
    }

    public void unlinkFBAccount() {
        ((FBConnectMethods) AnonymousClass0J2.A03(4, 155, this._UL_mInjectionContext)).unlinkFBConnectAccount(new ApiCallback<FBDisconnectMutationResponse>() {
            /* class com.oculus.horizon.fbconnect.FBConnectHelper.AnonymousClass9 */

            @Override // com.oculus.http.core.base.ApiCallback
            public void onError(ApiError apiError) {
                ((IErrorReporter) AnonymousClass0J2.A03(2, 428, FBConnectHelper.this._UL_mInjectionContext)).A96(FBConnectHelper.TAG, apiError.getMessage());
                FBConnectDelegate fBConnectDelegate = FBConnectHelper.this.mFBConnectDelegate;
                if (fBConnectDelegate != null) {
                    fBConnectDelegate.onFBAccountUnlinkError(apiError);
                }
            }

            public void onResponse(FBDisconnectMutationResponse fBDisconnectMutationResponse) {
                FBConnectHelper.this.clearCurrentFBAccessToken();
                FBConnectDelegate fBConnectDelegate = FBConnectHelper.this.mFBConnectDelegate;
                if (fBConnectDelegate != null) {
                    fBConnectDelegate.onFBAccountUnlinkSuccess();
                }
            }
        });
    }

    public void unsyncFBFriends() {
        ((FBConnectMethods) AnonymousClass0J2.A03(4, 155, this._UL_mInjectionContext)).unsyncFacebookFriends(new ApiCallback<FBConnectAccountResponse>() {
            /* class com.oculus.horizon.fbconnect.FBConnectHelper.AnonymousClass11 */

            @Override // com.oculus.http.core.base.ApiCallback
            public void onError(ApiError apiError) {
                ((IErrorReporter) AnonymousClass0J2.A03(2, 428, FBConnectHelper.this._UL_mInjectionContext)).A96(FBConnectHelper.TAG, apiError.getMessage());
                FBConnectDelegate fBConnectDelegate = FBConnectHelper.this.mFBConnectDelegate;
                if (fBConnectDelegate != null) {
                    fBConnectDelegate.onFBUnsyncFriendsError(apiError);
                }
            }

            public void onResponse(FBConnectAccountResponse fBConnectAccountResponse) {
                FBConnectDelegate fBConnectDelegate = FBConnectHelper.this.mFBConnectDelegate;
                if (fBConnectDelegate != null) {
                    fBConnectDelegate.onFBUnsyncFriendsSuccess();
                }
            }
        });
    }

    @Inject
    public FBConnectHelper(AbstractC06640p5 r3) {
        this._UL_mInjectionContext = new AnonymousClass0QC(8, r3);
        this.mContext = C003108z.A02(r3);
        this.mSharedPreferences = FBConnectModule._UL__ULSEP_android_content_SharedPreferences_ULSEP_com_oculus_horizon_fbconnect_FBConnectSharedPrefs_ULSEP_ACCESS_METHOD(r3);
    }

    public static /* synthetic */ String access$300() {
        return TAG;
    }

    public static String optString(JSONObject jSONObject, String str) {
        if (jSONObject.isNull(str)) {
            return "";
        }
        return jSONObject.optString(str);
    }

    public void startFetchFBData() {
        cancelFetchFBData();
        AnonymousClass0D2 r0 = new AnonymousClass0D2();
        this.mFetchFBDataCancellationToken = r0;
        AnonymousClass0DC<FacebookData> fetchFBDataAsync = fetchFBDataAsync(r0);
        AnonymousClass1 r3 = new AnonymousClass0D4<FacebookData, Void>() {
            /* class com.oculus.horizon.fbconnect.FBConnectHelper.AnonymousClass1 */

            @Override // X.AnonymousClass0D4
            public Void then(AnonymousClass0DC<FacebookData> r3) throws Exception {
                FBConnectDelegate fBConnectDelegate = FBConnectHelper.this.mFBConnectDelegate;
                if (fBConnectDelegate == null) {
                    return null;
                }
                fBConnectDelegate.onFBDataFetchComplete(r3.A0G());
                return null;
            }
        };
        AnonymousClass0DC.A02(fetchFBDataAsync, new C07120rA(fetchFBDataAsync, this.mFetchFBDataCancellationToken.A01(), r3), AnonymousClass0DC.A0B);
    }

    public AnonymousClass0DC<Void> startReauthAsync() {
        NetworkInfo A00;
        final AccessToken currentFBAccessToken = getCurrentFBAccessToken();
        if (currentFBAccessToken == null || (A00 = NetworkUtils.A00(this.mContext)) == null || !A00.isConnected() || ((CredentialsManager) AnonymousClass0J2.A03(5, 199, this._UL_mInjectionContext)).getCredentials() == null) {
            return AnonymousClass0DC.A04(null);
        }
        return fetchFBTokenAsync(null).A0A(new AnonymousClass0D4<AccessToken, AnonymousClass0DC<Void>>() {
            /* class com.oculus.horizon.fbconnect.FBConnectHelper.AnonymousClass3 */

            /* JADX WARNING: Code restructure failed: missing block: B:5:0x001b, code lost:
                if (r6.token.equals(r4.token) != false) goto L_0x001d;
             */
            @Override // X.AnonymousClass0D4
            /* Code decompiled incorrectly, please refer to instructions dump. */
            public X.AnonymousClass0DC<java.lang.Void> then(X.AnonymousClass0DC<com.facebook.AccessToken> r11) {
                /*
                // Method dump skipped, instructions count: 261
                */
                throw new UnsupportedOperationException("Method not decompiled: com.oculus.horizon.fbconnect.FBConnectHelper.AnonymousClass3.then(X.0DC):X.0DC");
            }
        });
    }

    public AnonymousClass0DC<Void> updateFBConnectAccountAsync(String str) {
        return fetchFBConnectAccountTask(str).A0A(new AnonymousClass0D4<FBConnectAccount, AnonymousClass0DC<Void>>() {
            /* class com.oculus.horizon.fbconnect.FBConnectHelper.AnonymousClass6 */

            @Override // X.AnonymousClass0D4
            public AnonymousClass0DC<Void> then(AnonymousClass0DC<FBConnectAccount> r5) {
                FBConnectAccount A0G = r5.A0G();
                if (A0G != null) {
                    if (!AnonymousClass0L8.A00(A0G.facebook_id)) {
                        return FBConnectHelper.this.refreshFBTokenAsync();
                    }
                }
                FBConnectHelper.this.clearCurrentFBAccessToken();
                return AnonymousClass0DC.A04(null);
            }
        });
    }

    public void setFBConnectDelegate(@Nullable FBConnectDelegate fBConnectDelegate) {
        this.mFBConnectDelegate = fBConnectDelegate;
    }

    private AnonymousClass0DC<FacebookData> fetchFBDataAsync(@Nullable AnonymousClass0D2 r4) {
        AnonymousClass0Cz r2 = null;
        if (((DeviceUtils) AnonymousClass0J2.A03(6, 165, this._UL_mInjectionContext)).A04()) {
            return AnonymousClass0DC.A04(null);
        }
        AnonymousClass2 r1 = new Callable<FacebookData>() {
            /* class com.oculus.horizon.fbconnect.FBConnectHelper.AnonymousClass2 */

            @Override // java.util.concurrent.Callable
            public FacebookData call() throws Exception {
                JSONObject fetchFBDataFromPackage = FBConnectHelper.this.fetchFBDataFromPackage("com.facebook.wakizashi");
                if (fetchFBDataFromPackage == null) {
                    fetchFBDataFromPackage = FBConnectHelper.this.fetchFBDataFromPackage("com.facebook.katana");
                }
                return FBConnectHelper.validateFetchedFBData(fetchFBDataFromPackage);
            }
        };
        if (r4 != null) {
            r2 = r4.A01();
        }
        return AnonymousClass0DC.A07(r1, AnonymousClass0DC.A0C, r2);
    }

    @VisibleForTesting
    public AnonymousClass0DC<FacebookData> fetchFBDataAsync() {
        return fetchFBDataAsync(null);
    }

    public void registerFBConnectAccount(AccessToken accessToken) {
        registerFBConnectAccount(accessToken, null, null, null);
    }

    public void registerFBConnectAccount(AccessToken accessToken, @Nullable FBFriendPolicy fBFriendPolicy, @Nullable String str, @Nullable String str2) {
        ((FBConnectMethods) AnonymousClass0J2.A03(4, 155, this._UL_mInjectionContext)).registerFBConnectAccount(accessToken.token, accessToken.userId, fBFriendPolicy, str, str2, new ApiCallback<FBConnectAccountResponseWithToken>() {
            /* class com.oculus.horizon.fbconnect.FBConnectHelper.AnonymousClass8 */

            @Override // com.oculus.http.core.base.ApiCallback
            public void onError(ApiError apiError) {
                FBConnectHelper.this.clearCurrentFBAccessToken();
                ((IErrorReporter) AnonymousClass0J2.A03(2, 428, FBConnectHelper.this._UL_mInjectionContext)).A97(FBConnectHelper.TAG, "registerFBConnectAccount failed with error: ", apiError.getCause());
                FBConnectDelegate fBConnectDelegate = FBConnectHelper.this.mFBConnectDelegate;
                if (fBConnectDelegate != null) {
                    fBConnectDelegate.onFBAccountLinkError(apiError);
                }
            }

            public void onResponse(FBConnectAccountResponseWithToken fBConnectAccountResponseWithToken) {
                FBConnectDelegate fBConnectDelegate;
                if (FBConnectHelper.this.setCurrentFBAccount(fBConnectAccountResponseWithToken.facebook_account) && (fBConnectDelegate = FBConnectHelper.this.mFBConnectDelegate) != null) {
                    fBConnectDelegate.onFBAccountLinkSuccess();
                }
            }
        });
    }

    public synchronized boolean setCurrentFBAccount(FBConnectAccountWithToken fBConnectAccountWithToken) {
        boolean z;
        if (fBConnectAccountWithToken == null) {
            clearCurrentFBAccessToken();
            z = true;
        } else {
            z = setCurrentFBAccount(fBConnectAccountWithToken.facebook_id, fBConnectAccountWithToken.access_token);
        }
        return z;
    }

    public synchronized boolean setCurrentFBAccount(String str, String str2) {
        if (AnonymousClass0L8.A00(str)) {
            ((IErrorReporter) AnonymousClass0J2.A03(2, 428, this._UL_mInjectionContext)).A96(TAG, "Trying to setCurrentFBAccount with an empty or null ID!");
        } else {
            if (AnonymousClass0L8.A00(str2)) {
                ((IErrorReporter) AnonymousClass0J2.A03(2, 428, this._UL_mInjectionContext)).A96(TAG, "Trying to setCurrentFBAccount with an empty or null token!");
            } else {
                setCurrentFBAccessToken(new AccessToken(str2, OculusConstants.OCULUS_APP_ID, str, null, null, null, null, null));
                return true;
            }
        }
        return false;
    }
}
