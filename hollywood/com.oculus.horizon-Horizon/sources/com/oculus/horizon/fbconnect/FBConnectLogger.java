package com.oculus.horizon.fbconnect;

import X.AbstractC06640p5;
import X.AnonymousClass0J2;
import X.AnonymousClass0QC;
import X.AnonymousClass0p1;
import X.AnonymousClass117;
import X.C003008y;
import X.C01020Iw;
import android.content.ContentProvider;
import com.facebook.AccessToken;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.google.common.base.Objects;
import com.oculus.logging.utils.Event;
import com.oculus.logging.utils.EventManager;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import javax.annotation.Nullable;
import javax.annotation.concurrent.Immutable;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID"})
@Immutable
public class FBConnectLogger {
    public static final String EVENT_ACCOUNT_FETCH = "oculus_mobile_fbconnect_account_fetch";
    public static final String EVENT_PROVIDER_DELETE = "oculus_mobile_fbconnect_provider_delete";
    public static final String EVENT_PROVIDER_INSERT = "oculus_mobile_fbconnect_provider_insert";
    public static final String EVENT_PROVIDER_PERM_CHECK = "oculus_mobile_fbconnect_provider_perm_check";
    public static final String EVENT_PROVIDER_QUERY = "oculus_mobile_fbconnect_provider_query";
    public static final String EVENT_TOKEN_UPDATE = "oculus_mobile_fbconnect_token_update";
    public static final String EXTRA_MESSAGE = "message";
    public static final String EXTRA_NEW_TOKEN = "new_token";
    public static final String EXTRA_OLD_TOKEN = "old_token";
    public static final String EXTRA_ORIGIN = "origin";
    public static final String EXTRA_REQUESTING_PACKAGE = "requesting_package";
    public static final String EXTRA_STACK_TRACE = "stack_trace";
    public static final String EXTRA_STATUS = "status";
    public static final String MESSAGE_GENERATE_TOKEN = "Generate FB Access Token";
    public static final String MESSAGE_NO_ACCESS_TOKEN = "No access token";
    public static final String MESSAGE_NO_CREDENTIALS = "No credentials";
    public static final String MESSAGE_UNSUPPORTED_URI = "Unsupported URI";
    public static final String MESSAGE_WITHOUT_PROFILE = "Without profile";
    public static final String MESSAGE_WITH_PROFILE = "With profile";
    public static final String STATUS_FAILURE = "failure";
    public static final String STATUS_SUCCESS = "success";
    public AnonymousClass0QC _UL_mInjectionContext;

    public static String toSafeString(@Nullable AccessToken accessToken) {
        return accessToken == null ? "null" : "non-null";
    }

    @AutoGeneratedAccessMethod
    public static final AnonymousClass0p1 _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_horizon_fbconnect_FBConnectLogger_ULGT__ULSEP_ACCESS_METHOD(AbstractC06640p5 r2) {
        return new C003008y(387, r2);
    }

    @AutoGeneratedAccessMethod
    public static final FBConnectLogger _UL__ULSEP_com_oculus_horizon_fbconnect_FBConnectLogger_ULSEP_ACCESS_METHOD(AbstractC06640p5 r1) {
        return (FBConnectLogger) AnonymousClass117.A00(387, r1);
    }

    @AutoGeneratedFactoryMethod
    public static final FBConnectLogger _UL__ULSEP_com_oculus_horizon_fbconnect_FBConnectLogger_ULSEP_FACTORY_METHOD(AbstractC06640p5 r1) {
        return new FBConnectLogger(r1);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_horizon_fbconnect_FBConnectLogger_ULGT__ULSEP_ACCESS_METHOD(AbstractC06640p5 r2) {
        return new C01020Iw(387, r2);
    }

    public void reportFbAccountFetchFailure(String str, Throwable th) {
        String str2;
        Event createEvent = createEvent(EVENT_ACCOUNT_FETCH);
        createEvent.A15(EXTRA_ORIGIN, str);
        createEvent.A15("status", "failure");
        createEvent.A15("message", th.getMessage());
        try {
            StringWriter stringWriter = new StringWriter();
            try {
                PrintWriter printWriter = new PrintWriter((Writer) stringWriter, true);
                try {
                    th.printStackTrace(printWriter);
                    printWriter.close();
                    str2 = stringWriter.toString();
                    stringWriter.close();
                    createEvent.A15("stack_trace", str2);
                    createEvent.A5L();
                    return;
                } catch (Throwable unused) {
                }
                throw th;
                throw th;
            } catch (Throwable unused2) {
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (NullPointerException unused3) {
            str2 = "";
        }
    }

    public void reportFbAccountFetchSuccess(String str) {
        Event createEvent = createEvent(EVENT_ACCOUNT_FETCH);
        createEvent.A15(EXTRA_ORIGIN, str);
        createEvent.A15("status", "success");
        createEvent.A5L();
    }

    public void reportProviderDeleteFailure(ContentProvider contentProvider, String str) {
        Event createEvent = createEvent(EVENT_PROVIDER_DELETE, contentProvider);
        createEvent.A15("status", "failure");
        createEvent.A15("message", str);
        createEvent.A5L();
    }

    public void reportProviderDeleteSuccess(ContentProvider contentProvider) {
        Event createEvent = createEvent(EVENT_PROVIDER_DELETE, contentProvider);
        createEvent.A15("status", "success");
        createEvent.A5L();
    }

    public void reportProviderInsertFailure(ContentProvider contentProvider, String str) {
        Event createEvent = createEvent(EVENT_PROVIDER_INSERT, contentProvider);
        createEvent.A15("status", "failure");
        createEvent.A15("message", str);
        createEvent.A5L();
    }

    public void reportProviderInsertSuccess(ContentProvider contentProvider) {
        Event createEvent = createEvent(EVENT_PROVIDER_INSERT, contentProvider);
        createEvent.A15("status", "success");
        createEvent.A5L();
    }

    public void reportProviderPermissionCheck(ContentProvider contentProvider, boolean z) {
        String str;
        Event createEvent = createEvent(EVENT_PROVIDER_PERM_CHECK, contentProvider);
        if (z) {
            str = "success";
        } else {
            str = "failure";
        }
        createEvent.A15("status", str);
        createEvent.A5L();
    }

    public void reportProviderQueryFailure(ContentProvider contentProvider, String str) {
        Event createEvent = createEvent(EVENT_PROVIDER_QUERY, contentProvider);
        createEvent.A15("status", "failure");
        createEvent.A15("message", str);
        createEvent.A5L();
    }

    public void reportProviderQuerySuccess(ContentProvider contentProvider, String str) {
        Event createEvent = createEvent(EVENT_PROVIDER_QUERY, contentProvider);
        createEvent.A15("status", "success");
        createEvent.A15("message", str);
        createEvent.A5L();
    }

    @Inject
    public FBConnectLogger(AbstractC06640p5 r3) {
        this._UL_mInjectionContext = new AnonymousClass0QC(1, r3);
    }

    public void maybeReportFbAccessTokenUpdate(@Nullable AccessToken accessToken, @Nullable AccessToken accessToken2) {
        if (!Objects.equal(accessToken, accessToken2)) {
            Event createEvent = createEvent(EVENT_TOKEN_UPDATE);
            createEvent.A15(EXTRA_OLD_TOKEN, toSafeString(accessToken));
            createEvent.A15(EXTRA_NEW_TOKEN, toSafeString(accessToken2));
            createEvent.A5L();
        }
    }

    private Event createEvent(String str) {
        return ((EventManager) AnonymousClass0J2.A03(0, 242, this._UL_mInjectionContext)).A22(str);
    }

    private Event createEvent(String str, ContentProvider contentProvider) {
        Event createEvent = createEvent(str);
        createEvent.A15("requesting_package", contentProvider.getCallingPackage());
        return createEvent;
    }
}
