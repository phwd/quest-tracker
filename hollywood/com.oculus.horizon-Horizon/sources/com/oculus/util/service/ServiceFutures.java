package com.oculus.util.service;

import X.AbstractC06640p5;
import X.AnonymousClass0Pi;
import com.facebook.inject.ApplicationScoped;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.google.common.util.concurrent.SettableFuture;
import com.oculus.errorreporting.interfaces.IErrorReporter;
import com.oculus.errorreporting.interfaces.InterfacesModule;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicLong;
import javax.inject.Inject;

@Dependencies({"_UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_BINDING_ID"})
@ApplicationScoped(enableScopeValidation = false)
public class ServiceFutures {
    public static final String EXTRA_FUTURE_ID = "future_id";
    public static final String EXTRA_FUTURE_PROCESS_ID = "future_process_id";
    public static final String TAG = "ServiceFutures";
    public static volatile ServiceFutures _UL__ULSEP_com_oculus_util_service_ServiceFutures_ULSEP_INSTANCE;
    public final IErrorReporter mErrorReporter;
    public final AtomicLong mFutureCounter = new AtomicLong();
    public final Map<Long, SettableFuture<?>> mFutures = new ConcurrentHashMap();

    public static final class SoftErrors {
        public static final String INCOMPLETE_FUTURE_DISPOSAL = "SERVICE_FUTURES_INCOMPLETE_FUTURE_DISPOSED";
        public static final String MISSING_FUTURE = "SERVICE_FUTURES_CONTRACT_MISSING_FUTURE";
        public static final String PREFIX = "SERVICE_FUTURES_";
    }

    @AutoGeneratedFactoryMethod
    public static final ServiceFutures A00(AbstractC06640p5 r4) {
        if (_UL__ULSEP_com_oculus_util_service_ServiceFutures_ULSEP_INSTANCE == null) {
            synchronized (ServiceFutures.class) {
                AnonymousClass0Pi A00 = AnonymousClass0Pi.A00(_UL__ULSEP_com_oculus_util_service_ServiceFutures_ULSEP_INSTANCE, r4);
                if (A00 != null) {
                    try {
                        _UL__ULSEP_com_oculus_util_service_ServiceFutures_ULSEP_INSTANCE = new ServiceFutures(InterfacesModule.A00(r4.getApplicationInjector()));
                    } finally {
                        A00.A01();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_util_service_ServiceFutures_ULSEP_INSTANCE;
    }

    @Inject
    public ServiceFutures(IErrorReporter iErrorReporter) {
        this.mErrorReporter = iErrorReporter;
    }
}
