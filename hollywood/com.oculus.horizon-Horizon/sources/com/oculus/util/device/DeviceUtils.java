package com.oculus.util.device;

import X.AbstractC06640p5;
import X.AnonymousClass006;
import X.AnonymousClass0CC;
import X.AnonymousClass117;
import X.C003108z;
import android.annotation.TargetApi;
import android.content.Context;
import android.os.Environment;
import android.provider.Settings;
import com.facebook.inject.UnsafeContextInjection;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Eager;
import com.google.common.collect.ImmutableSet;
import javax.inject.Inject;

@Dependencies({"_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_UnsafeContextInjection_ULSEP_BINDING_ID"})
@TargetApi(21)
public class DeviceUtils {
    public static final ImmutableSet<String> ALL_MODELS;
    public static final int DEFAULT_THRESHOLD_MAX_BYTES = 524288000;
    public static final int DEFAULT_THRESHOLD_PERCENTAGE = 10;
    public static final String EXTERNAL_STORAGE_FILE_PATH;
    public static final String FAKE_MODEL_PLACEHOLDER = "fake_placeholder";
    public static final ImmutableSet<String> JAPAN_MODELS;
    public static final String MODEL_DEBUG_FILE_PATH;
    public static final ImmutableSet<String> NOTE4_MODELS;
    public static final String OCULUS_DIR = "Oculus";
    public static final String STORAGE_THRESHOLD_MAX_BYTES = "sys_storage_threshold_max_bytes";
    public static final String STORAGE_THRESHOLD_PERCENTAGE = "sys_storage_threshold_percentage";
    public static final String TAG = "DeviceUtils";
    public static String mFakeModel;
    @UnsafeContextInjection
    @Inject
    @Eager
    public final Context mContext;

    @AutoGeneratedAccessMethod
    public static final DeviceUtils A00(AbstractC06640p5 r1) {
        return (DeviceUtils) AnonymousClass117.A00(165, r1);
    }

    @AutoGeneratedFactoryMethod
    public static final DeviceUtils A01(AbstractC06640p5 r1) {
        return new DeviceUtils(r1);
    }

    /* JADX WARNING: Code restructure failed: missing block: B:21:0x003e, code lost:
        if (r2 == null) goto L_0x0043;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:33:0x005e, code lost:
        if (r0 != false) goto L_0x0060;
     */
    /* JADX WARNING: Removed duplicated region for block: B:15:0x0039 A[SYNTHETIC, Splitter:B:15:0x0039] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public static java.lang.String A02() {
        /*
        // Method dump skipped, instructions count: 114
        */
        throw new UnsupportedOperationException("Method not decompiled: com.oculus.util.device.DeviceUtils.A02():java.lang.String");
    }

    public final boolean A04() {
        return this.mContext.getPackageManager().hasSystemFeature("oculus.hardware.standalone_vr");
    }

    static {
        String path = Environment.getExternalStorageDirectory().getPath();
        EXTERNAL_STORAGE_FILE_PATH = path;
        MODEL_DEBUG_FILE_PATH = AnonymousClass006.A05(path, "/oculus_model.test");
        AnonymousClass0CC r12 = new AnonymousClass0CC();
        r12.A05("SM-N910", "SM-N916", "SC-05G", "SC-04G", "SCV31", "404SC", "SM-G920", "SM-G925");
        ALL_MODELS = r12.build();
        AnonymousClass0CC r1 = new AnonymousClass0CC();
        r1.A05("SM-N910", "SM-N916");
        NOTE4_MODELS = r1.build();
        AnonymousClass0CC r13 = new AnonymousClass0CC();
        r13.A05("SC-05G", "SC-04G", "SCV31", "404SC");
        JAPAN_MODELS = r13.build();
    }

    @Inject
    public DeviceUtils(AbstractC06640p5 r2) {
        this.mContext = C003108z.A02(r2);
    }

    public static String A03(Context context) {
        String string = Settings.Secure.getString(context.getContentResolver(), "android_id");
        if (string == null) {
            string = "";
        }
        int length = string.length();
        if (length >= 16) {
            return string;
        }
        StringBuilder sb = new StringBuilder(16);
        while (length < 16) {
            sb.append('0');
            length++;
        }
        sb.append(string);
        return sb.toString();
    }
}
