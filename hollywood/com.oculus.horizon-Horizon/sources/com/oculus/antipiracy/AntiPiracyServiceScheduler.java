package com.oculus.antipiracy;

import X.AbstractC06640p5;
import X.AnonymousClass0J2;
import X.AnonymousClass0NO;
import X.AnonymousClass0QC;
import X.AnonymousClass117;
import X.C003108z;
import android.app.job.JobInfo;
import android.app.job.JobScheduler;
import android.content.ComponentName;
import android.content.Context;
import com.facebook.inject.UnsafeContextInjection;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Eager;
import com.facebook.ultralight.Inject;
import com.oculus.logging.utils.Event;
import com.oculus.logging.utils.EventManager;
import com.oculus.util.constants.JobSchedulerIds;
import java.util.concurrent.TimeUnit;

@Dependencies({"_UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID", "_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_UnsafeContextInjection_ULSEP_BINDING_ID"})
public class AntiPiracyServiceScheduler {
    public static final String EVENT_FAILED_TO_SCHEDULE_JOB = "oculus_anti_piracy_failed_to_schedule_killswitch_job";
    public static final String FAILURE_REASON = "failure_reason";
    public static final long REFRESH_PERIOD = TimeUnit.HOURS.toMillis(4);
    public static final String TAG = "AntiPiracyServiceScheduler";
    public AnonymousClass0QC _UL_mInjectionContext;
    @UnsafeContextInjection
    @Inject
    @Eager
    public final Context mContext;

    @AutoGeneratedAccessMethod
    public static final AntiPiracyServiceScheduler A00(AbstractC06640p5 r1) {
        return (AntiPiracyServiceScheduler) AnonymousClass117.A00(466, r1);
    }

    @AutoGeneratedFactoryMethod
    public static final AntiPiracyServiceScheduler A01(AbstractC06640p5 r1) {
        return new AntiPiracyServiceScheduler(r1);
    }

    public final void A02() {
        int schedule = ((JobScheduler) this.mContext.getSystemService("jobscheduler")).schedule(new JobInfo.Builder(JobSchedulerIds.ANTI_PIRACY_JOB, new ComponentName(this.mContext, AntiPiracyJobService.class)).setPeriodic(REFRESH_PERIOD).setRequiredNetworkType(1).build());
        if (schedule != 1) {
            AnonymousClass0NO.A0E(TAG, "Failed to schedule AntiPiracyJobService. Error: %s", Integer.valueOf(schedule));
            Event A23 = ((EventManager) AnonymousClass0J2.A03(0, 242, this._UL_mInjectionContext)).A23(EVENT_FAILED_TO_SCHEDULE_JOB, null, false);
            A23.A13(FAILURE_REASON, schedule);
            A23.A5L();
        }
    }

    @Inject
    public AntiPiracyServiceScheduler(AbstractC06640p5 r3) {
        this._UL_mInjectionContext = new AnonymousClass0QC(1, r3);
        this.mContext = C003108z.A02(r3);
    }
}
