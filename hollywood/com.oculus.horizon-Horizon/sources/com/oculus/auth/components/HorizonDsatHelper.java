package com.oculus.auth.components;

import X.AbstractC06640p5;
import X.AnonymousClass006;
import X.AnonymousClass0D4;
import X.AnonymousClass0DC;
import X.AnonymousClass0J2;
import X.AnonymousClass0QC;
import X.AnonymousClass0Rg;
import X.AnonymousClass0p1;
import X.AnonymousClass117;
import X.C003008y;
import X.C01020Iw;
import android.content.Context;
import android.text.TextUtils;
import com.facebook.infer.annotation.Nullsafe;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.google.common.base.Absent;
import com.google.common.base.Optional;
import com.oculus.auth.api.AuthMethods;
import com.oculus.auth.components.MC;
import com.oculus.auth.credentials.BootCountedRealtime;
import com.oculus.auth.credentials.Credentials;
import com.oculus.auth.credentials.ExpirableToken;
import com.oculus.auth.settings.AuthSettings;
import com.oculus.auth.storage.AuthDatastore;
import com.oculus.common.serial.BuildSerialUtil;
import com.oculus.horizon.api.ApiTaskCallback;
import com.oculus.horizon.api.login.LoginResponse;
import com.oculus.os.DeviceAuth;
import com.oculus.os.DeviceAuthToken;
import com.oculus.os.Version;
import com.oculus.util.constants.OculusConstants;
import java.util.concurrent.Callable;
import java.util.concurrent.TimeUnit;
import javax.annotation.Nullable;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_auth_storage_AuthDatastore_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_auth_api_AuthMethods_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_auth_components_AuthComponentRunner_ULSEP_BINDING_ID", "_UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_auth_settings_AuthSettings_ULSEP_BINDING_ID"})
@Nullsafe(Nullsafe.Mode.LOCAL)
public class HorizonDsatHelper {
    public static final long DEFAULT_EXPIRATION_TIME_MS = TimeUnit.DAYS.toMillis(1);
    public static final long EXPIRATION_BUFFER_MILLIS = TimeUnit.MINUTES.toMillis(10);
    public static final String TAG = "HorizonDsatHelper";
    public AnonymousClass0QC _UL_mInjectionContext;

    public AnonymousClass0DC<Void> refreshTokenAsync(AuthAction authAction) {
        return fetchTokenAsync(true, authAction).A0D(new AnonymousClass0D4<Optional<String>, AnonymousClass0DC<Void>>() {
            /* class com.oculus.auth.components.HorizonDsatHelper.AnonymousClass1 */

            @Override // X.AnonymousClass0D4
            public AnonymousClass0DC<Void> then(AnonymousClass0DC<Optional<String>> r2) {
                return AnonymousClass0DC.A04(null);
            }
        }, AnonymousClass0DC.A0A);
    }

    @AutoGeneratedAccessMethod
    public static final AnonymousClass0p1 _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_auth_components_HorizonDsatHelper_ULGT__ULSEP_ACCESS_METHOD(AbstractC06640p5 r2) {
        return new C003008y(347, r2);
    }

    @AutoGeneratedAccessMethod
    public static final HorizonDsatHelper _UL__ULSEP_com_oculus_auth_components_HorizonDsatHelper_ULSEP_ACCESS_METHOD(AbstractC06640p5 r1) {
        return (HorizonDsatHelper) AnonymousClass117.A00(347, r1);
    }

    @AutoGeneratedFactoryMethod
    public static final HorizonDsatHelper _UL__ULSEP_com_oculus_auth_components_HorizonDsatHelper_ULSEP_FACTORY_METHOD(AbstractC06640p5 r1) {
        return new HorizonDsatHelper(r1);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_auth_components_HorizonDsatHelper_ULGT__ULSEP_ACCESS_METHOD(AbstractC06640p5 r2) {
        return new C01020Iw(347, r2);
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private boolean isByPassDeviceTokenCheckEnabled() {
        return ((AnonymousClass0Rg) AnonymousClass0J2.A03(4, 399, this._UL_mInjectionContext)).A36(MC.oculus_auth.oc_dsat_bypass_device_token_check);
    }

    private boolean isGoodToReturn(ExpirableToken expirableToken) {
        return BootCountedRealtime.current((Context) AnonymousClass0J2.A03(0, 294, this._UL_mInjectionContext)).sameBootCountAndEarlierThan(expirableToken.mExpirationTime, EXPIRATION_BUFFER_MILLIS);
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private AnonymousClass0DC<ExpirableToken> obtainTokenAsync(String str, @Nullable final ExpirableToken expirableToken, @Nullable String str2, AuthAction authAction) {
        String str3;
        ApiTaskCallback apiTaskCallback = new ApiTaskCallback();
        AuthMethods authMethods = (AuthMethods) AnonymousClass0J2.A03(2, 84, this._UL_mInjectionContext);
        if (expirableToken != null) {
            str3 = expirableToken.mValue;
        } else {
            str3 = null;
        }
        authMethods.getDeviceScopedUserAccessToken(str, str3, str2, apiTaskCallback);
        return ((AuthComponentRunner) AnonymousClass0J2.A03(3, 6, this._UL_mInjectionContext)).runAsync(apiTaskCallback.mCompletionSource.A00.A0B(new AnonymousClass0D4<LoginResponse, ExpirableToken>() {
            /* class com.oculus.auth.components.HorizonDsatHelper.AnonymousClass6 */

            @Override // X.AnonymousClass0D4
            public ExpirableToken then(AnonymousClass0DC<LoginResponse> r5) throws GenericError {
                BootCountedRealtime of;
                String str = r5.A0G().access_token;
                if (!TextUtils.isEmpty(str)) {
                    ExpirableToken expirableToken = expirableToken;
                    if (expirableToken != null) {
                        of = expirableToken.mExpirationTime;
                    } else {
                        of = BootCountedRealtime.of((Context) AnonymousClass0J2.A03(0, 294, HorizonDsatHelper.this._UL_mInjectionContext), HorizonDsatHelper.DEFAULT_EXPIRATION_TIME_MS);
                    }
                    return ExpirableToken.of(str, of);
                }
                throw new GenericError(AnonymousClass006.A05("Backend returned null or empty token: ", str));
            }
        }), AuthLogger.COMPONENT_OBTAIN_HORIZON_DSAT, authAction);
    }

    public AnonymousClass0DC<ExpirableToken> fetchDeviceAuthTokenAsync(AuthAction authAction) {
        return ((AuthComponentRunner) AnonymousClass0J2.A03(3, 6, this._UL_mInjectionContext)).runAsync(AnonymousClass0DC.A06(new Callable<ExpirableToken>() {
            /* class com.oculus.auth.components.HorizonDsatHelper.AnonymousClass5 */

            @Override // java.util.concurrent.Callable
            public ExpirableToken call() throws Exception {
                if (Version.CURRENT_SDK_VERSION >= 28) {
                    try {
                        DeviceAuthToken fetchToken = new DeviceAuth((Context) AnonymousClass0J2.A03(0, 294, HorizonDsatHelper.this._UL_mInjectionContext)).fetchToken(OculusConstants.ALPENGLOW_HW_LOGINTOKEN);
                        return ExpirableToken.of(fetchToken.value(), BootCountedRealtime.of((Context) AnonymousClass0J2.A03(0, 294, HorizonDsatHelper.this._UL_mInjectionContext), fetchToken.expirationTime()));
                    } catch (DeviceAuth.DeviceIdentityException e) {
                        throw new NoDeviceIdentityError((Throwable) e);
                    } catch (DeviceAuth.NetworkException e2) {
                        throw new NetworkError(e2);
                    } catch (DeviceAuth.BackendException e3) {
                        throw new HttpError(e3);
                    }
                } else {
                    throw new NoDeviceIdentityError("Device auth not supported");
                }
            }
        }), AuthLogger.COMPONENT_FETCH_DEVICE_AUTH_TOKEN, authAction);
    }

    @Inject
    public HorizonDsatHelper(AbstractC06640p5 r3) {
        this._UL_mInjectionContext = new AnonymousClass0QC(6, r3);
    }

    public static /* synthetic */ String access$100() {
        return TAG;
    }

    private AnonymousClass0DC<ExpirableToken> produceTokenAsyncInternal(final String str, final AuthAction authAction) {
        return fetchDeviceAuthTokenAsync(authAction).A0A(new AnonymousClass0D4<ExpirableToken, AnonymousClass0DC<ExpirableToken>>() {
            /* class com.oculus.auth.components.HorizonDsatHelper.AnonymousClass4 */

            @Override // X.AnonymousClass0D4
            public AnonymousClass0DC<ExpirableToken> then(AnonymousClass0DC<ExpirableToken> r6) {
                if (!r6.A0K()) {
                    return HorizonDsatHelper.this.obtainTokenAsync(str, r6.A0G(), null, authAction);
                }
                if (!HorizonDsatHelper.this.isByPassDeviceTokenCheckEnabled() || !(r6.A0F() instanceof NoDeviceIdentityError)) {
                    return AnonymousClass0DC.A03(r6.A0F());
                }
                return HorizonDsatHelper.this.obtainTokenAsync(str, null, BuildSerialUtil.A00(), authAction);
            }
        });
    }

    public AnonymousClass0DC<String> produceTokenAsync(String str, AuthAction authAction) {
        return produceTokenAsyncInternal(str, authAction).A0B(new AnonymousClass0D4<ExpirableToken, String>() {
            /* class com.oculus.auth.components.HorizonDsatHelper.AnonymousClass3 */

            @Override // X.AnonymousClass0D4
            public String then(AnonymousClass0DC<ExpirableToken> r2) {
                return r2.A0G().mValue;
            }
        });
    }

    public AnonymousClass0DC<Optional<String>> fetchTokenAsync(AuthAction authAction) {
        return fetchTokenAsync(((AuthSettings) AnonymousClass0J2.A03(5, 398, this._UL_mInjectionContext)).getExpireDsatCache(), authAction);
    }

    public AnonymousClass0DC<Optional<String>> fetchTokenAsync(boolean z, AuthAction authAction) {
        Object obj;
        Credentials credentials = ((AuthDatastore) AnonymousClass0J2.A03(1, 17, this._UL_mInjectionContext)).getCredentials();
        if (credentials != null) {
            final String str = credentials.mAccessToken;
            if (!TextUtils.isEmpty(str)) {
                ExpirableToken expirableToken = credentials.mDeviceScopedAccessToken;
                if (z || expirableToken == null || !isGoodToReturn(expirableToken)) {
                    authAction.mIsQuiet = false;
                    return produceTokenAsyncInternal(str, authAction).A0B(new AnonymousClass0D4<ExpirableToken, Optional<String>>() {
                        /* class com.oculus.auth.components.HorizonDsatHelper.AnonymousClass2 */

                        @Override // X.AnonymousClass0D4
                        public Optional<String> then(AnonymousClass0DC<ExpirableToken> r7) {
                            String str;
                            ExpirableToken A0G = r7.A0G();
                            Credentials credentials = ((AuthDatastore) AnonymousClass0J2.A03(1, 17, HorizonDsatHelper.this._UL_mInjectionContext)).getCredentials();
                            if (!(credentials == null || (str = credentials.mUserId) == null)) {
                                String str2 = str;
                                String str3 = credentials.mAccessToken;
                                if (str2.equals(str3)) {
                                    ((AuthDatastore) AnonymousClass0J2.A03(1, 17, HorizonDsatHelper.this._UL_mInjectionContext)).storeCredentials(new Credentials(str, str3, A0G));
                                    return Optional.of(A0G.mValue);
                                }
                            }
                            return Absent.INSTANCE;
                        }
                    });
                }
                obj = Optional.of(expirableToken.mValue);
                return AnonymousClass0DC.A04(obj);
            }
        }
        obj = Absent.INSTANCE;
        return AnonymousClass0DC.A04(obj);
    }
}
