package com.oculus.auth.api;

import X.AbstractC06640p5;
import X.AnonymousClass0p1;
import X.AnonymousClass117;
import X.C003008y;
import X.C01020Iw;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.RegularImmutableMap;
import com.oculus.horizon.api.login.LoginResponse;
import com.oculus.horizon.api.loginapprovals.ResendConfirmationCodeResponse;
import com.oculus.horizon.api.twofac.TwoFactorMethodsResponse;
import com.oculus.horizon.api.twofac.TwoFactorVerifyResponse;
import com.oculus.horizon.remotelaunchlogger.RemoteLaunchLogger;
import com.oculus.http.common.graphql.GraphQLParamsHelper;
import com.oculus.http.common.graphql.GraphQLQueryConstants;
import com.oculus.http.core.ApiModule;
import com.oculus.http.core.annotations.OculusRestAdapter;
import com.oculus.http.core.common.Authorization;
import javax.annotation.Nullable;
import javax.annotation.concurrent.ThreadSafe;
import javax.inject.Inject;
import javax.inject.Provider;
import retrofit.Callback;
import retrofit.RestAdapter;
import retrofit.http.Body;
import retrofit.http.Field;
import retrofit.http.FormUrlEncoded;
import retrofit.http.GET;
import retrofit.http.Header;
import retrofit.http.POST;
import retrofit.http.Query;

@Dependencies({"_UL__ULSEP_retrofit_RestAdapter_ULSEP_com_oculus_http_core_annotations_OculusRestAdapter_ULSEP_BINDING_ID"})
public class AuthMethods {
    public final Methods mMethods;

    @ThreadSafe
    public interface Methods {
        @POST("/authenticate_application")
        @FormUrlEncoded
        void authenticateApplication(@Header("Authorization") String str, @Field("app_id") String str2, @Nullable @Field("push_token") String str3, @Nullable @Field("app_signer") String str4, @Nullable @Field("app_installer") String str5, @Field("app_version") int i, @Field("device_scoped") boolean z, Callback<LoginResponse> callback);

        @POST(GraphQLQueryConstants.GRAPHQL_ENDPOINT)
        void claimActivationBundle(@Header("Authorization") String str, @Query("q") String str2, @Query("query_params") String str3, @Body String str4, Callback<Void> callback);

        @POST("/two_factor_methods")
        void fetchTwoFactorMethods(@Nullable @Query("nonce") String str, @Body String str2, Callback<TwoFactorMethodsResponse> callback);

        @GET(GraphQLQueryConstants.GRAPHQL_ENDPOINT)
        void fetchUserInfo(@Header("Authorization") String str, @Query("q") String str2, Callback<UserInfoResponse> callback);

        @POST("/device_scoped_user_access_token")
        void getDeviceScopedUserAccessToken(@Header("Authorization") String str, @Nullable @Query("device_access_token") String str2, @Nullable @Query("device_serial") String str3, @Body String str4, Callback<LoginResponse> callback);

        @POST("/fbauth")
        void loginWithFbAuth(@Query("fb_access_token") String str, @Body String str2, Callback<LoginWithFbAuthResponse> callback);

        @POST(GraphQLQueryConstants.GRAPHQL_ENDPOINT)
        void registerHmd(@Header("Authorization") String str, @Query("q") String str2, @Query("query_params") String str3, @Body String str4, Callback<Void> callback);

        @POST("/resend_delta_pin")
        void resendConfirmationCode(@Nullable @Query("nonce") String str, @Body String str2, Callback<ResendConfirmationCodeResponse> callback);

        @POST("/two_factor_send_code")
        void sendTwoFactorCodeViaMethod(@Nullable @Query("nonce") String str, @Query("two_factor_method_id") String str2, @Body String str3, Callback<Void> callback);

        @POST(GraphQLQueryConstants.GRAPHQL_ENDPOINT)
        void setDeviceOwner(@Header("Authorization") String str, @Query("q") String str2, @Query("query_params") String str3, @Body String str4, Callback<Void> callback);

        @POST("/login_checkpoint_verify")
        void verifyLogin(@Nullable @Query("nonce") String str, @Query("pin") String str2, @Nullable @Query("fb_access_token") String str3, @Body String str4, Callback<LoginResponse> callback);

        @POST("/two_factor_verify_code")
        void verifyTwoFactorCode(@Nullable @Query("nonce") String str, @Query("two_factor_code") String str2, @Nullable @Query("fb_access_token") String str3, @Body String str4, Callback<TwoFactorVerifyResponse> callback);
    }

    @AutoGeneratedAccessMethod
    public static final AnonymousClass0p1 _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_auth_api_AuthMethods_ULGT__ULSEP_ACCESS_METHOD(AbstractC06640p5 r2) {
        return new C003008y(84, r2);
    }

    @AutoGeneratedAccessMethod
    public static final AuthMethods _UL__ULSEP_com_oculus_auth_api_AuthMethods_ULSEP_ACCESS_METHOD(AbstractC06640p5 r1) {
        return (AuthMethods) AnonymousClass117.A00(84, r1);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_auth_api_AuthMethods_ULGT__ULSEP_ACCESS_METHOD(AbstractC06640p5 r2) {
        return new C01020Iw(84, r2);
    }

    public void authenticateApplication(String str, String str2, @Nullable String str3, @Nullable String str4, @Nullable String str5, int i, boolean z, Callback<LoginResponse> callback) {
        this.mMethods.authenticateApplication(Authorization.A00(str), str2, str3, str4, str5, i, z, callback);
    }

    public void claimActivationBundle(String str, String str2, Callback<Void> callback) {
        this.mMethods.claimActivationBundle(Authorization.A00(str), GraphQLAuthQuery.CLAIM_ACTIVATION_BUNDLE, GraphQLParamsHelper.A00(ImmutableMap.A02(RemoteLaunchLogger.KEY_DEVICE_SERIAL, str2)), "", callback);
    }

    public void fetchTwoFactorMethods(@Nullable String str, Callback<TwoFactorMethodsResponse> callback) {
        this.mMethods.fetchTwoFactorMethods(str, "", callback);
    }

    public void fetchUserInfo(String str, Callback<UserInfoResponse> callback) {
        this.mMethods.fetchUserInfo(Authorization.A00(str), GraphQLAuthQuery.USER_INFO, callback);
    }

    public void getDeviceScopedUserAccessToken(String str, @Nullable String str2, @Nullable String str3, Callback<LoginResponse> callback) {
        this.mMethods.getDeviceScopedUserAccessToken(Authorization.A00(str), str2, str3, "", callback);
    }

    public void loginWithFbAuth(String str, Callback<LoginWithFbAuthResponse> callback) {
        this.mMethods.loginWithFbAuth(str, "", callback);
    }

    public void registerHmd(String str, String str2, String str3, Callback<Void> callback) {
        this.mMethods.registerHmd(Authorization.A00(str), GraphQLAuthQuery.REGISTER_HMD, GraphQLParamsHelper.A00(ImmutableMap.A03("hmd_serial", str2, "hmd_type", str3)), "", callback);
    }

    public void resendConfirmationCode(@Nullable String str, Callback<ResendConfirmationCodeResponse> callback) {
        this.mMethods.resendConfirmationCode(str, "", callback);
    }

    public void sendTwoFactorCodeViaMethod(@Nullable String str, String str2, Callback<Void> callback) {
        this.mMethods.sendTwoFactorCodeViaMethod(str, str2, "", callback);
    }

    public void setDeviceOwner(String str, Callback<Void> callback) {
        this.mMethods.setDeviceOwner(Authorization.A00(str), GraphQLAuthQuery.SET_DEVICE_OWNER, GraphQLParamsHelper.A00(RegularImmutableMap.A03), "", callback);
    }

    public void verifyLogin(@Nullable String str, String str2, @Nullable String str3, Callback<LoginResponse> callback) {
        this.mMethods.verifyLogin(str, str2, str3, "", callback);
    }

    public void verifyTwoFactorCode(@Nullable String str, String str2, @Nullable String str3, Callback<TwoFactorVerifyResponse> callback) {
        this.mMethods.verifyTwoFactorCode(str, str2, str3, "", callback);
    }

    @Inject
    public AuthMethods(@OculusRestAdapter RestAdapter restAdapter) {
        this.mMethods = (Methods) restAdapter.create(Methods.class);
    }

    @AutoGeneratedFactoryMethod
    public static final AuthMethods _UL__ULSEP_com_oculus_auth_api_AuthMethods_ULSEP_FACTORY_METHOD(AbstractC06640p5 r1) {
        return new AuthMethods(ApiModule.A0C(r1));
    }
}
