package com.oculus.auth.service.passwordencryption;

import X.AbstractC06640p5;
import X.AnonymousClass0J2;
import X.AnonymousClass0Pi;
import X.AnonymousClass0QC;
import X.AnonymousClass0p1;
import X.AnonymousClass117;
import X.C01010Iv;
import com.facebook.inject.ApplicationScoped;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.oculus.logging.utils.Event;
import com.oculus.logging.utils.EventManager;
import javax.annotation.Nullable;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID"})
@ApplicationScoped
public class PasswordEncryptionLogger {
    public static final String EVENT_DECRYPTION_FAILURE = "oculus_mobile_fbconnect_decryption_failure";
    public static final String EVENT_DECRYPTION_SUCCESS = "oculus_mobile_fbconnect_decryption_success";
    public static final String EVENT_ENCRYPTION = "oculus_mobile_fbconnect_encryption";
    public static final String EVENT_KEY_FETCHING_FAILURE = "oculus_mobile_fbconnect_key_fetching_failure";
    public static final String EVENT_KEY_FETCHING_SUCCESS = "oculus_mobile_fbconnect_key_fetching_success";
    public static final String EVENT_KEY_FETCHING_TRIGGER = "oculus_mobile_fbconnect_key_fetching_trigger";
    public static final String EXTRA_ATTEMPT_TIMES = "attempt_times";
    public static final String EXTRA_ENCRYPTION_EXCEPTION = "encryption_exception";
    public static final String EXTRA_ERROR = "error";
    public static final String EXTRA_TRIGGER_METHOD = "trigger_method";
    public static final String TRIGGER_SCREEN_ON = "screen_on";
    public static final String TRIGGER_WIFI_CONNECTED = "wifi_connected";
    public static volatile PasswordEncryptionLogger _UL__ULSEP_com_oculus_auth_service_passwordencryption_PasswordEncryptionLogger_ULSEP_INSTANCE;
    public AnonymousClass0QC _UL_mInjectionContext;

    @AutoGeneratedAccessMethod
    public static final AnonymousClass0p1 _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_auth_service_passwordencryption_PasswordEncryptionLogger_ULGT__ULSEP_ACCESS_METHOD(AbstractC06640p5 r2) {
        return new C01010Iv(359, r2);
    }

    @AutoGeneratedAccessMethod
    public static final PasswordEncryptionLogger _UL__ULSEP_com_oculus_auth_service_passwordencryption_PasswordEncryptionLogger_ULSEP_ACCESS_METHOD(AbstractC06640p5 r1) {
        return (PasswordEncryptionLogger) AnonymousClass117.A00(359, r1);
    }

    @AutoGeneratedFactoryMethod
    public static final PasswordEncryptionLogger _UL__ULSEP_com_oculus_auth_service_passwordencryption_PasswordEncryptionLogger_ULSEP_FACTORY_METHOD(AbstractC06640p5 r4) {
        if (_UL__ULSEP_com_oculus_auth_service_passwordencryption_PasswordEncryptionLogger_ULSEP_INSTANCE == null) {
            synchronized (PasswordEncryptionLogger.class) {
                AnonymousClass0Pi A00 = AnonymousClass0Pi.A00(_UL__ULSEP_com_oculus_auth_service_passwordencryption_PasswordEncryptionLogger_ULSEP_INSTANCE, r4);
                if (A00 != null) {
                    try {
                        _UL__ULSEP_com_oculus_auth_service_passwordencryption_PasswordEncryptionLogger_ULSEP_INSTANCE = new PasswordEncryptionLogger(r4.getApplicationInjector());
                    } finally {
                        A00.A01();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_auth_service_passwordencryption_PasswordEncryptionLogger_ULSEP_INSTANCE;
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_auth_service_passwordencryption_PasswordEncryptionLogger_ULGT__ULSEP_ACCESS_METHOD(AbstractC06640p5 r2) {
        return new C01010Iv(359, r2);
    }

    public void logDecryptionEvent(String str, int i, int i2) {
        Event A22 = ((EventManager) AnonymousClass0J2.A03(0, 242, this._UL_mInjectionContext)).A22(str);
        A22.A13("error", i);
        A22.A13(EXTRA_ATTEMPT_TIMES, i2);
        A22.A5L();
    }

    public void logEncryptionEvent(@Nullable String str, int i) {
        Event A22 = ((EventManager) AnonymousClass0J2.A03(0, 242, this._UL_mInjectionContext)).A22(EVENT_ENCRYPTION);
        A22.A15(EXTRA_ENCRYPTION_EXCEPTION, str);
        A22.A13(EXTRA_ATTEMPT_TIMES, i);
        A22.A5L();
    }

    public void logKeyFetchingEvent(String str, @Nullable String str2, @Nullable String str3) {
        Event A22 = ((EventManager) AnonymousClass0J2.A03(0, 242, this._UL_mInjectionContext)).A22(str);
        if (str2 == null) {
            str2 = "null";
        }
        A22.A15(EXTRA_TRIGGER_METHOD, str2);
        if (str3 == null) {
            str3 = "null";
        }
        A22.A15("error", str3);
        A22.A5L();
    }

    @Inject
    public PasswordEncryptionLogger(AbstractC06640p5 r3) {
        this._UL_mInjectionContext = new AnonymousClass0QC(1, r3);
    }
}
