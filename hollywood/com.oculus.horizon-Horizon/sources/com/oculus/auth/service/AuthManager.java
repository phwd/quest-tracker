package com.oculus.auth.service;

import X.AbstractC06640p5;
import X.AbstractC08820ye;
import X.AnonymousClass0Cu;
import X.AnonymousClass0D4;
import X.AnonymousClass0DC;
import X.AnonymousClass0J2;
import X.AnonymousClass0NO;
import X.AnonymousClass0QC;
import X.AnonymousClass0p1;
import X.AnonymousClass117;
import X.C003008y;
import X.C01020Iw;
import X.C02790bO;
import X.C02800bY;
import X.C03090c6;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.RemoteException;
import android.os.ResultReceiver;
import android.text.TextUtils;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Eager;
import com.facebook.ultralight.Inject;
import com.google.common.base.Absent;
import com.google.common.base.Optional;
import com.google.common.base.Present;
import com.google.common.base.Strings;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.RegularImmutableMap;
import com.google.common.collect.RegularImmutableSet;
import com.google.common.collect.SingletonImmutableSet;
import com.oculus.aidl.IAuthenticationCallback;
import com.oculus.auth.api.AuthMethods;
import com.oculus.auth.api.LoginWithFbAuthResponse;
import com.oculus.auth.components.AppScopedTokenHelper;
import com.oculus.auth.components.AuthAction;
import com.oculus.auth.components.AuthLogger;
import com.oculus.auth.components.DeviceOwnershipHelper;
import com.oculus.auth.components.DsatHelper;
import com.oculus.auth.components.HorizonDsatHelper;
import com.oculus.auth.components.LoginComponents;
import com.oculus.auth.components.LogoutComponents;
import com.oculus.auth.components.MarshallableError;
import com.oculus.auth.components.TwoFactorLoginRequiredError;
import com.oculus.auth.components.UnexpectedResponseError;
import com.oculus.auth.credentials.Credentials;
import com.oculus.auth.credentials.CredentialsManager;
import com.oculus.auth.service.AuthService;
import com.oculus.auth.service.contract.AuthTwoFactorMethod;
import com.oculus.auth.service.contract.ServiceContract;
import com.oculus.horizon.api.ApiTaskCallback;
import com.oculus.horizon.api.loginapprovals.ResendConfirmationCodeResponse;
import com.oculus.horizon.api.twofac.TwoFactorMethodsResponse;
import com.oculus.http.core.base.ApiCallback;
import com.oculus.http.core.base.ApiError;
import com.oculus.http.core.base.ApiErrorCodes;
import com.oculus.profileapi.OVRProfile;
import com.oculus.time.Clock;
import com.oculus.util.thread.ThreadUtils;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;
import java.util.concurrent.Callable;
import javax.annotation.Nullable;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_auth_components_DeviceOwnershipHelper_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_util_thread_ThreadUtils_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_auth_credentials_CredentialsManager_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_auth_components_LoginComponents_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_auth_api_AuthMethods_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_auth_components_LogoutComponents_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_auth_components_DsatHelper_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_auth_components_AppScopedTokenHelper_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_auth_components_HorizonDsatHelper_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_auth_components_AuthLogger_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID", "_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_profileapi_OVRProfile_ULSEP_BINDING_ID"})
public class AuthManager {
    public static final ResultHandler DEFAULT_RESULT_HANDLER = new ResultHandler();
    public static final Map<Integer, AuthService.AuthResult> ERROR_CODE_AUTH_RESULTS_MAP;
    public static final Map<Integer, AuthService.AuthResult> ERROR_SUBCODE_AUTH_RESULTS_MAP;
    public static final String KEY_FB_ERROR_DATA_NONCE = "nonce";
    public static final String TAG = "AuthManager";
    public AnonymousClass0QC _UL_mInjectionContext;
    @Inject
    @Eager
    public final ThreadUtils mThreadUtils;

    public static class ErrorExtrasBuilder {
        @Nullable
        public Integer mErrorCode;
        @Nullable
        public String mErrorMessage;
        @Nullable
        public String mErrorTitle;
        @Nullable
        public MarshallableError mMarshallableError;
        @Nullable
        public String mNonce;
        @Nullable
        public ArrayList<AuthTwoFactorMethod> mTwoFactorMethods;

        public static ErrorExtrasBuilder fromException(@Nullable Exception exc) {
            ApiError.FBApiErrorResponse.Error error;
            ErrorExtrasBuilder errorExtrasBuilder = new ErrorExtrasBuilder();
            if (exc != null) {
                if (exc instanceof MarshallableError) {
                    errorExtrasBuilder.mMarshallableError = (MarshallableError) exc;
                } else {
                    int intCode = AuthManager.getAuthResultFromException(exc).getIntCode();
                    errorExtrasBuilder.mErrorCode = Integer.valueOf(intCode);
                    if (exc instanceof ApiError) {
                        ApiError apiError = (ApiError) exc;
                        String str = null;
                        ApiError.FBApiErrorResponse fBApiErrorResponse = apiError.fbApiErrorResponse;
                        if (!(fBApiErrorResponse == null || (error = fBApiErrorResponse.error) == null)) {
                            str = error.error_user_title;
                        }
                        errorExtrasBuilder.mErrorTitle = str;
                        errorExtrasBuilder.mErrorMessage = apiError.A00(null);
                        if (intCode == -2 || intCode == -8) {
                            errorExtrasBuilder.mNonce = AuthManager.getNonce(apiError);
                            return errorExtrasBuilder;
                        }
                    }
                }
            }
            return errorExtrasBuilder;
        }

        public Bundle build() {
            MarshallableError marshallableError = this.mMarshallableError;
            if (marshallableError != null) {
                return marshallableError.marshal();
            }
            Bundle bundle = new Bundle();
            Integer num = this.mErrorCode;
            if (num != null) {
                bundle.putInt("error_code", num.intValue());
            }
            String str = this.mErrorTitle;
            if (str != null) {
                bundle.putString("error_title", str);
            }
            String str2 = this.mErrorMessage;
            if (str2 != null) {
                bundle.putString("error_message", str2);
            }
            String str3 = this.mNonce;
            if (str3 != null) {
                bundle.putString("nonce", str3);
            }
            ArrayList<AuthTwoFactorMethod> arrayList = this.mTwoFactorMethods;
            if (arrayList == null) {
                return bundle;
            }
            bundle.putByteArray(ServiceContract.EXTRA_TWO_FACTOR_METHODS, AuthTwoFactorMethod.marshallParcelableList(arrayList));
            return bundle;
        }

        public ErrorExtrasBuilder setErrorCode(int i) {
            this.mErrorCode = Integer.valueOf(i);
            return this;
        }

        public ErrorExtrasBuilder setErrorMessage(@Nullable String str) {
            this.mErrorMessage = str;
            return this;
        }

        public ErrorExtrasBuilder setErrorTitle(@Nullable String str) {
            this.mErrorTitle = str;
            return this;
        }

        public ErrorExtrasBuilder setNonce(@Nullable String str) {
            this.mNonce = str;
            return this;
        }

        public void setTwoFactorMethods(@Nullable ArrayList<AuthTwoFactorMethod> arrayList) {
            this.mTwoFactorMethods = arrayList;
        }
    }

    public static class ResultHandler<T> {
        public Bundle marshal(T t) {
            return new Bundle();
        }

        /* JADX DEBUG: Type inference failed for r0v0. Raw type applied. Possible types: com.google.common.collect.ImmutableMap<java.lang.Object, java.lang.Object>, com.google.common.collect.ImmutableMap<java.lang.String, java.lang.Object> */
        public ImmutableMap<String, Object> provideExtras(Optional<T> optional) {
            return RegularImmutableMap.A03;
        }

        public ResultHandler() {
        }

        public /* synthetic */ ResultHandler(AnonymousClass1 r1) {
        }
    }

    public static String getNonce(@Nullable ApiError apiError) {
        AbstractC08820ye r0;
        ApiError.FBApiErrorResponse.Error error;
        if (apiError != null) {
            try {
                ApiError.FBApiErrorResponse fBApiErrorResponse = apiError.fbApiErrorResponse;
                if (fBApiErrorResponse == null || (error = fBApiErrorResponse.error) == null) {
                    r0 = null;
                } else {
                    r0 = error.error_data;
                }
                return ((C03090c6) r0.A02().A00.get("nonce")).A04();
            } catch (Throwable th) {
                AnonymousClass0NO.A0H(TAG, th, "Unable to parse login error for nonce");
            }
        }
        return null;
    }

    /* renamed from: com.oculus.auth.service.AuthManager$15  reason: invalid class name */
    public static /* synthetic */ class AnonymousClass15 {
        public static final /* synthetic */ int[] $SwitchMap$com$oculus$http$core$base$ApiError$Type;

        /* JADX WARNING: Can't wrap try/catch for region: R(6:0|1|2|3|4|6) */
        /* JADX WARNING: Code restructure failed: missing block: B:7:?, code lost:
            return;
         */
        /* JADX WARNING: Failed to process nested try/catch */
        /* JADX WARNING: Missing exception handler attribute for start block: B:3:0x0012 */
        static {
            /*
                com.oculus.http.core.base.ApiError$Type[] r0 = com.oculus.http.core.base.ApiError.Type.values()
                int r0 = r0.length
                int[] r2 = new int[r0]
                com.oculus.auth.service.AuthManager.AnonymousClass15.$SwitchMap$com$oculus$http$core$base$ApiError$Type = r2
                com.oculus.http.core.base.ApiError$Type r0 = com.oculus.http.core.base.ApiError.Type.HTTP_ERROR     // Catch:{ NoSuchFieldError -> 0x0012 }
                int r1 = r0.ordinal()     // Catch:{ NoSuchFieldError -> 0x0012 }
                r0 = 1
                r2[r1] = r0     // Catch:{ NoSuchFieldError -> 0x0012 }
            L_0x0012:
                com.oculus.http.core.base.ApiError$Type r0 = com.oculus.http.core.base.ApiError.Type.NETWORK_ERROR     // Catch:{ NoSuchFieldError -> 0x001b }
                int r1 = r0.ordinal()     // Catch:{ NoSuchFieldError -> 0x001b }
                r0 = 2
                r2[r1] = r0     // Catch:{ NoSuchFieldError -> 0x001b }
            L_0x001b:
                return
            */
            throw new UnsupportedOperationException("Method not decompiled: com.oculus.auth.service.AuthManager.AnonymousClass15.<clinit>():void");
        }
    }

    @AutoGeneratedAccessMethod
    public static final AnonymousClass0p1 _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_auth_service_AuthManager_ULGT__ULSEP_ACCESS_METHOD(AbstractC06640p5 r2) {
        return new C003008y(349, r2);
    }

    @AutoGeneratedAccessMethod
    public static final AuthManager _UL__ULSEP_com_oculus_auth_service_AuthManager_ULSEP_ACCESS_METHOD(AbstractC06640p5 r1) {
        return (AuthManager) AnonymousClass117.A00(349, r1);
    }

    @AutoGeneratedFactoryMethod
    public static final AuthManager _UL__ULSEP_com_oculus_auth_service_AuthManager_ULSEP_FACTORY_METHOD(AbstractC06640p5 r1) {
        return new AuthManager(r1);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_auth_service_AuthManager_ULGT__ULSEP_ACCESS_METHOD(AbstractC06640p5 r2) {
        return new C01020Iw(349, r2);
    }

    /* JADX DEBUG: Failed to insert an additional move for type inference into block B:0:0x0000 */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r3v0, types: [com.google.common.collect.ImmutableMap<java.lang.String, ?>] */
    /* JADX WARN: Type inference failed for: r3v1, types: [java.util.Map] */
    /* JADX WARN: Type inference failed for: r3v2, types: [com.google.common.collect.ImmutableMap<java.lang.Object, java.lang.Object>] */
    public static ImmutableMap<String, ?> combine(@Nullable ImmutableMap<String, ?> immutableMap, Bundle bundle, boolean z) {
        if (immutableMap == 0) {
            immutableMap = RegularImmutableMap.A03;
        }
        ImmutableMap.Builder builder = new ImmutableMap.Builder();
        builder.A00(immutableMap.entrySet());
        if (bundle.containsKey("error_code")) {
            builder.put("error_code", Integer.valueOf(bundle.getInt("error_code")));
        }
        String string = bundle.getString("error_title");
        if (string != null) {
            builder.put("error_title", string);
        }
        String string2 = bundle.getString("error_message");
        if (string2 != null) {
            builder.put("error_message", string2);
        }
        builder.put("is_relogin", Boolean.valueOf(z));
        return builder.build();
    }

    @Nullable
    private String extractCallingPackage(Intent intent) {
        C02790bO A00 = C02800bY.A00((Context) AnonymousClass0J2.A03(9, 294, this._UL_mInjectionContext), intent);
        if (A00 != null) {
            return A00.A01();
        }
        return null;
    }

    public static AuthService.AuthResult getAuthResultFromException(Throwable th) {
        int i;
        int i2;
        int i3;
        ApiError.FBApiErrorResponse.Error error;
        ApiError.FBApiErrorResponse.Error error2;
        ApiError.FBApiErrorResponse.Error error3;
        ApiError.FBApiErrorResponse.Error error4;
        if (th instanceof AnonymousClass0Cu) {
            ApiError apiError = null;
            Iterator<Throwable> it = ((AnonymousClass0Cu) th).innerThrowables.iterator();
            while (true) {
                if (it.hasNext()) {
                    Throwable next = it.next();
                    if (next instanceof ApiError) {
                        if (apiError == null) {
                            apiError = (ApiError) next;
                        } else if (((ApiError) next).type != apiError.type) {
                            break;
                        }
                    }
                } else if (apiError != null) {
                    return getAuthResultFromException(apiError);
                }
            }
        } else if (th instanceof ApiError) {
            ApiError apiError2 = (ApiError) th;
            Map<Integer, AuthService.AuthResult> map = ERROR_CODE_AUTH_RESULTS_MAP;
            ApiError.FBApiErrorResponse fBApiErrorResponse = apiError2.fbApiErrorResponse;
            if (fBApiErrorResponse == null || (error4 = fBApiErrorResponse.error) == null) {
                i = 0;
            } else {
                i = error4.code;
            }
            if (map.containsKey(Integer.valueOf(i))) {
                ApiError.FBApiErrorResponse fBApiErrorResponse2 = apiError2.fbApiErrorResponse;
                if (!(fBApiErrorResponse2 == null || (error3 = fBApiErrorResponse2.error) == null)) {
                    i2 = error3.code;
                }
                i2 = 0;
            } else {
                map = ERROR_SUBCODE_AUTH_RESULTS_MAP;
                ApiError.FBApiErrorResponse fBApiErrorResponse3 = apiError2.fbApiErrorResponse;
                if (fBApiErrorResponse3 == null || (error2 = fBApiErrorResponse3.error) == null) {
                    i3 = 0;
                } else {
                    i3 = error2.error_subcode;
                }
                if (map.containsKey(Integer.valueOf(i3))) {
                    ApiError.FBApiErrorResponse fBApiErrorResponse4 = apiError2.fbApiErrorResponse;
                    if (!(fBApiErrorResponse4 == null || (error = fBApiErrorResponse4.error) == null)) {
                        i2 = error.error_subcode;
                    }
                    i2 = 0;
                } else {
                    switch (apiError2.type.ordinal()) {
                        case 0:
                            return AuthService.AuthResult.HTTP_ERROR;
                        case 1:
                            return AuthService.AuthResult.NETWORK_ERROR;
                    }
                }
            }
            return map.get(Integer.valueOf(i2));
        }
        return AuthService.AuthResult.UNKNOWN_ERROR;
    }

    public static void notifyReceiverIfAny(Intent intent, @Nullable Exception exc, Bundle bundle) {
        ResultReceiver resultReceiver = (ResultReceiver) intent.getParcelableExtra("receiver");
        if (resultReceiver != null) {
            int i = 1;
            if (exc == null) {
                i = -1;
            }
            resultReceiver.send(i, bundle);
        }
    }

    private void performLoginInternal(Intent intent, final ImmutableSet<LoginComponents.Option> immutableSet) {
        final boolean z;
        AnonymousClass0DC<Void> startLoginAsync;
        AnonymousClass0QC r3 = this._UL_mInjectionContext;
        AuthAction newInstance = AuthAction.newInstance((Context) AnonymousClass0J2.A03(9, 294, r3), intent, (Clock) AnonymousClass0J2.A03(8, 354, r3));
        this.mThreadUtils.A05();
        String stringExtra = intent.getStringExtra("email");
        String stringExtra2 = intent.getStringExtra("password");
        String stringExtra3 = intent.getStringExtra(ServiceContract.EXTRA_FB_ACCESS_TOKEN);
        String stringExtra4 = intent.getStringExtra("user_id");
        String stringExtra5 = intent.getStringExtra("access_token");
        if (stringExtra5 == null && (stringExtra == null || stringExtra2 == null)) {
            handleException(newInstance, intent, new IllegalArgumentException("Intent is missing access token, or email and password"));
            return;
        }
        if (stringExtra5 != null) {
            z = true;
            startLoginAsync = ((LoginComponents) AnonymousClass0J2.A03(1, 478, this._UL_mInjectionContext)).startLoginAsync(stringExtra4, stringExtra5, newInstance);
        } else {
            z = false;
            startLoginAsync = ((LoginComponents) AnonymousClass0J2.A03(1, 478, this._UL_mInjectionContext)).startLoginAsync(stringExtra, stringExtra2, stringExtra3, immutableSet, newInstance);
        }
        handleCompletion(newInstance, intent, withTwoFactorHandling(startLoginAsync), new ResultHandler<Void>() {
            /* class com.oculus.auth.service.AuthManager.AnonymousClass7 */

            @Override // com.oculus.auth.service.AuthManager.ResultHandler
            public ImmutableMap<String, Object> provideExtras(Optional<Void> optional) {
                return ImmutableMap.A03(AuthLogger.EXTRA_OPTIONS, immutableSet.toString(), AuthLogger.EXTRA_WITH_ACCESS_TOKEN, Boolean.valueOf(z));
            }
        });
    }

    /* JADX DEBUG: Type inference failed for r0v1. Raw type applied. Possible types: X.0DC<TContinuationResult>, X.0DC<T> */
    private <T> AnonymousClass0DC<T> withTwoFactorHandling(AnonymousClass0DC<T> r2) {
        return (AnonymousClass0DC<TContinuationResult>) r2.A0A(new AnonymousClass0D4<T, AnonymousClass0DC<T>>() {
            /* class com.oculus.auth.service.AuthManager.AnonymousClass9 */

            @Override // X.AnonymousClass0D4
            public AnonymousClass0DC<T> then(AnonymousClass0DC<T> r2) throws Exception {
                if (AuthManager.isTwoFactorRequired(r2)) {
                    return AuthManager.this.fetchTwoFacMethodsForLoginAsync(r2);
                }
                return r2.A0K() ? AnonymousClass0DC.A03(r2.A0F()) : r2;
            }
        });
    }

    public void performAuthWithOculusEmailAndPasswordForAccountLinking(Intent intent) {
        AnonymousClass0QC r3 = this._UL_mInjectionContext;
        AuthAction newInstance = AuthAction.newInstance((Context) AnonymousClass0J2.A03(9, 294, r3), intent, (Clock) AnonymousClass0J2.A03(8, 354, r3));
        this.mThreadUtils.A05();
        String stringExtra = intent.getStringExtra("email");
        String stringExtra2 = intent.getStringExtra("password");
        if (stringExtra == null || stringExtra2 == null) {
            handleException(newInstance, intent, new IllegalArgumentException("Intent is missing an email or password"));
        } else {
            handleCompletion(newInstance, intent, withTwoFactorHandling(((LoginComponents) AnonymousClass0J2.A03(1, 478, this._UL_mInjectionContext)).loginAsync(stringExtra, stringExtra2, null)), new ResultHandler<Credentials>() {
                /* class com.oculus.auth.service.AuthManager.AnonymousClass8 */

                public Bundle marshal(Credentials credentials) {
                    Bundle bundle = new Bundle();
                    bundle.putString("user_id", credentials.mUserId);
                    bundle.putString("access_token", credentials.mAccessToken);
                    return bundle;
                }
            });
        }
    }

    public void performBackdoorLogin(Intent intent) {
        ImmutableSet<LoginComponents.Option> immutableSet;
        if (intent.getBooleanExtra(ServiceContract.EXTRA_SKIP_CLAIMING, false)) {
            immutableSet = new SingletonImmutableSet<>(LoginComponents.Option.SKIP_CLAIMING);
        } else {
            immutableSet = RegularImmutableSet.A05;
        }
        performLoginInternal(intent, immutableSet);
    }

    public void performDeviceScopedTokenRefresh(Intent intent) {
        AnonymousClass0QC r3 = this._UL_mInjectionContext;
        AuthAction newInstance = AuthAction.newInstance((Context) AnonymousClass0J2.A03(9, 294, r3), intent, (Clock) AnonymousClass0J2.A03(8, 354, r3));
        this.mThreadUtils.A05();
        handleCompletion(newInstance, intent, ((HorizonDsatHelper) AnonymousClass0J2.A03(6, 347, this._UL_mInjectionContext)).refreshTokenAsync(newInstance));
    }

    public void performEnsureDeviceOwnership(Intent intent) {
        AnonymousClass0QC r3 = this._UL_mInjectionContext;
        AuthAction newInstance = AuthAction.newInstance((Context) AnonymousClass0J2.A03(9, 294, r3), intent, (Clock) AnonymousClass0J2.A03(8, 354, r3));
        this.mThreadUtils.A05();
        handleCompletion(newInstance, intent, ((DeviceOwnershipHelper) AnonymousClass0J2.A04(23, this._UL_mInjectionContext)).ensureOwnershipAsync(newInstance));
    }

    public void performFetchCredentials(String str, String str2, final IAuthenticationCallback iAuthenticationCallback) {
        final AuthAction newInstance = AuthAction.newInstance(ServiceContract.ACTION_FETCH_APP_SCOPED_CREDENTIALS, str, (Clock) AnonymousClass0J2.A03(8, 354, this._UL_mInjectionContext));
        this.mThreadUtils.A05();
        ((AppScopedTokenHelper) AnonymousClass0J2.A03(5, 211, this._UL_mInjectionContext)).fetchAppScopedTokenAsync(str, str2, newInstance).A09(new AnonymousClass0D4<Optional<String>, Void>() {
            /* class com.oculus.auth.service.AuthManager.AnonymousClass3 */

            /* JADX DEBUG: Multi-variable search result rejected for r2v4, resolved type: com.oculus.auth.components.AuthLogger */
            /* JADX WARN: Multi-variable type inference failed */
            @Override // X.AnonymousClass0D4
            public Void then(AnonymousClass0DC<Optional<String>> r7) throws RemoteException {
                if (r7.A0K()) {
                    Exception A0F = r7.A0F();
                    AnonymousClass0NO.A0H(AuthManager.TAG, A0F, "performFetchCredentials error");
                    ((AuthLogger) AnonymousClass0J2.A03(7, 456, AuthManager.this._UL_mInjectionContext)).reportAction(newInstance, A0F, RegularImmutableMap.A03);
                    iAuthenticationCallback.onFailure(0, ErrorExtrasBuilder.fromException(A0F).build());
                    return null;
                }
                Bundle bundle = new Bundle();
                bundle.putString("access_token", r7.A0G().orNull());
                ((AuthLogger) AnonymousClass0J2.A03(7, 456, AuthManager.this._UL_mInjectionContext)).reportAction(newInstance, null, AuthManager.combine(null, bundle, false));
                iAuthenticationCallback.onSuccess(bundle);
                return null;
            }
        });
    }

    public void performFetchFbInfoForAccountLinking(Intent intent) {
        AnonymousClass0QC r3 = this._UL_mInjectionContext;
        AuthAction newInstance = AuthAction.newInstance((Context) AnonymousClass0J2.A03(9, 294, r3), intent, (Clock) AnonymousClass0J2.A03(8, 354, r3));
        this.mThreadUtils.A05();
        String stringExtra = intent.getStringExtra(ServiceContract.EXTRA_FB_ACCESS_TOKEN);
        if (stringExtra == null) {
            handleException(newInstance, intent, new IllegalArgumentException("Intent is missing FB access token"));
        } else {
            handleCompletion(newInstance, intent, ((LoginComponents) AnonymousClass0J2.A03(1, 478, this._UL_mInjectionContext)).startFetchFbInfoForAccountLinkingAsync(stringExtra, newInstance), new ResultHandler<LoginWithFbAuthResponse.AccountInfo>() {
                /* class com.oculus.auth.service.AuthManager.AnonymousClass11 */

                public Bundle marshal(LoginWithFbAuthResponse.AccountInfo accountInfo) {
                    Bundle bundle = new Bundle();
                    bundle.putString("name", accountInfo.name);
                    bundle.putString("email", accountInfo.email);
                    bundle.putString(ServiceContract.EXTRA_PROFILE_PIC_URI, accountInfo.profilePicUri);
                    return bundle;
                }
            });
        }
    }

    public void performFetchHorizonDeviceScopedCredentials(Intent intent) {
        AnonymousClass0QC r3 = this._UL_mInjectionContext;
        AuthAction newInstance = AuthAction.newInstance((Context) AnonymousClass0J2.A03(9, 294, r3), intent, (Clock) AnonymousClass0J2.A03(8, 354, r3));
        newInstance.mIsQuiet = true;
        this.mThreadUtils.A05();
        handleCompletion(newInstance, intent, ((HorizonDsatHelper) AnonymousClass0J2.A03(6, 347, this._UL_mInjectionContext)).fetchTokenAsync(newInstance), new ResultHandler<Optional<String>>() {
            /* class com.oculus.auth.service.AuthManager.AnonymousClass6 */

            /* JADX DEBUG: Type inference failed for r0v1. Raw type applied. Possible types: com.google.common.collect.ImmutableMap<java.lang.Object, java.lang.Object>, com.google.common.collect.ImmutableMap<java.lang.String, java.lang.Object> */
            @Override // com.oculus.auth.service.AuthManager.ResultHandler
            public ImmutableMap<String, Object> provideExtras(Optional<Optional<String>> optional) {
                if (optional.isPresent()) {
                    return ImmutableMap.A02(AuthLogger.EXTRA_LOGGED_IN, Boolean.valueOf(optional.get().isPresent()));
                }
                return RegularImmutableMap.A03;
            }

            public Bundle marshal(Optional<String> optional) {
                Bundle bundle = new Bundle();
                bundle.putString("access_token", optional.orNull());
                return bundle;
            }
        });
    }

    public void performLogin(Intent intent) {
        ImmutableSet<LoginComponents.Option> immutableSet;
        if (intent.getBooleanExtra("is_relogin", false)) {
            immutableSet = new SingletonImmutableSet<>(LoginComponents.Option.RELOGIN);
        } else {
            immutableSet = RegularImmutableSet.A05;
        }
        performLoginInternal(intent, immutableSet);
    }

    public void performLoginWithFbAuth(Intent intent) {
        AnonymousClass0QC r3 = this._UL_mInjectionContext;
        AuthAction newInstance = AuthAction.newInstance((Context) AnonymousClass0J2.A03(9, 294, r3), intent, (Clock) AnonymousClass0J2.A03(8, 354, r3));
        this.mThreadUtils.A05();
        String stringExtra = intent.getStringExtra(ServiceContract.EXTRA_FB_ACCESS_TOKEN);
        if (stringExtra == null) {
            handleException(newInstance, intent, new IllegalArgumentException("Intent is missing FB access token"));
            return;
        }
        handleCompletion(newInstance, intent, ((LoginComponents) AnonymousClass0J2.A03(1, 478, this._UL_mInjectionContext)).startLoginWithFbAuthAsync(stringExtra, intent.getBooleanExtra("is_relogin", false), newInstance));
    }

    public void performLogout(Intent intent) {
        final ResultReceiver resultReceiver;
        AnonymousClass0DC<Void> logoutAsync;
        this.mThreadUtils.A05();
        Bundle extras = intent.getExtras();
        if (extras != null) {
            resultReceiver = (ResultReceiver) extras.getParcelable("receiver");
            if (extras.getBoolean(ServiceContract.EXTRA_LOGOUT_WITHOUT_SERVER)) {
                logoutAsync = AnonymousClass0DC.A07(new Callable<Void>() {
                    /* class com.oculus.auth.service.AuthManager.AnonymousClass1 */

                    @Override // java.util.concurrent.Callable
                    public Void call() {
                        ((LogoutComponents) AnonymousClass0J2.A03(3, 37, AuthManager.this._UL_mInjectionContext)).clear();
                        return null;
                    }
                }, AnonymousClass0DC.A0A, null);
            }
            logoutAsync = ((LogoutComponents) AnonymousClass0J2.A03(3, 37, this._UL_mInjectionContext)).logoutAsync();
        } else {
            resultReceiver = null;
            logoutAsync = ((LogoutComponents) AnonymousClass0J2.A03(3, 37, this._UL_mInjectionContext)).logoutAsync();
        }
        try {
            logoutAsync.A0A(new AnonymousClass0D4<Void, AnonymousClass0DC<Void>>() {
                /* class com.oculus.auth.service.AuthManager.AnonymousClass2 */

                @Override // X.AnonymousClass0D4
                public AnonymousClass0DC<Void> then(AnonymousClass0DC<Void> r5) {
                    if (r5.A0K()) {
                        Exception A0F = r5.A0F();
                        AnonymousClass0NO.A0B(AuthManager.TAG, "Api error when calling logout.", A0F);
                        AuthManager.notifyReceiver(resultReceiver, 1, A0F);
                        return null;
                    }
                    AuthManager.notifyReceiver(resultReceiver, -1, null);
                    return null;
                }
            }).A0H();
        } catch (InterruptedException unused) {
        }
    }

    public void performResendLoginApprovalsCode(Intent intent) {
        String stringExtra = intent.getStringExtra("nonce");
        final ResultReceiver resultReceiver = (ResultReceiver) intent.getParcelableExtra("receiver");
        ((AuthMethods) AnonymousClass0J2.A03(2, 84, this._UL_mInjectionContext)).resendConfirmationCode(stringExtra, new ApiCallback<ResendConfirmationCodeResponse>() {
            /* class com.oculus.auth.service.AuthManager.AnonymousClass12 */

            @Override // com.oculus.http.core.base.ApiCallback
            public void onError(ApiError apiError) {
                AuthManager.notifyReceiver(resultReceiver, 1, apiError);
            }

            public void onResponse(ResendConfirmationCodeResponse resendConfirmationCodeResponse) {
                ResultReceiver resultReceiver;
                int i;
                if (resendConfirmationCodeResponse.success) {
                    resultReceiver = resultReceiver;
                    i = -1;
                } else {
                    resultReceiver = resultReceiver;
                    i = 1;
                }
                AuthManager.notifyReceiver(resultReceiver, i, null);
            }
        });
    }

    public void performSendTwoFactorCode(Intent intent) {
        AnonymousClass0QC r3 = this._UL_mInjectionContext;
        AuthAction newInstance = AuthAction.newInstance((Context) AnonymousClass0J2.A03(9, 294, r3), intent, (Clock) AnonymousClass0J2.A03(8, 354, r3));
        this.mThreadUtils.A05();
        String stringExtra = intent.getStringExtra("nonce");
        String stringExtra2 = intent.getStringExtra(ServiceContract.EXTRA_TWO_FACTOR_METHOD_ID);
        if (Strings.isNullOrEmpty(stringExtra2)) {
            handleException(newInstance, intent, new IllegalArgumentException("Intent is missing method ID"));
        } else {
            handleCompletion(newInstance, intent, ((LoginComponents) AnonymousClass0J2.A03(1, 478, this._UL_mInjectionContext)).sendTwoFactorCode(stringExtra, stringExtra2));
        }
    }

    public void performVerifyLogin(Intent intent) {
        AnonymousClass0QC r3 = this._UL_mInjectionContext;
        AuthAction newInstance = AuthAction.newInstance((Context) AnonymousClass0J2.A03(9, 294, r3), intent, (Clock) AnonymousClass0J2.A03(8, 354, r3));
        this.mThreadUtils.A05();
        handleCompletion(newInstance, intent, ((LoginComponents) AnonymousClass0J2.A03(1, 478, this._UL_mInjectionContext)).startVerifyLoginAsync(intent.getStringExtra("nonce"), intent.getStringExtra("pin"), intent.getStringExtra(ServiceContract.EXTRA_TWO_FACTOR_METHOD_ID), intent.getStringExtra(ServiceContract.EXTRA_FB_ACCESS_TOKEN), intent.getBooleanExtra("is_relogin", false)));
    }

    public void performVerifyLoginForAccountLinking(Intent intent) {
        AnonymousClass0QC r3 = this._UL_mInjectionContext;
        AuthAction newInstance = AuthAction.newInstance((Context) AnonymousClass0J2.A03(9, 294, r3), intent, (Clock) AnonymousClass0J2.A03(8, 354, r3));
        this.mThreadUtils.A05();
        handleCompletion(newInstance, intent, ((LoginComponents) AnonymousClass0J2.A03(1, 478, this._UL_mInjectionContext)).verifyLoginAsync(intent.getStringExtra("nonce"), intent.getStringExtra("pin"), intent.getStringExtra(ServiceContract.EXTRA_TWO_FACTOR_METHOD_ID), intent.getStringExtra(ServiceContract.EXTRA_FB_ACCESS_TOKEN)), new ResultHandler<Credentials>() {
            /* class com.oculus.auth.service.AuthManager.AnonymousClass13 */

            public Bundle marshal(Credentials credentials) {
                Bundle bundle = new Bundle();
                bundle.putString("user_id", credentials.mUserId);
                bundle.putString("access_token", credentials.mAccessToken);
                return bundle;
            }
        });
    }

    public void performVerifyPin(final Intent intent) {
        final ResultReceiver resultReceiver = (ResultReceiver) intent.getParcelableExtra("receiver");
        intent.putExtra("receiver", new ResultReceiver(null) {
            /* class com.oculus.auth.service.AuthManager.AnonymousClass14 */

            public void onReceiveResult(int i, Bundle bundle) {
                if (i == -1) {
                    AuthManager.notifyReceiver(resultReceiver, -1, null);
                } else if (i != 1) {
                    AnonymousClass0NO.A0E(AuthManager.TAG, "performVerifyPin: Unknown result code %d", Integer.valueOf(i));
                } else if (bundle == null || bundle.getInt("error_code") != -2) {
                    ResultReceiver resultReceiver = resultReceiver;
                    if (resultReceiver != null) {
                        resultReceiver.send(i, bundle);
                    }
                } else {
                    intent.putExtra("nonce", bundle.getString("nonce"));
                    intent.putExtra("receiver", resultReceiver);
                    AuthManager.this.performVerifyLogin(intent);
                }
            }
        });
        performLogin(intent);
    }

    static {
        ImmutableMap.Builder A01 = ImmutableMap.A01();
        A01.put(Integer.valueOf((int) ApiErrorCodes.ERROR_CODE_RATE_LIMITED), AuthService.AuthResult.RATE_LIMITED);
        A01.put(190, AuthService.AuthResult.INVALID_CREDENTIALS);
        ERROR_CODE_AUTH_RESULTS_MAP = A01.build();
        ImmutableMap.Builder A012 = ImmutableMap.A01();
        A012.put(Integer.valueOf((int) ApiErrorCodes.ERROR_SUBCODE_LOGIN_APPROVALS_ANOMALOUS_LOGIN), AuthService.AuthResult.ANOMALOUS_LOGIN);
        A012.put(Integer.valueOf((int) ApiErrorCodes.ERROR_SUBCODE_LOGIN_APPROVALS_LIMITED_LOGIN), AuthService.AuthResult.LIMITED_LOGIN);
        A012.put(Integer.valueOf((int) ApiErrorCodes.ERROR_SUBCODE_FAILED_AUTHENTICATION_WRONG_PASSWORD), AuthService.AuthResult.INVALID_CREDENTIALS);
        A012.put(Integer.valueOf((int) ApiErrorCodes.ERROR_SUBCODE_TWO_FACTOR_LOGIN_REQUIRED), AuthService.AuthResult.TWO_FACTOR_LOGIN_REQUIRED);
        A012.put(Integer.valueOf((int) ApiErrorCodes.ERROR_SUBCODE_LOGIN_APPROVALS_NOT_IN_CHECKPOINT), AuthService.AuthResult.LOGIN_APPROVALS_NOT_IN_CHECKPOINT);
        A012.put(Integer.valueOf((int) ApiErrorCodes.ERROR_SUBCODE_LOGIN_APPROVALS_RATE_LIMITED), AuthService.AuthResult.LOGIN_APPROVALS_RATE_LIMITED);
        A012.put(Integer.valueOf((int) ApiErrorCodes.ERROR_SUBCODE_LOGIN_APPROVALS_INVALID_CODE), AuthService.AuthResult.LOGIN_APPROVALS_INVALID_CODE);
        ERROR_SUBCODE_AUTH_RESULTS_MAP = A012.build();
    }

    @Inject
    public AuthManager(AbstractC06640p5 r3) {
        this._UL_mInjectionContext = new AnonymousClass0QC(11, r3);
        this.mThreadUtils = ThreadUtils.A01(r3);
    }

    /* JADX DEBUG: Type inference failed for r0v8. Raw type applied. Possible types: X.0DC<TContinuationResult>, X.0DC<T> */
    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private <T> AnonymousClass0DC<T> fetchTwoFacMethodsForLoginAsync(AnonymousClass0DC<T> r7) throws Exception {
        final ApiError apiError;
        Exception A0F = r7.A0F();
        if (A0F instanceof ApiError) {
            apiError = (ApiError) A0F;
        } else {
            apiError = null;
        }
        final String nonce = getNonce(apiError);
        if (apiError == null || TextUtils.isEmpty(nonce)) {
            throw new UnexpectedResponseError();
        }
        ApiTaskCallback apiTaskCallback = new ApiTaskCallback();
        ((AuthMethods) AnonymousClass0J2.A03(2, 84, this._UL_mInjectionContext)).fetchTwoFactorMethods(nonce, apiTaskCallback);
        return (AnonymousClass0DC<TContinuationResult>) apiTaskCallback.mCompletionSource.A00.A0B(new AnonymousClass0D4<TwoFactorMethodsResponse, T>() {
            /* class com.oculus.auth.service.AuthManager.AnonymousClass10 */

            @Override // X.AnonymousClass0D4
            public T then(AnonymousClass0DC<TwoFactorMethodsResponse> r5) throws Exception {
                throw new TwoFactorLoginRequiredError(apiError, nonce, r5.A0G().methods);
            }
        });
    }

    private void handleResult(AuthAction authAction, Intent intent, @Nullable Exception exc, Bundle bundle, ImmutableMap<String, Object> immutableMap) {
        notifyReceiverIfAny(intent, exc, bundle);
        ((AuthLogger) AnonymousClass0J2.A03(7, 456, this._UL_mInjectionContext)).reportAction(authAction, exc, combine(immutableMap, bundle, intent.getBooleanExtra("is_relogin", false)));
    }

    public static boolean isTwoFactorRequired(AnonymousClass0DC r3) {
        if (!r3.A0K() || getAuthResultFromException(r3.A0F()).getIntCode() != -8) {
            return false;
        }
        return true;
    }

    public void performQueryLogin(Intent intent) {
        ResultReceiver resultReceiver;
        Bundle extras = intent.getExtras();
        if (extras != null && (resultReceiver = (ResultReceiver) extras.getParcelable("receiver")) != null) {
            Bundle credentialsBundle = getCredentialsBundle(false);
            int i = 1;
            if (credentialsBundle == null) {
                credentialsBundle = new Bundle();
                credentialsBundle.putInt("error_code", AuthService.AuthResult.INVALID_CREDENTIALS.getIntCode());
                credentialsBundle.putString("email", OVRProfile.A00((OVRProfile) AnonymousClass0J2.A03(10, 263, this._UL_mInjectionContext)).email);
                credentialsBundle.putString("facebook_email", OVRProfile.A00((OVRProfile) AnonymousClass0J2.A03(10, 263, this._UL_mInjectionContext)).facebook_email);
                credentialsBundle.putString("user_id", OVRProfile.A00((OVRProfile) AnonymousClass0J2.A03(10, 263, this._UL_mInjectionContext)).user_id);
                credentialsBundle.putSerializable("result", false);
            } else {
                credentialsBundle.putSerializable("result", true);
                i = -1;
            }
            resultReceiver.send(i, credentialsBundle);
        }
    }

    private void handleCompletion(AuthAction authAction, Intent intent, AnonymousClass0DC<Void> r4) {
        handleCompletion(authAction, intent, r4, DEFAULT_RESULT_HANDLER);
    }

    private <T> void handleCompletion(AuthAction authAction, Intent intent, AnonymousClass0DC<T> r12, ResultHandler<T> resultHandler) {
        Optional<T> present;
        try {
            r12.A0H();
            if (r12.A0K()) {
                handleException(authAction, intent, r12.A0F(), resultHandler);
                return;
            }
            T A0G = r12.A0G();
            Bundle marshal = resultHandler.marshal(A0G);
            if (A0G == null) {
                present = Absent.INSTANCE;
            } else {
                present = new Present<>(A0G);
            }
            handleResult(authAction, intent, null, marshal, resultHandler.provideExtras(present));
        } catch (InterruptedException e) {
            AnonymousClass0NO.A0K(TAG, e, "Interrupted while waiting for action completion: %s", authAction.mName);
            Thread.currentThread().interrupt();
        }
    }

    private void handleException(AuthAction authAction, Intent intent, Exception exc) {
        handleException(authAction, intent, exc, DEFAULT_RESULT_HANDLER);
    }

    private <T> void handleException(AuthAction authAction, Intent intent, Exception exc, ResultHandler<T> resultHandler) {
        handleResult(authAction, intent, exc, ErrorExtrasBuilder.fromException(exc).build(), resultHandler.provideExtras(Absent.INSTANCE));
    }

    public static void notifyReceiver(@Nullable ResultReceiver resultReceiver, int i) {
        notifyReceiver(resultReceiver, i, null);
    }

    public static void notifyReceiver(@Nullable ResultReceiver resultReceiver, int i, @Nullable Exception exc) {
        if (resultReceiver != null) {
            resultReceiver.send(i, ErrorExtrasBuilder.fromException(exc).build());
        }
    }

    @Nullable
    public Bundle getCredentialsBundle() {
        return getCredentialsBundle(false);
    }

    @Nullable
    public Bundle getCredentialsBundle(boolean z) {
        String str;
        Credentials credentials = ((CredentialsManager) AnonymousClass0J2.A03(0, 199, this._UL_mInjectionContext)).getCredentials();
        if (credentials == null || (z && credentials.mDeviceScopedAccessToken == null)) {
            return null;
        }
        Bundle bundle = new Bundle();
        bundle.putString("user_id", credentials.mUserId);
        if (z) {
            str = credentials.mDeviceScopedAccessToken.mValue;
        } else {
            str = credentials.mAccessToken;
        }
        bundle.putString("access_token", str);
        return bundle;
    }

    public void performFetchDeviceScopedCredentials(Intent intent) {
        AnonymousClass0QC r3 = this._UL_mInjectionContext;
        AuthAction newInstance = AuthAction.newInstance((Context) AnonymousClass0J2.A03(9, 294, r3), intent, (Clock) AnonymousClass0J2.A03(8, 354, r3));
        newInstance.mIsQuiet = true;
        this.mThreadUtils.A05();
        String extractCallingPackage = extractCallingPackage(intent);
        if (extractCallingPackage == null) {
            handleException(newInstance, intent, new IllegalArgumentException("Intent is missing calling package info"));
        } else {
            handleCompletion(newInstance, intent, ((DsatHelper) AnonymousClass0J2.A03(4, 188, this._UL_mInjectionContext)).fetchDsatAsync(extractCallingPackage, newInstance), new ResultHandler<Optional<String>>() {
                /* class com.oculus.auth.service.AuthManager.AnonymousClass5 */

                /* JADX DEBUG: Type inference failed for r0v1. Raw type applied. Possible types: com.google.common.collect.ImmutableMap<java.lang.Object, java.lang.Object>, com.google.common.collect.ImmutableMap<java.lang.String, java.lang.Object> */
                @Override // com.oculus.auth.service.AuthManager.ResultHandler
                public ImmutableMap<String, Object> provideExtras(Optional<Optional<String>> optional) {
                    if (optional.isPresent()) {
                        return ImmutableMap.A02(AuthLogger.EXTRA_LOGGED_IN, Boolean.valueOf(optional.get().isPresent()));
                    }
                    return RegularImmutableMap.A03;
                }

                public Bundle marshal(Optional<String> optional) {
                    Bundle bundle = new Bundle();
                    bundle.putString("access_token", optional.orNull());
                    return bundle;
                }
            });
        }
    }

    public void performFetchDeviceScopedCredentials(String str, String str2, Boolean bool, final IAuthenticationCallback iAuthenticationCallback) {
        final AuthAction newInstance = AuthAction.newInstance(ServiceContract.ACTION_FETCH_DEVICE_SCOPED_CREDENTIALS, str, (Clock) AnonymousClass0J2.A03(8, 354, this._UL_mInjectionContext));
        this.mThreadUtils.A05();
        ((DsatHelper) AnonymousClass0J2.A03(4, 188, this._UL_mInjectionContext)).fetchDsatAsync(str, str2, bool.booleanValue(), newInstance).A09(new AnonymousClass0D4<Optional<String>, Void>() {
            /* class com.oculus.auth.service.AuthManager.AnonymousClass4 */

            /* JADX DEBUG: Multi-variable search result rejected for r2v4, resolved type: com.oculus.auth.components.AuthLogger */
            /* JADX WARN: Multi-variable type inference failed */
            @Override // X.AnonymousClass0D4
            public Void then(AnonymousClass0DC<Optional<String>> r7) throws RemoteException {
                if (r7.A0K()) {
                    Exception A0F = r7.A0F();
                    AnonymousClass0NO.A0H(AuthManager.TAG, A0F, "performBlockingFetchDeviceScopedCredentials error");
                    ((AuthLogger) AnonymousClass0J2.A03(7, 456, AuthManager.this._UL_mInjectionContext)).reportAction(newInstance, A0F, RegularImmutableMap.A03);
                    iAuthenticationCallback.onFailure(0, ErrorExtrasBuilder.fromException(A0F).build());
                    return null;
                }
                Bundle bundle = new Bundle();
                bundle.putString("access_token", r7.A0G().orNull());
                ((AuthLogger) AnonymousClass0J2.A03(7, 456, AuthManager.this._UL_mInjectionContext)).reportAction(newInstance, null, AuthManager.combine(null, bundle, false));
                iAuthenticationCallback.onSuccess(bundle);
                return null;
            }
        });
    }
}
