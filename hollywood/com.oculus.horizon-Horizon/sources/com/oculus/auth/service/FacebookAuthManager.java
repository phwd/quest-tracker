package com.oculus.auth.service;

import X.AbstractC06640p5;
import X.AnonymousClass0D4;
import X.AnonymousClass0DC;
import X.AnonymousClass0J2;
import X.AnonymousClass0NO;
import X.AnonymousClass0QC;
import X.AnonymousClass0p1;
import X.AnonymousClass117;
import X.C003008y;
import X.C01020Iw;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.ResultReceiver;
import androidx.annotation.VisibleForTesting;
import com.facebook.AccessToken;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Eager;
import com.facebook.ultralight.Inject;
import com.google.common.base.Function;
import com.google.common.collect.ImmutableMap;
import com.oculus.auth.api.CheckApprovedMachineResponse;
import com.oculus.auth.api.FBAuthMethods;
import com.oculus.auth.api.FBAuthRequest;
import com.oculus.auth.api.FBLoginResponse;
import com.oculus.auth.components.AuthAction;
import com.oculus.auth.components.AuthLogger;
import com.oculus.auth.components.FBLoginComponents;
import com.oculus.auth.service.AuthManager;
import com.oculus.auth.service.contract.ServiceContract;
import com.oculus.auth.service.passwordencryption.PasswordEncryptionHelper;
import com.oculus.auth.service.passwordencryption.PasswordEncryptionLogger;
import com.oculus.horizon.api.fbconnect.FBFriendPolicy;
import com.oculus.horizon.fbconnect.FBConnectHelper;
import com.oculus.horizon.fbconnect.FacebookData;
import com.oculus.http.core.base.ApiError;
import com.oculus.http.core.base.ApiException;
import com.oculus.time.Clock;
import com.oculus.util.constants.OculusConstants;
import com.oculus.util.thread.ThreadUtils;
import javax.annotation.Nullable;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_auth_service_passwordencryption_PasswordEncryptionHelper_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_auth_components_AuthLogger_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_util_thread_ThreadUtils_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_auth_api_FBAuthMethods_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_auth_components_FBLoginComponents_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_horizon_fbconnect_FBConnectHelper_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_auth_service_passwordencryption_PasswordEncryptionLogger_ULSEP_BINDING_ID", "_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID"})
public class FacebookAuthManager {
    public static final Function<Integer, Integer> APPROVAL_CODE_VERIFICATION_ERROR_CODE_MAPPER = new Function<Integer, Integer>() {
        /* class com.oculus.auth.service.FacebookAuthManager.AnonymousClass2 */

        public Integer apply(@Nullable Integer num) {
            if (num != null) {
                int i = -10;
                if (num.intValue() != 401) {
                    i = -7;
                }
                return Integer.valueOf(i);
            }
            throw null;
        }
    };
    public static final Function<Integer, Integer> LOGIN_ERROR_CODE_MAPPER = new Function<Integer, Integer>() {
        /* class com.oculus.auth.service.FacebookAuthManager.AnonymousClass1 */

        public Integer apply(@Nullable Integer num) {
            int i;
            if (num != null) {
                int intValue = num.intValue();
                if (intValue == 400 || intValue == 401) {
                    i = -1;
                } else if (intValue == 406) {
                    i = -8;
                } else if (intValue != 418) {
                    i = -5;
                    if (intValue != 613) {
                        i = -7;
                    }
                } else {
                    i = -15;
                }
                return Integer.valueOf(i);
            }
            throw null;
        }
    };
    public static final Function<Integer, Integer> MACHINE_APPROVAL_LOGIN_ERROR_CODE_MAPPER = new Function<Integer, Integer>() {
        /* class com.oculus.auth.service.FacebookAuthManager.AnonymousClass3 */

        public Integer apply(@Nullable Integer num) {
            return -7;
        }

        /* Return type fixed from 'java.lang.Object' to match base method */
        /* JADX DEBUG: Method arguments types fixed to match base method, original types: [java.lang.Object] */
        @Override // com.google.common.base.Function
        public /* bridge */ /* synthetic */ Integer apply(@Nullable Integer num) {
            return -7;
        }
    };
    public static final String TAG = "FacebookAuthManager";
    public AnonymousClass0QC _UL_mInjectionContext;
    @Inject
    @Eager
    public final FBConnectHelper mFBConnectHelper;

    @AutoGeneratedAccessMethod
    public static final AnonymousClass0p1 _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_auth_service_FacebookAuthManager_ULGT__ULSEP_ACCESS_METHOD(AbstractC06640p5 r2) {
        return new C003008y(561, r2);
    }

    @AutoGeneratedAccessMethod
    public static final FacebookAuthManager _UL__ULSEP_com_oculus_auth_service_FacebookAuthManager_ULSEP_ACCESS_METHOD(AbstractC06640p5 r1) {
        return (FacebookAuthManager) AnonymousClass117.A00(561, r1);
    }

    @AutoGeneratedFactoryMethod
    public static final FacebookAuthManager _UL__ULSEP_com_oculus_auth_service_FacebookAuthManager_ULSEP_FACTORY_METHOD(AbstractC06640p5 r1) {
        return new FacebookAuthManager(r1);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_auth_service_FacebookAuthManager_ULGT__ULSEP_ACCESS_METHOD(AbstractC06640p5 r2) {
        return new C01020Iw(561, r2);
    }

    private AnonymousClass0DC<FBLoginResponse> followUpIfNecessaryAsync(AnonymousClass0DC<FBLoginResponse> r5, Intent intent) {
        final String stringExtra = intent.getStringExtra(ServiceContract.EXTRA_FOLLOW_UP);
        final String stringExtra2 = intent.getStringExtra(ServiceContract.EXTRA_FB_LINK_TOS_VERSION);
        final String stringExtra3 = intent.getStringExtra(ServiceContract.EXTRA_FB_LINK_LOGGING_JSON);
        return r5.A0D(new AnonymousClass0D4<FBLoginResponse, AnonymousClass0DC<FBLoginResponse>>() {
            /* class com.oculus.auth.service.FacebookAuthManager.AnonymousClass5 */

            @Override // X.AnonymousClass0D4
            public AnonymousClass0DC<FBLoginResponse> then(AnonymousClass0DC<FBLoginResponse> r5) {
                FBLoginResponse A0G = r5.A0G();
                return (A0G.errorCode != null || !"link".equals(stringExtra)) ? r5 : ((FBLoginComponents) AnonymousClass0J2.A03(4, 216, FacebookAuthManager.this._UL_mInjectionContext)).linkAccountAsync(A0G, stringExtra2, stringExtra3);
            }
        }, AnonymousClass0DC.A0A);
    }

    public static void notifyReceiver(@Nullable ResultReceiver resultReceiver, int i, Bundle bundle) {
        if (resultReceiver != null) {
            resultReceiver.send(i, bundle);
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:5:0x0013, code lost:
        if (r1 != false) goto L_0x0015;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public static void notifyReceiverIfAny(android.content.Intent r2, @javax.annotation.Nullable java.lang.Exception r3, android.os.Bundle r4) {
        /*
            java.lang.String r0 = "receiver"
            android.os.Parcelable r2 = r2.getParcelableExtra(r0)
            android.os.ResultReceiver r2 = (android.os.ResultReceiver) r2
            if (r2 == 0) goto L_0x0019
            java.lang.String r0 = "error_code"
            boolean r1 = r4.containsKey(r0)
            if (r3 != 0) goto L_0x0015
            r0 = -1
            if (r1 == 0) goto L_0x0016
        L_0x0015:
            r0 = 1
        L_0x0016:
            r2.send(r0, r4)
        L_0x0019:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.oculus.auth.service.FacebookAuthManager.notifyReceiverIfAny(android.content.Intent, java.lang.Exception, android.os.Bundle):void");
    }

    public static void notifyReceiverWithError(@Nullable ResultReceiver resultReceiver, @Nullable Exception exc) {
        if (resultReceiver != null) {
            resultReceiver.send(1, AuthManager.ErrorExtrasBuilder.fromException(exc).build());
        }
    }

    public static ImmutableMap<String, ?> toMap(Bundle bundle, boolean z) {
        ImmutableMap.Builder builder = new ImmutableMap.Builder();
        if (bundle.containsKey("error_code")) {
            builder.put("error_code", Integer.valueOf(bundle.getInt("error_code")));
        }
        String string = bundle.getString("error_title");
        if (string != null) {
            builder.put("error_title", string);
        }
        String string2 = bundle.getString("error_message");
        if (string2 != null) {
            builder.put("error_message", string2);
        }
        builder.put("is_relogin", Boolean.valueOf(z));
        return builder.build();
    }

    public void performFBMachineApprovalLogin(Intent intent) {
        AnonymousClass0QC r3 = this._UL_mInjectionContext;
        AuthAction newInstance = AuthAction.newInstance((Context) AnonymousClass0J2.A03(6, 294, r3), intent, (Clock) AnonymousClass0J2.A03(0, 354, r3));
        ((ThreadUtils) AnonymousClass0J2.A03(2, 583, this._UL_mInjectionContext)).A05();
        String stringExtra = intent.getStringExtra("uid");
        String stringExtra2 = intent.getStringExtra(ServiceContract.EXTRA_AUTH_TOKEN);
        String stringExtra3 = intent.getStringExtra("machine_id");
        FBAuthRequest fBAuthRequest = new FBAuthRequest();
        fBAuthRequest.email = stringExtra;
        fBAuthRequest.password = stringExtra2;
        fBAuthRequest.machineId = stringExtra3;
        fBAuthRequest.credentialsType = FBAuthRequest.CREDENTIAL_TYPE_TRANSIENT_TOKEN;
        handleCompletion(newInstance, intent, toBundleTask(followUpIfNecessaryAsync(((FBLoginComponents) AnonymousClass0J2.A03(4, 216, this._UL_mInjectionContext)).loginRequestAsync(fBAuthRequest), intent), MACHINE_APPROVAL_LOGIN_ERROR_CODE_MAPPER));
    }

    public void performFBPollForApproval(Intent intent) {
        AnonymousClass0QC r3 = this._UL_mInjectionContext;
        AuthAction newInstance = AuthAction.newInstance((Context) AnonymousClass0J2.A03(6, 294, r3), intent, (Clock) AnonymousClass0J2.A03(0, 354, r3));
        ((ThreadUtils) AnonymousClass0J2.A03(2, 583, this._UL_mInjectionContext)).A05();
        String stringExtra = intent.getStringExtra("uid");
        String stringExtra2 = intent.getStringExtra("machine_id");
        FBAuthRequest fBAuthRequest = new FBAuthRequest();
        fBAuthRequest.uid = stringExtra;
        fBAuthRequest.machineId = stringExtra2;
        handleCompletion(newInstance, intent, toBundleTask(((FBLoginComponents) AnonymousClass0J2.A03(4, 216, this._UL_mInjectionContext)).checkApprovedAsync(fBAuthRequest)));
    }

    public void performFBVerifyLoginApprovalCode(Intent intent) {
        AnonymousClass0QC r3 = this._UL_mInjectionContext;
        AuthAction newInstance = AuthAction.newInstance((Context) AnonymousClass0J2.A03(6, 294, r3), intent, (Clock) AnonymousClass0J2.A03(0, 354, r3));
        ((ThreadUtils) AnonymousClass0J2.A03(2, 583, this._UL_mInjectionContext)).A05();
        String stringExtra = intent.getStringExtra("email");
        String stringExtra2 = intent.getStringExtra("pin");
        String stringExtra3 = intent.getStringExtra("uid");
        String stringExtra4 = intent.getStringExtra("first_factor");
        String stringExtra5 = intent.getStringExtra("machine_id");
        FBAuthRequest fBAuthRequest = new FBAuthRequest();
        fBAuthRequest.email = stringExtra;
        fBAuthRequest.password = stringExtra2;
        fBAuthRequest.uid = stringExtra3;
        fBAuthRequest.firstFactor = stringExtra4;
        fBAuthRequest.machineId = stringExtra5;
        fBAuthRequest.credentialsType = FBAuthRequest.CREDENTIAL_TYPE_TWO_FACTOR;
        handleCompletion(newInstance, intent, toBundleTask(followUpIfNecessaryAsync(((FBLoginComponents) AnonymousClass0J2.A03(4, 216, this._UL_mInjectionContext)).loginRequestAsync(fBAuthRequest), intent), APPROVAL_CODE_VERIFICATION_ERROR_CODE_MAPPER));
    }

    @Inject
    public FacebookAuthManager(AbstractC06640p5 r3) {
        this._UL_mInjectionContext = new AnonymousClass0QC(7, r3);
        this.mFBConnectHelper = FBConnectHelper._UL__ULSEP_com_oculus_horizon_fbconnect_FBConnectHelper_ULSEP_ACCESS_METHOD(r3);
    }

    public static /* synthetic */ String access$200() {
        return TAG;
    }

    public void performFBResendSms(Intent intent) {
        Bundle extras = intent.getExtras();
        if (extras == null) {
            AnonymousClass0NO.A0E(TAG, "performFBResendSms: Intent is missing extras: %s", intent);
            return;
        }
        ResultReceiver resultReceiver = (ResultReceiver) extras.getParcelable("receiver");
        String string = extras.getString("uid");
        String string2 = extras.getString("first_factor");
        if (string == null) {
            AnonymousClass0NO.A08(TAG, "Intent is missing the user id param");
            notifyReceiverWithError(resultReceiver, new IllegalArgumentException("Intent is missing the user id param"));
            return;
        }
        try {
            FBAuthRequest fBAuthRequest = new FBAuthRequest();
            fBAuthRequest.uid = string;
            fBAuthRequest.firstFactor = string2;
            ((FBAuthMethods) AnonymousClass0J2.A03(3, 180, this._UL_mInjectionContext)).resendSms(fBAuthRequest).size();
            notifyReceiver(resultReceiver, -1, new Bundle());
        } catch (ApiException e) {
            notifyReceiverWithError(resultReceiver, e);
        }
    }

    private void handleCompletion(AuthAction authAction, Intent intent, AnonymousClass0DC<Bundle> r8) {
        try {
            r8.A0H();
            if (r8.A0K()) {
                handleCompletion(authAction, intent, r8.A0F());
            } else {
                handleCompletion(authAction, intent, null, r8.A0G());
            }
        } catch (InterruptedException e) {
            AnonymousClass0NO.A0K(TAG, e, "Interrupted while waiting for action completion: %s", authAction.mName);
            Thread.currentThread().interrupt();
        }
    }

    private void handleCompletion(AuthAction authAction, Intent intent, @Nullable Exception exc) {
        handleCompletion(authAction, intent, exc, AuthManager.ErrorExtrasBuilder.fromException(exc).build());
    }

    private void handleCompletion(AuthAction authAction, Intent intent, @Nullable Exception exc, Bundle bundle) {
        notifyReceiverIfAny(intent, exc, bundle);
        ((AuthLogger) AnonymousClass0J2.A03(1, 456, this._UL_mInjectionContext)).reportAction(authAction, exc, toMap(bundle, intent.getBooleanExtra("is_relogin", false)));
    }

    private AnonymousClass0DC<Bundle> toBundleTask(AnonymousClass0DC<CheckApprovedMachineResponse> r2) {
        return r2.A0B(new AnonymousClass0D4<CheckApprovedMachineResponse, Bundle>() {
            /* class com.oculus.auth.service.FacebookAuthManager.AnonymousClass8 */

            @Override // X.AnonymousClass0D4
            public Bundle then(AnonymousClass0DC<CheckApprovedMachineResponse> r2) {
                return r2.A0G().getResultBundle();
            }
        });
    }

    private AnonymousClass0DC<Bundle> toBundleTask(AnonymousClass0DC<FBLoginResponse> r2, @Nullable final Function<Integer, Integer> function) {
        return r2.A0B(new AnonymousClass0D4<FBLoginResponse, Bundle>() {
            /* class com.oculus.auth.service.FacebookAuthManager.AnonymousClass7 */

            @Override // X.AnonymousClass0D4
            public Bundle then(AnonymousClass0DC<FBLoginResponse> r3) {
                return r3.A0G().getResultBundle(function);
            }
        });
    }

    public void performFBLinkAccount(Intent intent) {
        String str;
        Bundle extras = intent.getExtras();
        if (extras == null) {
            AnonymousClass0NO.A0E(TAG, "performFBLinkAccount: Intent is missing extras: %s", intent);
            return;
        }
        ResultReceiver resultReceiver = (ResultReceiver) extras.getParcelable("receiver");
        String string = extras.getString("uid");
        String string2 = extras.getString("access_token");
        String string3 = extras.getString(ServiceContract.EXTRA_FB_LINK_TOS_VERSION);
        String string4 = extras.getString(ServiceContract.EXTRA_FB_LINK_LOGGING_JSON);
        if (string == null) {
            str = "Intent is missing uid";
        } else if (string2 == null) {
            str = "Intent is missing access token";
        } else {
            performFBLinkAccount(resultReceiver, string, string2, string3, string4);
            return;
        }
        notifyReceiverWithError(resultReceiver, new IllegalArgumentException(str));
    }

    @VisibleForTesting
    @Deprecated
    public void performFBLinkAccount(@Nullable final ResultReceiver resultReceiver, String str, String str2, @Nullable String str3, @Nullable String str4) {
        AccessToken accessToken = new AccessToken(str2, OculusConstants.OCULUS_APP_ID, str, null, null, null, null, null);
        FBConnectHelper fBConnectHelper = this.mFBConnectHelper;
        fBConnectHelper.mFBConnectDelegate = new FBConnectHelper.FBConnectDelegate() {
            /* class com.oculus.auth.service.FacebookAuthManager.AnonymousClass6 */

            @Override // com.oculus.horizon.fbconnect.FBConnectHelper.FBConnectDelegate
            public void onFBAccountUnlinkError(@Nullable ApiError apiError) {
            }

            @Override // com.oculus.horizon.fbconnect.FBConnectHelper.FBConnectDelegate
            public void onFBAccountUnlinkSuccess() {
            }

            @Override // com.oculus.horizon.fbconnect.FBConnectHelper.FBConnectDelegate
            public void onFBAuthCancelled() {
            }

            @Override // com.oculus.horizon.fbconnect.FBConnectHelper.FBConnectDelegate
            public void onFBAuthSuccess(AccessToken accessToken) {
            }

            @Override // com.oculus.horizon.fbconnect.FBConnectHelper.FBConnectDelegate
            public void onFBDataFetchComplete(@Nullable FacebookData facebookData) {
            }

            @Override // com.oculus.horizon.fbconnect.FBConnectHelper.FBConnectDelegate
            public void onFBSyncFriendsError(@Nullable ApiError apiError) {
            }

            @Override // com.oculus.horizon.fbconnect.FBConnectHelper.FBConnectDelegate
            public void onFBSyncFriendsSuccess() {
            }

            @Override // com.oculus.horizon.fbconnect.FBConnectHelper.FBConnectDelegate
            public void onFBUnsyncFriendsError(@Nullable ApiError apiError) {
            }

            @Override // com.oculus.horizon.fbconnect.FBConnectHelper.FBConnectDelegate
            public void onFBUnsyncFriendsSuccess() {
            }

            @Override // com.oculus.horizon.fbconnect.FBConnectHelper.FBConnectDelegate
            public void onFBAccountLinkError(@Nullable ApiError apiError) {
                FacebookAuthManager.notifyReceiverWithError(resultReceiver, apiError);
            }

            @Override // com.oculus.horizon.fbconnect.FBConnectHelper.FBConnectDelegate
            public void onFBAccountLinkSuccess() {
                FacebookAuthManager.notifyReceiver(resultReceiver, -1, new Bundle());
            }

            @Override // com.oculus.horizon.fbconnect.FBConnectHelper.FBConnectDelegate
            public void onFBAuthError(@Nullable ApiError apiError) {
                onFBAccountLinkError(apiError);
            }
        };
        fBConnectHelper.registerFBConnectAccount(accessToken, FBFriendPolicy.IGNORE_FRIEND, str3, str4);
    }

    @VisibleForTesting
    public AnonymousClass0DC<FBLoginResponse> performFBLogin(final String str, final String str2, final PasswordEncryptionHelper passwordEncryptionHelper, @Nullable Bundle bundle) {
        String encryptPassword = passwordEncryptionHelper.encryptPassword(str, bundle);
        FBAuthRequest fBAuthRequest = new FBAuthRequest();
        fBAuthRequest.email = str2;
        fBAuthRequest.password = encryptPassword;
        return ((FBLoginComponents) AnonymousClass0J2.A03(4, 216, this._UL_mInjectionContext)).loginRequestAsync(fBAuthRequest).A0D(new AnonymousClass0D4<FBLoginResponse, AnonymousClass0DC<FBLoginResponse>>() {
            /* class com.oculus.auth.service.FacebookAuthManager.AnonymousClass4 */

            @Override // X.AnonymousClass0D4
            public AnonymousClass0DC<FBLoginResponse> then(AnonymousClass0DC<FBLoginResponse> r6) {
                FBLoginResponse A0G = r6.A0G();
                Bundle resultBundle = A0G.getResultBundle(FacebookAuthManager.LOGIN_ERROR_CODE_MAPPER);
                int i = resultBundle.getInt("error_code");
                if (i == -15) {
                    PasswordEncryptionHelper passwordEncryptionHelper = passwordEncryptionHelper;
                    if (passwordEncryptionHelper.canEncryptAgain()) {
                        return FacebookAuthManager.this.performFBLogin(str, str2, passwordEncryptionHelper, resultBundle);
                    }
                }
                if (A0G.errorCode != null && i != -8) {
                    return r6;
                }
                ((PasswordEncryptionLogger) AnonymousClass0J2.A03(5, 359, FacebookAuthManager.this._UL_mInjectionContext)).logDecryptionEvent(PasswordEncryptionLogger.EVENT_DECRYPTION_SUCCESS, -1, passwordEncryptionHelper.mAttemptTime);
                return r6;
            }
        }, AnonymousClass0DC.A0A);
    }

    public void performFBLogin(Intent intent) {
        AnonymousClass0QC r3 = this._UL_mInjectionContext;
        AuthAction newInstance = AuthAction.newInstance((Context) AnonymousClass0J2.A03(6, 294, r3), intent, (Clock) AnonymousClass0J2.A03(0, 354, r3));
        ((ThreadUtils) AnonymousClass0J2.A03(2, 583, this._UL_mInjectionContext)).A05();
        String stringExtra = intent.getStringExtra("email");
        String stringExtra2 = intent.getStringExtra("password");
        if (stringExtra == null || stringExtra2 == null) {
            handleCompletion(newInstance, intent, new IllegalArgumentException("Intent is missing email, password, or access token params"));
        } else {
            handleCompletion(newInstance, intent, toBundleTask(followUpIfNecessaryAsync(performFBLogin(stringExtra2, stringExtra, (PasswordEncryptionHelper) AnonymousClass0J2.A04(42, this._UL_mInjectionContext), null), intent), LOGIN_ERROR_CODE_MAPPER));
        }
    }
}
