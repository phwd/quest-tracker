package com.oculus.http.core.interceptor;

import com.facebook.inject.AbstractLibraryModule;
import com.facebook.inject.Binder;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.ultralight.UL;
import com.google.inject.Key;
import com.oculus.auth.credentials.CredentialsModule;
import com.oculus.auth.storage.StorageModule;
import com.oculus.auth.util.UtilModule;
import com.oculus.base.app.AppInfoModule;
import com.oculus.dsatauth.DsatauthModule;
import com.oculus.http.useragent.UserAgentModule;
import com.oculus.logging.utils.UtilsModule;
import com.oculus.ossdk.inject.OsSdkModule;
import com.oculus.util.device.DeviceModule;

public class InterceptorModule extends AbstractLibraryModule {

    public static final class UL_id {
        public static final int $ul_$xXXcom_oculus_http_core_interceptor_OculusAuthorizationInterceptor$xXXBINDING_ID = (UL.USE_STATIC_DI ? UL.id.$ul_$xXXcom_oculus_http_core_interceptor_OculusAuthorizationInterceptor$xXXBINDING_ID : UL.id.dynamicId(Key.get(OculusAuthorizationInterceptor.class)));
        public static final int $ul_$xXXcom_oculus_http_core_interceptor_UserAgentInterceptor$xXXBINDING_ID = (UL.USE_STATIC_DI ? UL.id.$ul_$xXXcom_oculus_http_core_interceptor_UserAgentInterceptor$xXXBINDING_ID : UL.id.dynamicId(Key.get(UserAgentInterceptor.class)));
    }

    static class AutoGeneratedBindingsForInterceptorModule {
        AutoGeneratedBindingsForInterceptorModule() {
        }

        static void bind(Binder binder) {
            if (!UL.USE_STATIC_DI) {
                binder.require(BundledAndroidModule.class);
                binder.require(CredentialsModule.class);
                binder.require(StorageModule.class);
                binder.require(UtilModule.class);
                binder.require(AppInfoModule.class);
                binder.require(DsatauthModule.class);
                binder.require(UserAgentModule.class);
                binder.require(UtilsModule.class);
                binder.require(OsSdkModule.class);
                binder.require(DeviceModule.class);
                binder.bind(OculusAuthorizationInterceptor.class).toProvider(new OculusAuthorizationInterceptorAutoProvider());
                binder.bind(UserAgentInterceptor.class).toProvider(new UserAgentInterceptorAutoProvider());
            }
        }
    }
}
