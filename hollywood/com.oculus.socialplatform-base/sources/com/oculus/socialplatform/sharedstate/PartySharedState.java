package com.oculus.socialplatform.sharedstate;

import X.AbstractC03180ld;
import X.AnonymousClass006;
import X.AnonymousClass0MD;
import X.AnonymousClass0Qj;
import X.AnonymousClass0RE;
import X.AnonymousClass0VB;
import X.AnonymousClass0VF;
import X.AnonymousClass0lg;
import X.AnonymousClass1SO;
import X.AnonymousClass1TK;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import com.facebook.acra.CrashTimeDataCollector;
import com.facebook.inject.ApplicationScoped;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.oculus.common.init.INeedInit;
import com.oculus.partycontroller.PartyController;
import com.oculus.partystatemanager.IPartiesNativeModuleManager;
import com.oculus.partystatemanager.IPartyServiceDelegate;
import com.oculus.partystatemanager.logging.PartyEventFields;
import com.oculus.socialplatform.provider.contract.Parties3pApiHelper;
import com.oculus.socialplatform.provider.contract.SocialPlatformContent;
import com.oculus.util.constants.MicrophoneButtonState;
import com.oculus.util.constants.MicrophoneMuteState;
import com.oculus.util.constants.PartyChatConnectionStatus;
import com.oculus.util.constants.SocialPlatformContants;
import com.oculus.util.constants.SystemVoipStatus;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.Nullable;
import javax.inject.Provider;
import org.json.JSONException;
import org.json.JSONObject;

@Dependencies({"_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID"})
@ApplicationScoped
public class PartySharedState implements PartyController, INeedInit {
    public static final int DEFAULT_MIC_MUTE = 0;
    public static final String DEFAULT_SYSTEM_VOIP_STATUS = SystemVoipStatus.UNKNOWN.name();
    public static final float DEFAULT_VOLUME = 1.0f;
    public static final String TAG = "PartySharedState";
    public static volatile PartySharedState _UL__ULSEP_com_oculus_socialplatform_sharedstate_PartySharedState_ULSEP_INSTANCE;
    public AnonymousClass0RE _UL_mInjectionContext;
    public int mMicMute = 0;
    @Nullable
    public long[] mMutedPartyMemberIds = null;
    @Nullable
    public IPartiesNativeModuleManager mNativeAPI = null;
    @Nullable
    public IPartyServiceDelegate mPartyServiceDelegate;
    public String mVoipConnectionStatus = PartyChatConnectionStatus.UNKNOWN.name();
    public float mVolume = 1.0f;

    private void notifyUISync(Uri uri) {
        try {
            Parties3pApiHelper.callbackToSyncPartyUI((Context) AnonymousClass0VF.A03(0, 3, this._UL_mInjectionContext), "com.oculus.socialplatform", uri);
        } catch (Exception e) {
            AnonymousClass0MD.A09(TAG, "Failed to sync Party UI on uri %s", uri, e);
        }
    }

    @Override // com.oculus.partycontroller.PartyController
    public synchronized long getCurrentPartyId() {
        long j;
        IPartiesNativeModuleManager iPartiesNativeModuleManager = this.mNativeAPI;
        if (iPartiesNativeModuleManager != null) {
            j = iPartiesNativeModuleManager.getCurrentPartyId();
        } else {
            j = 0;
        }
        return j;
    }

    @Override // com.oculus.partycontroller.PartyController
    public synchronized boolean getHasParticipantRecentlySpoken(long j) {
        boolean z;
        z = false;
        IPartiesNativeModuleManager iPartiesNativeModuleManager = this.mNativeAPI;
        if (iPartiesNativeModuleManager != null) {
            z = iPartiesNativeModuleManager.getHasParticipantRecentlySpoken(j);
        }
        return z;
    }

    @Override // com.oculus.partycontroller.PartyController
    public synchronized Set<String> getMutedUsersAsSet() {
        IPartiesNativeModuleManager iPartiesNativeModuleManager = this.mNativeAPI;
        if (iPartiesNativeModuleManager != null) {
            long[] mutedUsers = iPartiesNativeModuleManager.getMutedUsers();
            int length = mutedUsers.length;
            HashSet hashSet = new HashSet(length);
            for (long j : mutedUsers) {
                hashSet.add(Long.toString(j));
            }
            return hashSet;
        }
        return new HashSet();
    }

    @Override // com.oculus.partycontroller.PartyController
    public synchronized float getPartyChatVolumeX() {
        float f;
        f = 1.0f;
        try {
            IPartiesNativeModuleManager iPartiesNativeModuleManager = this.mNativeAPI;
            if (iPartiesNativeModuleManager != null) {
                f = iPartiesNativeModuleManager.getPartyChatVolumeX();
            }
        } catch (Exception e) {
            AnonymousClass0MD.A08(TAG, "failed to get PartyChat Volume from native code", e);
        }
        return f;
    }

    @Override // com.oculus.partycontroller.PartyController
    public synchronized boolean getPartyIsUsingMicrophone() {
        boolean z;
        IPartiesNativeModuleManager iPartiesNativeModuleManager = this.mNativeAPI;
        if (iPartiesNativeModuleManager != null) {
            z = iPartiesNativeModuleManager.callNativeGetIsUsingMicrophone();
        } else {
            z = false;
        }
        return z;
    }

    @Override // com.oculus.partycontroller.PartyController
    public synchronized String getPartyMicrophoneState() {
        String str;
        MicrophoneButtonState microphoneButtonState;
        IPartiesNativeModuleManager iPartiesNativeModuleManager = this.mNativeAPI;
        if (iPartiesNativeModuleManager == null) {
            AnonymousClass0MD.A05(TAG, "NativeAPI is null. Failed to getPartyMicrophoneState");
            str = MicrophoneButtonState.UNKNOWN.name();
        } else {
            boolean callNativeGetIsUsingMicrophone = iPartiesNativeModuleManager.callNativeGetIsUsingMicrophone();
            String systemVoipMicrophoneMutedX = this.mNativeAPI.getSystemVoipMicrophoneMutedX();
            if (!callNativeGetIsUsingMicrophone) {
                microphoneButtonState = MicrophoneButtonState.APP;
            } else if (1 == MicrophoneMuteState.valueOf(systemVoipMicrophoneMutedX)) {
                microphoneButtonState = MicrophoneButtonState.MUTE;
            } else {
                microphoneButtonState = MicrophoneButtonState.PARTY;
            }
            str = microphoneButtonState.name();
        }
        return str;
    }

    public synchronized String getSystemVoipMicrophoneMutedX() {
        String str;
        str = CrashTimeDataCollector.ANDROID_RUNTIME_UNKNOWN;
        IPartiesNativeModuleManager iPartiesNativeModuleManager = this.mNativeAPI;
        if (iPartiesNativeModuleManager != null) {
            str = iPartiesNativeModuleManager.getSystemVoipMicrophoneMutedX();
        }
        return str;
    }

    @Override // com.oculus.partycontroller.PartyController
    public synchronized String getSystemVoipStateX() {
        return makeMicrophoneMuteStateResponse(getSystemVoipMicrophoneMutedX());
    }

    public synchronized String getSystemVoipStatusX() {
        String str;
        str = DEFAULT_SYSTEM_VOIP_STATUS;
        IPartiesNativeModuleManager iPartiesNativeModuleManager = this.mNativeAPI;
        if (iPartiesNativeModuleManager != null) {
            str = iPartiesNativeModuleManager.getSystemVoipStatusX();
        }
        return str;
    }

    public synchronized String getVoipConnectionStatus() {
        return this.mVoipConnectionStatus;
    }

    public synchronized void recordPartyState() {
        IPartiesNativeModuleManager iPartiesNativeModuleManager = this.mNativeAPI;
        if (iPartiesNativeModuleManager != null) {
            try {
                this.mVolume = iPartiesNativeModuleManager.getPartyChatVolumeX();
                this.mMutedPartyMemberIds = this.mNativeAPI.getMutedUsers();
                this.mMicMute = MicrophoneMuteState.valueOf(this.mNativeAPI.getSystemVoipMicrophoneMutedX());
            } catch (IllegalArgumentException e) {
                AnonymousClass0MD.A07(TAG, "Failed to record party state", e);
            }
        }
    }

    public synchronized void restorePartyState() {
        IPartiesNativeModuleManager iPartiesNativeModuleManager = this.mNativeAPI;
        if (!(iPartiesNativeModuleManager == null || this.mMicMute == 0)) {
            iPartiesNativeModuleManager.setPartyChatVolumeX(this.mVolume);
            this.mNativeAPI.setSystemVoipMicrophoneMutedX(this.mMicMute);
            long[] jArr = this.mMutedPartyMemberIds;
            if (jArr != null) {
                for (long j : jArr) {
                    this.mNativeAPI.setPerPersonMuteAction(j, 1);
                }
            }
            this.mVolume = 1.0f;
            this.mMicMute = 0;
            this.mMutedPartyMemberIds = null;
        }
    }

    @Override // com.oculus.partycontroller.PartyController
    public synchronized void setPartyChatVolumeX(float f) {
        IPartiesNativeModuleManager iPartiesNativeModuleManager = this.mNativeAPI;
        if (iPartiesNativeModuleManager != null) {
            iPartiesNativeModuleManager.setPartyChatVolumeX(f);
        }
    }

    @Override // com.oculus.partycontroller.PartyController
    public synchronized void setPartyIsUsingMicrophone(boolean z) {
        IPartiesNativeModuleManager iPartiesNativeModuleManager = this.mNativeAPI;
        if (iPartiesNativeModuleManager != null) {
            iPartiesNativeModuleManager.callNativeSetIsUsingMicrophone(z);
        }
    }

    @Override // com.oculus.partycontroller.PartyController
    public synchronized void setPartyMicrophoneState(String str) {
        IPartiesNativeModuleManager iPartiesNativeModuleManager = this.mNativeAPI;
        if (iPartiesNativeModuleManager == null) {
            AnonymousClass0MD.A04(TAG, "Failed to setPartyMicrophoneState. NativeAPI not found");
        } else {
            MicrophoneButtonState valueOf = MicrophoneButtonState.valueOf(str);
            int i = AnonymousClass1.$SwitchMap$com$oculus$util$constants$MicrophoneButtonState[valueOf.ordinal()];
            if (i == 1) {
                iPartiesNativeModuleManager.callNativeSetIsUsingMicrophone(false);
            } else if (i == 2) {
                iPartiesNativeModuleManager.callNativeSetIsUsingMicrophone(true);
                setSystemVoipMicrophoneMutedX(1);
            } else if (i == 3) {
                iPartiesNativeModuleManager.callNativeSetIsUsingMicrophone(true);
                setSystemVoipMicrophoneMutedX(2);
            } else if (i == 4) {
                AnonymousClass0MD.A0A(TAG, "Could not set microphone state as %s", valueOf);
            }
            notifyUISync(SocialPlatformContent.Parties3pApi.Updates.SYNC_MIC_STATE);
        }
    }

    @Override // com.oculus.partycontroller.PartyController
    public synchronized int setPerPersonMuteAction(long j, int i) {
        int i2;
        IPartiesNativeModuleManager iPartiesNativeModuleManager = this.mNativeAPI;
        if (iPartiesNativeModuleManager != null) {
            i2 = iPartiesNativeModuleManager.setPerPersonMuteAction(j, i);
        } else {
            i2 = 0;
        }
        return i2;
    }

    public synchronized void setSuppressed(boolean z) {
        IPartiesNativeModuleManager iPartiesNativeModuleManager = this.mNativeAPI;
        if (iPartiesNativeModuleManager != null) {
            iPartiesNativeModuleManager.callNativeSetSystemVoipDisabled(z, PartyEventFields.CallerName.PARTY_API);
        }
    }

    @Override // com.oculus.partycontroller.PartyController
    public synchronized String setSystemVoipMicrophoneMutedX(int i) {
        String str;
        MicrophoneMuteState.toString(i);
        IPartiesNativeModuleManager iPartiesNativeModuleManager = this.mNativeAPI;
        if (iPartiesNativeModuleManager != null) {
            iPartiesNativeModuleManager.setSystemVoipMicrophoneMutedX(i);
            str = makeMicrophoneMuteStateResponse(MicrophoneMuteState.toString(i));
        } else {
            str = makeMicrophoneMuteStateResponse(CrashTimeDataCollector.ANDROID_RUNTIME_UNKNOWN);
        }
        return str;
    }

    public synchronized void setVoipConnectionStatus(String str) {
        this.mVoipConnectionStatus = str;
    }

    @Override // com.oculus.partycontroller.PartyController
    public synchronized Bundle startPartyChat(long j) {
        Bundle bundle;
        try {
            Intent intent = new Intent((Context) AnonymousClass0VF.A03(0, 3, this._UL_mInjectionContext), Class.forName(SocialPlatformContants.PARTY_SERVICE_NAME));
            intent.setAction(SocialPlatformContants.RUN_PARTY_CHAT_ENFORCER_ACTION);
            AnonymousClass1SO.A00(intent, (Context) AnonymousClass0VF.A03(0, 3, this._UL_mInjectionContext));
            bundle = new Bundle();
        } catch (ClassNotFoundException e) {
            AnonymousClass0MD.A07(TAG, "Party chat not started!!!!! PartyService class not found ", e);
            bundle = new Bundle();
        }
        return bundle;
    }

    @Override // com.oculus.partycontroller.PartyController
    public synchronized Bundle stopPartyChat() {
        IPartiesNativeModuleManager iPartiesNativeModuleManager = this.mNativeAPI;
        if (iPartiesNativeModuleManager != null) {
            iPartiesNativeModuleManager.callNativePartyChatStop();
        }
        IPartyServiceDelegate iPartyServiceDelegate = this.mPartyServiceDelegate;
        if (iPartyServiceDelegate != null) {
            iPartyServiceDelegate.onUserNotInParty();
        }
        return new Bundle();
    }

    public void unBindNativeAPI() {
        this.mNativeAPI = null;
    }

    /* renamed from: com.oculus.socialplatform.sharedstate.PartySharedState$1  reason: invalid class name */
    public static /* synthetic */ class AnonymousClass1 {
        public static final /* synthetic */ int[] $SwitchMap$com$oculus$util$constants$MicrophoneButtonState;

        /* JADX WARNING: Can't wrap try/catch for region: R(10:0|1|2|3|4|5|6|7|8|10) */
        /* JADX WARNING: Code restructure failed: missing block: B:11:?, code lost:
            return;
         */
        /* JADX WARNING: Failed to process nested try/catch */
        /* JADX WARNING: Missing exception handler attribute for start block: B:3:0x0012 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:5:0x001b */
        /* JADX WARNING: Missing exception handler attribute for start block: B:7:0x0024 */
        static {
            /*
                com.oculus.util.constants.MicrophoneButtonState[] r0 = com.oculus.util.constants.MicrophoneButtonState.values()
                int r0 = r0.length
                int[] r2 = new int[r0]
                com.oculus.socialplatform.sharedstate.PartySharedState.AnonymousClass1.$SwitchMap$com$oculus$util$constants$MicrophoneButtonState = r2
                com.oculus.util.constants.MicrophoneButtonState r0 = com.oculus.util.constants.MicrophoneButtonState.APP     // Catch:{ NoSuchFieldError -> 0x0012 }
                int r1 = r0.ordinal()     // Catch:{ NoSuchFieldError -> 0x0012 }
                r0 = 1
                r2[r1] = r0     // Catch:{ NoSuchFieldError -> 0x0012 }
            L_0x0012:
                com.oculus.util.constants.MicrophoneButtonState r0 = com.oculus.util.constants.MicrophoneButtonState.MUTE     // Catch:{ NoSuchFieldError -> 0x001b }
                int r1 = r0.ordinal()     // Catch:{ NoSuchFieldError -> 0x001b }
                r0 = 2
                r2[r1] = r0     // Catch:{ NoSuchFieldError -> 0x001b }
            L_0x001b:
                com.oculus.util.constants.MicrophoneButtonState r0 = com.oculus.util.constants.MicrophoneButtonState.PARTY     // Catch:{ NoSuchFieldError -> 0x0024 }
                int r1 = r0.ordinal()     // Catch:{ NoSuchFieldError -> 0x0024 }
                r0 = 3
                r2[r1] = r0     // Catch:{ NoSuchFieldError -> 0x0024 }
            L_0x0024:
                com.oculus.util.constants.MicrophoneButtonState r0 = com.oculus.util.constants.MicrophoneButtonState.UNKNOWN     // Catch:{ NoSuchFieldError -> 0x002d }
                int r1 = r0.ordinal()     // Catch:{ NoSuchFieldError -> 0x002d }
                r0 = 4
                r2[r1] = r0     // Catch:{ NoSuchFieldError -> 0x002d }
            L_0x002d:
                return
            */
            throw new UnsupportedOperationException("Method not decompiled: com.oculus.socialplatform.sharedstate.PartySharedState.AnonymousClass1.<clinit>():void");
        }
    }

    @AutoGeneratedAccessMethod
    public static final AbstractC03180ld _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_socialplatform_sharedstate_PartySharedState_ULGT__ULSEP_ACCESS_METHOD(AnonymousClass0lg r2) {
        return new AnonymousClass0VB(85, r2);
    }

    @AutoGeneratedAccessMethod
    public static final PartySharedState _UL__ULSEP_com_oculus_socialplatform_sharedstate_PartySharedState_ULSEP_ACCESS_METHOD(AnonymousClass0lg r2) {
        return (PartySharedState) AnonymousClass1TK.A00(85, r2, null);
    }

    @AutoGeneratedFactoryMethod
    public static final PartySharedState _UL__ULSEP_com_oculus_socialplatform_sharedstate_PartySharedState_ULSEP_FACTORY_METHOD(AnonymousClass0lg r4, Object obj) {
        if (_UL__ULSEP_com_oculus_socialplatform_sharedstate_PartySharedState_ULSEP_INSTANCE == null) {
            synchronized (PartySharedState.class) {
                AnonymousClass0Qj A00 = AnonymousClass0Qj.A00(_UL__ULSEP_com_oculus_socialplatform_sharedstate_PartySharedState_ULSEP_INSTANCE, r4);
                if (A00 != null) {
                    try {
                        _UL__ULSEP_com_oculus_socialplatform_sharedstate_PartySharedState_ULSEP_INSTANCE = new PartySharedState(r4.getApplicationInjector());
                    } finally {
                        A00.A01();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_socialplatform_sharedstate_PartySharedState_ULSEP_INSTANCE;
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_socialplatform_sharedstate_PartySharedState_ULGT__ULSEP_ACCESS_METHOD(AnonymousClass0lg r2) {
        return new AnonymousClass0VB(85, r2);
    }

    private String makeMicrophoneMuteStateResponse(String str) {
        JSONObject jSONObject = new JSONObject();
        try {
            jSONObject.put("microphone_muted", str);
            return jSONObject.toString();
        } catch (JSONException e) {
            AnonymousClass0MD.A08(TAG, "Exception on construct microphone_mute response", e);
            return AnonymousClass006.A09("{\"microphone_muted\":", str, "}");
        }
    }

    @Override // com.oculus.common.init.INeedInit
    public void init() {
    }

    public void onDestroy() {
        this.mVoipConnectionStatus = PartyChatConnectionStatus.UNKNOWN.name();
    }

    @Inject
    public PartySharedState(AnonymousClass0lg r3) {
        this._UL_mInjectionContext = new AnonymousClass0RE(1, r3);
    }

    public void bindNativeAPI(IPartiesNativeModuleManager iPartiesNativeModuleManager) {
        this.mNativeAPI = iPartiesNativeModuleManager;
    }

    public void setPartyServiceDelegate(IPartyServiceDelegate iPartyServiceDelegate) {
        this.mPartyServiceDelegate = iPartyServiceDelegate;
    }
}
