package com.oculus.socialplatform.partyservice;

import X.AbstractC03180ld;
import X.AnonymousClass0Hr;
import X.AnonymousClass0MD;
import X.AnonymousClass0RE;
import X.AnonymousClass0VC;
import X.AnonymousClass0VF;
import X.AnonymousClass0l0;
import X.AnonymousClass0lg;
import X.AnonymousClass1TK;
import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.app.AppOpsManager;
import android.content.Context;
import android.os.Build;
import android.os.Bundle;
import android.os.Process;
import androidx.annotation.VisibleForTesting;
import com.facebook.acra.CrashTimeDataCollector;
import com.facebook.proguard.annotations.DoNotStrip;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.oculus.deviceconfigclient.DeviceConfigClient;
import com.oculus.horizon.notifications.core.NotificationBuilder;
import com.oculus.os.SettingsManager;
import com.oculus.panelapp.social.SocialBundleConstants;
import com.oculus.partystatemanager.IPartiesNativeModuleManager;
import com.oculus.partystatemanager.logging.PartyEventFactory;
import com.oculus.partystatemanager.logging.PartyEventFields;
import com.oculus.socialplatform.R;
import com.oculus.socialplatform.provider.contract.Parties3pApiHelper;
import com.oculus.util.constants.MicrophoneMuteState;
import com.oculus.util.constants.SystemVoipStatus;
import com.oculus.util.device.DeviceUtils;
import javax.annotation.Nullable;
import javax.inject.Provider;

@SuppressLint({"MissingNativeLoadLibrary"})
@Dependencies({"_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_horizon_notifications_core_NotificationBuilder_ULSEP_BINDING_ID", "_UL__ULSEP_java_lang_String_ULSEP_com_oculus_http_useragent_UserAgentString_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_partystatemanager_logging_PartyEventFactory_ULSEP_BINDING_ID"})
@TargetApi(19)
public class PartyNativeModuleManager implements IPartiesNativeModuleManager {
    public static final String TAG = "PartyNativeModuleManager";
    public AnonymousClass0RE _UL_mInjectionContext;
    @Nullable
    public DeviceConfigClient mDeviceConfigClient;
    public final Object mInitLock = new Object();
    public InitState mInitState = InitState.UNINITIALIZED;
    public final Object mNativeCodeLock = new Object();
    public PartyRemountHandler mPartyRemountHandler;

    public enum InitState {
        UNINITIALIZED,
        INITIALIZED
    }

    public static native long nativeGetCurrentPartyId();

    public static native boolean nativeGetIsUsingMicrophone();

    public static native long[] nativeGetMutedUsers();

    public static native String nativeGetSystemVoipMicrophoneMuted();

    public static native String nativeGetSystemVoipStatus();

    public static native float nativeGetSystemVoipVolume();

    private native boolean nativeInit(Context context, String str, String str2, String str3, String str4);

    public static native void nativePartyChatStart(long j);

    public static native void nativePartyChatStop();

    public static native boolean nativePartyHasParticipantRecentlySpoken(long j);

    public static native void nativeSetIsUsingMicrophone(boolean z);

    public static native void nativeSetMuteUser(long j, boolean z);

    public static native void nativeSetSystemVoipMicrophoneMuted(int i);

    public static native void nativeSetSystemVoipSuppressed(boolean z);

    public static native void nativeSetSystemVoipVolume(float f);

    private native void nativeTearDown();

    @Override // com.oculus.partystatemanager.IPartiesNativeModuleManager
    @Deprecated
    public void callNativeGetSystemVoipData(boolean z, Bundle bundle) {
    }

    @Override // com.oculus.partystatemanager.IPartiesNativeModuleManager
    @Deprecated
    public void callNativeSetSystemVoipPassthrough(boolean z) {
    }

    public void maybePerformInit(String str, String str2, DeviceConfigClient deviceConfigClient, PartyRemountHandler partyRemountHandler) {
        synchronized (this.mInitLock) {
            if (this.mInitState != InitState.INITIALIZED) {
                String deviceId = DeviceUtils.getDeviceId((Context) AnonymousClass0VF.A03(0, 3, this._UL_mInjectionContext));
                loadPlatformLibraries();
                synchronized (this.mNativeCodeLock) {
                    AnonymousClass0RE r2 = this._UL_mInjectionContext;
                    if (!nativeInit((Context) AnonymousClass0VF.A03(0, 3, r2), str, str2, (String) AnonymousClass0VF.A03(2, 62, r2), deviceId)) {
                        AnonymousClass0MD.A04(TAG, "nativeInit failed. Could not load native APIs");
                    } else {
                        this.mInitState = InitState.INITIALIZED;
                        this.mDeviceConfigClient = deviceConfigClient;
                        this.mPartyRemountHandler = partyRemountHandler;
                    }
                }
            }
        }
    }

    @DoNotStrip
    @VisibleForTesting
    public void updateVoipConnectionStatus(String str) {
        try {
            Parties3pApiHelper.setVoipConnectionStatus((Context) AnonymousClass0VF.A03(0, 3, this._UL_mInjectionContext), "com.oculus.socialplatform", str);
        } catch (Exception e) {
            AnonymousClass0MD.A07(TAG, "Failed to update VoIP Connection Status", e);
        }
    }

    @AutoGeneratedAccessMethod
    public static final AbstractC03180ld _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_socialplatform_partyservice_PartyNativeModuleManager_ULGT__ULSEP_ACCESS_METHOD(AnonymousClass0lg r1) {
        return AnonymousClass0Hr.A00(71, r1);
    }

    @AutoGeneratedAccessMethod
    public static final PartyNativeModuleManager _UL__ULSEP_com_oculus_socialplatform_partyservice_PartyNativeModuleManager_ULSEP_ACCESS_METHOD(AnonymousClass0lg r2) {
        return (PartyNativeModuleManager) AnonymousClass1TK.A00(71, r2, null);
    }

    @AutoGeneratedFactoryMethod
    public static final PartyNativeModuleManager _UL__ULSEP_com_oculus_socialplatform_partyservice_PartyNativeModuleManager_ULSEP_FACTORY_METHOD(AnonymousClass0lg r1, Object obj) {
        return new PartyNativeModuleManager(r1);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_socialplatform_partyservice_PartyNativeModuleManager_ULGT__ULSEP_ACCESS_METHOD(AnonymousClass0lg r1) {
        return AnonymousClass0VC.A00(71, r1);
    }

    private boolean isMicrophoneDisabled() {
        return new SettingsManager().getBoolean("mic_muted", false);
    }

    @VisibleForTesting
    public static void loadPlatformLibraries() {
        AnonymousClass0l0.A06(SocialBundleConstants.FB_UPSELL_PARTIES_PRODUCT);
    }

    @VisibleForTesting
    public boolean checkCanRecordAudio() {
        int checkOpNoThrow;
        int i = Build.VERSION.SDK_INT;
        AppOpsManager appOpsManager = (AppOpsManager) ((Context) AnonymousClass0VF.A03(0, 3, this._UL_mInjectionContext)).getSystemService("appops");
        if (appOpsManager == null) {
            return true;
        }
        if (i >= 29) {
            checkOpNoThrow = appOpsManager.unsafeCheckOpNoThrow("android:record_audio", Process.myUid(), ((Context) AnonymousClass0VF.A03(0, 3, this._UL_mInjectionContext)).getPackageName());
        } else {
            checkOpNoThrow = appOpsManager.checkOpNoThrow("android:record_audio", Process.myUid(), ((Context) AnonymousClass0VF.A03(0, 3, this._UL_mInjectionContext)).getPackageName());
        }
        if (checkOpNoThrow != 0) {
            return false;
        }
        return true;
    }

    @VisibleForTesting
    public boolean isInitialized() {
        boolean z;
        synchronized (this.mInitLock) {
            z = false;
            if (this.mInitState == InitState.INITIALIZED) {
                z = true;
            }
        }
        return z;
    }

    @Override // com.oculus.partystatemanager.IPartiesNativeModuleManager
    public void maybeShowMicrophoneMutedToast() {
        DeviceConfigClient deviceConfigClient = this.mDeviceConfigClient;
        if (deviceConfigClient != null && deviceConfigClient.getBoolean("android_oculus_horizon:is_microphone_setting_available") && isMicrophoneDisabled()) {
            AnonymousClass0RE r4 = this._UL_mInjectionContext;
            NotificationBuilder.Builder createVrOnlyNotification = ((NotificationBuilder) AnonymousClass0VF.A03(1, 18, r4)).createVrOnlyNotification(((Context) AnonymousClass0VF.A03(0, 3, r4)).getString(R.string.notifications_party_microphone_muted), "");
            createVrOnlyNotification.iconId = R.drawable.ic_notif_microphone;
            createVrOnlyNotification.suppressSound = true;
            createVrOnlyNotification.show();
        }
    }

    @Override // com.oculus.partystatemanager.IPartiesNativeModuleManager
    public void showPartyChatResume() {
        AnonymousClass0RE r1 = this._UL_mInjectionContext;
        NotificationBuilder.Builder createVrOnlyNotification = ((NotificationBuilder) AnonymousClass0VF.A03(1, 18, r1)).createVrOnlyNotification(((Context) AnonymousClass0VF.A03(0, 3, r1)).getString(R.string.notifications_party_reestablish_voip), ((Context) AnonymousClass0VF.A03(0, 3, this._UL_mInjectionContext)).getString(R.string.notifications_party_reestablish_voip_message));
        createVrOnlyNotification.suppressSound = true;
        createVrOnlyNotification.show();
    }

    @Override // com.oculus.partystatemanager.IPartiesNativeModuleManager
    public void showPartyChatSuspend() {
        AnonymousClass0RE r1 = this._UL_mInjectionContext;
        NotificationBuilder.Builder createVrOnlyNotification = ((NotificationBuilder) AnonymousClass0VF.A03(1, 18, r1)).createVrOnlyNotification(((Context) AnonymousClass0VF.A03(0, 3, r1)).getString(R.string.notifications_party_pause_voip), ((Context) AnonymousClass0VF.A03(0, 3, this._UL_mInjectionContext)).getString(R.string.notifications_party_pause_voip_message));
        createVrOnlyNotification.suppressSound = true;
        createVrOnlyNotification.show();
    }

    @Inject
    public PartyNativeModuleManager(AnonymousClass0lg r3) {
        this._UL_mInjectionContext = new AnonymousClass0RE(4, r3);
    }

    @Override // com.oculus.partystatemanager.IPartiesNativeModuleManager
    public boolean callNativeGetIsUsingMicrophone() {
        boolean nativeGetIsUsingMicrophone;
        if (getCurrentPartyId() == 0) {
            return false;
        }
        synchronized (this.mNativeCodeLock) {
            nativeGetIsUsingMicrophone = nativeGetIsUsingMicrophone();
        }
        return nativeGetIsUsingMicrophone;
    }

    @Override // com.oculus.partystatemanager.IPartiesNativeModuleManager
    public void callNativePartyChatStart(long j) {
        if (!isInitialized()) {
            AnonymousClass0MD.A05(TAG, "Calling partyChatStart but native code wasn't initialized.  Noop.");
        } else if (j == 0) {
            AnonymousClass0MD.A04(TAG, "Calling partyChatStart but partyID is Invalid. Do nothing.");
        } else {
            String systemVoipStatusX = getSystemVoipStatusX();
            long currentPartyId = getCurrentPartyId();
            if (j == currentPartyId && SystemVoipStatus.SUPPRESSED.name().equals(systemVoipStatusX)) {
                AnonymousClass0MD.A05(TAG, "Calling partyChatStart but voip is paused. Resume voip instead");
                callNativeSetSystemVoipDisabled(false, PartyEventFields.CallerName.RECOVER);
            } else if (j == currentPartyId && SystemVoipStatus.ACTIVE.name().equals(systemVoipStatusX)) {
            } else {
                if (!checkCanRecordAudio()) {
                    AnonymousClass0MD.A04(TAG, "Calling partyChatStart but no AudioRecord permission. No-op.");
                    ((PartyEventFactory) AnonymousClass0VF.A03(3, 0, this._UL_mInjectionContext)).createOculusPartyVoipEvent(PartyEventFields.EventName.VOIP_START, Long.toString(j), new PartyEventFields.Extra(false, "NoAudioPermission")).log();
                    return;
                }
                ((PartyEventFactory) AnonymousClass0VF.A03(3, 0, this._UL_mInjectionContext)).createOculusPartyVoipEvent(PartyEventFields.EventName.VOIP_START, Long.toString(j), null).log();
                synchronized (this.mNativeCodeLock) {
                    nativePartyChatStart(j);
                }
            }
        }
    }

    @Override // com.oculus.partystatemanager.IPartiesNativeModuleManager
    public void callNativePartyChatStop() {
        if (isInitialized()) {
            long currentPartyId = getCurrentPartyId();
            if (currentPartyId != 0) {
                ((PartyEventFactory) AnonymousClass0VF.A03(3, 0, this._UL_mInjectionContext)).createOculusPartyVoipEvent(PartyEventFields.EventName.VOIP_STOP, Long.toString(currentPartyId), null).log();
            }
            synchronized (this.mNativeCodeLock) {
                nativePartyChatStop();
            }
        }
    }

    @Override // com.oculus.partystatemanager.IPartiesNativeModuleManager
    public void callNativeSetIsUsingMicrophone(boolean z) {
        if (getCurrentPartyId() != 0) {
            synchronized (this.mNativeCodeLock) {
                nativeSetIsUsingMicrophone(z);
            }
        }
    }

    @Override // com.oculus.partystatemanager.IPartiesNativeModuleManager
    public void callNativeSetSystemVoipDisabled(boolean z, String str) {
        PartyEventFields.EventName eventName;
        if (isInitialized()) {
            String systemVoipStatusX = getSystemVoipStatusX();
            long currentPartyId = getCurrentPartyId();
            if (currentPartyId == 0) {
                return;
            }
            if (!SystemVoipStatus.ACTIVE.name().equals(systemVoipStatusX) || z) {
                PartyEventFactory partyEventFactory = (PartyEventFactory) AnonymousClass0VF.A03(3, 0, this._UL_mInjectionContext);
                if (z) {
                    eventName = PartyEventFields.EventName.VOIP_PAUSE;
                } else {
                    eventName = PartyEventFields.EventName.VOIP_RESUME;
                }
                partyEventFactory.OculusPartyVoipPauseResumeEvent(eventName, Long.toString(currentPartyId), str).log();
                synchronized (this.mNativeCodeLock) {
                    nativeSetSystemVoipSuppressed(z);
                }
            }
        }
    }

    @Override // com.oculus.partystatemanager.IPartiesNativeModuleManager
    public void callNativeStartOrResume(long j) {
        if (isInitialized()) {
            if (SystemVoipStatus.SUPPRESSED.name().equals(getSystemVoipStatusX())) {
                callNativeSetSystemVoipDisabled(false, PartyEventFields.CallerName.REMOUNT);
                return;
            }
            callNativePartyChatStart(j);
            this.mPartyRemountHandler.restorePartyState();
        }
    }

    @Override // com.oculus.partystatemanager.IPartiesNativeModuleManager
    public long getCurrentPartyId() {
        long nativeGetCurrentPartyId;
        if (!isInitialized()) {
            AnonymousClass0MD.A04(TAG, "Calling getCurrentPartyId but native code wasn't initialized. Noop.");
            return 0;
        }
        synchronized (this.mNativeCodeLock) {
            nativeGetCurrentPartyId = nativeGetCurrentPartyId();
        }
        return nativeGetCurrentPartyId;
    }

    @Override // com.oculus.partystatemanager.IPartiesNativeModuleManager
    public boolean getHasParticipantRecentlySpoken(long j) {
        boolean nativePartyHasParticipantRecentlySpoken;
        if (!isInitialized()) {
            AnonymousClass0MD.A04(TAG, "Calling HasParticipantRecentlySpoken but native code wasn't initialized. Noop.");
            return false;
        }
        synchronized (this.mNativeCodeLock) {
            nativePartyHasParticipantRecentlySpoken = nativePartyHasParticipantRecentlySpoken(j);
        }
        return nativePartyHasParticipantRecentlySpoken;
    }

    @Override // com.oculus.partystatemanager.IPartiesNativeModuleManager
    public long[] getMutedUsers() {
        long[] nativeGetMutedUsers;
        if (!isInitialized()) {
            AnonymousClass0MD.A04(TAG, "Calling getMutedUsers but native code wasn't initialized. Noop.");
            return new long[0];
        }
        synchronized (this.mNativeCodeLock) {
            nativeGetMutedUsers = nativeGetMutedUsers();
        }
        return nativeGetMutedUsers;
    }

    @Override // com.oculus.partystatemanager.IPartiesNativeModuleManager
    public float getPartyChatVolumeX() throws IllegalStateException {
        float nativeGetSystemVoipVolume;
        if (isInitialized()) {
            synchronized (this.mNativeCodeLock) {
                nativeGetSystemVoipVolume = nativeGetSystemVoipVolume();
            }
            return nativeGetSystemVoipVolume;
        }
        AnonymousClass0MD.A04(TAG, "Calling GetSystemVoipVolume but native code wasn't initialized.");
        throw new IllegalStateException("Calling GetSystemVoipVolume but native code wasn't initialized. Exploding.");
    }

    @Override // com.oculus.partystatemanager.IPartiesNativeModuleManager
    public String getSystemVoipMicrophoneMutedX() {
        String nativeGetSystemVoipMicrophoneMuted;
        if (!isInitialized()) {
            return CrashTimeDataCollector.ANDROID_RUNTIME_UNKNOWN;
        }
        synchronized (this.mNativeCodeLock) {
            nativeGetSystemVoipMicrophoneMuted = nativeGetSystemVoipMicrophoneMuted();
        }
        return nativeGetSystemVoipMicrophoneMuted;
    }

    @Override // com.oculus.partystatemanager.IPartiesNativeModuleManager
    public String getSystemVoipStatusX() {
        String nativeGetSystemVoipStatus;
        if (!isInitialized()) {
            AnonymousClass0MD.A04(TAG, "Calling GetSystemVoipStatus but native code wasn't initialized. Noop.");
            return SystemVoipStatus.UNKNOWN.name();
        }
        synchronized (this.mNativeCodeLock) {
            nativeGetSystemVoipStatus = nativeGetSystemVoipStatus();
        }
        return nativeGetSystemVoipStatus;
    }

    @Override // com.oculus.partystatemanager.IPartiesNativeModuleManager
    public void maybeShowPartyVoipConnectedToast(boolean z) {
        boolean z2 = false;
        if (MicrophoneMuteState.valueOf(getSystemVoipMicrophoneMutedX()) == 1) {
            z2 = true;
        }
        if (!isMicrophoneDisabled() && !z2) {
            AnonymousClass0RE r1 = this._UL_mInjectionContext;
            NotificationBuilder.Builder createVrOnlyNotification = ((NotificationBuilder) AnonymousClass0VF.A03(1, 18, r1)).createVrOnlyNotification(((Context) AnonymousClass0VF.A03(0, 3, r1)).getString(R.string.notifications_party_chat_started_title), ((Context) AnonymousClass0VF.A03(0, 3, this._UL_mInjectionContext)).getString(R.string.notifications_party_chat_started_body));
            createVrOnlyNotification.iconId = R.drawable.ic_notif_microphone;
            createVrOnlyNotification.show();
        }
    }

    @Override // com.oculus.partystatemanager.IPartiesNativeModuleManager
    public void setPartyChatVolumeX(float f) {
        if (!isInitialized()) {
            AnonymousClass0MD.A04(TAG, "Calling SetSystemVoipVolume but native code wasn't initialized. Noop.");
            return;
        }
        synchronized (this.mNativeCodeLock) {
            nativeSetSystemVoipVolume(f);
        }
    }

    @Override // com.oculus.partystatemanager.IPartiesNativeModuleManager
    public int setPerPersonMuteAction(long j, int i) {
        String str;
        String str2;
        if (!isInitialized()) {
            str = TAG;
            str2 = "Calling setPerPersonMuteAction but native code wasn't initialized. Noop.";
        } else {
            boolean z = true;
            if (i != 1) {
                if (i == 2) {
                    z = false;
                } else {
                    str = TAG;
                    str2 = "Calling setPerPersonMuteAction with an invalid mute state. Noop.";
                }
            }
            synchronized (this.mNativeCodeLock) {
                nativeSetMuteUser(j, z);
            }
            return i;
        }
        AnonymousClass0MD.A04(str, str2);
        return 0;
    }

    @Override // com.oculus.partystatemanager.IPartiesNativeModuleManager
    public String setSystemVoipMicrophoneMutedX(int i) {
        if (!isInitialized()) {
            AnonymousClass0MD.A04(TAG, "Calling SetSystemVoipMicrophoneMuted but native code wasn't initialized. Noop.");
            return CrashTimeDataCollector.ANDROID_RUNTIME_UNKNOWN;
        }
        synchronized (this.mNativeCodeLock) {
            nativeSetSystemVoipMicrophoneMuted(i);
        }
        return MicrophoneMuteState.toString(i);
    }

    public void tearDown() {
        if (!isInitialized()) {
            AnonymousClass0MD.A05(TAG, "Calling nativeTearDown but native code wasn't initialized. Noop.");
            return;
        }
        synchronized (this.mNativeCodeLock) {
            nativeTearDown();
        }
    }
}
