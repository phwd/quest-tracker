package com.oculus.http.core.interceptor;

import X.AbstractC03180ld;
import X.AnonymousClass006;
import X.AnonymousClass0Hr;
import X.AnonymousClass0MD;
import X.AnonymousClass0RE;
import X.AnonymousClass0VC;
import X.AnonymousClass0VF;
import X.AnonymousClass0lg;
import X.AnonymousClass13N;
import X.AnonymousClass13S;
import X.AnonymousClass1TK;
import android.annotation.SuppressLint;
import android.text.TextUtils;
import bolts.Task;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.oculus.auth.credentials.Credentials;
import com.oculus.auth.credentials.CredentialsModule;
import com.oculus.auth.storage.AuthDatastore;
import com.oculus.auth.storage.StorageModule;
import com.oculus.auth.util.AccessTokenUtils;
import com.oculus.base.app.AppInfo;
import com.oculus.dsatauth.DsatFetcher;
import com.oculus.http.core.base.ApiError;
import com.oculus.http.core.common.DsatAuthorization;
import com.oculus.logging.utils.Event;
import com.oculus.logging.utils.EventManager;
import com.oculus.os.DeviceAuth;
import com.oculus.util.constants.OculusConstants;
import java.io.IOException;
import java.net.ProtocolException;
import java.util.concurrent.TimeUnit;
import javax.annotation.Nullable;
import javax.inject.Provider;
import okhttp3.Request;
import okhttp3.Response;

@Dependencies({"_UL__ULSEP_com_oculus_auth_credentials_Credentials_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_base_app_AppInfo_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_auth_storage_AuthDatastore_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_os_DeviceAuth_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_dsatauth_DsatFetcher_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID"})
public class OculusAuthorizationInterceptor extends AuthorizationInterceptor {
    public static final String ACTION_AUTO_LOGOUT = "com.oculus.auth.ACTION_AUTO_LOGOUT";
    public static final long CREDENTIALS_UPDATE_WINDOW_MS = TimeUnit.SECONDS.toMillis(5);
    public static final long DSAT_FETCH_TIMEOUT_SECONDS = 30;
    public static final String EVENT_AUTH_ACTION = "oculus_mobile_auth_action";
    public static final String EXTRA_ACTION = "action";
    public static final String EXTRA_ERROR_CODE = "error_code";
    public static final String EXTRA_ERROR_MESSAGE = "error_message";
    public static final String EXTRA_ERROR_SUBCODE = "error_subcode";
    public static final String EXTRA_ERROR_TYPE = "error_type";
    public static final String EXTRA_ERROR_USER_MESSAGE = "error_user_message";
    public static final String EXTRA_ERROR_USER_TITLE = "error_user_title";
    public static final String TAG = "OculusAuthorizationInterceptor";
    public AnonymousClass0RE _UL_mInjectionContext;
    @Inject
    public final Provider<AuthDatastore> mAuthDatastoreProvider;
    @Inject
    public final Provider<Credentials> mCredentialsProvider;

    private String getLoggedOutAccessToken() {
        String str;
        try {
            str = ((DeviceAuth) AnonymousClass0VF.A03(1, 76, this._UL_mInjectionContext)).fetchToken(OculusConstants.ALPENGLOW_HW_LOGINTOKEN).value();
        } catch (DeviceAuth.BackendException | DeviceAuth.DeviceIdentityException | DeviceAuth.NetworkException | InterruptedException e) {
            AnonymousClass0MD.A0C(TAG, e, "Error fetching device auth token");
            if (e instanceof InterruptedException) {
                Thread.currentThread().interrupt();
            }
            str = null;
        }
        if (TextUtils.isEmpty(str)) {
            return AccessTokenUtils.createLoggedOutToken((AppInfo) AnonymousClass0VF.A03(0, 96, this._UL_mInjectionContext), null);
        }
        return AccessTokenUtils.createLoggedOutToken((AppInfo) AnonymousClass0VF.A03(0, 96, this._UL_mInjectionContext), str);
    }

    @AutoGeneratedAccessMethod
    public static final AbstractC03180ld _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_http_core_interceptor_OculusAuthorizationInterceptor_ULGT__ULSEP_ACCESS_METHOD(AnonymousClass0lg r1) {
        return AnonymousClass0Hr.A00(36, r1);
    }

    @AutoGeneratedAccessMethod
    public static final OculusAuthorizationInterceptor _UL__ULSEP_com_oculus_http_core_interceptor_OculusAuthorizationInterceptor_ULSEP_ACCESS_METHOD(AnonymousClass0lg r2) {
        return (OculusAuthorizationInterceptor) AnonymousClass1TK.A00(36, r2, null);
    }

    @AutoGeneratedFactoryMethod
    public static final OculusAuthorizationInterceptor _UL__ULSEP_com_oculus_http_core_interceptor_OculusAuthorizationInterceptor_ULSEP_FACTORY_METHOD(AnonymousClass0lg r1, Object obj) {
        return new OculusAuthorizationInterceptor(r1);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_http_core_interceptor_OculusAuthorizationInterceptor_ULGT__ULSEP_ACCESS_METHOD(AnonymousClass0lg r1) {
        return AnonymousClass0VC.A00(36, r1);
    }

    private IOException createNonRetryableIOException(String str) {
        return new ProtocolException(str);
    }

    private String getCredentialsAccessToken() {
        Credentials credentials = this.mCredentialsProvider.get();
        if (credentials != null) {
            return credentials.mAccessToken;
        }
        return getLoggedOutAccessToken();
    }

    public static boolean isDsatRequired(String str) {
        return DsatAuthorization.INTERNAL_HEADER_REQUIRES_DSAT.equals(str);
    }

    private void logAutoLogout(Response response) {
        ApiError.FBApiErrorResponse.Error error;
        try {
            String string = response.body.string();
            AnonymousClass0MD.A09(TAG, "Logging user out, response: %s", string);
            ApiError.FBApiErrorResponse fBApiErrorResponse = (ApiError.FBApiErrorResponse) new AnonymousClass13N().A05(string, ApiError.FBApiErrorResponse.class);
            Event addExtra = ((EventManager) AnonymousClass0VF.A03(3, 92, this._UL_mInjectionContext)).createEvent(EVENT_AUTH_ACTION).addExtra("action", ACTION_AUTO_LOGOUT);
            if (!(fBApiErrorResponse == null || (error = fBApiErrorResponse.error) == null)) {
                addExtra.addExtra("error_code", error.code);
                addExtra.addExtra("error_subcode", error.error_subcode);
                safeAddExtra(addExtra, EXTRA_ERROR_TYPE, error.type);
                safeAddExtra(addExtra, "error_message", error.message);
                safeAddExtra(addExtra, EXTRA_ERROR_USER_TITLE, error.error_user_title);
                safeAddExtra(addExtra, EXTRA_ERROR_USER_MESSAGE, error.error_user_msg);
            }
            addExtra.logAndRelease();
        } catch (AnonymousClass13S | IOException e) {
            AnonymousClass0MD.A0D(TAG, e, "Error processing response");
        }
    }

    public static void safeAddExtra(Event event, String str, @Nullable String str2) {
        if (str2 != null) {
            event.addExtra(str, str2);
        }
    }

    @Override // com.oculus.http.core.interceptor.AuthorizationInterceptor
    public Request.Builder addAuthorization(Request request) throws IOException {
        String header = request.header(DsatAuthorization.INTERNAL_PARAMETER_HEADER);
        Request.Builder newBuilder = request.newBuilder();
        newBuilder.removeHeader(DsatAuthorization.INTERNAL_PARAMETER_HEADER);
        newBuilder.header("Authorization", AnonymousClass006.A07("Bearer ", getAccessToken(header)));
        return newBuilder;
    }

    public String getAccessToken(String str) throws IOException {
        if (!DsatAuthorization.INTERNAL_HEADER_REQUIRES_DSAT.equals(str)) {
            return getCredentialsAccessToken();
        }
        Task<String> fetchDsatElseRegularTokenAsync = ((DsatFetcher) AnonymousClass0VF.A03(2, 103, this._UL_mInjectionContext)).fetchDsatElseRegularTokenAsync();
        try {
            if (!fetchDsatElseRegularTokenAsync.waitForCompletion(30, TimeUnit.SECONDS)) {
                throw new ProtocolException("Timeout during fetching DSAT");
            } else if (!fetchDsatElseRegularTokenAsync.isFaulted()) {
                String result = fetchDsatElseRegularTokenAsync.getResult();
                if (TextUtils.isEmpty(result)) {
                    return getLoggedOutAccessToken();
                }
                return result;
            } else {
                throw new ProtocolException(fetchDsatElseRegularTokenAsync.getError().getMessage());
            }
        } catch (InterruptedException e) {
            throw new ProtocolException(e.getMessage());
        }
    }

    @Override // com.oculus.http.core.interceptor.AuthorizationInterceptor
    @SuppressLint({"BadMethodUse-java.lang.System.currentTimeMillis"})
    public void onUnauthorized(Response response) {
        if (Math.abs(System.currentTimeMillis() - this.mAuthDatastoreProvider.get().getCredentialsUpdateTimeMillis()) >= CREDENTIALS_UPDATE_WINDOW_MS) {
            logAutoLogout(response);
            this.mAuthDatastoreProvider.get().clearCredentials();
        }
    }

    @Inject
    public OculusAuthorizationInterceptor(AnonymousClass0lg r3) {
        this._UL_mInjectionContext = new AnonymousClass0RE(4, r3);
        this.mCredentialsProvider = CredentialsModule._UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_auth_credentials_Credentials_ULGT__ULSEP_ACCESS_METHOD(r3);
        this.mAuthDatastoreProvider = StorageModule._UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_auth_storage_AuthDatastore_ULGT__ULSEP_ACCESS_METHOD(r3);
    }
}
