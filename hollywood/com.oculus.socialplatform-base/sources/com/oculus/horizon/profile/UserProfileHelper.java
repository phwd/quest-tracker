package com.oculus.horizon.profile;

import X.AbstractC03180ld;
import X.AnonymousClass0Qj;
import X.AnonymousClass0RE;
import X.AnonymousClass0VB;
import X.AnonymousClass0VF;
import X.AnonymousClass0lg;
import X.AnonymousClass13N;
import X.AnonymousClass1TK;
import android.annotation.SuppressLint;
import android.content.Context;
import android.content.SharedPreferences;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.ForAppContext;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Eager;
import com.facebook.ultralight.Inject;
import com.google.common.base.Absent;
import com.google.common.base.Optional;
import com.google.common.base.Strings;
import com.google.common.collect.ImmutableList;
import com.oculus.auth.credentials.Credentials;
import com.oculus.auth.credentials.CredentialsModule;
import com.oculus.errorreporting.ErrorReporter;
import com.oculus.horizon.api.common.ClientPreference;
import com.oculus.horizon.api.common.PaymentMethods;
import com.oculus.horizon.api.common.user.ProfilePhoto;
import com.oculus.horizon.api.common.user.User;
import com.oculus.horizon.api.fbconnect.FBConnectAccount;
import com.oculus.horizon.api.profile.LinkedAccounts;
import com.oculus.util.collection.CollectionUtil;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import javax.annotation.Nullable;
import javax.inject.Provider;

@SuppressLint({"SharedPreferencesUse"})
@Dependencies({"_UL__ULSEP_android_content_SharedPreferences_ULSEP_com_oculus_horizon_profile_UserProfileSharedPrefs_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_auth_credentials_Credentials_ULSEP_BINDING_ID", "_UL__ULSEP_java_util_Set_ULLT_com_oculus_horizon_profile_UserProfileUpdateListener_ULGT__ULSEP_BINDING_ID"})
@ApplicationScoped
public class UserProfileHelper {
    public static final AnonymousClass13N GSON = new AnonymousClass13N();
    public static final String KEY_AUTO_UPDATES_ENABLED = "key_auto_updates_enabled";
    public static final String KEY_CHECK_APP_VERSION_ROADBLOCK = "key_check_app_version_roadblock";
    public static final String KEY_EMAIL = "key_email";
    public static final String KEY_FACEBOOK_EMAIL = "key_facebook_email";
    public static final String KEY_FACEBOOK_USER_ID = "key_facebook_user_id";
    public static final String KEY_HAS_DOCKED = "has_docked";
    public static final String KEY_HAS_OPTED_OUT_FRIEND_ONLINE_BROADCAST_NOTIFS = "key_has_opted_out_friend_online_broadcast_notifs";
    public static final String KEY_HAS_OPTED_OUT_FRIEND_ONLINE_NOTIFS = "key_has_opted_out_friend_online_notifs";
    public static final String KEY_HOME_TUTORIAL_COMPLETED = "key_home_tutorial_completed";
    public static final String KEY_IS_PIN_SET = "key_is_pin_set";
    public static final String KEY_LINKED_ACCOUNTS_ENABLED = "key_linked_accounts_enabled";
    public static final String KEY_SEEN_ACTIVITY_PRIVACY_UPDATE_ROADBLOCK = "key_seen_activity_privacy_update_roadblock";
    public static final String KEY_SEEN_ADD_PROFILE_ICON = "key_seen_profile_icon";
    public static final String KEY_SEEN_PARTY_CALLS_NUX = "key_seen_party_calls_nux";
    public static final String KEY_SEEN_PAYMENT_ROADBLOCK = "key_seen_payment_roablock";
    public static final String KEY_SEEN_SOCIAL_NUX = "key_seen_social_nux";
    public static final String KEY_SEEN_SPECIAL_OFFER_ROADBLOCK = "key_seen_special_offer_roadblock";
    public static final String KEY_USERNAME = "key_username";
    public static final String KEY_USER_ID = "key_user_id";
    public static final String KEY_USER_OBJECT = "key_user_object";
    public static final String KEY_USE_TEST_STORES = "key_use_test_stores";
    public static final String PREFERENCE_DEFAULT_BROWSER = "defaultBrowser";
    public static final String PREFERENCE_HAS_FINISHED_FULL_VR_NUX = "hasFinishedFullVrNux";
    public static final String PREFERENCE_HAS_FINISHED_IPD_ADJUST = "hasFinishedIPDAdjust";
    public static final String PREFERENCE_HAS_FINISHED_MONTEREY_NUX = "hasFinishedMontereyNux";
    public static final String PREFERENCE_HAS_FINISHED_NUX = "hasFinishedNux";
    public static final String PREFERENCE_HAS_OPTED_OUT_OF_HSW = "hasOptedOutOfHSW";
    public static final String PREFERENCE_HAS_OPTED_OUT_OF_MALIBU_RECENTER = "hasOptedOutOfMalibuRecenter";
    public static final String PREFERENCE_HAS_SEEN_CONFIRM_QUIT = "hasSeenConfirmQuit";
    public static final String PREFERENCE_HAS_SEEN_CONFIRM_QUIT_NOTIF = "hasSeenConfirmQuitNotif";
    public static final String PREFERENCE_HAS_SEEN_FOCUS = "hasSeenFocus";
    public static final String PREFERENCE_HAS_SEEN_HAND_TRACKING_NUX = "hasSeenHandTrackingNux";
    public static final String PREFERENCE_HAS_SEEN_HSW_VIDEO = "hasSeenHSWVideo";
    public static final String PREFERENCE_HAS_SEEN_INTERNET_BROWSER_PROMPT = "hasSeenInternetBrowserPrompt";
    public static final String PREFERENCE_HAS_SEEN_LONG_HSW = "hasSeenLongHSW";
    public static final String PREFERENCE_HAS_SEEN_NEW_LIBRARY = "hasSeenNewLibrary";
    public static final String PREFERENCE_HAS_SEEN_NUX = "hasSeenNux";
    public static final String PREFERENCE_HAS_SEEN_SAVED_PROMPT = "hasSeenSavedPrompt";
    public static final String PREFERENCE_HAS_SEEN_TUTORIAL_PROMPT = "hasSeenTutorial";
    public static final String PREFERENCE_HIGH_PRIORITY_APPS_DOWNLOAD_PACKAGES = "highPriorityAppsDownloadPackages";
    public static final String PREFERENCE_HIGH_PRIORITY_APPS_DOWNLOAD_STATUS = "highPriorityAppsDownloadStatus";
    public static final String PREFERENCE_HIGH_PRIORITY_APPS_DOWNLOAD_WAITTIME = "highPriorityAppsDownloadWaitTimeMilliSec";
    public static final String PREFERENCE_NUX_RESULT = "nuxResult";
    public static final String PREFERENCE_NUX_SEEN_COUNT = "nuxSeenCount";
    public static final String PREFERENCE_NUX_STATE = "nuxState";
    public static final String TAG = "UserProfileHelper";
    public static final String USER_PROFILE_SHARED_PREFERENCES = "user_profile_shared_preferences";
    public static volatile UserProfileHelper _UL__ULSEP_com_oculus_horizon_profile_UserProfileHelper_ULSEP_INSTANCE;
    public AnonymousClass0RE _UL_mInjectionContext;
    @Inject
    public final Provider<Credentials> mCredentialsProvider;
    @Inject
    @Eager
    @UserProfileSharedPrefs
    public final SharedPreferences mPrefs;

    public final class Editor {
        public Optional<Boolean> mCheckAppVersionRoadblock;
        public Optional<Boolean> mHasDocked;
        public Optional<Boolean> mHasFinishedFullVrNux;
        public Optional<Boolean> mHasOptedOutHSW;
        public Optional<Boolean> mHasSeenActivityPrivacyUpdateRoadblock;
        public Optional<Boolean> mHasSeenAddProfileIcon;
        public Optional<Boolean> mHasSeenHSWVideo;
        public Optional<Boolean> mHasSeenHandTrackingNux;
        public Optional<Boolean> mHasSeenPartyCallsNux;
        public Optional<Boolean> mHasSeenPaymentRoadblock;
        public Optional<Boolean> mHasSeenSocialNux;
        public Optional<LinkedAccounts> mLinkedAccounts;
        public final SharedPreferences mPrefs;
        public final List<String> mSpecialOfferIds;
        public Optional<Boolean> mUseAutoUpdates;
        public Optional<Boolean> mUseTestStores;
        public Optional<User> mUser;

        private void notifyUpdateListeners() {
            if (this.mUser.isPresent()) {
                for (UserProfileUpdateListener userProfileUpdateListener : (Set) AnonymousClass0VF.A03(0, 32, UserProfileHelper.this._UL_mInjectionContext)) {
                    userProfileUpdateListener.onUserUpdated();
                }
            }
        }

        private SharedPreferences.Editor saveVariables() {
            FBConnectAccount fBConnectAccount;
            SharedPreferences.Editor edit = this.mPrefs.edit();
            Optional<User> optional = this.mUser;
            if (optional.isPresent()) {
                edit.putString(UserProfileHelper.KEY_USER_OBJECT, UserProfileHelper.GSON.A06(optional.get()));
            }
            Optional<LinkedAccounts> optional2 = this.mLinkedAccounts;
            if (optional2.isPresent() && (fBConnectAccount = optional2.get().facebook_account) != null) {
                edit.putString(UserProfileHelper.KEY_FACEBOOK_USER_ID, fBConnectAccount.facebook_id);
                edit.putString(UserProfileHelper.KEY_FACEBOOK_EMAIL, fBConnectAccount.facebook_email);
            }
            Optional<Boolean> optional3 = this.mHasSeenPaymentRoadblock;
            if (optional3.isPresent()) {
                edit.putBoolean(UserProfileHelper.KEY_SEEN_PAYMENT_ROADBLOCK, optional3.get().booleanValue());
            }
            if (CollectionUtil.isNotNullOrEmpty(this.mSpecialOfferIds)) {
                for (String str : this.mSpecialOfferIds) {
                    if (!Strings.isNullOrEmpty(str)) {
                        edit.putBoolean(UserProfileHelper.KEY_SEEN_SPECIAL_OFFER_ROADBLOCK.concat(str), true);
                    }
                }
            }
            Optional<Boolean> optional4 = this.mHasSeenAddProfileIcon;
            if (optional4.isPresent()) {
                edit.putBoolean(UserProfileHelper.KEY_SEEN_ADD_PROFILE_ICON, optional4.get().booleanValue());
            }
            Optional<Boolean> optional5 = this.mHasSeenSocialNux;
            if (optional5.isPresent()) {
                edit.putBoolean(UserProfileHelper.KEY_SEEN_SOCIAL_NUX, optional5.get().booleanValue());
            }
            Optional<Boolean> optional6 = this.mHasSeenActivityPrivacyUpdateRoadblock;
            if (optional6.isPresent()) {
                edit.putBoolean(UserProfileHelper.KEY_SEEN_ACTIVITY_PRIVACY_UPDATE_ROADBLOCK, optional6.get().booleanValue());
            }
            Optional<Boolean> optional7 = this.mUseTestStores;
            if (optional7.isPresent()) {
                edit.putBoolean(UserProfileHelper.KEY_USE_TEST_STORES, optional7.get().booleanValue());
            }
            Optional<Boolean> optional8 = this.mCheckAppVersionRoadblock;
            if (optional8.isPresent()) {
                edit.putBoolean(UserProfileHelper.KEY_CHECK_APP_VERSION_ROADBLOCK, optional8.get().booleanValue());
            }
            Optional<Boolean> optional9 = this.mUseAutoUpdates;
            if (optional9.isPresent()) {
                edit.putBoolean(UserProfileHelper.KEY_AUTO_UPDATES_ENABLED, optional9.get().booleanValue());
            }
            Optional<Boolean> optional10 = this.mHasDocked;
            if (optional10.isPresent()) {
                edit.putBoolean("has_docked", optional10.get().booleanValue());
            }
            Optional<Boolean> optional11 = this.mHasSeenHSWVideo;
            if (optional11.isPresent()) {
                edit.putBoolean(UserProfileHelper.PREFERENCE_HAS_SEEN_HSW_VIDEO, optional11.get().booleanValue());
            }
            Optional<Boolean> optional12 = this.mHasSeenPartyCallsNux;
            if (optional12.isPresent()) {
                edit.putBoolean(UserProfileHelper.KEY_SEEN_PARTY_CALLS_NUX, optional12.get().booleanValue());
            }
            Optional<Boolean> optional13 = this.mHasOptedOutHSW;
            if (optional13.isPresent()) {
                edit.putBoolean(UserProfileHelper.PREFERENCE_HAS_OPTED_OUT_OF_HSW, optional13.get().booleanValue());
            }
            Optional<Boolean> optional14 = this.mHasFinishedFullVrNux;
            if (optional14.isPresent()) {
                edit.putBoolean(UserProfileHelper.PREFERENCE_HAS_FINISHED_FULL_VR_NUX, optional14.get().booleanValue());
            }
            Optional<Boolean> optional15 = this.mHasSeenHandTrackingNux;
            if (optional15.isPresent()) {
                edit.putBoolean(UserProfileHelper.PREFERENCE_HAS_SEEN_HAND_TRACKING_NUX, optional15.get().booleanValue());
            }
            return edit;
        }

        private void setBooleanClientPreference(String str, String str2) {
            Optional<User> optional = this.mUser;
            if (!optional.isPresent()) {
                optional = Optional.of(UserProfileHelper.getUser(this.mPrefs));
                this.mUser = optional;
            }
            User user = optional.get();
            List<ClientPreference> list = user.client_preference_data;
            if (list == null) {
                list = new ArrayList();
            }
            boolean z = false;
            ArrayList arrayList = new ArrayList(list);
            for (ClientPreference clientPreference : list) {
                if (str.equals(clientPreference.type)) {
                    arrayList.remove(clientPreference);
                    arrayList.add(new ClientPreference(str, str2));
                    z = true;
                }
            }
            if (!z) {
                arrayList.add(new ClientPreference(str, str2));
            }
            user.client_preference_data = arrayList;
        }

        public Editor markHasSeenSpecialOfferRoadblock(String str) {
            this.mSpecialOfferIds.add(str);
            return this;
        }

        public Editor setDefaultBrowser(String str) {
            setBooleanClientPreference(UserProfileHelper.PREFERENCE_DEFAULT_BROWSER, str);
            return this;
        }

        public Editor setHighPriorityAppsDownloadPackages(String str) {
            setBooleanClientPreference(UserProfileHelper.PREFERENCE_HIGH_PRIORITY_APPS_DOWNLOAD_PACKAGES, str);
            return this;
        }

        public Editor setNuxResult(String str) {
            setBooleanClientPreference(UserProfileHelper.PREFERENCE_NUX_RESULT, str);
            return this;
        }

        public Editor setNuxState(String str) {
            setBooleanClientPreference(UserProfileHelper.PREFERENCE_NUX_STATE, str);
            return this;
        }

        public Editor setPinSet(boolean z) {
            Optional<User> optional = this.mUser;
            if (!optional.isPresent()) {
                optional = Optional.of(UserProfileHelper.getUser(this.mPrefs));
                this.mUser = optional;
            }
            optional.get().is_pin_set = true;
            return this;
        }

        public void apply() {
            saveVariables().apply();
            notifyUpdateListeners();
        }

        public boolean commit() {
            boolean commit = saveVariables().commit();
            notifyUpdateListeners();
            return commit;
        }

        public Editor setCheckAppVersionRoadblock(boolean z) {
            this.mCheckAppVersionRoadblock = Optional.of(Boolean.valueOf(z));
            return this;
        }

        public Editor setHasDocked(boolean z) {
            this.mHasDocked = Optional.of(Boolean.valueOf(z));
            return this;
        }

        public Editor setHasFinishedFullVrNux(boolean z) {
            this.mHasFinishedFullVrNux = Optional.of(Boolean.valueOf(z));
            return this;
        }

        public Editor setHasFinishedIPDAdjust(boolean z) {
            setBooleanClientPreference(UserProfileHelper.PREFERENCE_HAS_FINISHED_IPD_ADJUST, Boolean.toString(z));
            return this;
        }

        public Editor setHasFinishedMontereyNux(boolean z) {
            setBooleanClientPreference(UserProfileHelper.PREFERENCE_HAS_FINISHED_MONTEREY_NUX, Boolean.toString(z));
            return this;
        }

        public Editor setHasFinishedNux(boolean z) {
            setBooleanClientPreference(UserProfileHelper.PREFERENCE_HAS_FINISHED_NUX, Boolean.toString(z));
            return this;
        }

        public Editor setHasOptedOutHSW(boolean z) {
            this.mHasOptedOutHSW = Optional.of(Boolean.valueOf(z));
            return this;
        }

        public Editor setHasOptedOutOfMalibuRecenter(boolean z) {
            setBooleanClientPreference(UserProfileHelper.PREFERENCE_HAS_OPTED_OUT_OF_MALIBU_RECENTER, Boolean.toString(z));
            return this;
        }

        public Editor setHasSeenActivityPrivacyUpdateRoadblock(boolean z) {
            this.mHasSeenActivityPrivacyUpdateRoadblock = Optional.of(Boolean.valueOf(z));
            return this;
        }

        public Editor setHasSeenAddProfileIcon(boolean z) {
            this.mHasSeenAddProfileIcon = Optional.of(Boolean.valueOf(z));
            return this;
        }

        public Editor setHasSeenConfirmQuit(boolean z) {
            setBooleanClientPreference(UserProfileHelper.PREFERENCE_HAS_SEEN_CONFIRM_QUIT, Boolean.toString(z));
            return this;
        }

        public Editor setHasSeenConfirmQuitNotif(boolean z) {
            setBooleanClientPreference(UserProfileHelper.PREFERENCE_HAS_SEEN_CONFIRM_QUIT_NOTIF, Boolean.toString(z));
            return this;
        }

        public Editor setHasSeenFocus(boolean z) {
            setBooleanClientPreference(UserProfileHelper.PREFERENCE_HAS_SEEN_FOCUS, Boolean.toString(z));
            return this;
        }

        public Editor setHasSeenHSWVideo(boolean z) {
            this.mHasSeenHSWVideo = Optional.of(Boolean.valueOf(z));
            return this;
        }

        public Editor setHasSeenHandTrackingNux(boolean z) {
            this.mHasSeenHandTrackingNux = Optional.of(Boolean.valueOf(z));
            return this;
        }

        public Editor setHasSeenInternetBrowserPrompt(boolean z) {
            setBooleanClientPreference(UserProfileHelper.PREFERENCE_HAS_SEEN_INTERNET_BROWSER_PROMPT, Boolean.toString(z));
            return this;
        }

        public Editor setHasSeenLongHSW(boolean z) {
            setBooleanClientPreference(UserProfileHelper.PREFERENCE_HAS_SEEN_LONG_HSW, Boolean.toString(z));
            return this;
        }

        public Editor setHasSeenNewLibrary(boolean z) {
            setBooleanClientPreference(UserProfileHelper.PREFERENCE_HAS_SEEN_NEW_LIBRARY, Boolean.toString(z));
            return this;
        }

        public Editor setHasSeenNux(boolean z) {
            setBooleanClientPreference(UserProfileHelper.PREFERENCE_HAS_SEEN_NUX, Boolean.toString(z));
            return this;
        }

        public Editor setHasSeenPartyCallsNUX(boolean z) {
            this.mHasSeenPartyCallsNux = Optional.of(Boolean.valueOf(z));
            return this;
        }

        public Editor setHasSeenPaymentRoadblock(boolean z) {
            this.mHasSeenPaymentRoadblock = Optional.of(Boolean.valueOf(z));
            return this;
        }

        public Editor setHasSeenSavedPrompt(boolean z) {
            setBooleanClientPreference(UserProfileHelper.PREFERENCE_HAS_SEEN_SAVED_PROMPT, Boolean.toString(z));
            return this;
        }

        public Editor setHasSeenSocialNux(boolean z) {
            this.mHasSeenSocialNux = Optional.of(Boolean.valueOf(z));
            return this;
        }

        public Editor setHasSeenTutorialPrompt(boolean z) {
            setBooleanClientPreference(UserProfileHelper.PREFERENCE_HAS_SEEN_TUTORIAL_PROMPT, Boolean.toString(z));
            return this;
        }

        public Editor setHighPriorityAppsDownloadStatus(int i) {
            setBooleanClientPreference(UserProfileHelper.PREFERENCE_HIGH_PRIORITY_APPS_DOWNLOAD_STATUS, Integer.toString(i));
            return this;
        }

        public Editor setHighPriorityAppsDownloadWaitTime(long j) {
            setBooleanClientPreference(UserProfileHelper.PREFERENCE_HIGH_PRIORITY_APPS_DOWNLOAD_WAITTIME, Long.toString(j));
            return this;
        }

        public Editor setLinkedAccounts(LinkedAccounts linkedAccounts) {
            this.mLinkedAccounts = Optional.of(linkedAccounts);
            return this;
        }

        public Editor setNuxSeenCount(int i) {
            setBooleanClientPreference(UserProfileHelper.PREFERENCE_NUX_SEEN_COUNT, Integer.toString(i));
            return this;
        }

        public Editor setUseAutoUpdates(boolean z) {
            this.mUseAutoUpdates = Optional.of(Boolean.valueOf(z));
            return this;
        }

        public Editor setUseTestStores(boolean z) {
            this.mUseTestStores = Optional.of(Boolean.valueOf(z));
            return this;
        }

        public Editor setUser(User user) {
            this.mUser = Optional.of(user);
            return this;
        }

        public Editor(SharedPreferences sharedPreferences) {
            this.mSpecialOfferIds = new ArrayList();
            this.mPrefs = sharedPreferences;
            Absent<Object> absent = Absent.INSTANCE;
            this.mUser = absent;
            this.mHasSeenAddProfileIcon = absent;
            this.mHasSeenPaymentRoadblock = absent;
            this.mHasSeenSocialNux = absent;
            this.mHasSeenActivityPrivacyUpdateRoadblock = absent;
            this.mUseTestStores = absent;
            this.mCheckAppVersionRoadblock = absent;
            this.mUseAutoUpdates = absent;
            this.mHasDocked = absent;
            this.mHasSeenHSWVideo = absent;
            this.mHasSeenPartyCallsNux = absent;
            this.mHasOptedOutHSW = absent;
            this.mHasFinishedFullVrNux = absent;
            this.mHasSeenHandTrackingNux = absent;
            this.mLinkedAccounts = absent;
        }
    }

    @AutoGeneratedAccessMethod
    public static final AbstractC03180ld _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_horizon_profile_UserProfileHelper_ULGT__ULSEP_ACCESS_METHOD(AnonymousClass0lg r2) {
        return new AnonymousClass0VB(69, r2);
    }

    @AutoGeneratedAccessMethod
    public static final UserProfileHelper _UL__ULSEP_com_oculus_horizon_profile_UserProfileHelper_ULSEP_ACCESS_METHOD(AnonymousClass0lg r2) {
        return (UserProfileHelper) AnonymousClass1TK.A00(69, r2, null);
    }

    @AutoGeneratedFactoryMethod
    public static final UserProfileHelper _UL__ULSEP_com_oculus_horizon_profile_UserProfileHelper_ULSEP_FACTORY_METHOD(AnonymousClass0lg r4, Object obj) {
        if (_UL__ULSEP_com_oculus_horizon_profile_UserProfileHelper_ULSEP_INSTANCE == null) {
            synchronized (UserProfileHelper.class) {
                AnonymousClass0Qj A00 = AnonymousClass0Qj.A00(_UL__ULSEP_com_oculus_horizon_profile_UserProfileHelper_ULSEP_INSTANCE, r4);
                if (A00 != null) {
                    try {
                        _UL__ULSEP_com_oculus_horizon_profile_UserProfileHelper_ULSEP_INSTANCE = new UserProfileHelper(r4.getApplicationInjector());
                    } finally {
                        A00.A01();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_horizon_profile_UserProfileHelper_ULSEP_INSTANCE;
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_horizon_profile_UserProfileHelper_ULGT__ULSEP_ACCESS_METHOD(AnonymousClass0lg r2) {
        return new AnonymousClass0VB(69, r2);
    }

    private int getIntClientPreference(String str) {
        List<ClientPreference> list = getUser(this.mPrefs).client_preference_data;
        if (list != null) {
            for (ClientPreference clientPreference : list) {
                if (str.equals(clientPreference.type)) {
                    return Integer.parseInt(clientPreference.value);
                }
            }
        }
        return 0;
    }

    public static String getKeyForThisSpecialOfferId(String str) {
        return KEY_SEEN_SPECIAL_OFFER_ROADBLOCK.concat(str);
    }

    private long getLongClientPreference(String str) {
        List<ClientPreference> list = getUser(this.mPrefs).client_preference_data;
        if (list != null) {
            for (ClientPreference clientPreference : list) {
                if (str.equals(clientPreference.type)) {
                    return Long.parseLong(clientPreference.value);
                }
            }
        }
        return 0;
    }

    private String getStringClientPreference(String str) {
        List<ClientPreference> list = getUser(this.mPrefs).client_preference_data;
        if (list != null) {
            for (ClientPreference clientPreference : list) {
                if (str.equals(clientPreference.type)) {
                    return clientPreference.value;
                }
            }
        }
        return "";
    }

    public static User getUser(SharedPreferences sharedPreferences) {
        if (!sharedPreferences.contains(KEY_USER_OBJECT)) {
            migrateUser(sharedPreferences);
        }
        return (User) GSON.A05(sharedPreferences.getString(KEY_USER_OBJECT, null), User.class);
    }

    public static void migrateUser(SharedPreferences sharedPreferences) {
        User user = new User();
        user.email = sharedPreferences.getString(KEY_EMAIL, null);
        user.alias = sharedPreferences.getString(KEY_USERNAME, null);
        user.id = sharedPreferences.getString(KEY_USER_ID, null);
        user.is_pin_set = Boolean.valueOf(sharedPreferences.getBoolean(KEY_IS_PIN_SET, false));
        sharedPreferences.edit().putString(KEY_USER_OBJECT, GSON.A06(user)).apply();
    }

    @Deprecated
    public static SharedPreferences provideUserProfileSharedPrefs(@ForAppContext Context context) {
        try {
            Context createPackageContext = context.createPackageContext("com.oculus.horizon", 1);
            if (createPackageContext != null) {
                return createPackageContext.getSharedPreferences(USER_PROFILE_SHARED_PREFERENCES, 4);
            }
            throw new NullPointerException(Strings.lenientFormat("Could not create context from: %s", context));
        } catch (Throwable th) {
            ErrorReporter.softReport(TAG, "Failed to create Horizon context", th);
            throw new RuntimeException(th);
        }
    }

    public Editor edit() {
        return new Editor(this.mPrefs);
    }

    @Nullable
    public PaymentMethods getAllPaymentMethods() {
        return getUser(this.mPrefs).all_payment_methods;
    }

    public ImmutableList<ClientPreference> getClientPreferences() {
        List<ClientPreference> list = getUser(this.mPrefs).client_preference_data;
        if (list == null) {
            return ImmutableList.of();
        }
        return ImmutableList.A0A(list);
    }

    public String getDefaultBrowser() {
        return getStringClientPreference(PREFERENCE_DEFAULT_BROWSER);
    }

    public String getEmail() {
        return getUser(this.mPrefs).email;
    }

    @Nullable
    public String getFacebookEmail() {
        return this.mPrefs.getString(KEY_FACEBOOK_EMAIL, null);
    }

    @Nullable
    public String getFacebookUserId() {
        return this.mPrefs.getString(KEY_FACEBOOK_USER_ID, null);
    }

    public boolean getHasDocked() {
        return this.mPrefs.getBoolean("has_docked", false);
    }

    public boolean getHasFinishedFullVrNux() {
        return this.mPrefs.getBoolean(PREFERENCE_HAS_FINISHED_FULL_VR_NUX, false);
    }

    public boolean getHasFinishedIPDAdjust() {
        return getBooleanClientPreference(this.mPrefs, PREFERENCE_HAS_FINISHED_IPD_ADJUST);
    }

    public boolean getHasFinishedMontereyNux() {
        return getBooleanClientPreference(this.mPrefs, PREFERENCE_HAS_FINISHED_MONTEREY_NUX);
    }

    public boolean getHasFinishedNux() {
        return getBooleanClientPreference(this.mPrefs, PREFERENCE_HAS_FINISHED_NUX);
    }

    public boolean getHasOptedOutHSW() {
        if (!this.mPrefs.contains(PREFERENCE_HAS_OPTED_OUT_OF_HSW)) {
            Editor edit = edit();
            edit.setHasOptedOutHSW(getBooleanClientPreference(this.mPrefs, PREFERENCE_HAS_OPTED_OUT_OF_HSW));
            edit.commit();
        }
        return this.mPrefs.getBoolean(PREFERENCE_HAS_OPTED_OUT_OF_HSW, false);
    }

    public boolean getHasOptedOutOfMalibuRecenter() {
        return getBooleanClientPreference(this.mPrefs, PREFERENCE_HAS_OPTED_OUT_OF_MALIBU_RECENTER);
    }

    public boolean getHasSeenConfirmQuit() {
        return getBooleanClientPreference(this.mPrefs, PREFERENCE_HAS_SEEN_CONFIRM_QUIT);
    }

    public boolean getHasSeenConfirmQuitNotif() {
        return getBooleanClientPreference(this.mPrefs, PREFERENCE_HAS_SEEN_CONFIRM_QUIT_NOTIF);
    }

    public boolean getHasSeenFocus() {
        return getBooleanClientPreference(this.mPrefs, PREFERENCE_HAS_SEEN_FOCUS);
    }

    public boolean getHasSeenHandTrackingNux() {
        return this.mPrefs.getBoolean(PREFERENCE_HAS_SEEN_HAND_TRACKING_NUX, false);
    }

    public boolean getHasSeenInternetBrowserPrompt() {
        return getBooleanClientPreference(this.mPrefs, PREFERENCE_HAS_SEEN_INTERNET_BROWSER_PROMPT);
    }

    public boolean getHasSeenLongHSW() {
        return getBooleanClientPreference(this.mPrefs, PREFERENCE_HAS_SEEN_LONG_HSW);
    }

    public boolean getHasSeenNewLibrary() {
        return getBooleanClientPreference(this.mPrefs, PREFERENCE_HAS_SEEN_NEW_LIBRARY);
    }

    public boolean getHasSeenNux() {
        return getBooleanClientPreference(this.mPrefs, PREFERENCE_HAS_SEEN_NUX);
    }

    public boolean getHasSeenPartyCallsNUX() {
        return this.mPrefs.getBoolean(KEY_SEEN_PARTY_CALLS_NUX, false);
    }

    public boolean getHasSeenSavedPrompt() {
        return getBooleanClientPreference(this.mPrefs, PREFERENCE_HAS_SEEN_SAVED_PROMPT);
    }

    public String getHighPriorityAppsDownloadPackages() {
        return getStringClientPreference(PREFERENCE_HIGH_PRIORITY_APPS_DOWNLOAD_PACKAGES);
    }

    public int getHighPriorityAppsDownloadStatus() {
        return getIntClientPreference(PREFERENCE_HIGH_PRIORITY_APPS_DOWNLOAD_STATUS);
    }

    public long getHighPriorityAppsDownloadWaitTime() {
        return getLongClientPreference(PREFERENCE_HIGH_PRIORITY_APPS_DOWNLOAD_WAITTIME);
    }

    public String getNuxResult() {
        return getStringClientPreference(PREFERENCE_NUX_RESULT);
    }

    public int getNuxSeenCount() {
        return getIntClientPreference(PREFERENCE_NUX_SEEN_COUNT);
    }

    public String getNuxState() {
        return getStringClientPreference(PREFERENCE_NUX_STATE);
    }

    @Nullable
    public String getProfilePictureUri() {
        ProfilePhoto profilePhoto = getUser(this.mPrefs).profile_photo;
        if (profilePhoto != null) {
            return profilePhoto.uri;
        }
        return null;
    }

    public boolean getShouldCheckForAppVersionRoadblock() {
        return this.mPrefs.getBoolean(KEY_CHECK_APP_VERSION_ROADBLOCK, true);
    }

    @Deprecated
    public String getUserId() {
        return getUser(this.mPrefs).id;
    }

    public String getUserRealName() {
        return getUser(this.mPrefs).name;
    }

    public String getUsername() {
        return getUser(this.mPrefs).alias;
    }

    public boolean hasSeenActivityPrivacyUpdateRoadblock() {
        return this.mPrefs.getBoolean(KEY_SEEN_ACTIVITY_PRIVACY_UPDATE_ROADBLOCK, false);
    }

    public boolean hasSeenAddProfilePhotoIcon() {
        return this.mPrefs.getBoolean(KEY_SEEN_ADD_PROFILE_ICON, false);
    }

    public boolean hasSeenHSWVideo() {
        return this.mPrefs.getBoolean(PREFERENCE_HAS_SEEN_HSW_VIDEO, false);
    }

    public boolean hasSeenPaymentRoadblock() {
        return this.mPrefs.getBoolean(KEY_SEEN_PAYMENT_ROADBLOCK, false);
    }

    public boolean hasSeenSocialNux() {
        return this.mPrefs.getBoolean(KEY_SEEN_SOCIAL_NUX, false);
    }

    public boolean hasSeenSpecialOfferRoadblock(String str) {
        return this.mPrefs.getBoolean(KEY_SEEN_SPECIAL_OFFER_ROADBLOCK.concat(str), false);
    }

    public void invalidateAllUserProfiles() {
        this.mPrefs.edit().clear().apply();
    }

    public boolean isLinkedAccountsEnabled() {
        return this.mPrefs.getBoolean(KEY_LINKED_ACCOUNTS_ENABLED, false);
    }

    public boolean isPinSet() {
        Boolean bool = getUser(this.mPrefs).is_pin_set;
        if (bool != null) {
            return bool.booleanValue();
        }
        return false;
    }

    public boolean isUseTestStores() {
        return this.mPrefs.getBoolean(KEY_USE_TEST_STORES, false);
    }

    @Deprecated
    public boolean isUserLoggedIn() {
        if (this.mCredentialsProvider.get() != null) {
            return true;
        }
        return false;
    }

    public void setHasOptedOutFriendOnlineBroadcastNotifs(boolean z) {
        this.mPrefs.edit().putBoolean(KEY_HAS_OPTED_OUT_FRIEND_ONLINE_BROADCAST_NOTIFS, z).apply();
    }

    public void setHasOptedOutFriendOnlineNotifs(boolean z) {
        this.mPrefs.edit().putBoolean(KEY_HAS_OPTED_OUT_FRIEND_ONLINE_NOTIFS, z).apply();
    }

    public boolean useAutoUpdates() {
        return this.mPrefs.getBoolean(KEY_AUTO_UPDATES_ENABLED, true);
    }

    @Inject
    public UserProfileHelper(AnonymousClass0lg r3) {
        this._UL_mInjectionContext = new AnonymousClass0RE(1, r3);
        this.mPrefs = UserProfileModule._UL__ULSEP_android_content_SharedPreferences_ULSEP_com_oculus_horizon_profile_UserProfileSharedPrefs_ULSEP_ACCESS_METHOD(r3);
        this.mCredentialsProvider = CredentialsModule._UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_auth_credentials_Credentials_ULGT__ULSEP_ACCESS_METHOD(r3);
    }

    public static boolean getBooleanClientPreference(SharedPreferences sharedPreferences, String str) {
        List<ClientPreference> list = getUser(sharedPreferences).client_preference_data;
        if (list != null) {
            for (ClientPreference clientPreference : list) {
                if (str.equals(clientPreference.type) && "true".equals(clientPreference.value)) {
                    return true;
                }
            }
        }
        return false;
    }

    @Deprecated
    public static boolean getHasFinishedHomeTutorial(Context context) {
        return provideUserProfileSharedPrefs(context).getBoolean(KEY_HOME_TUTORIAL_COMPLETED, false);
    }

    @Deprecated
    public static boolean getHasSeenTutorialPrompt(Context context) {
        return getHasFinishedHomeTutorial(context) || getBooleanClientPreference(provideUserProfileSharedPrefs(context), PREFERENCE_HAS_SEEN_TUTORIAL_PROMPT);
    }

    public boolean getHasFinishedHomeTutorial() {
        return this.mPrefs.getBoolean(KEY_HOME_TUTORIAL_COMPLETED, false);
    }

    public boolean getHasSeenTutorialPrompt() {
        return getHasFinishedHomeTutorial() || getBooleanClientPreference(this.mPrefs, PREFERENCE_HAS_SEEN_TUTORIAL_PROMPT);
    }
}
