package com.oculus.horizon.api.graphql;

public class GraphQLEventsQuery {
    public static final String EVENT_DATA = "applications_for_viewer {   id,  display_name,},deeplink_message,description,end_time,id,is_viewer_subscribed,joinability_for_viewer,landscape_image    .size(720x405) {  uri,},start_time,subscribed_friends {  nodes {    profile_photo.size(64x64) {      uri,    }  }},subscribed_users_count,temporal_info {  seconds_until_end_time,  seconds_until_start_time,},title,unjoinable_reason_string";
    public static final String EVENT_DETAILS_QUERY = "node(<event_id>) {applications_for_viewer {   id,  display_name,},deeplink_message,description,end_time,id,is_viewer_subscribed,joinability_for_viewer,landscape_image    .size(720x405) {  uri,},start_time,subscribed_friends {  nodes {    profile_photo.size(64x64) {      uri,    }  }},subscribed_users_count,temporal_info {  seconds_until_end_time,  seconds_until_start_time,},title,unjoinable_reason_string}";
    public static final String EVENT_IDS_PARAM = "ids";
    public static final String EVENT_ID_PARAM = "event_id";
    public static final String FEATURED_EVENTS_QUERY = "viewer() {  featured_events      .orderby(start_time)      .first(50) {    nodes {applications_for_viewer {   id,  display_name,},deeplink_message,description,end_time,id,is_viewer_subscribed,joinability_for_viewer,landscape_image    .size(720x405) {  uri,},start_time,subscribed_friends {  nodes {    profile_photo.size(64x64) {      uri,    }  }},subscribed_users_count,temporal_info {  seconds_until_end_time,  seconds_until_start_time,},title,unjoinable_reason_string    }  },user {  subscribed_events      .orderby(start_time)      .first(1) {    count,    nodes {applications_for_viewer {   id,  display_name,},deeplink_message,description,end_time,id,is_viewer_subscribed,joinability_for_viewer,landscape_image    .size(720x405) {  uri,},start_time,subscribed_friends {  nodes {    profile_photo.size(64x64) {      uri,    }  }},subscribed_users_count,temporal_info {  seconds_until_end_time,  seconds_until_start_time,},title,unjoinable_reason_string    }  }}}";
    public static final String FIRST_N = "50";
    public static final String INDIVIDUAL_EVENTS_QUERY = "viewer() {  individual_events      .event_ids(<ids>)      .orderby(start_time)      .first(50) {    nodes {applications_for_viewer {   id,  display_name,},deeplink_message,description,end_time,id,is_viewer_subscribed,joinability_for_viewer,landscape_image    .size(720x405) {  uri,},start_time,subscribed_friends {  nodes {    profile_photo.size(64x64) {      uri,    }  }},subscribed_users_count,temporal_info {  seconds_until_end_time,  seconds_until_start_time,},title,unjoinable_reason_string    }  }}";
    public static final String SUBSCRIBED_EVENTS_QUERY = "viewer() {  user {    subscribed_events        .orderby(start_time)        .first(50) {      nodes {applications_for_viewer {   id,  display_name,},deeplink_message,description,end_time,id,is_viewer_subscribed,joinability_for_viewer,landscape_image    .size(720x405) {  uri,},start_time,subscribed_friends {  nodes {    profile_photo.size(64x64) {      uri,    }  }},subscribed_users_count,temporal_info {  seconds_until_end_time,  seconds_until_start_time,},title,unjoinable_reason_string      }    }  }}";
    public static final String SUBSCRIBE_EVENT = "Mutation EventSubscribe : EventSubscribeResponsePayload {  event_subscribe(<input>) {    event {applications_for_viewer {   id,  display_name,},deeplink_message,description,end_time,id,is_viewer_subscribed,joinability_for_viewer,landscape_image    .size(720x405) {  uri,},start_time,subscribed_friends {  nodes {    profile_photo.size(64x64) {      uri,    }  }},subscribed_users_count,temporal_info {  seconds_until_end_time,  seconds_until_start_time,},title,unjoinable_reason_string    },    viewer {user {  subscribed_events      .orderby(start_time)      .first(1) {    count,    nodes {applications_for_viewer {   id,  display_name,},deeplink_message,description,end_time,id,is_viewer_subscribed,joinability_for_viewer,landscape_image    .size(720x405) {  uri,},start_time,subscribed_friends {  nodes {    profile_photo.size(64x64) {      uri,    }  }},subscribed_users_count,temporal_info {  seconds_until_end_time,  seconds_until_start_time,},title,unjoinable_reason_string    }  }}    },  }}";
    public static final String UNSUBSCRIBE_EVENT = "Mutation EventUnsubscribe : EventUnsubscribeResponsePayload {  event_unsubscribe(<input>) {    event {applications_for_viewer {   id,  display_name,},deeplink_message,description,end_time,id,is_viewer_subscribed,joinability_for_viewer,landscape_image    .size(720x405) {  uri,},start_time,subscribed_friends {  nodes {    profile_photo.size(64x64) {      uri,    }  }},subscribed_users_count,temporal_info {  seconds_until_end_time,  seconds_until_start_time,},title,unjoinable_reason_string    },    viewer {user {  subscribed_events      .orderby(start_time)      .first(1) {    count,    nodes {applications_for_viewer {   id,  display_name,},deeplink_message,description,end_time,id,is_viewer_subscribed,joinability_for_viewer,landscape_image    .size(720x405) {  uri,},start_time,subscribed_friends {  nodes {    profile_photo.size(64x64) {      uri,    }  }},subscribed_users_count,temporal_info {  seconds_until_end_time,  seconds_until_start_time,},title,unjoinable_reason_string    }  }}    },  }}";
    public static final String USER_SUBSCRIBED_EVENTS_PREVIEW_DATA = "user {  subscribed_events      .orderby(start_time)      .first(1) {    count,    nodes {applications_for_viewer {   id,  display_name,},deeplink_message,description,end_time,id,is_viewer_subscribed,joinability_for_viewer,landscape_image    .size(720x405) {  uri,},start_time,subscribed_friends {  nodes {    profile_photo.size(64x64) {      uri,    }  }},subscribed_users_count,temporal_info {  seconds_until_end_time,  seconds_until_start_time,},title,unjoinable_reason_string    }  }}";
}
