package com.oculus.horizon.camera.bitmap;

import X.AbstractC03180ld;
import X.AnonymousClass0Hr;
import X.AnonymousClass0VC;
import X.AnonymousClass0lg;
import X.AnonymousClass1TK;
import X.C00610Hs;
import X.C00740Ii;
import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapShader;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.Shader;
import android.hardware.Camera;
import android.view.TextureView;
import com.facebook.imagepipeline.nativecode.NativeBlurFilter;
import com.facebook.inject.ForAppContext;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.google.common.base.Preconditions;
import com.oculus.socialplatform.R;
import com.oculus.vrshell.panels.AndroidPanelLayer;
import javax.inject.Inject;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID"})
public class CameraBitmapHelper {
    public static final int BLURRED_BITMAP_BLUR_RADIUS = 18;
    public static final int BLURRED_BITMAP_ITERATIONS = 2;
    public static final int BLURRED_BITMAP_SCALE_FACTOR = 6;
    public final Resources mResources;

    @AutoGeneratedAccessMethod
    public static final AbstractC03180ld _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_horizon_camera_bitmap_CameraBitmapHelper_ULGT__ULSEP_ACCESS_METHOD(AnonymousClass0lg r1) {
        return AnonymousClass0Hr.A00(110, r1);
    }

    @AutoGeneratedAccessMethod
    public static final CameraBitmapHelper _UL__ULSEP_com_oculus_horizon_camera_bitmap_CameraBitmapHelper_ULSEP_ACCESS_METHOD(AnonymousClass0lg r2) {
        return (CameraBitmapHelper) AnonymousClass1TK.A00(110, r2, null);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_horizon_camera_bitmap_CameraBitmapHelper_ULGT__ULSEP_ACCESS_METHOD(AnonymousClass0lg r1) {
        return AnonymousClass0VC.A00(110, r1);
    }

    public Bitmap getCircleBitmap(Bitmap bitmap) {
        Bitmap centeredBitmap = getCenteredBitmap(bitmap, 1.0f);
        Bitmap createBitmap = Bitmap.createBitmap(centeredBitmap.getWidth(), centeredBitmap.getWidth(), Bitmap.Config.ARGB_8888);
        Paint paint = new Paint();
        paint.setAntiAlias(true);
        Shader.TileMode tileMode = Shader.TileMode.CLAMP;
        paint.setShader(new BitmapShader(centeredBitmap, tileMode, tileMode));
        RectF rectF = new RectF(AndroidPanelLayer.Spec.DEFAULT_CYLINDER_POSITION_Z, AndroidPanelLayer.Spec.DEFAULT_CYLINDER_POSITION_Z, (float) createBitmap.getWidth(), (float) createBitmap.getHeight());
        Path path = new Path();
        path.addOval(rectF, Path.Direction.CW);
        new Canvas(createBitmap).drawPath(path, paint);
        centeredBitmap.recycle();
        return createBitmap;
    }

    public Bitmap getProfilePictureFromCropFlow(Bitmap bitmap, Rect rect) {
        return Bitmap.createBitmap(bitmap, rect.left, rect.top, rect.width(), rect.height());
    }

    @Inject
    public CameraBitmapHelper(@ForAppContext Context context) {
        this.mResources = context.getResources();
    }

    @AutoGeneratedFactoryMethod
    public static final CameraBitmapHelper _UL__ULSEP_com_oculus_horizon_camera_bitmap_CameraBitmapHelper_ULSEP_FACTORY_METHOD(AnonymousClass0lg r0, Object obj) {
        return new CameraBitmapHelper(C00610Hs.A00(r0));
    }

    public Bitmap getBlurredBitmapForCamera(Bitmap bitmap) {
        Bitmap createScaledBitmap = Bitmap.createScaledBitmap(bitmap, bitmap.getWidth() / 6, bitmap.getHeight() / 6, true);
        if (createScaledBitmap != null) {
            C00740Ii.A01(true);
            C00740Ii.A01(true);
            NativeBlurFilter.nativeIterativeBoxBlur(createScaledBitmap, 2, 18);
            return createScaledBitmap;
        }
        throw null;
    }

    public Bitmap getPreviewBitmap(TextureView textureView, Camera.Size size) {
        Matrix textureViewTransform = getTextureViewTransform(textureView, size);
        Paint paint = new Paint();
        paint.setFilterBitmap(true);
        Bitmap bitmap = textureView.getBitmap();
        Bitmap createBitmap = Bitmap.createBitmap(textureView.getMeasuredWidth(), textureView.getMeasuredHeight(), Bitmap.Config.ARGB_8888);
        new Canvas(createBitmap).drawBitmap(bitmap, textureViewTransform, paint);
        bitmap.recycle();
        return createBitmap;
    }

    public Bitmap getProfilePictureBitmapFromCamera(Bitmap bitmap) {
        boolean z = false;
        if (bitmap.getHeight() > bitmap.getWidth()) {
            z = true;
        }
        Preconditions.checkArgument(z, "Landscape mode not supported");
        Matrix matrix = new Matrix();
        matrix.setTranslate(AndroidPanelLayer.Spec.DEFAULT_CYLINDER_POSITION_Z, (float) (-this.mResources.getDimensionPixelOffset(R.dimen.profile_picture_camera_overlay_top)));
        Paint paint = new Paint();
        paint.setFilterBitmap(true);
        Bitmap createBitmap = Bitmap.createBitmap(bitmap.getWidth(), bitmap.getWidth(), Bitmap.Config.ARGB_8888);
        new Canvas(createBitmap).drawBitmap(bitmap, matrix, paint);
        return createBitmap;
    }

    public Matrix getTextureViewTransform(TextureView textureView, Camera.Size size) {
        int measuredWidth = textureView.getMeasuredWidth();
        int measuredHeight = textureView.getMeasuredHeight();
        boolean z = true;
        boolean z2 = false;
        if (measuredHeight > measuredWidth) {
            z2 = true;
        }
        Preconditions.checkArgument(z2, "Landscape mode not supported");
        if (size.width <= size.height) {
            z = false;
        }
        Preconditions.checkArgument(z, "Landscape mode not supported");
        float f = ((float) measuredHeight) / ((float) measuredWidth);
        float f2 = ((float) size.width) / ((float) size.height);
        float f3 = (float) (measuredWidth >> 1);
        float f4 = (float) (measuredHeight >> 1);
        Matrix matrix = new Matrix();
        if (f2 > f) {
            matrix.setScale(1.0f, f2 / f, f3, f4);
            return matrix;
        }
        matrix.setScale(f / f2, 1.0f, f3, f4);
        return matrix;
    }

    private Bitmap getCenteredBitmap(Bitmap bitmap, float f) {
        int width;
        int i;
        if (((float) bitmap.getWidth()) / ((float) bitmap.getHeight()) > f) {
            i = bitmap.getHeight();
            width = (int) (((float) i) * f);
        } else {
            width = bitmap.getWidth();
            i = (int) (((float) width) / f);
        }
        return getCenteredBitmap(bitmap, width, i);
    }

    private Bitmap getCenteredBitmap(Bitmap bitmap, int i, int i2) {
        float f = ((float) i) / ((float) i2);
        Matrix matrix = new Matrix();
        if (((float) bitmap.getWidth()) / ((float) bitmap.getHeight()) > f) {
            matrix.setTranslate((float) ((-(bitmap.getWidth() - ((int) (((float) bitmap.getHeight()) * f)))) >> 1), AndroidPanelLayer.Spec.DEFAULT_CYLINDER_POSITION_Z);
        } else {
            matrix.setTranslate(AndroidPanelLayer.Spec.DEFAULT_CYLINDER_POSITION_Z, (float) ((-(bitmap.getHeight() - ((int) (((float) bitmap.getWidth()) / f)))) >> 1));
        }
        Paint paint = new Paint();
        paint.setFilterBitmap(true);
        Bitmap createBitmap = Bitmap.createBitmap(i, i2, Bitmap.Config.ARGB_8888);
        new Canvas(createBitmap).drawBitmap(bitmap, matrix, paint);
        return createBitmap;
    }
}
