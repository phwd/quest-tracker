package com.oculus.horizon.notifications.core;

import X.AbstractC00820Ju;
import X.AbstractC03180ld;
import X.AbstractC05100td;
import X.AnonymousClass03m;
import X.AnonymousClass0M8;
import X.AnonymousClass0MD;
import X.AnonymousClass0Qj;
import X.AnonymousClass0RE;
import X.AnonymousClass0VB;
import X.AnonymousClass0VF;
import X.AnonymousClass0VM;
import X.AnonymousClass0lg;
import X.AnonymousClass12I;
import X.AnonymousClass1TK;
import X.AnonymousClass1jL;
import X.AnonymousClass1k6;
import X.AnonymousClass1kA;
import X.AnonymousClass1l4;
import X.C02670jZ;
import X.C09921kM;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Bundle;
import androidx.annotation.VisibleForTesting;
import androidx.core.app.NotificationCompat$BigTextStyle;
import com.facebook.common.callercontext.CallerContext;
import com.facebook.common.callercontext.CallerContextable;
import com.facebook.inject.ApplicationScoped;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.google.common.collect.HashBiMap;
import com.oculus.executors.OculusThreadExecutor;
import com.oculus.horizon.camera.bitmap.CameraBitmapHelper;
import com.oculus.socialplatform.R;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.atomic.AtomicInteger;
import javax.annotation.Nullable;
import javax.inject.Provider;
import org.json.JSONObject;

@Dependencies({"_UL__ULSEP_com_facebook_imagepipeline_core_ImagePipeline_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_horizon_camera_bitmap_CameraBitmapHelper_ULSEP_BINDING_ID", "_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID", "_UL__ULSEP_android_app_NotificationManager_ULSEP_BINDING_ID"})
@ApplicationScoped
public class NotificationBuilder implements CallerContextable {
    public static final String ABUSE_CAPTURE_RECORDING = "abuse_capture_recording";
    public static final String ACCEPT_CAMERAROLL = "accept_cameraroll";
    public static final String ACCEPT_CTA = "accept_party_invite";
    public static final String ACCEPT_INVITE_ACTION = "com.oculus.horizon.ACCEPT_PARTY_INVITE";
    public static final String AUI_MAXVIEW_SOURCE = "aui_notification_max_view";
    public static final String AUI_NOTIFICATION_CTA = "com.oculus.horizon.AUI_NOTIFICATION_CTA";
    public static final CallerContext CALLER_CONTEXT = new CallerContext(NotificationBuilder.class);
    public static final String CAMERAROLL_TAG = "cameraroll";
    public static final int CANCELLABLE_NOTIFICATION_FIRST_ID = 10000;
    public static final Uri DEFAULT_URI = Uri.parse("oculus.store://link/home");
    public static final String EXTRA_CAPTURE_FILEPATH = "capture_filepath";
    public static final String EXTRA_CUSTOM_DATA = "extra_custom_data";
    public static final String EXTRA_FILEPATH = "filepath";
    public static final String EXTRA_IS_CAPTURE_SUCCESS = "is_capture_success";
    public static final String EXTRA_LARGE_IMAGE_TYPE = "large_image_type";
    public static final String EXTRA_NOTIFICATION_CATEGORY = "oculus_notification_category";
    public static final String EXTRA_NOTIFICATION_CUSTOM_DATA = "oculus_notification_custom_data";
    public static final String EXTRA_NOTIFICATION_FBID = "oculus_notification_fbid";
    public static final String EXTRA_NOTIFICATION_ID = "oculus_notification_id";
    public static final String EXTRA_NOTIFICATION_NDID = "oculus_notification_ndid";
    public static final String EXTRA_NOTIFICATION_TYPE = "oculus_notification_type";
    public static final String EXTRA_NOTIFICATION_UUID = "oculus_notification_uuid";
    public static final String EXTRA_OCULUS_BUTTON_OVERRIDE_URI = "oculus_button_override_uri";
    public static final String EXTRA_PARTY_ID = "party_id";
    public static final String EXTRA_PREVENT_SOUND = "prevent_sound";
    public static final String HORIZON_PACKAGE = "com.oculus.horizon";
    public static final String INTENT_ACTION_CONTENT = "action_content";
    public static final String INTENT_ACTION_DISMISS = "action_dismiss";
    public static final String KEY_OCULUS_CATEGORY = "oculus_category";
    public static final String LARGE_IMAGE_TYPE_DETAIL = "detail";
    public static final int MAX_SOCIAL_NOTIFICATIONS = 5;
    public static final String NOTIFICATION_ACTION_SERVICE = "com.oculus.horizon.notifications.legacy.OnNotificationsActionService";
    public static final int NOTIFICATION_SMALL_ICON = 2131231048;
    public static final String NOTIF_REQUEST_ID = "notif_request_id";
    public static final String OCULUS_CATEGORY_SOCIAL = "social";
    public static final String SOCIAL_NOTIFICATION_ACTION = "com.oculus.SEE_SOCIAL_NOTIFICATIONS";
    public static final String SYSTEM_ACTIVITIES_PACKAGE = "com.oculus.systemactivities";
    public static final String SYSTEM_UTILITIES_PACKAGE = "com.oculus.vrshell.home";
    public static final String TAG = "NotificationBuilder";
    public static final String VRSHELL_PACKAGE = "com.oculus.vrshell";
    public static final int VR_NOTIFICATION_REMOVAL_DELAY_MS = 5000;
    public static final String VR_NOTIFICATION_TAG = "vr_notification";
    public static volatile NotificationBuilder _UL__ULSEP_com_oculus_horizon_notifications_core_NotificationBuilder_ULSEP_INSTANCE;
    public AnonymousClass0RE _UL_mInjectionContext;
    public final OculusThreadExecutor mExecutor;
    public final AtomicInteger mNextNotificationId = new AtomicInteger(10000);
    public final AbstractC05100td<String, Integer> mPackagesToNotificationIds = new HashBiMap();

    public class Builder {
        @Nullable
        public JSONObject customData = null;
        public int iconId = R.drawable.status_icon;
        @Nullable
        public Uri imageUri = null;
        @Nullable
        public String message;
        @Nullable
        public NotificationsProperties properties = null;
        public boolean suppressSound = false;
        public String title;

        public Builder(String str, @Nullable String str2) {
            this.title = str;
            this.message = str2;
        }

        public Builder setNotificationsProperties(NotificationsProperties notificationsProperties) {
            this.properties = notificationsProperties;
            this.customData = notificationsProperties.getCustomDataJson();
            this.imageUri = notificationsProperties.getImageUri();
            return this;
        }

        public int showAndPersist() {
            String str;
            int i;
            AnonymousClass03m r11;
            Uri uri;
            boolean z;
            int incrementAndGet = NotificationBuilder.this.mNextNotificationId.incrementAndGet();
            int nonce = NotificationBuilder.getNonce(incrementAndGet);
            PendingIntent pendingIntent = null;
            AnonymousClass03m r3 = new AnonymousClass03m((Context) AnonymousClass0VF.A03(0, 3, NotificationBuilder.this._UL_mInjectionContext), null);
            Bundle bundle = new Bundle();
            Boolean bool = true;
            NotificationsProperties notificationsProperties = this.properties;
            if (notificationsProperties != null) {
                if (notificationsProperties.getDeeplinkUri() != null) {
                    Intent intent = new Intent("com.oculus.horizon.AUI_NOTIFICATION_CTA");
                    intent.setPackage("com.oculus.horizon");
                    intent.putExtra(NotificationsProperties.NOTIFICATION_PROPERTIES, this.properties);
                    intent.putExtra("oculus_notification_type", this.properties.mType);
                    JSONObject jSONObject = this.customData;
                    if (jSONObject != null) {
                        intent.putExtra("extra_custom_data", jSONObject.toString());
                    }
                    C02670jZ r7 = new C02670jZ();
                    r7.A04(intent, null);
                    r7.A01 |= 1;
                    pendingIntent = r7.A03((Context) AnonymousClass0VF.A03(0, 3, NotificationBuilder.this._UL_mInjectionContext), nonce);
                }
                NotificationBuilder notificationBuilder = NotificationBuilder.this;
                NotificationsProperties notificationsProperties2 = this.properties;
                notificationBuilder.addVrShellFlagsAndIntent(bundle, notificationsProperties2.mType, notificationsProperties2.isFeedNotif().booleanValue(), this.customData, r3);
                if (SocialNotificationType.PARTY_INVITE_RECEIVED.graphQLName.equals(this.properties.mType) && pendingIntent != null) {
                    r3.A02(R.drawable.ic_call_black_24, "accept_party_invite", pendingIntent);
                }
                String str2 = this.properties.mType;
                if (str2 != null) {
                    bundle.putString("oculus_notification_type", str2);
                }
                String str3 = this.properties.mNDID;
                if (str3 != null) {
                    bundle.putString("oculus_notification_ndid", str3);
                }
                String str4 = this.properties.mFBid;
                if (str4 != null) {
                    bundle.putString("oculus_notification_fbid", str4);
                }
                if (this.properties.getCategory() != null) {
                    bundle.putString(NotificationBuilder.EXTRA_NOTIFICATION_CATEGORY, this.properties.getCategory());
                }
                if (this.properties.getOculusButtonOverrideUri() != null) {
                    bundle.putString(NotificationBuilder.EXTRA_OCULUS_BUTTON_OVERRIDE_URI, this.properties.getOculusButtonOverrideUri());
                }
                bool = this.properties.isHighPri();
                notificationsProperties = this.properties;
                str = notificationsProperties.mType;
            } else {
                str = "vr_notification";
            }
            if (NotificationBuilder.shouldShowLargeImage(notificationsProperties)) {
                bundle.putString("large_image_type", NotificationBuilder.LARGE_IMAGE_TYPE_DETAIL);
            }
            if (this.suppressSound) {
                bundle.putBoolean("prevent_sound", true);
            }
            int i2 = this.iconId;
            Notification notification = r3.A06;
            notification.icon = i2;
            notification.tickerText = AnonymousClass03m.A00(this.title);
            r3.A0C = AnonymousClass03m.A00(this.title);
            NotificationCompat$BigTextStyle notificationCompat$BigTextStyle = new NotificationCompat$BigTextStyle();
            notificationCompat$BigTextStyle.bigText(this.message);
            if (r3.A0A != notificationCompat$BigTextStyle) {
                r3.A0A = notificationCompat$BigTextStyle;
                notificationCompat$BigTextStyle.setBuilder(r3);
            }
            r3.A04 = NotificationBuilder.this.getColor(R.color.oculus_black_10);
            Notification notification2 = r3.A06;
            notification2.flags = 16 | notification2.flags;
            r3.A05 = bool.booleanValue() ? 1 : 0;
            Bundle bundle2 = r3.A09;
            if (bundle2 == null) {
                r3.A09 = new Bundle(bundle);
            } else {
                bundle2.putAll(bundle);
            }
            if (pendingIntent != null) {
                r3.A07 = pendingIntent;
            } else {
                r3.A07 = null;
            }
            String str5 = this.message;
            if (str5 != null) {
                r3.A0B = AnonymousClass03m.A00(str5);
            }
            Uri uri2 = this.imageUri;
            if (uri2 == null) {
                ((NotificationManager) AnonymousClass0VF.A03(1, 39, NotificationBuilder.this._UL_mInjectionContext)).notify(str, incrementAndGet, r3.A01());
                return incrementAndGet;
            }
            boolean shouldShowLargeImage = NotificationBuilder.shouldShowLargeImage(this.properties);
            NotificationBuilder notificationBuilder2 = NotificationBuilder.this;
            if (shouldShowLargeImage) {
                z = false;
                i = incrementAndGet;
                r11 = r3;
                uri = uri2;
            } else {
                i = incrementAndGet;
                r11 = r3;
                uri = uri2;
                z = true;
            }
            notificationBuilder2.showNotificationWithImageUri(str, i, r11, uri, z);
            return incrementAndGet;
        }

        public void show() {
            final int showAndPersist = showAndPersist();
            NotificationBuilder.this.mExecutor.executeAfterDelay(new Runnable() {
                /* class com.oculus.horizon.notifications.core.NotificationBuilder.Builder.AnonymousClass1 */

                public void run() {
                    NotificationBuilder.this.cancelNotification(showAndPersist);
                }
            }, NotificationBuilder.VR_NOTIFICATION_REMOVAL_DELAY_MS);
        }

        public Builder setCustomData(JSONObject jSONObject) {
            this.customData = jSONObject;
            return this;
        }

        public Builder setIconId(int i) {
            this.iconId = i;
            return this;
        }

        public Builder setImageUri(Uri uri) {
            this.imageUri = uri;
            return this;
        }

        public Builder setSuppressSound(boolean z) {
            this.suppressSound = z;
            return this;
        }
    }

    @VisibleForTesting
    public int getColor(int i) {
        return ((Context) AnonymousClass0VF.A03(0, 3, this._UL_mInjectionContext)).getColor(i);
    }

    @AutoGeneratedAccessMethod
    public static final AbstractC03180ld _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_horizon_notifications_core_NotificationBuilder_ULGT__ULSEP_ACCESS_METHOD(AnonymousClass0lg r2) {
        return new AnonymousClass0VB(18, r2);
    }

    @AutoGeneratedAccessMethod
    public static final NotificationBuilder _UL__ULSEP_com_oculus_horizon_notifications_core_NotificationBuilder_ULSEP_ACCESS_METHOD(AnonymousClass0lg r2) {
        return (NotificationBuilder) AnonymousClass1TK.A00(18, r2, null);
    }

    @AutoGeneratedFactoryMethod
    public static final NotificationBuilder _UL__ULSEP_com_oculus_horizon_notifications_core_NotificationBuilder_ULSEP_FACTORY_METHOD(AnonymousClass0lg r4, Object obj) {
        if (_UL__ULSEP_com_oculus_horizon_notifications_core_NotificationBuilder_ULSEP_INSTANCE == null) {
            synchronized (NotificationBuilder.class) {
                AnonymousClass0Qj A00 = AnonymousClass0Qj.A00(_UL__ULSEP_com_oculus_horizon_notifications_core_NotificationBuilder_ULSEP_INSTANCE, r4);
                if (A00 != null) {
                    try {
                        _UL__ULSEP_com_oculus_horizon_notifications_core_NotificationBuilder_ULSEP_INSTANCE = new NotificationBuilder(r4.getApplicationInjector());
                    } finally {
                        A00.A01();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_horizon_notifications_core_NotificationBuilder_ULSEP_INSTANCE;
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_horizon_notifications_core_NotificationBuilder_ULGT__ULSEP_ACCESS_METHOD(AnonymousClass0lg r2) {
        return new AnonymousClass0VB(18, r2);
    }

    public static /* synthetic */ String access$100() {
        return TAG;
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private void addVrShellFlagsAndIntent(Bundle bundle, String str, boolean z, @Nullable JSONObject jSONObject, @Nullable AnonymousClass03m r7) {
        if (z) {
            bundle.putBoolean("vrshell_aui_persist", true);
        }
        if (SocialNotificationType.isSocialNotification(str) || CAMERAROLL_TAG.equals(str)) {
            bundle.putString("oculus_category", "social");
        }
    }

    public static boolean shouldShowLargeImage(@Nullable NotificationsProperties notificationsProperties) {
        if (notificationsProperties == null) {
            return false;
        }
        return SocialNotificationType.isSaveToVRNotification(notificationsProperties.mType);
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private void showNotificationWithImageUri(final String str, final int i, final AnonymousClass03m r16, Uri uri, final boolean z) {
        if (uri != null) {
            C09921kM r0 = new C09921kM();
            r0.A01 = uri;
            AnonymousClass1kA A00 = r0.A00();
            final CameraBitmapHelper cameraBitmapHelper = (CameraBitmapHelper) AnonymousClass0VF.A04(110, this._UL_mInjectionContext);
            ((AnonymousClass1k6) AnonymousClass0VF.A04(105, this._UL_mInjectionContext)).A00(A00, CALLER_CONTEXT, AnonymousClass1l4.FULL_FETCH, null, null).AAY(new AnonymousClass1jL() {
                /* class com.oculus.horizon.notifications.core.NotificationBuilder.AnonymousClass1 */

                @Override // X.AbstractC03820oc
                public void onFailureImpl(AnonymousClass0M8<AbstractC00820Ju<AnonymousClass0VM>> r5) {
                    ((NotificationManager) AnonymousClass0VF.A03(1, 39, NotificationBuilder.this._UL_mInjectionContext)).notify(str, i, r16.A01());
                    AnonymousClass0MD.A04(NotificationBuilder.TAG, "Failed to load picture for notification");
                }

                @Override // X.AnonymousClass1jL
                public void onNewResultImpl(@Nullable Bitmap bitmap) {
                    if (bitmap != null) {
                        AnonymousClass03m r1 = r16;
                        if (z) {
                            bitmap = cameraBitmapHelper.getCircleBitmap(bitmap);
                        }
                        r1.A03(bitmap);
                    }
                    ((NotificationManager) AnonymousClass0VF.A03(1, 39, NotificationBuilder.this._UL_mInjectionContext)).notify(str, i, r16.A01());
                }
            }, AnonymousClass12I.INSTANCE);
            return;
        }
        throw null;
    }

    public Builder createVrOnlyNotification(String str, String str2) {
        return new Builder(str, str2);
    }

    public void forgetNotificationId(int i) {
        this.mPackagesToNotificationIds.A5n().remove(Integer.valueOf(i));
    }

    public void forgetPackageName(String str) {
        this.mPackagesToNotificationIds.remove(str);
    }

    public int getUniqueNotificationID() {
        return this.mNextNotificationId.incrementAndGet();
    }

    public int idForPackage(String str) {
        Integer num = this.mPackagesToNotificationIds.get(str);
        if (num == null) {
            num = Integer.valueOf(this.mNextNotificationId.incrementAndGet());
            this.mPackagesToNotificationIds.put(str, num);
        }
        return num.intValue();
    }

    @Inject
    public NotificationBuilder(AnonymousClass0lg r3) {
        this._UL_mInjectionContext = new AnonymousClass0RE(2, r3);
        this.mExecutor = OculusThreadExecutor.getInstance();
    }

    public static int getNonce(int i) {
        return i + ThreadLocalRandom.current().nextInt(100000, 200000);
    }

    public void cancelNotification(int i) {
        ((NotificationManager) AnonymousClass0VF.A03(1, 39, this._UL_mInjectionContext)).cancel(i);
    }

    public void cancelNotification(String str, int i) {
        ((NotificationManager) AnonymousClass0VF.A03(1, 39, this._UL_mInjectionContext)).cancel(str, i);
    }
}
