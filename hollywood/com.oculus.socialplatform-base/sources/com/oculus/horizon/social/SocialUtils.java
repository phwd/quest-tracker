package com.oculus.horizon.social;

import X.AbstractC03180ld;
import X.AnonymousClass0Hr;
import X.AnonymousClass0MD;
import X.AnonymousClass0VC;
import X.AnonymousClass0lg;
import X.AnonymousClass1TK;
import android.content.Context;
import com.facebook.common.stringformat.StringFormatUtil;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.google.common.base.Function;
import com.google.common.base.Strings;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.Lists$TransformingRandomAccessList;
import com.google.common.collect.Lists$TransformingSequentialList;
import com.oculus.auth.credentials.Credentials;
import com.oculus.auth.credentials.CredentialsModule;
import com.oculus.horizon.api.common.App;
import com.oculus.horizon.api.common.Invite;
import com.oculus.horizon.api.common.Platform;
import com.oculus.horizon.api.common.Room;
import com.oculus.horizon.api.common.user.BasicUser;
import com.oculus.horizon.api.common.user.CurrentRoom;
import com.oculus.horizon.api.common.user.MutualFriends;
import com.oculus.horizon.api.common.user.User;
import com.oculus.horizon.api.common.user.UserFriendStatus;
import com.oculus.horizon.api.common.user.UserPresenceStatus;
import com.oculus.horizon.api.profile.PrivacyAudience;
import com.oculus.horizon.social.api.BlockedUser;
import com.oculus.horizon.social.api.SearchResultMode;
import com.oculus.horizon.social.model.FriendRequest;
import com.oculus.horizon.social.model.IdentityInSearchPrivacyState;
import com.oculus.horizon.social.model.PrivacyState;
import com.oculus.horizon.util.string.StringUtils;
import com.oculus.library.model.LivestreamingStatus;
import com.oculus.socialplatform.R;
import java.util.List;
import java.util.RandomAccess;
import javax.annotation.Nullable;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_auth_credentials_Credentials_ULSEP_BINDING_ID"})
public class SocialUtils {
    public static final Class<?> TAG = SocialUtils.class;
    public static final Function<FriendRequest, BasicUser> USER_OF_FRIEND_REQUEST = new Function<FriendRequest, BasicUser>() {
        /* class com.oculus.horizon.social.SocialUtils.AnonymousClass1 */

        public BasicUser apply(FriendRequest friendRequest) {
            return friendRequest.user;
        }

        /* Return type fixed from 'java.lang.Object' to match base method */
        /* JADX DEBUG: Method arguments types fixed to match base method, original types: [java.lang.Object] */
        @Override // com.google.common.base.Function
        public /* bridge */ /* synthetic */ BasicUser apply(FriendRequest friendRequest) {
            return friendRequest.user;
        }
    };
    @Inject
    public final Provider<Credentials> mCredentialsProvider;

    public static boolean isUserActivityStreamable(User user) {
        CurrentRoom currentRoom;
        List<Room> list;
        Room room;
        App app;
        List<String> list2;
        return (user == null || (currentRoom = user.current_room) == null || (list = currentRoom.nodes) == null || list.isEmpty() || (room = user.current_room.nodes.get(0)) == null || (app = room.app) == null || !Platform.ANDROID.name().equals(app.platform) || !LivestreamingStatus.ACCEPTED.name().equals(app.livestreaming_status) || (list2 = user.online_platforms) == null || list2.isEmpty()) ? false : true;
    }

    @AutoGeneratedAccessMethod
    public static final AbstractC03180ld _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_horizon_social_SocialUtils_ULGT__ULSEP_ACCESS_METHOD(AnonymousClass0lg r1) {
        return AnonymousClass0Hr.A00(2092, r1);
    }

    @AutoGeneratedAccessMethod
    public static final SocialUtils _UL__ULSEP_com_oculus_horizon_social_SocialUtils_ULSEP_ACCESS_METHOD(AnonymousClass0lg r2) {
        return (SocialUtils) AnonymousClass1TK.A00(2092, r2, null);
    }

    @AutoGeneratedFactoryMethod
    public static final SocialUtils _UL__ULSEP_com_oculus_horizon_social_SocialUtils_ULSEP_FACTORY_METHOD(AnonymousClass0lg r1, Object obj) {
        return new SocialUtils(r1);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_horizon_social_SocialUtils_ULGT__ULSEP_ACCESS_METHOD(AnonymousClass0lg r1) {
        return AnonymousClass0VC.A00(2092, r1);
    }

    public static <T, E> boolean containsEntry(List<T> list, E e, Function<T, E> function) {
        List lists$TransformingSequentialList;
        if (list instanceof RandomAccess) {
            lists$TransformingSequentialList = new Lists$TransformingRandomAccessList(list, function);
        } else {
            lists$TransformingSequentialList = new Lists$TransformingSequentialList(list, function);
        }
        return lists$TransformingSequentialList.contains(e);
    }

    public static String getMutualFriends(Context context, BasicUser basicUser) {
        int i;
        MutualFriends mutualFriends = basicUser.mutual_friends;
        if (mutualFriends == null || (i = mutualFriends.count) <= 0) {
            return null;
        }
        if (i > 1) {
            return context.getString(R.string.social_friends_in_common, Integer.valueOf(i));
        }
        return context.getString(R.string.social_friend_in_common);
    }

    public static String getOnlinePlatforms(Context context, User user) {
        List<String> list = user.online_platforms;
        if (list == null || list.isEmpty()) {
            return "";
        }
        ImmutableList.Builder A02 = ImmutableList.A02();
        for (String str : user.online_platforms) {
            A02.add((Object) platformFriendlyName(context, str));
        }
        return StringUtils.getFormattedList(context, A02.build());
    }

    public static boolean isFriend(User user) {
        if (friendStatus(user.friend_status) == UserFriendStatus.ARE_FRIENDS) {
            return true;
        }
        return false;
    }

    public static boolean isSameUser(User user, User user2) {
        String str;
        if (user == null || user2 == null || (str = user.id) == null || !str.equals(user2.id)) {
            return false;
        }
        return true;
    }

    public static boolean isUserInRoom(User user) {
        return !user.current_room.nodes.isEmpty();
    }

    public static boolean isUserOnline(BasicUser basicUser) {
        return UserPresenceStatus.ONLINE.graphQLName.equals(basicUser.presence_status);
    }

    @Nullable
    public String findBestStatus(Context context, User user) {
        if (itsMe(user.id)) {
            return null;
        }
        boolean isUserInRoom = isUserInRoom(user);
        if (!isFriend(user)) {
            String mutualFriends = getMutualFriends(context, user);
            if (mutualFriends != null) {
                return mutualFriends;
            }
        } else if (!isUserInRoom) {
            boolean isUserOnline = isUserOnline(user);
            int i = R.string.social_status_offline;
            if (isUserOnline) {
                i = R.string.social_status_online;
            }
            return context.getString(i);
        }
        return user.presence;
    }

    @Inject
    public SocialUtils(AnonymousClass0lg r2) {
        this.mCredentialsProvider = CredentialsModule._UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_auth_credentials_Credentials_ULGT__ULSEP_ACCESS_METHOD(r2);
    }

    public static ImmutableList<String> getUserIds(List<PrivacyAudience.IncludedUsers.Node> list) {
        ImmutableList.Builder A02 = ImmutableList.A02();
        for (PrivacyAudience.IncludedUsers.Node node : list) {
            A02.add((Object) node.id);
        }
        return A02.build();
    }

    public static IdentityInSearchPrivacyState identityInSearchPrivacyState(String str) {
        IdentityInSearchPrivacyState[] values = IdentityInSearchPrivacyState.values();
        for (IdentityInSearchPrivacyState identityInSearchPrivacyState : values) {
            if (identityInSearchPrivacyState.graphQLName.equals(str)) {
                return identityInSearchPrivacyState;
            }
        }
        throw new IllegalArgumentException(StringFormatUtil.formatStrLocaleSafe("Unrecognized IdentityInSearchPrivacyState [%s]", str));
    }

    /* JADX WARNING: Code restructure failed: missing block: B:5:0x0016, code lost:
        if (r0 == false) goto L_0x0018;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public static java.lang.String platformFriendlyName(android.content.Context r2, java.lang.String r3) {
        /*
            int r1 = r3.hashCode()
            r0 = -143408561(0xfffffffff773c24f, float:-4.9440202E33)
            if (r1 == r0) goto L_0x0020
            r0 = 2547(0x9f3, float:3.569E-42)
            if (r1 != r0) goto L_0x0018
            java.lang.String r0 = "PC"
            boolean r0 = r3.equals(r0)
            r1 = 2131689673(0x7f0f00c9, float:1.9008368E38)
        L_0x0016:
            if (r0 != 0) goto L_0x001b
        L_0x0018:
            r1 = 2131689672(0x7f0f00c8, float:1.9008366E38)
        L_0x001b:
            java.lang.String r0 = r2.getString(r1)
            return r0
        L_0x0020:
            java.lang.String r0 = "ANDROID"
            boolean r0 = r3.equals(r0)
            r1 = 2131689671(0x7f0f00c7, float:1.9008364E38)
            goto L_0x0016
        */
        throw new UnsupportedOperationException("Method not decompiled: com.oculus.horizon.social.SocialUtils.platformFriendlyName(android.content.Context, java.lang.String):java.lang.String");
    }

    public static PrivacyState privacyState(String str) {
        PrivacyState[] values = PrivacyState.values();
        for (PrivacyState privacyState : values) {
            if (privacyState.graphQLName.equals(str)) {
                return privacyState;
            }
        }
        throw new IllegalArgumentException(StringFormatUtil.formatStrLocaleSafe("Unrecognized PrivacyState [%s]", str));
    }

    public static SearchResultMode searchResultMode(String str) {
        try {
            return SearchResultMode.valueOf(str);
        } catch (RuntimeException e) {
            AnonymousClass0MD.A03(SocialUtils.class, e, "Could not parse SocialSearchData.ResultMode value for resultMode [%s]", str);
            return SearchResultMode.UNKNOWN;
        }
    }

    public static <T> int updateEntry(List<T> list, T t) {
        int indexOf = list.indexOf(t);
        if (indexOf != -1) {
            list.set(indexOf, t);
        }
        return indexOf;
    }

    public static String findBestDisplayName(Invite invite) {
        String str = invite.sender_name;
        if (Strings.isNullOrEmpty(str)) {
            str = invite.sender_alias;
            if (Strings.isNullOrEmpty(str)) {
                AnonymousClass0MD.A02(SocialUtils.class, "Invite sender [%s] has no display name and no alias", invite.sender_id);
                return invite.sender_id;
            }
        }
        return str;
    }

    public static String findBestDisplayName(BasicUser basicUser) {
        String str = basicUser.name;
        if (Strings.isNullOrEmpty(str)) {
            str = basicUser.alias;
            if (Strings.isNullOrEmpty(str)) {
                AnonymousClass0MD.A02(SocialUtils.class, "User [%s] has no display name and no alias", basicUser.id);
                return basicUser.id;
            }
        }
        return str;
    }

    public static String findBestDisplayName(BlockedUser blockedUser) {
        String str = blockedUser.alias;
        if (!Strings.isNullOrEmpty(str)) {
            return str;
        }
        AnonymousClass0MD.A02(SocialUtils.class, "User [%s] has no display name and no alias", blockedUser.id);
        return blockedUser.id;
    }

    public static UserFriendStatus friendStatus(BasicUser basicUser) {
        return friendStatus(basicUser.friend_status);
    }

    public static UserFriendStatus friendStatus(String str) {
        try {
            return UserFriendStatus.valueOf(str);
        } catch (RuntimeException e) {
            AnonymousClass0MD.A03(SocialUtils.class, e, "Could not parse UserFriendStatusEnum value for friendship value [%s]", str);
            return UserFriendStatus.CANNOT_REQUEST;
        }
    }

    public static <T> int removeEntry(List<T> list, T t) {
        int indexOf = list.indexOf(t);
        if (indexOf != -1) {
            list.remove(indexOf);
        }
        return indexOf;
    }

    public static <T, E> int removeEntry(List<T> list, E e, Function<T, E> function) {
        List lists$TransformingSequentialList;
        if (list instanceof RandomAccess) {
            lists$TransformingSequentialList = new Lists$TransformingRandomAccessList(list, function);
        } else {
            lists$TransformingSequentialList = new Lists$TransformingSequentialList(list, function);
        }
        int indexOf = lists$TransformingSequentialList.indexOf(e);
        if (indexOf != -1) {
            list.remove(indexOf);
        }
        return indexOf;
    }

    public boolean itsMe(User user) {
        return itsMe(user.id);
    }

    public boolean itsMe(String str) {
        String str2;
        if (this.mCredentialsProvider.get() == null) {
            str2 = null;
        } else {
            str2 = this.mCredentialsProvider.get().mUserId;
        }
        return str.equals(str2);
    }
}
