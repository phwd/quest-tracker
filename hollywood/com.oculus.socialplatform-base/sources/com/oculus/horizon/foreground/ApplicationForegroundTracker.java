package com.oculus.horizon.foreground;

import X.AbstractC03180ld;
import X.AnonymousClass0Qj;
import X.AnonymousClass0RE;
import X.AnonymousClass0VB;
import X.AnonymousClass0lg;
import X.AnonymousClass1TK;
import android.app.Activity;
import android.app.Application;
import android.os.Bundle;
import android.os.SystemClock;
import bolts.CancellationTokenSource;
import bolts.Continuation;
import bolts.Task;
import com.facebook.common.util.TriState;
import com.facebook.inject.ApplicationScoped;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Eager;
import com.oculus.util.task.TaskDelayFactory;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import javax.inject.Inject;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_util_task_TaskDelayFactory_ULSEP_BINDING_ID"})
@ApplicationScoped
public class ApplicationForegroundTracker implements Application.ActivityLifecycleCallbacks {
    public static final long APP_LAUNCH_TO_BACKGROUNDED_THRESHOLD_MS = TimeUnit.SECONDS.toMillis(4);
    public static final int DELAY_MS = 1000;
    public static final String TAG = "ApplicationForegroundTracker";
    public static volatile ApplicationForegroundTracker _UL__ULSEP_com_oculus_horizon_foreground_ApplicationForegroundTracker_ULSEP_INSTANCE;
    public AnonymousClass0RE _UL_mInjectionContext;
    public CancellationTokenSource mCancellationTokenSource;
    public int mCountOfResumedActivities = 0;
    public final List<ApplicationForegroundListener> mListeners = new ArrayList();
    @Inject
    @Eager
    public final TaskDelayFactory mTaskDelayFactory;
    public long mUptimeMillisOfAppInit = 0;
    public long mUptimeMillisOfFirstResume = 0;
    public long mUptimeMillisOfLastResume = 0;

    public void onActivityCreated(Activity activity, Bundle bundle) {
    }

    public void onActivityDestroyed(Activity activity) {
    }

    public void onActivitySaveInstanceState(Activity activity, Bundle bundle) {
    }

    public void onActivityStarted(Activity activity) {
    }

    public void onActivityStopped(Activity activity) {
    }

    @AutoGeneratedAccessMethod
    public static final AbstractC03180ld _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_horizon_foreground_ApplicationForegroundTracker_ULGT__ULSEP_ACCESS_METHOD(AnonymousClass0lg r2) {
        return new AnonymousClass0VB(2120, r2);
    }

    @AutoGeneratedAccessMethod
    public static final ApplicationForegroundTracker _UL__ULSEP_com_oculus_horizon_foreground_ApplicationForegroundTracker_ULSEP_ACCESS_METHOD(AnonymousClass0lg r2) {
        return (ApplicationForegroundTracker) AnonymousClass1TK.A00(2120, r2, null);
    }

    @AutoGeneratedFactoryMethod
    public static final ApplicationForegroundTracker _UL__ULSEP_com_oculus_horizon_foreground_ApplicationForegroundTracker_ULSEP_FACTORY_METHOD(AnonymousClass0lg r4, Object obj) {
        if (_UL__ULSEP_com_oculus_horizon_foreground_ApplicationForegroundTracker_ULSEP_INSTANCE == null) {
            synchronized (ApplicationForegroundTracker.class) {
                AnonymousClass0Qj A00 = AnonymousClass0Qj.A00(_UL__ULSEP_com_oculus_horizon_foreground_ApplicationForegroundTracker_ULSEP_INSTANCE, r4);
                if (A00 != null) {
                    try {
                        _UL__ULSEP_com_oculus_horizon_foreground_ApplicationForegroundTracker_ULSEP_INSTANCE = new ApplicationForegroundTracker(r4.getApplicationInjector());
                    } finally {
                        A00.A01();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_horizon_foreground_ApplicationForegroundTracker_ULSEP_INSTANCE;
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_horizon_foreground_ApplicationForegroundTracker_ULGT__ULSEP_ACCESS_METHOD(AnonymousClass0lg r2) {
        return new AnonymousClass0VB(2120, r2);
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private void onApplicationBackground(long j) {
        for (ApplicationForegroundListener applicationForegroundListener : this.mListeners) {
            applicationForegroundListener.onApplicationBackground(j);
        }
    }

    private void onApplicationForeground() {
        for (ApplicationForegroundListener applicationForegroundListener : this.mListeners) {
            applicationForegroundListener.onApplicationForeground();
        }
    }

    public void addListener(ApplicationForegroundListener applicationForegroundListener) {
        this.mListeners.add(applicationForegroundListener);
    }

    public TriState isAppStartedInBackground() {
        long j = this.mUptimeMillisOfFirstResume;
        if (j == 0) {
            if (SystemClock.uptimeMillis() - this.mUptimeMillisOfAppInit <= APP_LAUNCH_TO_BACKGROUNDED_THRESHOLD_MS) {
                return TriState.UNSET;
            }
        } else if (j - this.mUptimeMillisOfAppInit < APP_LAUNCH_TO_BACKGROUNDED_THRESHOLD_MS) {
            return TriState.NO;
        }
        return TriState.YES;
    }

    public void removeListener(ApplicationForegroundListener applicationForegroundListener) {
        this.mListeners.remove(applicationForegroundListener);
    }

    @Inject
    public ApplicationForegroundTracker(AnonymousClass0lg r3) {
        this._UL_mInjectionContext = new AnonymousClass0RE(1, r3);
        this.mTaskDelayFactory = TaskDelayFactory._UL__ULSEP_com_oculus_util_task_TaskDelayFactory_ULSEP_ACCESS_METHOD(r3);
        this.mUptimeMillisOfAppInit = SystemClock.uptimeMillis();
    }

    public void onActivityPaused() {
        int i = this.mCountOfResumedActivities - 1;
        this.mCountOfResumedActivities = i;
        if (i <= 0) {
            final long j = this.mUptimeMillisOfLastResume;
            Task.delay(1000, this.mCancellationTokenSource.getToken()).continueWithTask(new Continuation<Void, Task<Void>>() {
                /* class com.oculus.horizon.foreground.ApplicationForegroundTracker.AnonymousClass1 */

                @Override // bolts.Continuation
                public Task<Void> then(Task<Void> task) throws Exception {
                    if (!task.isCancelled()) {
                        ApplicationForegroundTracker applicationForegroundTracker = ApplicationForegroundTracker.this;
                        applicationForegroundTracker.mUptimeMillisOfLastResume = 0;
                        applicationForegroundTracker.onApplicationBackground(SystemClock.uptimeMillis() - j);
                    }
                    return null;
                }
            });
        }
    }

    public void onActivityPaused(Activity activity) {
        onActivityPaused();
    }

    public void onActivityResumed() {
        this.mCountOfResumedActivities++;
        if (this.mUptimeMillisOfFirstResume == 0) {
            this.mUptimeMillisOfFirstResume = SystemClock.uptimeMillis();
        }
        CancellationTokenSource cancellationTokenSource = this.mCancellationTokenSource;
        if (cancellationTokenSource != null) {
            cancellationTokenSource.cancel();
        }
        this.mCancellationTokenSource = new CancellationTokenSource();
        if (this.mUptimeMillisOfLastResume <= 0) {
            this.mUptimeMillisOfLastResume = SystemClock.uptimeMillis();
            onApplicationForeground();
        }
    }

    public void onActivityResumed(Activity activity) {
        onActivityResumed();
    }
}
