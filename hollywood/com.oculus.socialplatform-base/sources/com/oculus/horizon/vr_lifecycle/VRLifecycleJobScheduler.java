package com.oculus.horizon.vr_lifecycle;

import X.AbstractC03180ld;
import X.AnonymousClass006;
import X.AnonymousClass0Hr;
import X.AnonymousClass0RE;
import X.AnonymousClass0VC;
import X.AnonymousClass0VF;
import X.AnonymousClass0lg;
import X.AnonymousClass1TK;
import X.C00610Hs;
import android.annotation.TargetApi;
import android.app.job.JobInfo;
import android.app.job.JobScheduler;
import android.content.ComponentName;
import android.content.Context;
import com.facebook.inject.ForAppContext;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.oculus.errorreporting.interfaces.IErrorReporter;
import com.oculus.util.constants.JobSchedulerIds;
import javax.inject.Inject;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_BINDING_ID"})
@TargetApi(21)
public class VRLifecycleJobScheduler {
    public static final int SESSION_END_MINIMUM_WAIT_TIME_MS = 600000;
    public static final String TAG = "VRLifecycleJobScheduler";
    public AnonymousClass0RE _UL_mInjectionContext;
    public final Context mContext;

    @AutoGeneratedAccessMethod
    public static final AbstractC03180ld _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_horizon_vr_ULUNDERSCORE_lifecycle_VRLifecycleJobScheduler_ULGT__ULSEP_ACCESS_METHOD(AnonymousClass0lg r1) {
        return AnonymousClass0Hr.A00(101, r1);
    }

    @AutoGeneratedAccessMethod
    public static final VRLifecycleJobScheduler _UL__ULSEP_com_oculus_horizon_vr_ULUNDERSCORE_lifecycle_VRLifecycleJobScheduler_ULSEP_ACCESS_METHOD(AnonymousClass0lg r2) {
        return (VRLifecycleJobScheduler) AnonymousClass1TK.A00(101, r2, null);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_horizon_vr_ULUNDERSCORE_lifecycle_VRLifecycleJobScheduler_ULGT__ULSEP_ACCESS_METHOD(AnonymousClass0lg r1) {
        return AnonymousClass0VC.A00(101, r1);
    }

    private JobScheduler getJobScheduler() {
        return (JobScheduler) this.mContext.getSystemService("jobscheduler");
    }

    @Inject
    public VRLifecycleJobScheduler(AnonymousClass0lg r3, @ForAppContext Context context) {
        this._UL_mInjectionContext = new AnonymousClass0RE(1, r3);
        this.mContext = context;
    }

    @AutoGeneratedFactoryMethod
    public static final VRLifecycleJobScheduler _UL__ULSEP_com_oculus_horizon_vr_ULUNDERSCORE_lifecycle_VRLifecycleJobScheduler_ULSEP_FACTORY_METHOD(AnonymousClass0lg r2, Object obj) {
        return new VRLifecycleJobScheduler(r2, C00610Hs.A00(r2));
    }

    public boolean isJobScheduled() {
        for (JobInfo jobInfo : getJobScheduler().getAllPendingJobs()) {
            if (jobInfo.getId() == 1828726824) {
                return true;
            }
        }
        return false;
    }

    public void schedule() {
        int schedule;
        if (!isJobScheduled() && (schedule = getJobScheduler().schedule(new JobInfo.Builder(JobSchedulerIds.LIFECYCLE_SESSION_END, new ComponentName(this.mContext, VRLifecycleJobService.class.getName())).setMinimumLatency(600000).setRequiredNetworkType(1).setPersisted(true).setBackoffCriteria(30000, 1).build())) != 1) {
            ((IErrorReporter) AnonymousClass0VF.A03(0, 114, this._UL_mInjectionContext)).softError(TAG, AnonymousClass006.A04("VRLifecycle job schedule failed (error code: ", schedule, ")"));
        }
    }

    public void unschedule() {
        getJobScheduler().cancel(JobSchedulerIds.LIFECYCLE_SESSION_END);
    }
}
