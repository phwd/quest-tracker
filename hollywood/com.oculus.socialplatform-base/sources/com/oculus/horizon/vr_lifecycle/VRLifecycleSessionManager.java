package com.oculus.horizon.vr_lifecycle;

import X.AbstractC03180ld;
import X.AnonymousClass0Hr;
import X.AnonymousClass0MD;
import X.AnonymousClass0Qj;
import X.AnonymousClass0VB;
import X.AnonymousClass0eR;
import X.AnonymousClass0lg;
import X.AnonymousClass13N;
import X.AnonymousClass1TK;
import X.C00610Hs;
import android.content.Context;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.ForAppContext;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Eager;
import com.facebook.ultralight.Inject;
import com.google.common.collect.ImmutableList;
import com.oculus.horizon.vr_lifecycle.query.GraphQLVRLifecycleParams;
import com.oculus.horizon.vr_lifecycle.query.GraphQLVRLifecycleResponse;
import com.oculus.horizon.vr_lifecycle.query.VRLifecycleMethods;
import com.oculus.http.core.base.ApiCallback;
import com.oculus.http.core.base.ApiError;
import com.oculus.util.device.DeviceUtils;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeSet;
import javax.annotation.Nullable;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_horizon_vr_ULUNDERSCORE_lifecycle_VRLifecycleJobScheduler_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_horizon_vr_ULUNDERSCORE_lifecycle_query_VRLifecycleMethods_ULSEP_BINDING_ID"})
@ApplicationScoped
public class VRLifecycleSessionManager {
    public static final AnonymousClass13N GSON_CONVERTER = new AnonymousClass13N();
    public static final String SESSION_INFO_PATH = "sessionInfo";
    public static final String TAG = "VRLifecycleSessionManager";
    public static volatile VRLifecycleSessionManager _UL__ULSEP_com_oculus_horizon_vr_ULUNDERSCORE_lifecycle_VRLifecycleSessionManager_ULSEP_INSTANCE;
    public final Context mContext;
    public boolean mIsSessionActive = false;
    public final AbstractC03180ld<VRLifecycleJobScheduler> mJobSchedulerLazy;
    @Nullable
    public String mLastAppActive = null;
    public Map<String, AppUsageInfo> mPackageNameToAppUsageInfo = Collections.synchronizedMap(new HashMap());
    public long mSessionStartTime = 0;
    @Inject
    @Eager
    public final VRLifecycleMethods mVRLifecycleMethods;

    public interface MarkSessionEndCallback {
        void onError(ApiError apiError);

        void onNoSessionInfo();

        void onSuccess(GraphQLVRLifecycleResponse graphQLVRLifecycleResponse);

        void onTooRecent();
    }

    public synchronized void markAppEntry(@Nullable String str) {
        if (str != null) {
            if (this.mIsSessionActive) {
                String str2 = this.mLastAppActive;
                long currentTimeMillis = System.currentTimeMillis();
                if (!str.equals(str2)) {
                    if (str2 != null) {
                        AppUsageInfo appUsageInfo = this.mPackageNameToAppUsageInfo.get(str2);
                        if (appUsageInfo == null) {
                            AnonymousClass0MD.A05(TAG, "VRLifecycleSessionManager markAppEntry: Last active package missing from usage map");
                        } else {
                            appUsageInfo.mTotalUsageTime += currentTimeMillis - appUsageInfo.mLastEnteredTime;
                            appUsageInfo.mLastUsageTime = currentTimeMillis;
                            this.mPackageNameToAppUsageInfo.put(this.mLastAppActive, appUsageInfo);
                        }
                    }
                    if (this.mPackageNameToAppUsageInfo.containsKey(str)) {
                        AppUsageInfo appUsageInfo2 = this.mPackageNameToAppUsageInfo.get(str);
                        appUsageInfo2.mLastEnteredTime = currentTimeMillis;
                        appUsageInfo2.mLastUsageTime = currentTimeMillis;
                        this.mPackageNameToAppUsageInfo.put(str, appUsageInfo2);
                    } else {
                        this.mPackageNameToAppUsageInfo.put(str, new AppUsageInfo(0, currentTimeMillis, currentTimeMillis));
                    }
                } else if (this.mPackageNameToAppUsageInfo.containsKey(str)) {
                    AppUsageInfo appUsageInfo3 = this.mPackageNameToAppUsageInfo.get(str);
                    appUsageInfo3.mLastUsageTime = currentTimeMillis;
                    this.mPackageNameToAppUsageInfo.put(str, appUsageInfo3);
                }
                this.mLastAppActive = str;
                storeSessionInfo();
            }
        }
    }

    public synchronized void onHeadsetMountStateChanged(boolean z) {
        if (z) {
            onHeadsetMounted();
        } else {
            onHeadsetUnmounted();
        }
    }

    public static class AppUsageInfo {
        public long mLastEnteredTime;
        public long mLastUsageTime;
        public long mTotalUsageTime;

        public AppUsageInfo(long j, long j2, long j3) {
            this.mTotalUsageTime = j;
            this.mLastEnteredTime = j2;
            this.mLastUsageTime = j3;
        }
    }

    public static class SessionInfo {
        public long[] recentAppLastStartTimes;
        public long[] recentAppLastUsageTimes;
        public String[] recentAppPackageNames;
        public long[] recentAppTotalUsageTimes;
        public long sessionEndTimestampMs;
        public long sessionLengthMs;

        public SessionInfo(String[] strArr, long[] jArr, long[] jArr2, long[] jArr3, long j, long j2) {
            this.recentAppPackageNames = strArr;
            this.recentAppTotalUsageTimes = jArr;
            this.recentAppLastStartTimes = jArr2;
            this.recentAppLastUsageTimes = jArr3;
            this.sessionEndTimestampMs = j;
            this.sessionLengthMs = j2;
        }
    }

    @AutoGeneratedAccessMethod
    public static final AbstractC03180ld _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_horizon_vr_ULUNDERSCORE_lifecycle_VRLifecycleSessionManager_ULGT__ULSEP_ACCESS_METHOD(AnonymousClass0lg r2) {
        return new AnonymousClass0VB(15, r2);
    }

    @AutoGeneratedAccessMethod
    public static final VRLifecycleSessionManager _UL__ULSEP_com_oculus_horizon_vr_ULUNDERSCORE_lifecycle_VRLifecycleSessionManager_ULSEP_ACCESS_METHOD(AnonymousClass0lg r2) {
        return (VRLifecycleSessionManager) AnonymousClass1TK.A00(15, r2, null);
    }

    @AutoGeneratedFactoryMethod
    public static final VRLifecycleSessionManager _UL__ULSEP_com_oculus_horizon_vr_ULUNDERSCORE_lifecycle_VRLifecycleSessionManager_ULSEP_FACTORY_METHOD(AnonymousClass0lg r6, Object obj) {
        if (_UL__ULSEP_com_oculus_horizon_vr_ULUNDERSCORE_lifecycle_VRLifecycleSessionManager_ULSEP_INSTANCE == null) {
            synchronized (VRLifecycleSessionManager.class) {
                AnonymousClass0Qj A00 = AnonymousClass0Qj.A00(_UL__ULSEP_com_oculus_horizon_vr_ULUNDERSCORE_lifecycle_VRLifecycleSessionManager_ULSEP_INSTANCE, r6);
                if (A00 != null) {
                    try {
                        AnonymousClass0lg applicationInjector = r6.getApplicationInjector();
                        _UL__ULSEP_com_oculus_horizon_vr_ULUNDERSCORE_lifecycle_VRLifecycleSessionManager_ULSEP_INSTANCE = new VRLifecycleSessionManager(applicationInjector, C00610Hs.A00(applicationInjector), AnonymousClass0Hr.A00(101, applicationInjector));
                    } finally {
                        A00.A01();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_horizon_vr_ULUNDERSCORE_lifecycle_VRLifecycleSessionManager_ULSEP_INSTANCE;
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_horizon_vr_ULUNDERSCORE_lifecycle_VRLifecycleSessionManager_ULGT__ULSEP_ACCESS_METHOD(AnonymousClass0lg r2) {
        return new AnonymousClass0VB(15, r2);
    }

    public static void clearSessionInfo(Context context) {
        try {
            File sessionInfoCacheFile = getSessionInfoCacheFile(context);
            if (sessionInfoCacheFile.exists() && !sessionInfoCacheFile.delete()) {
                AnonymousClass0MD.A05(TAG, "Failed to clear session info.");
            }
        } catch (SecurityException e) {
            AnonymousClass0MD.A0C(TAG, e, "Failed to clear session info.");
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:5:0x001d, code lost:
        if ((java.lang.System.currentTimeMillis() - r5.sessionEndTimestampMs) >= 600000) goto L_0x001f;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void onHeadsetMounted() {
        /*
        // Method dump skipped, instructions count: 124
        */
        throw new UnsupportedOperationException("Method not decompiled: com.oculus.horizon.vr_lifecycle.VRLifecycleSessionManager.onHeadsetMounted():void");
    }

    private void onHeadsetUnmounted() {
        if (this.mIsSessionActive) {
            this.mIsSessionActive = false;
            if (this.mLastAppActive == null) {
                AnonymousClass0MD.A05(TAG, "No apps were active so skipping session.");
                return;
            }
            storeSessionInfo();
            this.mJobSchedulerLazy.get().schedule();
        }
    }

    private void storeSessionInfo() {
        AppUsageInfo appUsageInfo = this.mPackageNameToAppUsageInfo.get(this.mLastAppActive);
        long currentTimeMillis = System.currentTimeMillis();
        if (appUsageInfo != null) {
            appUsageInfo.mLastUsageTime = currentTimeMillis;
            this.mPackageNameToAppUsageInfo.put(this.mLastAppActive, appUsageInfo);
        }
        TreeSet treeSet = new TreeSet(new Comparator<String>() {
            /* class com.oculus.horizon.vr_lifecycle.VRLifecycleSessionManager.AnonymousClass2 */

            public int compare(String str, String str2) {
                AppUsageInfo appUsageInfo = VRLifecycleSessionManager.this.mPackageNameToAppUsageInfo.get(str);
                AppUsageInfo appUsageInfo2 = VRLifecycleSessionManager.this.mPackageNameToAppUsageInfo.get(str2);
                if (appUsageInfo == null || appUsageInfo2 == null) {
                    return 0;
                }
                return (appUsageInfo.mLastUsageTime > appUsageInfo2.mLastUsageTime ? 1 : (appUsageInfo.mLastUsageTime == appUsageInfo2.mLastUsageTime ? 0 : -1));
            }
        });
        treeSet.addAll(this.mPackageNameToAppUsageInfo.keySet());
        String[] strArr = (String[]) treeSet.toArray(new String[treeSet.size()]);
        long[] jArr = new long[treeSet.size()];
        long[] jArr2 = new long[treeSet.size()];
        long[] jArr3 = new long[treeSet.size()];
        for (int i = 0; i < strArr.length; i++) {
            AppUsageInfo appUsageInfo2 = this.mPackageNameToAppUsageInfo.get(strArr[i]);
            if (appUsageInfo2 == null) {
                AnonymousClass0MD.A05(TAG, "VRLifecycleSessionManager storeSessionInfo: Package missing from usage map");
            } else {
                jArr[i] = appUsageInfo2.mTotalUsageTime;
                if (strArr[i].equals(this.mLastAppActive)) {
                    jArr[i] = jArr[i] + (currentTimeMillis - appUsageInfo2.mLastEnteredTime);
                }
                jArr2[i] = appUsageInfo2.mLastEnteredTime;
                jArr3[i] = appUsageInfo2.mLastUsageTime;
            }
        }
        SessionInfo sessionInfo = new SessionInfo(strArr, jArr, jArr2, jArr3, currentTimeMillis, currentTimeMillis - this.mSessionStartTime);
        try {
            FileOutputStream openFileOutput = this.mContext.openFileOutput(SESSION_INFO_PATH, 0);
            openFileOutput.write(GSON_CONVERTER.A06(sessionInfo).getBytes("UTF-8"));
            openFileOutput.close();
        } catch (IOException e) {
            AnonymousClass0MD.A0C(TAG, e, "Failed to store session info.");
        }
    }

    public synchronized void markSessionEndIfNotRecentAndInfoExists(final MarkSessionEndCallback markSessionEndCallback) {
        SessionInfo sessionInfo = getSessionInfo(this.mContext);
        if (sessionInfo == null) {
            AnonymousClass0MD.A05(TAG, "VRLifecycleJobService.markSessionEnd() missing session info");
            markSessionEndCallback.onNoSessionInfo();
        } else {
            long currentTimeMillis = System.currentTimeMillis() - sessionInfo.sessionEndTimestampMs;
            if (this.mIsSessionActive || currentTimeMillis < 600000) {
                AnonymousClass0MD.A05(TAG, "VRLifecycleJobService.markSessionEnd() session ended too recently");
                markSessionEndCallback.onTooRecent();
            } else {
                ImmutableList.Builder A02 = ImmutableList.A02();
                int i = 0;
                while (true) {
                    String[] strArr = sessionInfo.recentAppPackageNames;
                    if (i >= strArr.length) {
                        break;
                    }
                    A02.add((Object) new GraphQLVRLifecycleParams.RecentAppInfo(strArr[i], sessionInfo.recentAppTotalUsageTimes[i], sessionInfo.recentAppLastStartTimes[i], sessionInfo.recentAppLastUsageTimes[i]));
                    i++;
                }
                this.mVRLifecycleMethods.markSessionEnd(DeviceUtils.getDeviceId(this.mContext), A02.build(), sessionInfo.sessionLengthMs, currentTimeMillis, new ApiCallback<GraphQLVRLifecycleResponse>() {
                    /* class com.oculus.horizon.vr_lifecycle.VRLifecycleSessionManager.AnonymousClass1 */

                    @Override // com.oculus.http.core.base.ApiCallback
                    public void onError(ApiError apiError) {
                        markSessionEndCallback.onError(apiError);
                    }

                    public void onResponse(GraphQLVRLifecycleResponse graphQLVRLifecycleResponse) {
                        VRLifecycleSessionManager.clearSessionInfo(VRLifecycleSessionManager.this.mContext);
                        markSessionEndCallback.onSuccess(graphQLVRLifecycleResponse);
                    }
                });
            }
        }
    }

    @Inject
    public VRLifecycleSessionManager(AnonymousClass0lg r3, @ForAppContext Context context, AbstractC03180ld<VRLifecycleJobScheduler> r5) {
        this.mVRLifecycleMethods = VRLifecycleMethods._UL__ULSEP_com_oculus_horizon_vr_ULUNDERSCORE_lifecycle_query_VRLifecycleMethods_ULSEP_ACCESS_METHOD(r3);
        this.mContext = context;
        this.mJobSchedulerLazy = r5;
    }

    @Nullable
    public static SessionInfo getSessionInfo(Context context) {
        if (!getSessionInfoCacheFile(context).exists()) {
            return null;
        }
        StringBuilder sb = new StringBuilder();
        try {
            FileInputStream openFileInput = context.openFileInput(SESSION_INFO_PATH);
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(openFileInput, "UTF-8"));
            while (true) {
                String readLine = bufferedReader.readLine();
                if (readLine == null) {
                    break;
                }
                sb.append(readLine);
                sb.append("\n");
            }
            openFileInput.close();
        } catch (IOException e) {
            AnonymousClass0MD.A0C(TAG, e, "Failed to fetch session info.");
        }
        try {
            return (SessionInfo) GSON_CONVERTER.A05(sb.toString(), SessionInfo.class);
        } catch (AnonymousClass0eR e2) {
            AnonymousClass0MD.A0C(TAG, e2, "Failed to parse session info.");
            return null;
        }
    }

    public static File getSessionInfoCacheFile(Context context) {
        return new File(context.getFilesDir(), SESSION_INFO_PATH);
    }
}
