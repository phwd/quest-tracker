package com.oculus.util.thread;

import X.AbstractC03180ld;
import X.AnonymousClass0Hr;
import X.AnonymousClass0VC;
import X.AnonymousClass0lg;
import X.AnonymousClass1TK;
import android.os.Handler;
import android.os.Looper;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import javax.inject.Provider;

@Dependencies({})
public class ThreadUtils {
    public static final String CANT_BE_UI_THREAD = "This operation must not be run on UI thread.";
    public static final String MUST_BE_UI_THREAD = "This operation must be run on UI thread.";

    @AutoGeneratedAccessMethod
    public static final AbstractC03180ld _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_util_thread_ThreadUtils_ULGT__ULSEP_ACCESS_METHOD(AnonymousClass0lg r1) {
        return AnonymousClass0Hr.A00(2134, r1);
    }

    @AutoGeneratedAccessMethod
    public static final ThreadUtils _UL__ULSEP_com_oculus_util_thread_ThreadUtils_ULSEP_ACCESS_METHOD(AnonymousClass0lg r2) {
        return (ThreadUtils) AnonymousClass1TK.A00(2134, r2, null);
    }

    @AutoGeneratedFactoryMethod
    public static final ThreadUtils _UL__ULSEP_com_oculus_util_thread_ThreadUtils_ULSEP_FACTORY_METHOD(AnonymousClass0lg r0, Object obj) {
        return new ThreadUtils();
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_util_thread_ThreadUtils_ULGT__ULSEP_ACCESS_METHOD(AnonymousClass0lg r1) {
        return AnonymousClass0VC.A00(2134, r1);
    }

    public static void checkState(boolean z, String str) {
        if (!z) {
            throw new IllegalStateException(str);
        }
    }

    public static boolean isUiThread() {
        if (Looper.getMainLooper().getThread() == Thread.currentThread()) {
            return true;
        }
        return false;
    }

    @Deprecated
    public static void runOnUiThread(Runnable runnable) {
        if (isUiThread()) {
            runnable.run();
        } else {
            new Handler(Looper.getMainLooper()).post(runnable);
        }
    }

    @Deprecated
    public static void assertOnNonUiThread() {
        assertOnNonUiThread(CANT_BE_UI_THREAD);
    }

    @Deprecated
    public static void assertOnNonUiThread(String str) {
        checkState(!isUiThread(), str);
    }

    @Deprecated
    public static void assertOnUiThread() {
        assertOnUiThread(MUST_BE_UI_THREAD);
    }

    @Deprecated
    public static void assertOnUiThread(String str) {
        checkState(isUiThread(), str);
    }

    public void assertIsNonUiThread() {
        assertIsNonUiThread(CANT_BE_UI_THREAD);
    }

    public void assertIsNonUiThread(String str) {
        checkState(!isUiThread(), str);
    }

    public void assertIsUiThread() {
        assertIsUiThread(MUST_BE_UI_THREAD);
    }

    public void assertIsUiThread(String str) {
        checkState(isUiThread(), str);
    }
}
