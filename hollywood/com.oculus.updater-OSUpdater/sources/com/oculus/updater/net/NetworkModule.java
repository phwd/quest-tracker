package com.oculus.updater.net;

import com.facebook.inject.AbstractLibraryModule;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.InjectorModule;
import com.facebook.inject.ProviderMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.AutoGeneratedSwitchIdClass;
import com.facebook.ultralight.UL;
import com.google.inject.Key;
import com.oculus.base.app.AppInfo;
import com.oculus.common.build.BuildConfig;
import com.oculus.common.build.BuildConstants;
import com.oculus.http.core.annotations.OculusApiEndpoint;
import com.oculus.http.core.endpoint.EndpointModule;
import java.lang.annotation.Annotation;
import retrofit.RestAdapter;

@InjectorModule
public class NetworkModule extends AbstractLibraryModule {
    private static volatile AppInfo _UL__ULSEP_com_oculus_base_app_AppInfo_ULSEP_INSTANCE;

    @AutoGeneratedSwitchIdClass
    public static final class UL_id {
        public static final int _UL__ULSEP_com_oculus_base_app_AppInfo_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_base_app_AppInfo_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(AppInfo.class)));
        public static final int _UL__ULSEP_com_oculus_updater_net_ApiDispatcher_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_updater_net_ApiDispatcher_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(ApiDispatcher.class)));
        public static final int _UL__ULSEP_com_oculus_updater_net_OSUpdateProvider_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_updater_net_OSUpdateProvider_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(OSUpdateProvider.class)));
        public static final int _UL__ULSEP_java_lang_String_ULSEP_com_oculus_http_core_annotations_OculusApiEndpoint_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_java_lang_String_ULSEP_com_oculus_http_core_annotations_OculusApiEndpoint_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(String.class, (Class<? extends Annotation>) OculusApiEndpoint.class)));
        public static final int _UL__ULSEP_retrofit_RestAdapter_LogLevel_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_retrofit_RestAdapter_LogLevel_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(RestAdapter.LogLevel.class)));
    }

    @AutoGeneratedFactoryMethod
    public static final AppInfo _UL__ULSEP_com_oculus_base_app_AppInfo_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_base_app_AppInfo_ULSEP_INSTANCE == null) {
            synchronized (AppInfo.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_base_app_AppInfo_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        injectorLike.getApplicationInjector();
                        _UL__ULSEP_com_oculus_base_app_AppInfo_ULSEP_INSTANCE = provideAppInfo();
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_base_app_AppInfo_ULSEP_INSTANCE;
    }

    @AutoGeneratedFactoryMethod
    public static final String _UL__ULSEP_java_lang_String_ULSEP_com_oculus_http_core_annotations_OculusApiEndpoint_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return provideOculusApiEndpoint();
    }

    @AutoGeneratedFactoryMethod
    public static final RestAdapter.LogLevel _UL__ULSEP_retrofit_RestAdapter_LogLevel_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return provideLogLevel();
    }

    @OculusApiEndpoint
    @ProviderMethod
    static String provideOculusApiEndpoint() {
        return EndpointModule.getEndpointOculus();
    }

    @ApplicationScoped
    @ProviderMethod
    static AppInfo provideAppInfo() {
        return new AppInfo("1961163130779579", "Oculus Updater", "5afe4f70808096958dd40eeed48f8fd0", "439338439588603", "1556285957737177", BuildConfig.PROVIDER_SUFFIX);
    }

    @ProviderMethod
    static RestAdapter.LogLevel provideLogLevel() {
        return BuildConstants.DEBUG ? RestAdapter.LogLevel.BASIC : RestAdapter.LogLevel.NONE;
    }
}
