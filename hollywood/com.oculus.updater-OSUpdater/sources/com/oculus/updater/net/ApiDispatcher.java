package com.oculus.updater.net;

import com.facebook.inject.InjectorLike;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.oculus.http.core.ApiModule;
import com.oculus.http.core.annotations.OculusRestAdapter;
import com.oculus.http.core.base.ApiError;
import com.oculus.http.core.base.ApiException;
import com.oculus.updater.net.NetworkModule;
import com.oculus.updater.net.methods.OSReleasesParams;
import com.oculus.updater.net.methods.OSReleasesResponse;
import retrofit.RestAdapter;
import retrofit.RetrofitError;
import retrofit.http.GET;
import retrofit.http.Query;

@Dependencies
public class ApiDispatcher {
    private final Methods mMethods;

    public interface Methods {
        @GET("/mobile_release_updates")
        OSReleasesResponse getMobileReleaseUpdates(@Query("fields") String str, @Query("channel_app_id") String str2, @Query("access_token") String str3, @Query("device_access_token") String str4, @Query("device_managed_mode") int i);
    }

    @AutoGeneratedAccessMethod
    public static final ApiDispatcher _UL__ULSEP_com_oculus_updater_net_ApiDispatcher_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (ApiDispatcher) UL.factorymap.get(NetworkModule.UL_id._UL__ULSEP_com_oculus_updater_net_ApiDispatcher_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final ApiDispatcher _UL__ULSEP_com_oculus_updater_net_ApiDispatcher_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new ApiDispatcher(ApiModule._UL__ULSEP_retrofit_RestAdapter_ULSEP_com_oculus_http_core_annotations_OculusRestAdapter_ULSEP_ACCESS_METHOD(injectorLike));
    }

    @Inject
    public ApiDispatcher(@OculusRestAdapter RestAdapter restAdapter) {
        this.mMethods = (Methods) restAdapter.create(Methods.class);
    }

    public OSReleasesResponse getMobileReleaseUpdates(OSReleasesParams oSReleasesParams) throws ApiException {
        try {
            return this.mMethods.getMobileReleaseUpdates(oSReleasesParams.graphQl, oSReleasesParams.channelAppId, oSReleasesParams.accessToken, oSReleasesParams.deviceAccessToken, oSReleasesParams.deviceManagedMode);
        } catch (RetrofitError e) {
            throw new ApiException(e, new ApiError(e));
        }
    }
}
