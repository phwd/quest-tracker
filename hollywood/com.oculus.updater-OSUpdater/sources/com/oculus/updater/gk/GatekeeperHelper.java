package com.oculus.updater.gk;

import android.content.Context;
import android.database.Cursor;
import android.net.Uri;
import com.facebook.debug.log.BLog;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.mobileconfig.factory.MobileConfig;
import com.facebook.mobileconfig.factory.MobileConfigOptions;
import com.facebook.mobileconfig.factory.module.MobileConfigFactoryModule;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.oculus.updater.gk.MC;

@Dependencies
@ApplicationScoped
public class GatekeeperHelper {
    private static final String TAG = "GatekeeperHelper";
    private static volatile GatekeeperHelper _UL__ULSEP_com_oculus_updater_gk_GatekeeperHelper_ULSEP_INSTANCE;
    private InjectionContext _UL_mInjectionContext;

    public boolean isNonpersistentEnabled() {
        return false;
    }

    @AutoGeneratedFactoryMethod
    public static final GatekeeperHelper _UL__ULSEP_com_oculus_updater_gk_GatekeeperHelper_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_updater_gk_GatekeeperHelper_ULSEP_INSTANCE == null) {
            synchronized (GatekeeperHelper.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_updater_gk_GatekeeperHelper_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        _UL__ULSEP_com_oculus_updater_gk_GatekeeperHelper_ULSEP_INSTANCE = new GatekeeperHelper(injectorLike.getApplicationInjector());
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_updater_gk_GatekeeperHelper_ULSEP_INSTANCE;
    }

    @Inject
    public GatekeeperHelper(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(2, injectorLike);
    }

    private static Uri getContentUri(String str) {
        return Uri.parse("content://com.oculus.horizon.gatekeeper/fetch?name=" + str);
    }

    public static boolean checkGatekeeperHelper(Context context, String str) {
        Cursor cursor = null;
        try {
            cursor = context.getContentResolver().query(getContentUri(str), null, null, null, null);
            boolean z = false;
            if (cursor == null) {
                BLog.e(TAG, "Content resolver cursor is null");
                return false;
            } else if (!cursor.moveToNext()) {
                cursor.close();
                return false;
            } else {
                if (cursor.getInt(cursor.getColumnIndexOrThrow("gk_enabled")) == 1) {
                    z = true;
                }
                cursor.close();
                return z;
            }
        } finally {
            if (cursor != null) {
                cursor.close();
            }
        }
    }

    public boolean checkTestModeGatekeeper() {
        if (checkGatekeeperHelper((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext), "oculus_osupdater_enable_test_mode") || ((MobileConfig) FbInjector.lazyInstance(1, MobileConfigFactoryModule.UL_id._UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getBooleanWithOptions(MC.arvr_xros_osupdater_config.oculus_updater_device_enable_test_mode, MobileConfigOptions.GET_LATEST)) {
            return true;
        }
        return false;
    }

    public boolean isTrafficTracingEnabled() {
        return checkGatekeeperHelper((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext), "oculus_osupdater_enable_traffic_tracing");
    }
}
