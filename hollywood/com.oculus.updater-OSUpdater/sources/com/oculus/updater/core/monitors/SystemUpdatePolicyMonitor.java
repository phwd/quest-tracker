package com.oculus.updater.core.monitors;

import android.app.AlarmManager;
import android.app.PendingIntent;
import android.app.admin.DevicePolicyManager;
import android.app.admin.SystemUpdatePolicy;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import com.facebook.debug.log.BLog;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.ForAppContext;
import com.facebook.inject.InjectorLike;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.UL;
import com.oculus.updater.core.monitors.MonitorsModule;
import java.util.Calendar;
import java.util.concurrent.TimeUnit;
import javax.annotation.Nullable;
import javax.inject.Inject;

@Dependencies
@ApplicationScoped
public class SystemUpdatePolicyMonitor {
    public static final int MINUTES_IN_DAY = ((int) TimeUnit.DAYS.toMinutes(1));
    private static final String TAG = "SystemUpdatePolicyMonitor";
    private static volatile SystemUpdatePolicyMonitor _UL__ULSEP_com_oculus_updater_core_monitors_SystemUpdatePolicyMonitor_ULSEP_INSTANCE;
    private final AlarmManager mAlarm = ((AlarmManager) this.mContext.getSystemService("alarm"));
    private final PendingIntent mAlarmIntent;
    private final Context mContext;
    private final DevicePolicyManager mDevicePolicyManager;
    private boolean mLastReportedPolicyStatus;
    @Nullable
    private SystemUpdatePolicyListener mListener;

    public interface SystemUpdatePolicyListener {
        void onSystemPolicyUpdateWindowEnd();

        void onSystemPolicyUpdateWindowStart();
    }

    @AutoGeneratedAccessMethod
    public static final SystemUpdatePolicyMonitor _UL__ULSEP_com_oculus_updater_core_monitors_SystemUpdatePolicyMonitor_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (SystemUpdatePolicyMonitor) UL.factorymap.get(MonitorsModule.UL_id._UL__ULSEP_com_oculus_updater_core_monitors_SystemUpdatePolicyMonitor_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final SystemUpdatePolicyMonitor _UL__ULSEP_com_oculus_updater_core_monitors_SystemUpdatePolicyMonitor_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_updater_core_monitors_SystemUpdatePolicyMonitor_ULSEP_INSTANCE == null) {
            synchronized (SystemUpdatePolicyMonitor.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_updater_core_monitors_SystemUpdatePolicyMonitor_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        _UL__ULSEP_com_oculus_updater_core_monitors_SystemUpdatePolicyMonitor_ULSEP_INSTANCE = new SystemUpdatePolicyMonitor(BundledAndroidModule._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_ACCESS_METHOD(injectorLike.getApplicationInjector()));
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_updater_core_monitors_SystemUpdatePolicyMonitor_ULSEP_INSTANCE;
    }

    @Inject
    public SystemUpdatePolicyMonitor(@ForAppContext Context context) {
        this.mContext = context;
        this.mDevicePolicyManager = (DevicePolicyManager) context.getSystemService("device_policy");
        Intent intent = new Intent("UpdateWindowAlarm");
        intent.setComponent(new ComponentName(this.mContext, "com.oculus.updater.core.os.OSUpdateService"));
        this.mAlarmIntent = PendingIntent.getService(this.mContext, 0, intent, 0);
    }

    public boolean requestAllowedByPolicy(SystemUpdatePolicyListener systemUpdatePolicyListener) {
        this.mListener = systemUpdatePolicyListener;
        updateCurrentUpdatePolicyStatus();
        BLog.w(TAG, "requestAllowedByPolicy: mLastReportedPolicyStatus=%b", Boolean.valueOf(this.mLastReportedPolicyStatus));
        return this.mLastReportedPolicyStatus;
    }

    private void updateCurrentUpdatePolicyStatus() {
        SystemUpdatePolicy systemUpdatePolicy = this.mDevicePolicyManager.getSystemUpdatePolicy();
        if (systemUpdatePolicy == null) {
            this.mLastReportedPolicyStatus = true;
        } else {
            this.mLastReportedPolicyStatus = checkPolicy(systemUpdatePolicy);
        }
    }

    private boolean checkPolicy(SystemUpdatePolicy systemUpdatePolicy) {
        BLog.v(TAG, "checkPolicy() called with: policy type = %d", Integer.valueOf(systemUpdatePolicy.getPolicyType()));
        int policyType = systemUpdatePolicy.getPolicyType();
        if (policyType == 1) {
            return true;
        }
        if (policyType == 2) {
            return getUpdateWindowStatusAndSetAlarm(systemUpdatePolicy);
        }
        if (policyType != 3) {
            BLog.w(TAG, "requestAllowedByPolicy: unsupported PolicyType=%d", Integer.valueOf(systemUpdatePolicy.getPolicyType()));
        }
        return false;
    }

    private boolean getUpdateWindowStatusAndSetAlarm(SystemUpdatePolicy systemUpdatePolicy) {
        int installWindowStart = systemUpdatePolicy.getInstallWindowStart();
        int installWindowEnd = systemUpdatePolicy.getInstallWindowEnd();
        int currentMinutesFromMidnight = getCurrentMinutesFromMidnight();
        setAlarm(getNextAlarmTime(currentMinutesFromMidnight, installWindowStart, installWindowEnd));
        return isWithinWindow(currentMinutesFromMidnight, installWindowStart, installWindowEnd);
    }

    static int getNextAlarmTime(int i, int i2, int i3) {
        if (i2 == i3) {
            return -1;
        }
        int i4 = i3 + 1;
        int min = Math.min(i2, i4);
        if (min > i) {
            return min - i;
        }
        int max = Math.max(i2, i4);
        if (max > i) {
            return max - i;
        }
        return (MINUTES_IN_DAY + min) - i;
    }

    static boolean isWithinWindow(int i, int i2, int i3) {
        if (i2 == i3) {
            return true;
        }
        if (i2 < i3) {
            return i >= i2 && i <= i3;
        }
        if (i < 0 || i > i3) {
            return i >= i2 && i < MINUTES_IN_DAY;
        }
        return true;
    }

    private int getCurrentMinutesFromMidnight() {
        Calendar instance = Calendar.getInstance();
        return (instance.get(11) * 60) + instance.get(12);
    }

    public void cancelRequest() {
        this.mListener = null;
        this.mAlarm.cancel(this.mAlarmIntent);
    }

    public void onPolicyStatusChange() {
        if (this.mListener != null) {
            updateCurrentUpdatePolicyStatus();
            if (this.mLastReportedPolicyStatus) {
                this.mListener.onSystemPolicyUpdateWindowStart();
            } else {
                this.mListener.onSystemPolicyUpdateWindowEnd();
            }
        }
    }

    private void setAlarm(int i) {
        if (i < 0) {
            cancelRequest();
            return;
        }
        long currentTimeMillis = System.currentTimeMillis() + TimeUnit.MINUTES.toMillis((long) i);
        BLog.d(TAG, "Scheduling window update alarm in %d minutes (at %d)", Integer.valueOf(i), Long.valueOf(currentTimeMillis));
        this.mAlarm.setWindow(0, currentTimeMillis + TimeUnit.SECONDS.toMillis(10), TimeUnit.SECONDS.toMillis(30), this.mAlarmIntent);
    }
}
