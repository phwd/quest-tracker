package com.oculus.updater.core.monitors;

import android.app.AlarmManager;
import android.app.PendingIntent;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.os.PowerManager;
import android.os.SystemClock;
import com.facebook.debug.log.BLog;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.ForAppContext;
import com.facebook.inject.InjectorLike;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.oculus.updater.core.monitors.MonitorsModule;
import javax.annotation.Nullable;

@Dependencies
@ApplicationScoped
public class IdleMonitor {
    private static final String TAG = "IdleMonitor";
    private static volatile IdleMonitor _UL__ULSEP_com_oculus_updater_core_monitors_IdleMonitor_ULSEP_INSTANCE;
    private final AlarmManager mAlarm = ((AlarmManager) this.mContext.getSystemService("alarm"));
    private final Context mContext;
    private final PendingIntent mIdleTriggerIntent;
    private boolean mLastReportedIdleStatus;
    private long mLastScreenOff;
    @Nullable
    private OnIdleListener mListener;
    private long mScreenOffDurationSec;
    private long mWindowSec;

    public interface OnIdleListener {
        void onIdle();

        void onNotIdle();
    }

    @AutoGeneratedAccessMethod
    public static final IdleMonitor _UL__ULSEP_com_oculus_updater_core_monitors_IdleMonitor_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (IdleMonitor) UL.factorymap.get(MonitorsModule.UL_id._UL__ULSEP_com_oculus_updater_core_monitors_IdleMonitor_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final IdleMonitor _UL__ULSEP_com_oculus_updater_core_monitors_IdleMonitor_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_updater_core_monitors_IdleMonitor_ULSEP_INSTANCE == null) {
            synchronized (IdleMonitor.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_updater_core_monitors_IdleMonitor_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        _UL__ULSEP_com_oculus_updater_core_monitors_IdleMonitor_ULSEP_INSTANCE = new IdleMonitor(BundledAndroidModule._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_ACCESS_METHOD(injectorLike.getApplicationInjector()));
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_updater_core_monitors_IdleMonitor_ULSEP_INSTANCE;
    }

    @Inject
    public IdleMonitor(@ForAppContext Context context) {
        BLog.d(TAG, "IdleMonitor constructor");
        this.mContext = context;
        Intent intent = new Intent("IdleAlarm");
        intent.setComponent(new ComponentName(this.mContext, "com.oculus.updater.core.os.OSUpdateService"));
        this.mIdleTriggerIntent = PendingIntent.getService(this.mContext, 0, intent, 0);
        this.mLastScreenOff = isInteractive() ? 0 : SystemClock.elapsedRealtime();
    }

    public boolean isInteractive() {
        PowerManager powerManager = (PowerManager) this.mContext.getSystemService("power");
        return powerManager != null && powerManager.isInteractive();
    }

    public long getTimeSpentIdling() {
        if (this.mLastScreenOff != 0) {
            return SystemClock.elapsedRealtime() - this.mLastScreenOff;
        }
        return 0;
    }

    public boolean requestIdle(long j, long j2, OnIdleListener onIdleListener) {
        BLog.d(TAG, "requestIdle duration=%d window=%d", Long.valueOf(j), Long.valueOf(j2));
        this.mListener = onIdleListener;
        this.mScreenOffDurationSec = j;
        this.mWindowSec = j2;
        long timeSpentIdling = getTimeSpentIdling();
        if (timeSpentIdling != 0) {
            long j3 = (this.mScreenOffDurationSec * 1000) - timeSpentIdling;
            if (this.mLastScreenOff == -1 || j3 <= 0) {
                BLog.i(TAG, "Screen is off and device is already idle");
                this.mLastReportedIdleStatus = true;
            } else {
                BLog.i(TAG, "Screen is off, remaining time to idle is %d seconds", Long.valueOf(j3 / 1000));
                this.mLastReportedIdleStatus = false;
                setAlarm();
            }
        } else {
            BLog.i(TAG, "Screen is on, device not idle");
            this.mLastReportedIdleStatus = false;
        }
        return this.mLastReportedIdleStatus;
    }

    public void forceLongScreenOffTime() {
        BLog.d(TAG, "forceLongScreenOffTime");
        if (this.mLastScreenOff != 0) {
            this.mLastScreenOff = -1;
        }
    }

    public void cancelRequest() {
        BLog.d(TAG, "cancelRequest");
        this.mListener = null;
        this.mAlarm.cancel(this.mIdleTriggerIntent);
    }

    public void onAlarm() {
        OnIdleListener onIdleListener = this.mListener;
        if (onIdleListener != null) {
            this.mLastReportedIdleStatus = true;
            onIdleListener.onIdle();
        }
    }

    public void onInteractiveChanged() {
        boolean isInteractive = isInteractive();
        if (this.mLastScreenOff == 0 && isInteractive) {
            return;
        }
        if (this.mLastScreenOff != 0 && !isInteractive) {
            return;
        }
        if (isInteractive) {
            this.mAlarm.cancel(this.mIdleTriggerIntent);
            this.mLastScreenOff = 0;
            OnIdleListener onIdleListener = this.mListener;
            if (onIdleListener != null && this.mLastReportedIdleStatus) {
                this.mLastReportedIdleStatus = false;
                onIdleListener.onNotIdle();
                return;
            }
            return;
        }
        this.mLastScreenOff = SystemClock.elapsedRealtime();
        if (this.mListener != null) {
            setAlarm();
        }
    }

    private void setAlarm() {
        long j = this.mLastScreenOff;
        long j2 = this.mScreenOffDurationSec;
        BLog.i(TAG, "Scheduling idle alarm for %d seconds from screen off", Long.valueOf(j2));
        this.mAlarm.setWindow(2, j + (j2 * 1000), this.mWindowSec * 1000, this.mIdleTriggerIntent);
    }
}
