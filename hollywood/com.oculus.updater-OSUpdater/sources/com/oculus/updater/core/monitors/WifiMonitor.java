package com.oculus.updater.core.monitors;

import android.app.AlarmManager;
import android.app.PendingIntent;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.SystemClock;
import com.facebook.debug.log.BLog;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.ForAppContext;
import com.facebook.inject.InjectorLike;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.oculus.updater.core.monitors.MonitorsModule;
import java.io.IOException;
import java.net.InetAddress;
import javax.annotation.Nullable;

@Dependencies
@ApplicationScoped
public class WifiMonitor {
    private static final String TAG = "WifiMonitor";
    private static volatile WifiMonitor _UL__ULSEP_com_oculus_updater_core_monitors_WifiMonitor_ULSEP_INSTANCE;
    private final AlarmManager mAlarm;
    private final Context mContext;
    private boolean mIsCheckAlarmPending;
    private boolean mIsWifiConnected;
    @Nullable
    private WifiListener mListener;
    private long mReportOnDelay = 1;
    private final PendingIntent mTriggerIntent;

    public interface WifiListener {
        void onConnected();

        void onDisconnected();
    }

    @AutoGeneratedAccessMethod
    public static final WifiMonitor _UL__ULSEP_com_oculus_updater_core_monitors_WifiMonitor_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (WifiMonitor) UL.factorymap.get(MonitorsModule.UL_id._UL__ULSEP_com_oculus_updater_core_monitors_WifiMonitor_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final WifiMonitor _UL__ULSEP_com_oculus_updater_core_monitors_WifiMonitor_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_updater_core_monitors_WifiMonitor_ULSEP_INSTANCE == null) {
            synchronized (WifiMonitor.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_updater_core_monitors_WifiMonitor_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        _UL__ULSEP_com_oculus_updater_core_monitors_WifiMonitor_ULSEP_INSTANCE = new WifiMonitor(BundledAndroidModule._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_ACCESS_METHOD(injectorLike.getApplicationInjector()));
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_updater_core_monitors_WifiMonitor_ULSEP_INSTANCE;
    }

    @Inject
    public WifiMonitor(@ForAppContext Context context) {
        BLog.d(TAG, "WifiMonitor constructor");
        this.mContext = context;
        this.mAlarm = (AlarmManager) context.getSystemService("alarm");
        Intent intent = new Intent("WifiWaitAlarm");
        intent.setComponent(new ComponentName(context, "com.oculus.updater.core.os.OSUpdateService"));
        this.mTriggerIntent = PendingIntent.getService(context, 0, intent, 0);
    }

    public boolean isWifiConnected() {
        NetworkInfo activeNetworkInfo;
        ConnectivityManager connectivityManager = (ConnectivityManager) this.mContext.getSystemService("connectivity");
        if (connectivityManager == null || (activeNetworkInfo = connectivityManager.getActiveNetworkInfo()) == null || !activeNetworkInfo.isConnected()) {
            return false;
        }
        return true;
    }

    public static boolean isOculusAddressReachable() {
        try {
            InetAddress byName = InetAddress.getByName("oculus.com");
            if (byName == null || byName.getAddress() == null || byName.getAddress().length <= 0) {
                return false;
            }
            return true;
        } catch (IOException e) {
            BLog.e(TAG, "isConnectedToInternet IOException", e);
            return false;
        }
    }

    private void startConnectivityCheckAlarm() {
        if (!this.mIsCheckAlarmPending) {
            this.mIsCheckAlarmPending = true;
            BLog.d(TAG, "Wifi is active. Waiting %d seconds for internet connection", Long.valueOf(this.mReportOnDelay));
            this.mAlarm.setExactAndAllowWhileIdle(2, SystemClock.elapsedRealtime() + (this.mReportOnDelay * 1000), this.mTriggerIntent);
            this.mReportOnDelay = Math.min(this.mReportOnDelay * 2, 600L);
        }
    }

    public boolean requestConnected(WifiListener wifiListener) {
        BLog.d(TAG, "requestConnected");
        this.mListener = wifiListener;
        this.mIsWifiConnected = isWifiConnected();
        return isNetworkAvailable(this.mIsWifiConnected);
    }

    public boolean isNetworkAvailable(boolean z) {
        if (!z) {
            return false;
        }
        if (isOculusAddressReachable()) {
            return true;
        }
        startConnectivityCheckAlarm();
        return false;
    }

    public void cancelRequest() {
        BLog.d(TAG, "cancelRequest");
        this.mListener = null;
        this.mAlarm.cancel(this.mTriggerIntent);
        this.mIsCheckAlarmPending = false;
    }

    public void onAlarm() {
        this.mIsCheckAlarmPending = false;
        if (!isWifiConnected()) {
            BLog.i(TAG, "Returning early from alarm, wifi not available");
        } else if (!isOculusAddressReachable()) {
            startConnectivityCheckAlarm();
        } else {
            this.mIsWifiConnected = true;
            WifiListener wifiListener = this.mListener;
            if (wifiListener != null) {
                wifiListener.onConnected();
            }
        }
    }

    public void onConnectivityChange(Intent intent) {
        BLog.d(TAG, "onConnectivityChange called action = %s", intent.getAction());
        onConnectivityChange(isWifiConnected());
    }

    public void onNetworkChanged(Intent intent) {
        BLog.d(TAG, "onNetworkChanged called action = %s", intent.getAction());
        NetworkInfo networkInfo = (NetworkInfo) intent.getParcelableExtra("networkInfo");
        BLog.d(TAG, "onNetworkChanged: info = %s", networkInfo);
        onConnectivityChange(networkInfo != null && networkInfo.isConnected());
    }

    private void onConnectivityChange(boolean z) {
        if (this.mListener == null) {
            BLog.d(TAG, "onNetworkChanged: mListener is null");
            return;
        }
        BLog.d(TAG, "onNetworkChanged: isNowConnected = %b", Boolean.valueOf(z));
        if (!z) {
            if (this.mIsCheckAlarmPending) {
                this.mAlarm.cancel(this.mTriggerIntent);
                this.mIsCheckAlarmPending = false;
            }
            if (this.mIsWifiConnected) {
                this.mListener.onDisconnected();
            }
            this.mIsWifiConnected = false;
        } else if (this.mIsWifiConnected) {
        } else {
            if (isOculusAddressReachable()) {
                this.mIsWifiConnected = true;
                this.mListener.onConnected();
                return;
            }
            this.mReportOnDelay = 1;
            startConnectivityCheckAlarm();
        }
    }
}
