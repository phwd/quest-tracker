package com.oculus.updater.core.monitors;

import android.app.AlarmManager;
import android.app.PendingIntent;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.os.BatteryManager;
import com.facebook.debug.log.BLog;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.ForAppContext;
import com.facebook.inject.InjectorLike;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.oculus.updater.core.monitors.MonitorsModule;
import javax.annotation.Nullable;

@Dependencies
@ApplicationScoped
public class BatteryMonitor {
    private static final String TAG = "BatteryMonitor";
    private static volatile BatteryMonitor _UL__ULSEP_com_oculus_updater_core_monitors_BatteryMonitor_ULSEP_INSTANCE;
    private final AlarmManager mAlarm;
    private final Context mContext;
    private boolean mIsNormal = isBatteryNormal();
    @Nullable
    private BatteryListener mListener;
    private final PendingIntent mTriggerIntent;

    public interface BatteryListener {
        void onLow();

        void onNormal();
    }

    @AutoGeneratedAccessMethod
    public static final BatteryMonitor _UL__ULSEP_com_oculus_updater_core_monitors_BatteryMonitor_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (BatteryMonitor) UL.factorymap.get(MonitorsModule.UL_id._UL__ULSEP_com_oculus_updater_core_monitors_BatteryMonitor_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final BatteryMonitor _UL__ULSEP_com_oculus_updater_core_monitors_BatteryMonitor_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_updater_core_monitors_BatteryMonitor_ULSEP_INSTANCE == null) {
            synchronized (BatteryMonitor.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_updater_core_monitors_BatteryMonitor_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        _UL__ULSEP_com_oculus_updater_core_monitors_BatteryMonitor_ULSEP_INSTANCE = new BatteryMonitor(BundledAndroidModule._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_ACCESS_METHOD(injectorLike.getApplicationInjector()));
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_updater_core_monitors_BatteryMonitor_ULSEP_INSTANCE;
    }

    @Inject
    public BatteryMonitor(@ForAppContext Context context) {
        this.mContext = context;
        this.mAlarm = (AlarmManager) context.getSystemService("alarm");
        Intent intent = new Intent("BatteryAlarm");
        intent.setComponent(new ComponentName(context, "com.oculus.updater.core.os.OSUpdateService"));
        this.mTriggerIntent = PendingIntent.getService(context, 0, intent, 0);
    }

    public int getBatteryLevel() {
        BatteryManager batteryManager = (BatteryManager) this.mContext.getSystemService("batterymanager");
        if (batteryManager == null) {
            return 0;
        }
        return batteryManager.getIntProperty(4);
    }

    public boolean isBatteryNormal() {
        int batteryLevel = getBatteryLevel();
        BLog.d(TAG, "isBatteryNormal, battLevel = %d", Integer.valueOf(batteryLevel));
        return batteryLevel >= 30;
    }

    public boolean requestNormal(BatteryListener batteryListener) {
        this.mListener = batteryListener;
        this.mAlarm.setRepeating(0, System.currentTimeMillis(), 3600000, this.mTriggerIntent);
        this.mIsNormal = isBatteryNormal();
        return this.mIsNormal;
    }

    public void cancelRequest() {
        BLog.d(TAG, "cancelRequest");
        this.mListener = null;
        this.mAlarm.cancel(this.mTriggerIntent);
    }

    public void onAlarm() {
        checkBatteryState();
    }

    public void onBatteryChanged() {
        checkBatteryState();
    }

    private void checkBatteryState() {
        boolean isBatteryNormal;
        if (this.mListener != null && (isBatteryNormal = isBatteryNormal()) != this.mIsNormal) {
            this.mIsNormal = isBatteryNormal;
            if (this.mIsNormal) {
                BLog.d(TAG, "call onNormal");
                this.mListener.onNormal();
                return;
            }
            BLog.d(TAG, "call onLow");
            this.mListener.onLow();
        }
    }
}
