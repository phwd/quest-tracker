package com.oculus.updater.core.os;

import com.facebook.androidinternals.android.os.SystemPropertiesInternal;
import com.facebook.debug.log.BLog;
import com.facebook.inject.InjectorLike;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Eager;
import com.facebook.ultralight.Inject;
import com.oculus.updater.core.logging.OSUpdateEventLogger;

@Dependencies
public class SystemProperties {
    private static final String TAG = "SystemProperties";
    @Inject
    @Eager
    private final OSUpdateEventLogger mEventLogger;

    @AutoGeneratedFactoryMethod
    public static final SystemProperties _UL__ULSEP_com_oculus_updater_core_os_SystemProperties_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new SystemProperties(injectorLike);
    }

    @Inject
    public SystemProperties(InjectorLike injectorLike) {
        this.mEventLogger = OSUpdateEventLogger._UL__ULSEP_com_oculus_updater_core_logging_OSUpdateEventLogger_ULSEP_ACCESS_METHOD(injectorLike);
    }

    public boolean isOtaDisabledByUser() {
        String str;
        String str2;
        try {
            str = (String) Class.forName("android.os.SystemProperties").getMethod("get", String.class).invoke(null, "persist.debug.oculus.disableota");
        } catch (Exception e) {
            BLog.e(TAG, "exception occurred while testing property which disables OTA", e);
            this.mEventLogger.reportSoftError("failed_to_get_ota_disable_prop", "exception occurred while testing property which disables OTA", e);
            str = null;
        }
        if (str != null && str.equals("true")) {
            return true;
        }
        try {
            str2 = (String) Class.forName("android.os.SystemProperties").getMethod("get", String.class).invoke(null, "persist.ovr.ota.enabled");
        } catch (Exception e2) {
            BLog.e(TAG, "exception occurred while testing property which disables OTA", e2);
            this.mEventLogger.reportSoftError("failed_to_get_ota_disable_prop", "exception occurred while testing property which disables OTA", e2);
            str2 = str;
        }
        if (str2 == null || !str2.equals("false")) {
            return false;
        }
        return true;
    }

    public boolean isDeviceLocked() {
        String str = null;
        try {
            str = (String) Class.forName("android.os.SystemProperties").getMethod("get", String.class).invoke(null, "ro.boot.flash.locked");
        } catch (Exception e) {
            BLog.e(TAG, "exception occurred while testing property that indicates locked state", e);
            this.mEventLogger.reportSoftError("failed_to_get_lock_state_prop", "exception occurred while testing property that indicates locked state", e);
        }
        if (str == null || !str.equals("1")) {
            return false;
        }
        return true;
    }

    public boolean isTrafficTracingForced() {
        String str = SystemPropertiesInternal.get("persist.debug.oculus.trace_ota", "0");
        return "1".equals(str) || "true".equals(str);
    }
}
