package com.oculus.updater.core.os.contract;

import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import com.facebook.debug.log.BLog;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.ForAppContext;
import com.facebook.inject.InjectorLike;
import com.facebook.secure.context.SecureContextHelper;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.UL;
import com.oculus.errorreporting.interfaces.IErrorReporter;
import com.oculus.errorreporting.interfaces.InterfacesModule;
import com.oculus.updater.core.os.contract.OSContractModule;
import javax.inject.Inject;

@Dependencies
@ApplicationScoped
public class OSUpdateServiceContract {
    private static final String TAG = "OSUpdateServiceContract";
    private static volatile OSUpdateServiceContract _UL__ULSEP_com_oculus_updater_core_os_contract_OSUpdateServiceContract_ULSEP_INSTANCE;
    private final Context mContext;
    private final IErrorReporter mErrorReporter;

    @AutoGeneratedAccessMethod
    public static final OSUpdateServiceContract _UL__ULSEP_com_oculus_updater_core_os_contract_OSUpdateServiceContract_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (OSUpdateServiceContract) UL.factorymap.get(OSContractModule.UL_id._UL__ULSEP_com_oculus_updater_core_os_contract_OSUpdateServiceContract_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final OSUpdateServiceContract _UL__ULSEP_com_oculus_updater_core_os_contract_OSUpdateServiceContract_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_updater_core_os_contract_OSUpdateServiceContract_ULSEP_INSTANCE == null) {
            synchronized (OSUpdateServiceContract.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_updater_core_os_contract_OSUpdateServiceContract_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        InjectorLike applicationInjector = injectorLike.getApplicationInjector();
                        _UL__ULSEP_com_oculus_updater_core_os_contract_OSUpdateServiceContract_ULSEP_INSTANCE = new OSUpdateServiceContract(BundledAndroidModule._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_ACCESS_METHOD(applicationInjector), InterfacesModule._UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_ACCESS_METHOD(applicationInjector));
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_updater_core_os_contract_OSUpdateServiceContract_ULSEP_INSTANCE;
    }

    @Inject
    public OSUpdateServiceContract(@ForAppContext Context context, IErrorReporter iErrorReporter) {
        BLog.d(TAG, "OSUpdateServiceContract constructor");
        this.mContext = context;
        this.mErrorReporter = iErrorReporter;
    }

    private Intent createIntent(String str) {
        Intent intent = new Intent();
        intent.setComponent(new ComponentName(this.mContext, "com.oculus.updater.core.os.OSUpdateService"));
        intent.setAction(str);
        return intent;
    }

    private void startIntent(Intent intent) {
        if (SecureContextHelper.get().internal().launchService(intent, this.mContext) == null) {
            String str = "Unable to start service for action " + intent.getAction();
            BLog.e(TAG, str);
            this.mErrorReporter.softErrorWithCrash("service_start", str);
        }
    }

    public void notifySystemEvent(String str) {
        notifySystemEvent(str, new Bundle());
    }

    public void notifySystemEvent(String str, Bundle bundle) {
        Intent createIntent = createIntent(str);
        createIntent.putExtras(bundle);
        startIntent(createIntent);
    }

    public void performUpdateCheck() {
        startIntent(createIntent("check_updates"));
    }

    public void performExtUpdateCheck() {
        startIntent(createIntent("ext_check_updates"));
    }

    public void performReboot() {
        startIntent(createIntent("boot_into_update"));
    }

    public void notifyApplyUpdateSucceeded() {
        startIntent(createIntent("apply_update_succeeded"));
    }

    public void notifyApplyUpdateFailed(String str) {
        notifyApplyUpdateFailed(str, -1);
    }

    public void notifyApplyUpdateFailed(String str, int i) {
        Intent createIntent = createIntent("apply_update_failed");
        createIntent.putExtra("failure_message", str);
        createIntent.putExtra("failure_code", i);
        startIntent(createIntent);
    }

    public void notifyApplyUpdateStatus(float f) {
        Intent createIntent = createIntent("apply_update_status");
        createIntent.putExtra("percent_complete", f);
        startIntent(createIntent);
    }

    public void notifyApplyUpdateStatusVerifying() {
        startIntent(createIntent("apply_verifying_update"));
    }
}
