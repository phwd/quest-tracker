package com.oculus.updater.core.os;

import android.annotation.SuppressLint;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Handler;
import android.os.IUpdateEngineCallback;
import android.os.Looper;
import android.os.PowerManager;
import android.text.TextUtils;
import com.facebook.common.android.AndroidModule;
import com.facebook.common.identifiers.SafeUUIDGenerator;
import com.facebook.debug.log.BLog;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.oculus.common.build.BuildConfig;
import com.oculus.managed.ManagedMode;
import com.oculus.managed.ManagedModule;
import com.oculus.os.DeviceAuth;
import com.oculus.os.SettingsManager;
import com.oculus.os.Version;
import com.oculus.ossdk.inject.OsSdkModule;
import com.oculus.updater.core.broadcast.BroadcastModule;
import com.oculus.updater.core.broadcast.BroadcastState;
import com.oculus.updater.core.logging.LoggingModule;
import com.oculus.updater.core.logging.OSUpdateEventLogger;
import com.oculus.updater.core.monitors.ConditionManager;
import com.oculus.updater.core.monitors.MonitorsModule;
import com.oculus.updater.core.os.OSUpdateModule;
import com.oculus.updater.core.os.contract.OSContractModule;
import com.oculus.updater.core.os.contract.OSUpdateRuntimeException;
import com.oculus.updater.core.os.contract.OSUpdateServiceContract;
import com.oculus.updater.device.DeviceInfo;
import com.oculus.updater.device.DeviceModule;
import com.oculus.updater.gk.GatekeeperHelper;
import com.oculus.updater.gk.GkModule;
import com.oculus.updater.net.methods.OSReleasesResponse;
import com.oculus.updater.net.methods.ReleaseInstallOptions;
import com.oculus.updater.prefs.OSUpdaterSharedPreferences;
import com.oculus.updater.prefs.PrefsModule;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import javax.annotation.Nullable;

@Dependencies
@ApplicationScoped
public class OSUpdateManager implements ConditionManager.ConditionListener {
    private static final String TAG = "OSUpdateManager";
    private static volatile OSUpdateManager _UL__ULSEP_com_oculus_updater_core_os_OSUpdateManager_ULSEP_INSTANCE;
    private static boolean mRebootEventRegistered;
    private InjectionContext _UL_mInjectionContext;
    private boolean mBoundToUpdateEngine = false;
    private boolean mExternalRequest = false;
    private boolean mFullUpdateFallbackMode = false;
    private boolean mUpdateInProgress = false;
    private boolean mWaitForReboot = false;
    private final PowerManager.WakeLock mWakeLock;
    private final WifiManager.WifiLock mWifiLock;

    private static boolean isDownloadError(int i) {
        return i == 20 || i == 28;
    }

    @AutoGeneratedAccessMethod
    public static final OSUpdateManager _UL__ULSEP_com_oculus_updater_core_os_OSUpdateManager_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (OSUpdateManager) UL.factorymap.get(OSUpdateModule.UL_id._UL__ULSEP_com_oculus_updater_core_os_OSUpdateManager_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final OSUpdateManager _UL__ULSEP_com_oculus_updater_core_os_OSUpdateManager_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_updater_core_os_OSUpdateManager_ULSEP_INSTANCE == null) {
            synchronized (OSUpdateManager.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_updater_core_os_OSUpdateManager_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        _UL__ULSEP_com_oculus_updater_core_os_OSUpdateManager_ULSEP_INSTANCE = new OSUpdateManager(injectorLike.getApplicationInjector());
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_updater_core_os_OSUpdateManager_ULSEP_INSTANCE;
    }

    public static class UpdateCheckResponse {
        private boolean mAreOTAUpdatesAvailable;
        private String mErrorMessage;
        @Nullable
        private OSReleasesResponse.OSReleaseInfo mOSReleaseInfo;
        private boolean mSuccess;

        private UpdateCheckResponse() {
            this.mSuccess = false;
            this.mOSReleaseInfo = null;
            this.mErrorMessage = "Unknown Error";
            this.mAreOTAUpdatesAvailable = false;
        }

        public boolean isSuccess() {
            return this.mSuccess;
        }

        public boolean areOTAUpdatesAvailable() {
            return this.mAreOTAUpdatesAvailable;
        }

        @Nullable
        public OSReleasesResponse.OSReleaseInfo getOSReleaseInfo() {
            return this.mOSReleaseInfo;
        }

        public String getErrorMessage() {
            return this.mErrorMessage;
        }
    }

    @Inject
    @SuppressLint({"InvalidWakeLockTag"})
    public OSUpdateManager(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(19, injectorLike);
        this.mWakeLock = ((PowerManager) FbInjector.lazyInstance(4, AndroidModule.UL_id._UL__ULSEP_android_os_PowerManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).newWakeLock(1, "update_manager_wake_lock");
        this.mWifiLock = ((WifiManager) FbInjector.lazyInstance(13, AndroidModule.UL_id._UL__ULSEP_android_net_wifi_WifiManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createWifiLock("OsUpdater");
    }

    public boolean isDeviceUpdateable() {
        return ((UpdateEngine) FbInjector.lazyInstance(10, OSUpdateModule.UL_id._UL__ULSEP_com_oculus_updater_core_os_UpdateEngine_ULSEP_BINDING_ID, this._UL_mInjectionContext)) != null && ((UpdateEngine) FbInjector.lazyInstance(10, OSUpdateModule.UL_id._UL__ULSEP_com_oculus_updater_core_os_UpdateEngine_ULSEP_BINDING_ID, this._UL_mInjectionContext)).supportsABUpdates();
    }

    public void cancelOTA() {
        BLog.i(TAG, "Cancelling any update_engine activity");
        try {
            ((UpdateEngine) FbInjector.lazyInstance(10, OSUpdateModule.UL_id._UL__ULSEP_com_oculus_updater_core_os_UpdateEngine_ULSEP_BINDING_ID, this._UL_mInjectionContext)).cancel();
        } catch (RuntimeException e) {
            BLog.i(TAG, "update_engine cancel returned error, errorCode = %d", ((OSUpdateEventLogger) FbInjector.lazyInstance(7, LoggingModule.UL_id._UL__ULSEP_com_oculus_updater_core_logging_OSUpdateEventLogger_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getServiceSpecificErrorCode(e), e);
        }
        try {
            ((UpdateEngine) FbInjector.lazyInstance(10, OSUpdateModule.UL_id._UL__ULSEP_com_oculus_updater_core_os_UpdateEngine_ULSEP_BINDING_ID, this._UL_mInjectionContext)).resetStatus();
        } catch (RuntimeException e2) {
            BLog.i(TAG, "update_engine resetStatus returned error", (Throwable) e2);
        }
        BLog.i(TAG, "Default to normal scheduled check");
        ((ConditionManager) FbInjector.lazyInstance(0, MonitorsModule.UL_id._UL__ULSEP_com_oculus_updater_core_monitors_ConditionManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).requestConditionsForWaitingToCheck(this, ConditionManager.CheckForUpdateConditions.Normal);
    }

    public void setUpdateInProgress(boolean z) {
        this.mUpdateInProgress = z;
    }

    public boolean isUpdateInProgress() {
        return this.mUpdateInProgress;
    }

    public void setWaitForReboot(boolean z) {
        this.mWaitForReboot = z;
    }

    public boolean isWaitForReboot() {
        return this.mWaitForReboot;
    }

    public boolean isFullUpdateFallbackMode() {
        if (((GatekeeperHelper) FbInjector.lazyInstance(17, GkModule.UL_id._UL__ULSEP_com_oculus_updater_gk_GatekeeperHelper_ULSEP_BINDING_ID, this._UL_mInjectionContext)).isNonpersistentEnabled()) {
            return fullUpdateFallbackMode();
        }
        return this.mFullUpdateFallbackMode;
    }

    public boolean areNoOTAUpdatesAvailable() {
        return ((OSUpdaterSharedPreferences) FbInjector.lazyInstance(9, PrefsModule.UL_id._UL__ULSEP_com_oculus_updater_prefs_OSUpdaterSharedPreferences_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getBoolean("ota_no_updates_available", false);
    }

    public void setExternalRequest(boolean z) {
        this.mExternalRequest = z;
    }

    public String canPerformUpdateCheck() {
        BLog.i(TAG, "Checking if update check can be performed.");
        if (((SystemProperties) FbInjector.lazyInstance(12, OSUpdateModule.UL_id._UL__ULSEP_com_oculus_updater_core_os_SystemProperties_ULSEP_BINDING_ID, this._UL_mInjectionContext)).isOtaDisabledByUser()) {
            BLog.i(TAG, "performUpdateCheck aborted, OTA disabled by user");
            return "state_ota_disabled";
        } else if (isOtaDisableByAdminForEnterprise()) {
            BLog.i(TAG, "performUpdateCheck aborted, OTA disabled by admin for enterprise devices");
            return "state_ota_disabled";
        } else if (!((ConditionManager) FbInjector.lazyInstance(0, MonitorsModule.UL_id._UL__ULSEP_com_oculus_updater_core_monitors_ConditionManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).isAllowedBySystemUpdatePolicy()) {
            BLog.i(TAG, "performUpdateCheck aborted, not allowed by system update policy.");
            return "state_not_allowed_by_system";
        } else if (!isDeviceUpdateable()) {
            BLog.i(TAG, "Device is not configured for AB updates");
            return "Device is not configured for AB updates";
        } else if (((ConditionManager) FbInjector.lazyInstance(0, MonitorsModule.UL_id._UL__ULSEP_com_oculus_updater_core_monitors_ConditionManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).isWifiConnected()) {
            return "state_ready_to_check_for_ota";
        } else {
            BLog.i(TAG, "Check for updates stopped due to no wifi connection");
            return "Check for updates stopped due to no wifi connection";
        }
    }

    private boolean isOtaDisableByAdminForEnterprise() {
        boolean z = ((SettingsManager) FbInjector.lazyInstance(11, OsSdkModule.UL_id._UL__ULSEP_com_oculus_os_SettingsManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getBoolean("enterprise_auto_ota", true);
        if (Version.CURRENT_SDK_VERSION < 15 || !((ManagedMode) FbInjector.lazyInstance(16, ManagedModule.UL_id._UL__ULSEP_com_oculus_managed_ManagedMode_ULSEP_BINDING_ID, this._UL_mInjectionContext)).isEnterpriseModeEnabled() || z) {
            return false;
        }
        return true;
    }

    /* JADX WARNING: Removed duplicated region for block: B:35:0x00fc  */
    /* JADX WARNING: Removed duplicated region for block: B:37:0x0128  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public com.oculus.updater.core.os.OSUpdateManager.UpdateCheckResponse performUpdateCheck(boolean r17, boolean r18) {
        /*
        // Method dump skipped, instructions count: 542
        */
        throw new UnsupportedOperationException("Method not decompiled: com.oculus.updater.core.os.OSUpdateManager.performUpdateCheck(boolean, boolean):com.oculus.updater.core.os.OSUpdateManager$UpdateCheckResponse");
    }

    private String getDeviceAuthTokenWithRetry() {
        for (int i = 0; i < 3; i++) {
            if (i > 0) {
                try {
                    TimeUnit.MILLISECONDS.sleep(3000);
                } catch (DeviceAuth.NetworkException e) {
                    BLog.e(TAG, (Throwable) e, "failed to get device access token due to network issues, retrying");
                } catch (DeviceAuth.BackendException | DeviceAuth.DeviceIdentityException | InterruptedException e2) {
                    BLog.e(TAG, (Throwable) e2, "Error fetching device token");
                    if (e2 instanceof InterruptedException) {
                        Thread.currentThread().interrupt();
                    }
                }
            }
            String value = ((DeviceAuth) FbInjector.lazyInstance(15, OsSdkModule.UL_id._UL__ULSEP_com_oculus_os_DeviceAuth_ULSEP_BINDING_ID, this._UL_mInjectionContext)).fetchToken("3866e1ca90d719f060ac45dba1ea3a24").value();
            BLog.i(TAG, "device access token blocking fetch completed");
            return value;
        }
        return BuildConfig.PROVIDER_SUFFIX;
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private void downloadingUpdateCompleted(int i) {
        if (i == 3) {
            BLog.d(TAG, "PREVIOUS STATUS CODE downloadingUpdateCompleted():%d", Integer.valueOf(i));
            ((OSUpdaterSharedPreferences) FbInjector.lazyInstance(9, PrefsModule.UL_id._UL__ULSEP_com_oculus_updater_prefs_OSUpdaterSharedPreferences_ULSEP_BINDING_ID, this._UL_mInjectionContext)).putLong("prefs_total_downloading_time", ((OSUpdaterSharedPreferences) FbInjector.lazyInstance(9, PrefsModule.UL_id._UL__ULSEP_com_oculus_updater_prefs_OSUpdaterSharedPreferences_ULSEP_BINDING_ID, this._UL_mInjectionContext)).updateTime("prefs_apply_update_downloading_start_time").diff).commit();
        }
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private void verifyingUpdateCompleted(int i) {
        if (i == 4) {
            BLog.d(TAG, "PREVIOUS STATUS CODE verifyingUpdateCompleted():%d", Integer.valueOf(i));
            ((OSUpdaterSharedPreferences) FbInjector.lazyInstance(9, PrefsModule.UL_id._UL__ULSEP_com_oculus_updater_prefs_OSUpdaterSharedPreferences_ULSEP_BINDING_ID, this._UL_mInjectionContext)).putLong("prefs_total_verifying_time", ((OSUpdaterSharedPreferences) FbInjector.lazyInstance(9, PrefsModule.UL_id._UL__ULSEP_com_oculus_updater_prefs_OSUpdaterSharedPreferences_ULSEP_BINDING_ID, this._UL_mInjectionContext)).updateTime("prefs_apply_update_verifying_start_time").diff).commit();
            ((OSUpdaterSharedPreferences) FbInjector.lazyInstance(9, PrefsModule.UL_id._UL__ULSEP_com_oculus_updater_prefs_OSUpdaterSharedPreferences_ULSEP_BINDING_ID, this._UL_mInjectionContext)).updateTime("prefs_apply_update_finalizing_start_time");
        }
    }

    private void maybeBindToUpdateEngine() {
        if (!this.mBoundToUpdateEngine) {
            ((UpdateEngine) FbInjector.lazyInstance(10, OSUpdateModule.UL_id._UL__ULSEP_com_oculus_updater_core_os_UpdateEngine_ULSEP_BINDING_ID, this._UL_mInjectionContext)).bind(new IUpdateEngineCallback.Stub() {
                /* class com.oculus.updater.core.os.OSUpdateManager.AnonymousClass1 */

                @Override // android.os.IUpdateEngineCallback
                public void onStatusUpdate(int i, float f) {
                    BLog.d(OSUpdateManager.TAG, "onStatusUpdate(%d, %f)", Integer.valueOf(i), Float.valueOf(f));
                    int i2 = ((OSUpdaterSharedPreferences) FbInjector.lazyInstance(9, PrefsModule.UL_id._UL__ULSEP_com_oculus_updater_prefs_OSUpdaterSharedPreferences_ULSEP_BINDING_ID, OSUpdateManager.this._UL_mInjectionContext)).getInt("prefs_previous_status_code", 0);
                    BLog.d(OSUpdateManager.TAG, "PREVIOUS STATUS CODE:%d", Integer.valueOf(i2));
                    if (i == 3) {
                        ((OSUpdateServiceContract) FbInjector.lazyInstance(5, OSContractModule.UL_id._UL__ULSEP_com_oculus_updater_core_os_contract_OSUpdateServiceContract_ULSEP_BINDING_ID, OSUpdateManager.this._UL_mInjectionContext)).notifyApplyUpdateStatus(f);
                        ((OSUpdateEventLogger) FbInjector.lazyInstance(7, LoggingModule.UL_id._UL__ULSEP_com_oculus_updater_core_logging_OSUpdateEventLogger_ULSEP_BINDING_ID, OSUpdateManager.this._UL_mInjectionContext)).logOSApplyUpdateProgress(f);
                    }
                    if (i == 4) {
                        ((OSUpdateServiceContract) FbInjector.lazyInstance(5, OSContractModule.UL_id._UL__ULSEP_com_oculus_updater_core_os_contract_OSUpdateServiceContract_ULSEP_BINDING_ID, OSUpdateManager.this._UL_mInjectionContext)).notifyApplyUpdateStatusVerifying();
                        OSUpdateManager.this.downloadingUpdateCompleted(i2);
                        if (i2 != i) {
                            ((OSUpdaterSharedPreferences) FbInjector.lazyInstance(9, PrefsModule.UL_id._UL__ULSEP_com_oculus_updater_prefs_OSUpdaterSharedPreferences_ULSEP_BINDING_ID, OSUpdateManager.this._UL_mInjectionContext)).updateTime("prefs_apply_update_verifying_start_time");
                        }
                    }
                    if (i == 5) {
                        ((OSUpdateServiceContract) FbInjector.lazyInstance(5, OSContractModule.UL_id._UL__ULSEP_com_oculus_updater_core_os_contract_OSUpdateServiceContract_ULSEP_BINDING_ID, OSUpdateManager.this._UL_mInjectionContext)).notifyApplyUpdateStatusVerifying();
                        OSUpdateManager.this.verifyingUpdateCompleted(i2);
                        OSUpdateManager.this.downloadingUpdateCompleted(i2);
                        if (i2 != i) {
                            ((OSUpdaterSharedPreferences) FbInjector.lazyInstance(9, PrefsModule.UL_id._UL__ULSEP_com_oculus_updater_prefs_OSUpdaterSharedPreferences_ULSEP_BINDING_ID, OSUpdateManager.this._UL_mInjectionContext)).updateTime("prefs_apply_update_finalizing_start_time");
                        }
                    }
                    ((OSUpdaterSharedPreferences) FbInjector.lazyInstance(9, PrefsModule.UL_id._UL__ULSEP_com_oculus_updater_prefs_OSUpdaterSharedPreferences_ULSEP_BINDING_ID, OSUpdateManager.this._UL_mInjectionContext)).putInt("prefs_previous_status_code", i).commit();
                }

                @Override // android.os.IUpdateEngineCallback
                public void onPayloadApplicationComplete(int i) {
                    BLog.d(OSUpdateManager.TAG, "onPayloadApplicationComplete(%d)", Integer.valueOf(i));
                    OSUpdateManager.this.modifyWifiWakeLock(false);
                    if (i == 0) {
                        ((OSUpdateServiceContract) FbInjector.lazyInstance(5, OSContractModule.UL_id._UL__ULSEP_com_oculus_updater_core_os_contract_OSUpdateServiceContract_ULSEP_BINDING_ID, OSUpdateManager.this._UL_mInjectionContext)).notifyApplyUpdateSucceeded();
                        return;
                    }
                    ((OSUpdateServiceContract) FbInjector.lazyInstance(5, OSContractModule.UL_id._UL__ULSEP_com_oculus_updater_core_os_contract_OSUpdateServiceContract_ULSEP_BINDING_ID, OSUpdateManager.this._UL_mInjectionContext)).notifyApplyUpdateFailed(String.format(null, "Installation failed. Error code: %d", Integer.valueOf(i)), i);
                }
            }, new Handler(Looper.getMainLooper()));
            this.mBoundToUpdateEngine = true;
        }
    }

    /* access modifiers changed from: package-private */
    public void modifyWifiWakeLock(boolean z) {
        if (z) {
            BLog.d(TAG, "Wifi/Wakelock acquire");
            try {
                this.mWakeLock.acquire();
                this.mWifiLock.acquire();
            } catch (RuntimeException e) {
                String format = String.format(null, "Acquire wakelock for update phase = %s, failed with message %s", ((ConditionManager) FbInjector.lazyInstance(0, MonitorsModule.UL_id._UL__ULSEP_com_oculus_updater_core_monitors_ConditionManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getUpdatePhase(), e.getMessage());
                BLog.e(TAG, format, e);
                ((OSUpdateEventLogger) FbInjector.lazyInstance(7, LoggingModule.UL_id._UL__ULSEP_com_oculus_updater_core_logging_OSUpdateEventLogger_ULSEP_BINDING_ID, this._UL_mInjectionContext)).reportSoftError("acquire_wakelock_failed", format, null);
            }
        } else {
            BLog.d(TAG, "Wifi/Wakelock release");
            try {
                this.mWifiLock.release();
                this.mWakeLock.release();
            } catch (RuntimeException e2) {
                String format2 = String.format(null, "Release wakelock for update phase = %s, failed with message %s", ((ConditionManager) FbInjector.lazyInstance(0, MonitorsModule.UL_id._UL__ULSEP_com_oculus_updater_core_monitors_ConditionManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getUpdatePhase(), e2.getMessage());
                BLog.e(TAG, format2, e2);
                ((OSUpdateEventLogger) FbInjector.lazyInstance(7, LoggingModule.UL_id._UL__ULSEP_com_oculus_updater_core_logging_OSUpdateEventLogger_ULSEP_BINDING_ID, this._UL_mInjectionContext)).reportSoftError("release_wakelock_failed", format2, null);
            }
        }
    }

    public void performApplyUpdate(@Nullable OSReleasesResponse.OSReleaseInfo oSReleaseInfo) throws OSUpdateRuntimeException {
        if (oSReleaseInfo != null) {
            BLog.i(TAG, "Performing apply update.");
            ReleaseInstallOptions releaseInstallOptions = oSReleaseInfo.getReleaseInstallOptions();
            if (releaseInstallOptions != null) {
                long deviceVersion = ((DeviceInfo) FbInjector.lazyInstance(3, DeviceModule.UL_id._UL__ULSEP_com_oculus_updater_device_DeviceInfo_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getDeviceVersion();
                if (oSReleaseInfo.target.longValue() <= deviceVersion) {
                    String format = String.format(null, "Packet has target build %d which is not an upgrade from the current build %d.", oSReleaseInfo.target, Long.valueOf(deviceVersion));
                    BLog.e(TAG, format);
                    ((BroadcastState) FbInjector.lazyInstance(6, BroadcastModule.UL_id._UL__ULSEP_com_oculus_updater_core_broadcast_BroadcastState_ULSEP_BINDING_ID, this._UL_mInjectionContext)).errorWhileCheckingForUpdates(format);
                    ((OSUpdateEventLogger) FbInjector.lazyInstance(7, LoggingModule.UL_id._UL__ULSEP_com_oculus_updater_core_logging_OSUpdateEventLogger_ULSEP_BINDING_ID, this._UL_mInjectionContext)).reportSoftError("update_is_not_an_upgrade", format, null);
                    this.mUpdateInProgress = false;
                    throw new OSUpdateRuntimeException(format);
                } else if (oSReleaseInfo.base.equals(oSReleaseInfo.target) || oSReleaseInfo.base.longValue() == deviceVersion) {
                    String str = oSReleaseInfo.uri;
                    long longValue = releaseInstallOptions.offset.longValue();
                    long longValue2 = releaseInstallOptions.size.longValue();
                    String[] addTrafficTracingHeader = addTrafficTracingHeader(releaseInstallOptions.headers);
                    BLog.d(TAG, "Applying update to UpdateEngine. uri=%s offset=%d filesize=%d headers=%s", str, Long.valueOf(longValue), Long.valueOf(longValue2), TextUtils.join(",", addTrafficTracingHeader));
                    try {
                        if (((GatekeeperHelper) FbInjector.lazyInstance(17, GkModule.UL_id._UL__ULSEP_com_oculus_updater_gk_GatekeeperHelper_ULSEP_BINDING_ID, this._UL_mInjectionContext)).isNonpersistentEnabled()) {
                            registerStatusReceiver();
                            ((UpdateMonitor) FbInjector.lazyInstance(18, OSUpdateModule.UL_id._UL__ULSEP_com_oculus_updater_core_os_UpdateMonitor_ULSEP_BINDING_ID, this._UL_mInjectionContext)).applyPayload(str, longValue, longValue2, addTrafficTracingHeader);
                        } else {
                            maybeBindToUpdateEngine();
                            ((UpdateEngine) FbInjector.lazyInstance(10, OSUpdateModule.UL_id._UL__ULSEP_com_oculus_updater_core_os_UpdateEngine_ULSEP_BINDING_ID, this._UL_mInjectionContext)).applyPayload(str, longValue, longValue2, addTrafficTracingHeader);
                        }
                        modifyWifiWakeLock(true);
                        ((OSUpdateEventLogger) FbInjector.lazyInstance(7, LoggingModule.UL_id._UL__ULSEP_com_oculus_updater_core_logging_OSUpdateEventLogger_ULSEP_BINDING_ID, this._UL_mInjectionContext)).logOSApplyUpdateStarted(oSReleaseInfo, ((SystemProperties) FbInjector.lazyInstance(12, OSUpdateModule.UL_id._UL__ULSEP_com_oculus_updater_core_os_SystemProperties_ULSEP_BINDING_ID, this._UL_mInjectionContext)).isDeviceLocked());
                        if (!this.mExternalRequest) {
                            ((ConditionManager) FbInjector.lazyInstance(0, MonitorsModule.UL_id._UL__ULSEP_com_oculus_updater_core_monitors_ConditionManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).requestConditionsForWaitingToApplyUpdate(this);
                        }
                    } catch (Throwable th) {
                        ((BroadcastState) FbInjector.lazyInstance(6, BroadcastModule.UL_id._UL__ULSEP_com_oculus_updater_core_broadcast_BroadcastState_ULSEP_BINDING_ID, this._UL_mInjectionContext)).errorWhileApplyingUpdate(((OSUpdateEventLogger) FbInjector.lazyInstance(7, LoggingModule.UL_id._UL__ULSEP_com_oculus_updater_core_logging_OSUpdateEventLogger_ULSEP_BINDING_ID, this._UL_mInjectionContext)).reportFailFromUpdateEngine(th, "applyPayload()"));
                        this.mUpdateInProgress = false;
                        throw new OSUpdateRuntimeException("Error calling applyPayload", th);
                    }
                } else {
                    String format2 = String.format(null, "Incremental update has incorrect base. Expecting %d, but got update for %d->%d.", Long.valueOf(deviceVersion), oSReleaseInfo.base, oSReleaseInfo.target);
                    BLog.e(TAG, format2);
                    ((BroadcastState) FbInjector.lazyInstance(6, BroadcastModule.UL_id._UL__ULSEP_com_oculus_updater_core_broadcast_BroadcastState_ULSEP_BINDING_ID, this._UL_mInjectionContext)).errorWhileCheckingForUpdates(format2);
                    ((OSUpdateEventLogger) FbInjector.lazyInstance(7, LoggingModule.UL_id._UL__ULSEP_com_oculus_updater_core_logging_OSUpdateEventLogger_ULSEP_BINDING_ID, this._UL_mInjectionContext)).reportSoftError("incremental_update_mismatch", format2, null);
                    this.mUpdateInProgress = false;
                    throw new OSUpdateRuntimeException(format2);
                }
            } else {
                String format3 = String.format(null, "OTA update package 'install options' are not present.", new Object[0]);
                BLog.e(TAG, format3);
                ((BroadcastState) FbInjector.lazyInstance(6, BroadcastModule.UL_id._UL__ULSEP_com_oculus_updater_core_broadcast_BroadcastState_ULSEP_BINDING_ID, this._UL_mInjectionContext)).errorWhileCheckingForUpdates(format3);
                ((OSUpdateEventLogger) FbInjector.lazyInstance(7, LoggingModule.UL_id._UL__ULSEP_com_oculus_updater_core_logging_OSUpdateEventLogger_ULSEP_BINDING_ID, this._UL_mInjectionContext)).reportSoftError("no_install_options", format3, null);
                this.mUpdateInProgress = false;
                throw new OSUpdateRuntimeException(format3);
            }
        }
    }

    private String[] addTrafficTracingHeader(String[] strArr) {
        boolean isTrafficTracingForced = ((SystemProperties) FbInjector.lazyInstance(12, OSUpdateModule.UL_id._UL__ULSEP_com_oculus_updater_core_os_SystemProperties_ULSEP_BINDING_ID, this._UL_mInjectionContext)).isTrafficTracingForced();
        if (!((GatekeeperHelper) FbInjector.lazyInstance(17, GkModule.UL_id._UL__ULSEP_com_oculus_updater_gk_GatekeeperHelper_ULSEP_BINDING_ID, this._UL_mInjectionContext)).isTrafficTracingEnabled() && !isTrafficTracingForced) {
            return strArr;
        }
        ArrayList arrayList = new ArrayList(Arrays.asList(strArr));
        String uuid = SafeUUIDGenerator.randomUUID().toString();
        arrayList.add("TRAFFIC_TRACE_ID=" + ("oculus_ota:" + uuid));
        String[] strArr2 = new String[arrayList.size()];
        arrayList.toArray(strArr2);
        if (isTrafficTracingForced) {
            BLog.i(TAG, "%s=%s", "TRAFFIC_TRACE_ID", uuid);
        }
        return strArr2;
    }

    public void applyUpdateSucceeded() {
        BLog.i(TAG, "Applying update has succeeded");
        ((OSUpdateEventLogger) FbInjector.lazyInstance(7, LoggingModule.UL_id._UL__ULSEP_com_oculus_updater_core_logging_OSUpdateEventLogger_ULSEP_BINDING_ID, this._UL_mInjectionContext)).logOSApplyUpdateSucceeded(((OSUpdaterSharedPreferences) FbInjector.lazyInstance(9, PrefsModule.UL_id._UL__ULSEP_com_oculus_updater_prefs_OSUpdaterSharedPreferences_ULSEP_BINDING_ID, this._UL_mInjectionContext)).putString("ota_reboot", Build.VERSION.INCREMENTAL).commit());
        this.mWaitForReboot = true;
        BLog.i(TAG, "Device will restart after required idle time.");
        if (!((GatekeeperHelper) FbInjector.lazyInstance(17, GkModule.UL_id._UL__ULSEP_com_oculus_updater_gk_GatekeeperHelper_ULSEP_BINDING_ID, this._UL_mInjectionContext)).isNonpersistentEnabled()) {
            ((BroadcastState) FbInjector.lazyInstance(6, BroadcastModule.UL_id._UL__ULSEP_com_oculus_updater_core_broadcast_BroadcastState_ULSEP_BINDING_ID, this._UL_mInjectionContext)).waitingForReboot();
        }
        ((ConditionManager) FbInjector.lazyInstance(0, MonitorsModule.UL_id._UL__ULSEP_com_oculus_updater_core_monitors_ConditionManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).requestConditionsForWaitingToReboot(this);
    }

    public void applyUpdateFailed(String str, int i) {
        BLog.w(TAG, "Applying update failed: %s, err: %d", str, Integer.valueOf(i));
        this.mUpdateInProgress = false;
        ((OSUpdateEventLogger) FbInjector.lazyInstance(7, LoggingModule.UL_id._UL__ULSEP_com_oculus_updater_core_logging_OSUpdateEventLogger_ULSEP_BINDING_ID, this._UL_mInjectionContext)).logOSApplyUpdateFailed(str, i);
        long buildVersion = ((OSUpdaterSharedPreferences) FbInjector.lazyInstance(9, PrefsModule.UL_id._UL__ULSEP_com_oculus_updater_prefs_OSUpdaterSharedPreferences_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getBuildVersion("prefs_apply_update_base_version");
        long buildVersion2 = ((OSUpdaterSharedPreferences) FbInjector.lazyInstance(9, PrefsModule.UL_id._UL__ULSEP_com_oculus_updater_prefs_OSUpdaterSharedPreferences_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getBuildVersion("prefs_apply_update_target_version");
        if (i != 20 || buildVersion == buildVersion2) {
            if (!((GatekeeperHelper) FbInjector.lazyInstance(17, GkModule.UL_id._UL__ULSEP_com_oculus_updater_gk_GatekeeperHelper_ULSEP_BINDING_ID, this._UL_mInjectionContext)).isNonpersistentEnabled()) {
                ((BroadcastState) FbInjector.lazyInstance(6, BroadcastModule.UL_id._UL__ULSEP_com_oculus_updater_core_broadcast_BroadcastState_ULSEP_BINDING_ID, this._UL_mInjectionContext)).errorWhileApplyingUpdate(str);
            }
            ((ConditionManager) FbInjector.lazyInstance(0, MonitorsModule.UL_id._UL__ULSEP_com_oculus_updater_core_monitors_ConditionManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).requestConditionsForWaitingToCheck(this, ConditionManager.CheckForUpdateConditions.Normal);
            return;
        }
        BLog.w(TAG, "Delta update failed with source hash error. Try with full OTA.");
        this.mFullUpdateFallbackMode = true;
        if (this.mExternalRequest) {
            ((OSUpdateServiceContract) FbInjector.lazyInstance(5, OSContractModule.UL_id._UL__ULSEP_com_oculus_updater_core_os_contract_OSUpdateServiceContract_ULSEP_BINDING_ID, this._UL_mInjectionContext)).performExtUpdateCheck();
        } else {
            ((OSUpdateServiceContract) FbInjector.lazyInstance(5, OSContractModule.UL_id._UL__ULSEP_com_oculus_updater_core_os_contract_OSUpdateServiceContract_ULSEP_BINDING_ID, this._UL_mInjectionContext)).performUpdateCheck();
        }
    }

    private boolean fullUpdateFallbackMode() {
        long buildVersion = ((OSUpdaterSharedPreferences) FbInjector.lazyInstance(9, PrefsModule.UL_id._UL__ULSEP_com_oculus_updater_prefs_OSUpdaterSharedPreferences_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getBuildVersion("prefs_apply_update_base_version");
        long buildVersion2 = ((OSUpdaterSharedPreferences) FbInjector.lazyInstance(9, PrefsModule.UL_id._UL__ULSEP_com_oculus_updater_prefs_OSUpdaterSharedPreferences_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getBuildVersion("prefs_apply_update_target_version");
        try {
            if (!isDownloadError(((UpdateMonitor) FbInjector.lazyInstance(18, OSUpdateModule.UL_id._UL__ULSEP_com_oculus_updater_core_os_UpdateMonitor_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getUpdateEngineErrorCode()) || buildVersion == buildVersion2) {
                return false;
            }
            return true;
        } catch (RuntimeException e) {
            BLog.e(TAG, "Couldn't connect to OsUpdateMonitor", e);
            return true;
        }
    }

    public void applyUpdateStatus(float f) {
        BLog.i(TAG, "OTA applying update (%%): %f ", Float.valueOf(100.0f * f));
        if (!((GatekeeperHelper) FbInjector.lazyInstance(17, GkModule.UL_id._UL__ULSEP_com_oculus_updater_gk_GatekeeperHelper_ULSEP_BINDING_ID, this._UL_mInjectionContext)).isNonpersistentEnabled()) {
            ((BroadcastState) FbInjector.lazyInstance(6, BroadcastModule.UL_id._UL__ULSEP_com_oculus_updater_core_broadcast_BroadcastState_ULSEP_BINDING_ID, this._UL_mInjectionContext)).applyingUpdate(f);
        }
    }

    public void verifyingUpdate() {
        BLog.i(TAG, "Apply status: update_engine started verification");
        if (!((GatekeeperHelper) FbInjector.lazyInstance(17, GkModule.UL_id._UL__ULSEP_com_oculus_updater_gk_GatekeeperHelper_ULSEP_BINDING_ID, this._UL_mInjectionContext)).isNonpersistentEnabled()) {
            ((BroadcastState) FbInjector.lazyInstance(6, BroadcastModule.UL_id._UL__ULSEP_com_oculus_updater_core_broadcast_BroadcastState_ULSEP_BINDING_ID, this._UL_mInjectionContext)).verifyingUpdate();
        }
    }

    public void performReboot() {
        BLog.i(TAG, "Performing reboot");
        ((OSUpdateEventLogger) FbInjector.lazyInstance(7, LoggingModule.UL_id._UL__ULSEP_com_oculus_updater_core_logging_OSUpdateEventLogger_ULSEP_BINDING_ID, this._UL_mInjectionContext)).logOSRebootStarted();
        BLog.i(TAG, "Device will reboot... now!");
        ((PowerManager) FbInjector.lazyInstance(4, AndroidModule.UL_id._UL__ULSEP_android_os_PowerManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).reboot("upgrade");
    }

    /* access modifiers changed from: private */
    public class UpdateStatusReceiver extends BroadcastReceiver {
        private UpdateStatusReceiver() {
        }

        /* JADX INFO: Can't fix incorrect switch cases order, some code will duplicate */
        public void onReceive(Context context, Intent intent) {
            char c;
            String stringExtra = intent.getStringExtra("state");
            if (stringExtra == null) {
                BLog.w(OSUpdateManager.TAG, "Received null status from OsUpdateMonitorService");
                return;
            }
            int i = ((OSUpdaterSharedPreferences) FbInjector.lazyInstance(9, PrefsModule.UL_id._UL__ULSEP_com_oculus_updater_prefs_OSUpdaterSharedPreferences_ULSEP_BINDING_ID, OSUpdateManager.this._UL_mInjectionContext)).getInt("prefs_previous_status_code", 0);
            switch (stringExtra.hashCode()) {
                case -1199267795:
                    if (stringExtra.equals("finalizing_update")) {
                        c = 2;
                        break;
                    }
                    c = 65535;
                    break;
                case -252387059:
                    if (stringExtra.equals("waiting_for_reboot")) {
                        c = 3;
                        break;
                    }
                    c = 65535;
                    break;
                case -132584012:
                    if (stringExtra.equals("applying_update")) {
                        c = 0;
                        break;
                    }
                    c = 65535;
                    break;
                case 1160636847:
                    if (stringExtra.equals("error_while_applying_update")) {
                        c = 4;
                        break;
                    }
                    c = 65535;
                    break;
                case 1757372671:
                    if (stringExtra.equals("verifying_update")) {
                        c = 1;
                        break;
                    }
                    c = 65535;
                    break;
                default:
                    c = 65535;
                    break;
            }
            if (c == 0) {
                float floatExtra = intent.getFloatExtra("progress", 0.0f);
                ((OSUpdateServiceContract) FbInjector.lazyInstance(5, OSContractModule.UL_id._UL__ULSEP_com_oculus_updater_core_os_contract_OSUpdateServiceContract_ULSEP_BINDING_ID, OSUpdateManager.this._UL_mInjectionContext)).notifyApplyUpdateStatus(floatExtra);
                ((OSUpdateEventLogger) FbInjector.lazyInstance(7, LoggingModule.UL_id._UL__ULSEP_com_oculus_updater_core_logging_OSUpdateEventLogger_ULSEP_BINDING_ID, OSUpdateManager.this._UL_mInjectionContext)).logOSApplyUpdateProgress(floatExtra);
                ((OSUpdaterSharedPreferences) FbInjector.lazyInstance(9, PrefsModule.UL_id._UL__ULSEP_com_oculus_updater_prefs_OSUpdaterSharedPreferences_ULSEP_BINDING_ID, OSUpdateManager.this._UL_mInjectionContext)).putInt("prefs_previous_status_code", 3).commit();
            } else if (c == 1) {
                ((OSUpdateServiceContract) FbInjector.lazyInstance(5, OSContractModule.UL_id._UL__ULSEP_com_oculus_updater_core_os_contract_OSUpdateServiceContract_ULSEP_BINDING_ID, OSUpdateManager.this._UL_mInjectionContext)).notifyApplyUpdateStatusVerifying();
                OSUpdateManager.this.downloadingUpdateCompleted(i);
                if (i != 4) {
                    ((OSUpdaterSharedPreferences) FbInjector.lazyInstance(9, PrefsModule.UL_id._UL__ULSEP_com_oculus_updater_prefs_OSUpdaterSharedPreferences_ULSEP_BINDING_ID, OSUpdateManager.this._UL_mInjectionContext)).updateTime("prefs_apply_update_verifying_start_time");
                }
                ((OSUpdaterSharedPreferences) FbInjector.lazyInstance(9, PrefsModule.UL_id._UL__ULSEP_com_oculus_updater_prefs_OSUpdaterSharedPreferences_ULSEP_BINDING_ID, OSUpdateManager.this._UL_mInjectionContext)).putInt("prefs_previous_status_code", 4).commit();
            } else if (c == 2) {
                ((OSUpdateServiceContract) FbInjector.lazyInstance(5, OSContractModule.UL_id._UL__ULSEP_com_oculus_updater_core_os_contract_OSUpdateServiceContract_ULSEP_BINDING_ID, OSUpdateManager.this._UL_mInjectionContext)).notifyApplyUpdateStatusVerifying();
                OSUpdateManager.this.verifyingUpdateCompleted(i);
                OSUpdateManager.this.downloadingUpdateCompleted(i);
                if (i != 5) {
                    ((OSUpdaterSharedPreferences) FbInjector.lazyInstance(9, PrefsModule.UL_id._UL__ULSEP_com_oculus_updater_prefs_OSUpdaterSharedPreferences_ULSEP_BINDING_ID, OSUpdateManager.this._UL_mInjectionContext)).updateTime("prefs_apply_update_finalizing_start_time");
                }
                ((OSUpdaterSharedPreferences) FbInjector.lazyInstance(9, PrefsModule.UL_id._UL__ULSEP_com_oculus_updater_prefs_OSUpdaterSharedPreferences_ULSEP_BINDING_ID, OSUpdateManager.this._UL_mInjectionContext)).putInt("prefs_previous_status_code", 5).commit();
            } else if (c == 3) {
                ((OSUpdateServiceContract) FbInjector.lazyInstance(5, OSContractModule.UL_id._UL__ULSEP_com_oculus_updater_core_os_contract_OSUpdateServiceContract_ULSEP_BINDING_ID, OSUpdateManager.this._UL_mInjectionContext)).notifyApplyUpdateSucceeded();
                ((Context) FbInjector.lazyInstance(1, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, OSUpdateManager.this._UL_mInjectionContext)).unregisterReceiver(this);
            } else if (c == 4) {
                int intExtra = intent.getIntExtra("failure_code", -1);
                if (intExtra == 1001) {
                    OSUpdateManager.this.cancelOTA();
                }
                ((OSUpdateServiceContract) FbInjector.lazyInstance(5, OSContractModule.UL_id._UL__ULSEP_com_oculus_updater_core_os_contract_OSUpdateServiceContract_ULSEP_BINDING_ID, OSUpdateManager.this._UL_mInjectionContext)).notifyApplyUpdateFailed(String.format(null, "Installation failed. Error code: %d", Integer.valueOf(intExtra)), intExtra);
                ((Context) FbInjector.lazyInstance(1, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, OSUpdateManager.this._UL_mInjectionContext)).unregisterReceiver(this);
            }
        }
    }

    public void registerStatusReceiver() {
        ((Context) FbInjector.lazyInstance(1, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext)).registerReceiver(new UpdateStatusReceiver(), new IntentFilter("com.oculus.updater.STATE_NOTIFICATION"));
    }

    @Override // com.oculus.updater.core.monitors.ConditionManager.ConditionListener
    public void onConditionsMet(ConditionManager.UpdatePhase updatePhase, boolean z) {
        if (updatePhase == ConditionManager.UpdatePhase.WaitingToCheckForUpdates) {
            ((OSUpdateServiceContract) FbInjector.lazyInstance(5, OSContractModule.UL_id._UL__ULSEP_com_oculus_updater_core_os_contract_OSUpdateServiceContract_ULSEP_BINDING_ID, this._UL_mInjectionContext)).performUpdateCheck();
        } else if (updatePhase == ConditionManager.UpdatePhase.WaitingToApplyUpdate) {
            if (!z) {
                try {
                    modifyWifiWakeLock(true);
                    ((UpdateEngine) FbInjector.lazyInstance(10, OSUpdateModule.UL_id._UL__ULSEP_com_oculus_updater_core_os_UpdateEngine_ULSEP_BINDING_ID, this._UL_mInjectionContext)).resume();
                    ((OSUpdateEventLogger) FbInjector.lazyInstance(7, LoggingModule.UL_id._UL__ULSEP_com_oculus_updater_core_logging_OSUpdateEventLogger_ULSEP_BINDING_ID, this._UL_mInjectionContext)).logOSApplyUpdateResume();
                } catch (RuntimeException e) {
                    String str = "Failed to resume update_engine. Error details: " + e.getMessage();
                    BLog.w(TAG, str, e);
                    ((OSUpdateServiceContract) FbInjector.lazyInstance(5, OSContractModule.UL_id._UL__ULSEP_com_oculus_updater_core_os_contract_OSUpdateServiceContract_ULSEP_BINDING_ID, this._UL_mInjectionContext)).notifyApplyUpdateFailed(str);
                }
            }
        } else if (updatePhase == ConditionManager.UpdatePhase.WaitingToRebootIntoUpdate) {
            ((OSUpdateServiceContract) FbInjector.lazyInstance(5, OSContractModule.UL_id._UL__ULSEP_com_oculus_updater_core_os_contract_OSUpdateServiceContract_ULSEP_BINDING_ID, this._UL_mInjectionContext)).performReboot();
        }
    }

    @Override // com.oculus.updater.core.monitors.ConditionManager.ConditionListener
    public void onConditionsNotMet(ConditionManager.UpdatePhase updatePhase, boolean z, ConditionManager.ConditionsChange conditionsChange) {
        if (updatePhase == ConditionManager.UpdatePhase.WaitingToApplyUpdate) {
            BLog.i(TAG, "Conditions not met, try to suspend update_engine.");
            PowerManager.WakeLock wakeLock = this.mWakeLock;
            if (wakeLock != null && wakeLock.isHeld()) {
                try {
                    ((UpdateEngine) FbInjector.lazyInstance(10, OSUpdateModule.UL_id._UL__ULSEP_com_oculus_updater_core_os_UpdateEngine_ULSEP_BINDING_ID, this._UL_mInjectionContext)).suspend();
                    modifyWifiWakeLock(false);
                    String str = null;
                    int i = AnonymousClass2.$SwitchMap$com$oculus$updater$core$monitors$ConditionManager$ConditionsChange[conditionsChange.ordinal()];
                    if (i == 1) {
                        str = "prefs_apply_suspend_due_to_battery";
                    } else if (i == 2) {
                        str = "prefs_apply_suspend_due_to_not_idle";
                    } else if (i != 3) {
                        BLog.e(TAG, "incorrect condition change");
                    } else {
                        str = "prefs_apply_update_shutdown_count";
                    }
                    if (((ConditionManager) FbInjector.lazyInstance(0, MonitorsModule.UL_id._UL__ULSEP_com_oculus_updater_core_monitors_ConditionManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)) != null) {
                        ((OSUpdateEventLogger) FbInjector.lazyInstance(7, LoggingModule.UL_id._UL__ULSEP_com_oculus_updater_core_logging_OSUpdateEventLogger_ULSEP_BINDING_ID, this._UL_mInjectionContext)).logOSApplyUpdateSuspended(((ConditionManager) FbInjector.lazyInstance(0, MonitorsModule.UL_id._UL__ULSEP_com_oculus_updater_core_monitors_ConditionManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).toString(), str);
                    }
                } catch (RuntimeException e) {
                    String str2 = "Failed to suspend update_engine. Error details: " + e.getMessage();
                    BLog.w(TAG, str2, e);
                    ((OSUpdateServiceContract) FbInjector.lazyInstance(5, OSContractModule.UL_id._UL__ULSEP_com_oculus_updater_core_os_contract_OSUpdateServiceContract_ULSEP_BINDING_ID, this._UL_mInjectionContext)).notifyApplyUpdateFailed(str2);
                }
            }
        }
    }

    /* renamed from: com.oculus.updater.core.os.OSUpdateManager$2  reason: invalid class name */
    static /* synthetic */ class AnonymousClass2 {
        static final /* synthetic */ int[] $SwitchMap$com$oculus$updater$core$monitors$ConditionManager$ConditionsChange = new int[ConditionManager.ConditionsChange.values().length];

        /* JADX WARNING: Can't wrap try/catch for region: R(8:0|1|2|3|4|5|6|8) */
        /* JADX WARNING: Failed to process nested try/catch */
        /* JADX WARNING: Missing exception handler attribute for start block: B:3:0x0014 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:5:0x001f */
        static {
            /*
                com.oculus.updater.core.monitors.ConditionManager$ConditionsChange[] r0 = com.oculus.updater.core.monitors.ConditionManager.ConditionsChange.values()
                int r0 = r0.length
                int[] r0 = new int[r0]
                com.oculus.updater.core.os.OSUpdateManager.AnonymousClass2.$SwitchMap$com$oculus$updater$core$monitors$ConditionManager$ConditionsChange = r0
                int[] r0 = com.oculus.updater.core.os.OSUpdateManager.AnonymousClass2.$SwitchMap$com$oculus$updater$core$monitors$ConditionManager$ConditionsChange     // Catch:{ NoSuchFieldError -> 0x0014 }
                com.oculus.updater.core.monitors.ConditionManager$ConditionsChange r1 = com.oculus.updater.core.monitors.ConditionManager.ConditionsChange.BELOW_BATTERY_THRESHOLD     // Catch:{ NoSuchFieldError -> 0x0014 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0014 }
                r2 = 1
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0014 }
            L_0x0014:
                int[] r0 = com.oculus.updater.core.os.OSUpdateManager.AnonymousClass2.$SwitchMap$com$oculus$updater$core$monitors$ConditionManager$ConditionsChange     // Catch:{ NoSuchFieldError -> 0x001f }
                com.oculus.updater.core.monitors.ConditionManager$ConditionsChange r1 = com.oculus.updater.core.monitors.ConditionManager.ConditionsChange.NOT_IDLE     // Catch:{ NoSuchFieldError -> 0x001f }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x001f }
                r2 = 2
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x001f }
            L_0x001f:
                int[] r0 = com.oculus.updater.core.os.OSUpdateManager.AnonymousClass2.$SwitchMap$com$oculus$updater$core$monitors$ConditionManager$ConditionsChange     // Catch:{ NoSuchFieldError -> 0x002a }
                com.oculus.updater.core.monitors.ConditionManager$ConditionsChange r1 = com.oculus.updater.core.monitors.ConditionManager.ConditionsChange.DEVICE_NOT_ON     // Catch:{ NoSuchFieldError -> 0x002a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x002a }
                r2 = 3
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x002a }
            L_0x002a:
                return
            */
            throw new UnsupportedOperationException("Method not decompiled: com.oculus.updater.core.os.OSUpdateManager.AnonymousClass2.<clinit>():void");
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:26:0x0070  */
    /* JADX WARNING: Removed duplicated region for block: B:29:0x0084  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void onReboot() {
        /*
        // Method dump skipped, instructions count: 155
        */
        throw new UnsupportedOperationException("Method not decompiled: com.oculus.updater.core.os.OSUpdateManager.onReboot():void");
    }
}
