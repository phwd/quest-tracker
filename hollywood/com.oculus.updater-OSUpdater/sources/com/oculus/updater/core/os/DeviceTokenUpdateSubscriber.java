package com.oculus.updater.core.os;

import bolts.Task;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.oculus.auth.handler.LoginHandler;
import com.oculus.updater.core.os.contract.OSContractModule;
import com.oculus.updater.core.os.contract.OSUpdateServiceContract;
import com.oculus.updater.prefs.OSUpdaterSharedPreferences;
import com.oculus.updater.prefs.PrefsModule;

@Dependencies
@ApplicationScoped
public class DeviceTokenUpdateSubscriber implements LoginHandler {
    private static volatile DeviceTokenUpdateSubscriber _UL__ULSEP_com_oculus_updater_core_os_DeviceTokenUpdateSubscriber_ULSEP_INSTANCE;
    private InjectionContext _UL_mInjectionContext;

    @AutoGeneratedFactoryMethod
    public static final DeviceTokenUpdateSubscriber _UL__ULSEP_com_oculus_updater_core_os_DeviceTokenUpdateSubscriber_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_updater_core_os_DeviceTokenUpdateSubscriber_ULSEP_INSTANCE == null) {
            synchronized (DeviceTokenUpdateSubscriber.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_updater_core_os_DeviceTokenUpdateSubscriber_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        _UL__ULSEP_com_oculus_updater_core_os_DeviceTokenUpdateSubscriber_ULSEP_INSTANCE = new DeviceTokenUpdateSubscriber(injectorLike.getApplicationInjector());
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_updater_core_os_DeviceTokenUpdateSubscriber_ULSEP_INSTANCE;
    }

    @Inject
    public DeviceTokenUpdateSubscriber(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(2, injectorLike);
    }

    @Override // com.oculus.auth.handler.LoginHandler
    public Task<Void> afterLoginAsync() {
        String string = ((OSUpdaterSharedPreferences) FbInjector.lazyInstance(1, PrefsModule.UL_id._UL__ULSEP_com_oculus_updater_prefs_OSUpdaterSharedPreferences_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getString("prefs_device_auth_trigger_check_for_updates", null);
        if (string != null) {
            if (!"check_updates".equals(string)) {
                ((OSUpdateServiceContract) FbInjector.lazyInstance(0, OSContractModule.UL_id._UL__ULSEP_com_oculus_updater_core_os_contract_OSUpdateServiceContract_ULSEP_BINDING_ID, this._UL_mInjectionContext)).performExtUpdateCheck();
            } else {
                ((OSUpdateServiceContract) FbInjector.lazyInstance(0, OSContractModule.UL_id._UL__ULSEP_com_oculus_updater_core_os_contract_OSUpdateServiceContract_ULSEP_BINDING_ID, this._UL_mInjectionContext)).performUpdateCheck();
            }
            ((OSUpdaterSharedPreferences) FbInjector.lazyInstance(1, PrefsModule.UL_id._UL__ULSEP_com_oculus_updater_prefs_OSUpdaterSharedPreferences_ULSEP_BINDING_ID, this._UL_mInjectionContext)).remove("prefs_device_auth_trigger_check_for_updates");
        }
        return Task.forResult(null);
    }
}
