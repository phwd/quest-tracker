package com.oculus.updater.core.broadcast;

import android.content.Context;
import android.content.Intent;
import com.facebook.debug.log.BLog;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.ForAppContext;
import com.facebook.inject.InjectorLike;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.oculus.updater.core.broadcast.BroadcastModule;
import javax.annotation.Nullable;

@Dependencies
@ApplicationScoped
public class BroadcastState {
    private static final String TAG = "com.oculus.updater.core.broadcast.BroadcastState";
    private static volatile BroadcastState _UL__ULSEP_com_oculus_updater_core_broadcast_BroadcastState_ULSEP_INSTANCE;
    private boolean mCheckInProgress = false;
    private final Context mContext;

    @AutoGeneratedAccessMethod
    public static final BroadcastState _UL__ULSEP_com_oculus_updater_core_broadcast_BroadcastState_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (BroadcastState) UL.factorymap.get(BroadcastModule.UL_id._UL__ULSEP_com_oculus_updater_core_broadcast_BroadcastState_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final BroadcastState _UL__ULSEP_com_oculus_updater_core_broadcast_BroadcastState_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_updater_core_broadcast_BroadcastState_ULSEP_INSTANCE == null) {
            synchronized (BroadcastState.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_updater_core_broadcast_BroadcastState_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        _UL__ULSEP_com_oculus_updater_core_broadcast_BroadcastState_ULSEP_INSTANCE = new BroadcastState(BundledAndroidModule._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_ACCESS_METHOD(injectorLike.getApplicationInjector()));
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_updater_core_broadcast_BroadcastState_ULSEP_INSTANCE;
    }

    @Inject
    public BroadcastState(@ForAppContext Context context) {
        BLog.d(TAG, "BroadcastState constructor");
        this.mContext = context;
    }

    public void checkingForUpdates() {
        if (!this.mCheckInProgress) {
            sendBroadcast("checking_for_updates", null, null);
        }
        this.mCheckInProgress = true;
    }

    public void noUpdatesAvailable() {
        sendBroadcast("no_updates_available", null, null);
        this.mCheckInProgress = false;
    }

    public void errorWhileCheckingForUpdates(String str) {
        sendBroadcast("error_while_checking_for_updates", null, str);
        this.mCheckInProgress = false;
    }

    public void applyingUpdate(float f) {
        sendBroadcast("applying_update", Float.valueOf(f), null);
    }

    public void verifyingUpdate() {
        sendBroadcast("verifying_update", null, null);
    }

    public void errorWhileApplyingUpdate(String str) {
        sendBroadcast("error_while_applying_update", null, str);
        this.mCheckInProgress = false;
    }

    public void waitingForReboot() {
        sendBroadcast("waiting_for_reboot", null, null);
        this.mCheckInProgress = false;
    }

    private void sendBroadcast(String str, @Nullable Float f, @Nullable String str2) {
        Intent intent = new Intent();
        intent.setAction("com.oculus.updater.STATE_NOTIFICATION");
        intent.putExtra("state", str);
        if (f != null) {
            intent.putExtra("progress", f.floatValue());
        }
        if (str2 != null) {
            intent.putExtra("error_details", str2);
        }
        this.mContext.sendBroadcast(intent);
        BLog.d(TAG, "sendBroadcast: %s state: %s", "com.oculus.updater.STATE_NOTIFICATION", str);
    }
}
