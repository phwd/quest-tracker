package com.oculus.updater.credentialsmanager;

import com.facebook.inject.AbstractLibraryModule;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.InjectorModule;
import com.facebook.inject.ProviderMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.AutoGeneratedSwitchIdClass;
import com.facebook.ultralight.UL;
import com.google.inject.Key;
import com.oculus.auth.credentials.CredentialsManager;
import com.oculus.auth.device.DeviceAuthTokenSubscriber;
import com.oculus.auth.storage.AuthDatastore;

@InjectorModule
public class CredentialsManagerModule extends AbstractLibraryModule {
    private static volatile CredentialsManager _UL__ULSEP_com_oculus_auth_credentials_CredentialsManager_ULSEP_INSTANCE;
    private static volatile DeviceAuthTokenSubscriber _UL__ULSEP_com_oculus_auth_device_DeviceAuthTokenSubscriber_ULSEP_INSTANCE;

    @AutoGeneratedSwitchIdClass
    public static final class UL_id {
        public static final int _UL__ULSEP_com_oculus_auth_credentials_CredentialsManager_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_auth_credentials_CredentialsManager_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(CredentialsManager.class)));
        public static final int _UL__ULSEP_com_oculus_auth_device_DeviceAuthTokenSubscriber_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_auth_device_DeviceAuthTokenSubscriber_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(DeviceAuthTokenSubscriber.class)));
        public static final int _UL__ULSEP_com_oculus_auth_storage_AuthDatastore_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_auth_storage_AuthDatastore_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(AuthDatastore.class)));
        public static final int _UL__ULSEP_com_oculus_updater_credentialsmanager_OSUpdateAuthDatastore_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_updater_credentialsmanager_OSUpdateAuthDatastore_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(OSUpdateAuthDatastore.class)));
        public static final int _UL__ULSEP_com_oculus_updater_credentialsmanager_OSUpdateCredentialsManager_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_updater_credentialsmanager_OSUpdateCredentialsManager_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(OSUpdateCredentialsManager.class)));
    }

    @ProviderMethod
    static AuthDatastore provideAuthDatastore(OSUpdateAuthDatastore oSUpdateAuthDatastore) {
        return oSUpdateAuthDatastore;
    }

    @ApplicationScoped
    @ProviderMethod
    static CredentialsManager provideCredentialsManager(OSUpdateCredentialsManager oSUpdateCredentialsManager) {
        return oSUpdateCredentialsManager;
    }

    @ApplicationScoped
    @ProviderMethod
    static DeviceAuthTokenSubscriber providesDeviceAuthTokenSubscriber(OSUpdateCredentialsManager oSUpdateCredentialsManager) {
        return oSUpdateCredentialsManager;
    }

    @AutoGeneratedFactoryMethod
    public static final CredentialsManager _UL__ULSEP_com_oculus_auth_credentials_CredentialsManager_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_auth_credentials_CredentialsManager_ULSEP_INSTANCE == null) {
            synchronized (CredentialsManager.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_auth_credentials_CredentialsManager_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        _UL__ULSEP_com_oculus_auth_credentials_CredentialsManager_ULSEP_INSTANCE = provideCredentialsManager(OSUpdateCredentialsManager._UL__ULSEP_com_oculus_updater_credentialsmanager_OSUpdateCredentialsManager_ULSEP_ACCESS_METHOD(injectorLike.getApplicationInjector()));
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_auth_credentials_CredentialsManager_ULSEP_INSTANCE;
    }

    @AutoGeneratedFactoryMethod
    public static final DeviceAuthTokenSubscriber _UL__ULSEP_com_oculus_auth_device_DeviceAuthTokenSubscriber_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_auth_device_DeviceAuthTokenSubscriber_ULSEP_INSTANCE == null) {
            synchronized (DeviceAuthTokenSubscriber.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_auth_device_DeviceAuthTokenSubscriber_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        _UL__ULSEP_com_oculus_auth_device_DeviceAuthTokenSubscriber_ULSEP_INSTANCE = providesDeviceAuthTokenSubscriber(OSUpdateCredentialsManager._UL__ULSEP_com_oculus_updater_credentialsmanager_OSUpdateCredentialsManager_ULSEP_ACCESS_METHOD(injectorLike.getApplicationInjector()));
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_auth_device_DeviceAuthTokenSubscriber_ULSEP_INSTANCE;
    }

    @AutoGeneratedFactoryMethod
    public static final AuthDatastore _UL__ULSEP_com_oculus_auth_storage_AuthDatastore_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return provideAuthDatastore(OSUpdateAuthDatastore._UL__ULSEP_com_oculus_updater_credentialsmanager_OSUpdateAuthDatastore_ULSEP_ACCESS_METHOD(injectorLike));
    }
}
