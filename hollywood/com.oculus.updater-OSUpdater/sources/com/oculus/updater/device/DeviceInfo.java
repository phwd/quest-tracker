package com.oculus.updater.device;

import android.annotation.SuppressLint;
import android.os.Build;
import com.facebook.androidinternals.android.os.SystemPropertiesInternal;
import com.facebook.debug.log.BLog;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.InjectorLike;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.oculus.common.build.BuildConfig;
import com.oculus.common.build.BuildConstants;
import com.oculus.errorreporting.interfaces.IErrorReporter;
import com.oculus.errorreporting.interfaces.InterfacesModule;
import com.oculus.updater.device.DeviceModule;

@Dependencies
@ApplicationScoped
public class DeviceInfo {
    private static final String TAG = "DeviceInfo";
    private static volatile DeviceInfo _UL__ULSEP_com_oculus_updater_device_DeviceInfo_ULSEP_INSTANCE;
    private final String type;
    private final long version;

    @AutoGeneratedAccessMethod
    public static final DeviceInfo _UL__ULSEP_com_oculus_updater_device_DeviceInfo_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (DeviceInfo) UL.factorymap.get(DeviceModule.UL_id._UL__ULSEP_com_oculus_updater_device_DeviceInfo_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final DeviceInfo _UL__ULSEP_com_oculus_updater_device_DeviceInfo_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_updater_device_DeviceInfo_ULSEP_INSTANCE == null) {
            synchronized (DeviceInfo.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_updater_device_DeviceInfo_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        _UL__ULSEP_com_oculus_updater_device_DeviceInfo_ULSEP_INSTANCE = new DeviceInfo(InterfacesModule._UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_ACCESS_METHOD(injectorLike.getApplicationInjector()));
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_updater_device_DeviceInfo_ULSEP_INSTANCE;
    }

    @Inject
    public DeviceInfo(IErrorReporter iErrorReporter) {
        long j;
        try {
            j = Long.parseLong(Build.VERSION.INCREMENTAL.replace(".", BuildConfig.PROVIDER_SUFFIX));
        } catch (NumberFormatException e) {
            if (Build.VERSION.INCREMENTAL.contains("eng")) {
                j = 99999999999999999L;
                BLog.w(TAG, "Assuming %s is a local dev build, turning off updates.", Build.VERSION.INCREMENTAL, e);
            } else {
                j = 0;
                String str = "Unable to parse incremental version: " + Build.VERSION.INCREMENTAL;
                BLog.e(TAG, str, e);
                if (!BuildConstants.DEBUG) {
                    iErrorReporter.softError("device_info_version_parse", str, e);
                }
            }
        }
        this.version = j;
        this.type = SystemPropertiesInternal.get("ro.build.flavor", "unknown");
    }

    public long getDeviceVersion() {
        return this.version;
    }

    public String getDeviceType() {
        return this.type;
    }

    @SuppressLint({"HardwareIds", "MissingPermission"})
    public String getDeviceSerial() {
        if (Build.VERSION.SDK_INT >= 26) {
            return Build.getSerial();
        }
        return Build.SERIAL;
    }

    public int getDeviceSdkVersion() {
        return Build.VERSION.SDK_INT;
    }

    public String getSecurePatchDate() {
        return SystemPropertiesInternal.get("ro.build.version.security_patch", "undefined");
    }
}
