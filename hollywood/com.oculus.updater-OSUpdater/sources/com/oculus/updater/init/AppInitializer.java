package com.oculus.updater.init;

import com.facebook.debug.log.BLog;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.oculus.common.init.AppInitModule;
import com.oculus.common.init.INeedInit;
import com.oculus.common.init.NeedsHighPriorityInit;
import com.oculus.updater.init.InitModule;
import java.util.Set;

@Dependencies
public class AppInitializer {
    private static final String TAG = "AppInitializer";
    @Inject
    @NeedsHighPriorityInit
    private final Lazy<Set<INeedInit>> mHighPriorityINeedInitsLazy;
    @Inject
    private final Lazy<Set<INeedInit>> mINeedInitsLazy;

    @AutoGeneratedAccessMethod
    public static final AppInitializer _UL__ULSEP_com_oculus_updater_init_AppInitializer_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (AppInitializer) UL.factorymap.get(InitModule.UL_id._UL__ULSEP_com_oculus_updater_init_AppInitializer_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final AppInitializer _UL__ULSEP_com_oculus_updater_init_AppInitializer_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new AppInitializer(injectorLike);
    }

    @Inject
    public AppInitializer(InjectorLike injectorLike) {
        this.mHighPriorityINeedInitsLazy = AppInitModule._UL__ULSEP_com_facebook_inject_Lazy_ULLT_java_util_Set_ULLT_com_oculus_common_init_INeedInit_ULGT__ULGT__ULSEP_com_oculus_common_init_NeedsHighPriorityInit_ULSEP_ACCESS_METHOD(injectorLike);
        this.mINeedInitsLazy = AppInitModule._UL__ULSEP_com_facebook_inject_Lazy_ULLT_java_util_Set_ULLT_com_oculus_common_init_INeedInit_ULGT__ULGT__ULSEP_ACCESS_METHOD(injectorLike);
    }

    public void run() {
        Set<INeedInit> set = this.mHighPriorityINeedInitsLazy.get();
        BLog.d(TAG, "Initializing %d NeedsHighPriorityInit", Integer.valueOf(set.size()));
        for (INeedInit iNeedInit : set) {
            BLog.d(TAG, "Initializing module: %s", iNeedInit.getClass().getSimpleName());
            iNeedInit.init();
        }
        Set<INeedInit> set2 = this.mINeedInitsLazy.get();
        BLog.d(TAG, "Initializing %d INeedInit modules", Integer.valueOf(set2.size()));
        for (INeedInit iNeedInit2 : set2) {
            BLog.d(TAG, "Initializing module: %s", iNeedInit2.getClass().getSimpleName());
            iNeedInit2.init();
        }
    }
}
