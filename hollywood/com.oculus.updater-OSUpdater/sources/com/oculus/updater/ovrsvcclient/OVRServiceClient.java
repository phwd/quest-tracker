package com.oculus.updater.ovrsvcclient;

import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.Bundle;
import android.os.IBinder;
import android.os.RemoteException;
import android.text.TextUtils;
import com.facebook.debug.log.BLog;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.UnsafeContextInjection;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.oculus.aidl.OVRServiceInterface;
import com.oculus.common.build.BuildConfig;
import com.oculus.errorreporting.interfaces.IErrorReporter;
import com.oculus.errorreporting.interfaces.InterfacesModule;
import java.io.FileOutputStream;
import java.io.IOException;
import javax.annotation.Nullable;
import javax.inject.Inject;

@Dependencies
public class OVRServiceClient {
    public static final String TAG = "OVRServiceClient";
    private final ServiceConnection mConnection = new ServiceConnection() {
        /* class com.oculus.updater.ovrsvcclient.OVRServiceClient.AnonymousClass1 */

        public void onServiceConnected(ComponentName componentName, IBinder iBinder) {
            synchronized (OVRServiceClient.this) {
                OVRServiceClient.this.mService = OVRServiceInterface.Stub.asInterface(iBinder);
                OVRServiceClient.this.notify();
            }
        }

        public void onServiceDisconnected(ComponentName componentName) {
            synchronized (OVRServiceClient.this) {
                OVRServiceClient.this.mService = null;
            }
        }
    };
    private final Context mContext;
    private final IErrorReporter mErrorReporter;
    @Nullable
    private OVRServiceInterface mService;

    @AutoGeneratedFactoryMethod
    public static final OVRServiceClient _UL__ULSEP_com_oculus_updater_ovrsvcclient_OVRServiceClient_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new OVRServiceClient(BundledAndroidModule._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_UnsafeContextInjection_ULSEP_ACCESS_METHOD(injectorLike), InterfacesModule._UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_ACCESS_METHOD(injectorLike));
    }

    @Inject
    public OVRServiceClient(@UnsafeContextInjection Context context, IErrorReporter iErrorReporter) {
        this.mContext = context;
        this.mErrorReporter = iErrorReporter;
    }

    private synchronized boolean connect() {
        if (this.mService != null) {
            return true;
        }
        try {
            Intent intent = new Intent();
            intent.setComponent(new ComponentName(BuildConfig.PACKAGE_NAME_HORIZON, "com.oculus.horizon.service.OVRService"));
            this.mContext.bindService(intent, this.mConnection, 1);
            try {
                wait(2000);
                if (this.mService != null) {
                    BLog.d(TAG, "Connected to OVRService");
                    return true;
                }
                BLog.e(TAG, "Failed to connect to OVRService");
                return false;
            } catch (InterruptedException unused) {
                return false;
            }
        } catch (SecurityException e) {
            BLog.e(TAG, "Failed to bind to OVRService", e);
            return false;
        }
    }

    private synchronized void disconnect() {
        if (this.mService != null) {
            this.mContext.unbindService(this.mConnection);
            BLog.e(TAG, "Disconnected from OVRService");
            this.mService = null;
        }
    }

    private boolean isServiceError(Bundle bundle) {
        return bundle.containsKey("error_code");
    }

    private void reportServiceError(Bundle bundle) {
        int i = bundle.getInt("error_code");
        String format = String.format(null, "getAppScopedAccessToken returned error code '%d' and message '%s'", Integer.valueOf(i), bundle.getString("error_message"));
        BLog.e(TAG, format);
        this.mErrorReporter.softError("access_token_error", format);
    }

    @Nullable
    public synchronized String getAppScopedAccessToken(String str) {
        String str2 = null;
        if (!connect()) {
            return null;
        }
        try {
            Bundle bundle = new Bundle();
            bundle.putInt("sdk_major_version", 1);
            bundle.putInt("sdk_minor_version", 1);
            bundle.putString("app_id", str);
            Bundle appScopedAccessToken = this.mService.getAppScopedAccessToken(bundle);
            if (isServiceError(appScopedAccessToken)) {
                reportServiceError(appScopedAccessToken);
            }
            str2 = appScopedAccessToken.getString("access_token");
            logTokenForDebug(str2);
        } catch (RemoteException e) {
            BLog.e(TAG, "error while getting access token", e);
        } catch (Throwable th) {
            disconnect();
            throw th;
        }
        disconnect();
        return str2;
    }

    private void logTokenForDebug(String str) {
        BLog.d(TAG, "access_token: %s", str);
        if (!TextUtils.isEmpty(str)) {
            try {
                FileOutputStream openFileOutput = this.mContext.openFileOutput("access_token", 0);
                openFileOutput.write(str.getBytes());
                openFileOutput.close();
            } catch (IOException unused) {
            }
        }
    }
}
