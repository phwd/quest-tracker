package com.oculus.mobileconfig.init;

import android.content.Context;
import android.content.pm.PackageInfo;
import bolts.Task;
import com.facebook.debug.log.BLog;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.FbInjector;
import com.facebook.inject.ForAppContext;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightSingletonProvider;
import com.facebook.mobileconfig.MobileConfigDependenciesInFBApps;
import com.facebook.mobileconfig.MobileConfigManagerHolderImpl;
import com.facebook.mobileconfig.MobileConfigManagerParamsHolder;
import com.facebook.mobileconfig.factory.MobileConfig;
import com.facebook.mobileconfig.factory.module.MobileConfigFactoryModule;
import com.facebook.mobileconfig.impl.MobileConfigFactoryImpl;
import com.facebook.mobileconfig.impl.MobileConfigJavaManager;
import com.facebook.mobileconfig.impl.MobileConfigManagerSingletonHolder;
import com.facebook.tigon.iface.TigonServiceHolder;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.facebook.xanalytics.XAnalyticsProvider;
import com.oculus.auth.credentials.Credentials;
import com.oculus.auth.credentials.CredentialsModule;
import com.oculus.common.build.BuildConfig;
import com.oculus.common.init.INeedInit;
import com.oculus.errorreporting.interfaces.IErrorReporter;
import com.oculus.errorreporting.interfaces.InterfacesModule;
import com.oculus.locale.LocaleModule;
import com.oculus.mobileconfig.init.MobileConfigInitModule;
import com.oculus.util.device.DeviceUtils;
import com.oculus.xanalytics.OculusXAnalyticsModule;
import java.io.IOException;
import java.util.Locale;
import java.util.concurrent.Callable;
import javax.inject.Provider;

@Dependencies
@ApplicationScoped
public class MobileConfigInit implements INeedInit {
    private static String TAG;
    private static volatile MobileConfigInit _UL__ULSEP_com_oculus_mobileconfig_init_MobileConfigInit_ULSEP_INSTANCE;
    private InjectionContext _UL_mInjectionContext;
    private final Lazy<Context> mContextLazy;
    private final Provider<Credentials> mCredentialsProvider;
    private final Lazy<IErrorReporter> mErrorReporterLazy;
    private final Provider<Locale> mLocaleProvider;
    private final Provider<MobileConfig> mMobileConfigFactoryProvider;
    private final Provider<PackageInfo> mPackageInfoProvider;
    private final Lazy<XAnalyticsProvider> mXAnalyticsProvider;

    private boolean shouldEnableMobileConfig(Credentials credentials) {
        return credentials != null;
    }

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_mobileconfig_init_MobileConfigInit_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(MobileConfigInitModule.UL_id._UL__ULSEP_com_oculus_mobileconfig_init_MobileConfigInit_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final MobileConfigInit _UL__ULSEP_com_oculus_mobileconfig_init_MobileConfigInit_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_mobileconfig_init_MobileConfigInit_ULSEP_INSTANCE == null) {
            synchronized (MobileConfigInit.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_mobileconfig_init_MobileConfigInit_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        InjectorLike applicationInjector = injectorLike.getApplicationInjector();
                        _UL__ULSEP_com_oculus_mobileconfig_init_MobileConfigInit_ULSEP_INSTANCE = new MobileConfigInit(applicationInjector, BundledAndroidModule._UL__ULSEP_com_facebook_inject_Lazy_ULLT_android_content_Context_ULGT__ULSEP_com_facebook_inject_ForAppContext_ULSEP_ACCESS_METHOD(applicationInjector), OculusXAnalyticsModule._UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_facebook_xanalytics_XAnalyticsProvider_ULGT__ULSEP_ACCESS_METHOD(applicationInjector), MobileConfigInitModule._UL__ULSEP_com_facebook_inject_Lazy_ULLT_android_content_pm_PackageInfo_ULGT__ULSEP_ACCESS_METHOD(applicationInjector), MobileConfigFactoryModule._UL__ULSEP_javax_inject_Provider_ULLT_com_facebook_mobileconfig_factory_MobileConfig_ULGT__ULSEP_ACCESS_METHOD(applicationInjector), CredentialsModule._UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_auth_credentials_Credentials_ULGT__ULSEP_ACCESS_METHOD(applicationInjector), LocaleModule._UL__ULSEP_javax_inject_Provider_ULLT_java_util_Locale_ULGT__ULSEP_ACCESS_METHOD(applicationInjector), InterfacesModule._UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_errorreporting_interfaces_IErrorReporter_ULGT__ULSEP_ACCESS_METHOD(applicationInjector));
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_mobileconfig_init_MobileConfigInit_ULSEP_INSTANCE;
    }

    @Inject
    public MobileConfigInit(InjectorLike injectorLike, @ForAppContext Lazy<Context> lazy, Lazy<XAnalyticsProvider> lazy2, Lazy<PackageInfo> lazy3, Provider<MobileConfig> provider, Provider<Credentials> provider2, Provider<Locale> provider3, Lazy<IErrorReporter> lazy4) {
        this._UL_mInjectionContext = new InjectionContext(1, injectorLike);
        TAG = ((MobileConfigInitOptions) FbInjector.lazyInstance(0, MobileConfigInitModule.UL_id._UL__ULSEP_com_oculus_mobileconfig_init_MobileConfigInitOptions_ULSEP_BINDING_ID, this._UL_mInjectionContext)).mTagPrefix + MobileConfigInit.class.getSimpleName();
        this.mContextLazy = lazy;
        this.mXAnalyticsProvider = lazy2;
        this.mPackageInfoProvider = lazy3;
        this.mMobileConfigFactoryProvider = provider;
        this.mCredentialsProvider = provider2;
        this.mLocaleProvider = provider3;
        this.mErrorReporterLazy = lazy4;
    }

    @Override // com.oculus.common.init.INeedInit
    public void init() {
        startMobileConfig();
    }

    private synchronized void startMobileConfig() {
        try {
            BLog.d(TAG, "Trying to initialize MobileConfig");
            MobileConfigFactoryImpl mobileConfigFactoryImpl = (MobileConfigFactoryImpl) this.mMobileConfigFactoryProvider.get();
            Credentials credentials = this.mCredentialsProvider.get();
            if (shouldEnableMobileConfig(credentials)) {
                mobileConfigFactoryImpl.initLightweightManagerIfNeeded();
                if (mobileConfigFactoryImpl.isManagerInited()) {
                    scheduleCreationOfRealManager(credentials);
                } else {
                    ((MobileConfigManagerSingletonHolder) mobileConfigFactoryImpl.getManagerHolder()).setManagerHolderInstance(createMobileConfigManagerHolder(credentials), mobileConfigFactoryImpl);
                    mobileConfigFactoryImpl.refreshSessionState();
                }
            }
            BLog.i(TAG, "MobileConfig enabled : %s", Boolean.valueOf(mobileConfigFactoryImpl.getManagerHolder().isValid()));
        } catch (Exception e) {
            if (!(e instanceof IOException)) {
                this.mErrorReporterLazy.get().softError(TAG, e.getMessage(), e);
            }
        }
    }

    private synchronized MobileConfigManagerHolderImpl createMobileConfigManagerHolder(Credentials credentials) {
        MobileConfigManagerParamsHolder mobileConfigManagerParamsHolder;
        mobileConfigManagerParamsHolder = new MobileConfigManagerParamsHolder();
        mobileConfigManagerParamsHolder.setConsistencyLoggingEnabled(true);
        mobileConfigManagerParamsHolder.setConsistencyLoggingEveryNSec(2592000);
        mobileConfigManagerParamsHolder.setUniverseType(((MobileConfigInitOptions) FbInjector.lazyInstance(0, MobileConfigInitModule.UL_id._UL__ULSEP_com_oculus_mobileconfig_init_MobileConfigInitOptions_ULSEP_BINDING_ID, this._UL_mInjectionContext)).mUniverseType.getValue());
        mobileConfigManagerParamsHolder.setResponseCompressionEnabled(false);
        mobileConfigManagerParamsHolder.setQueryHashOptimization(false);
        return new MobileConfigDependenciesInFBApps(null, null, false, this.mXAnalyticsProvider.get().getXAnalyticsNative()).createManager(this.mContextLazy.get().getFilesDir(), this.mPackageInfoProvider.get().versionName, DeviceUtils.getDeviceId(this.mContextLazy.get()), credentials.getUserId(), BuildConfig.PROVIDER_SUFFIX, this.mContextLazy.get().getAssets(), false, mobileConfigManagerParamsHolder, MobileConfigManagerUtil.createExtraURLParams(this.mLocaleProvider.get()));
    }

    private void scheduleCreationOfRealManager(final Credentials credentials) {
        Task.call(new Callable<Void>() {
            /* class com.oculus.mobileconfig.init.MobileConfigInit.AnonymousClass1 */

            @Override // java.util.concurrent.Callable
            public Void call() throws Exception {
                MobileConfigInit mobileConfigInit = MobileConfigInit.this;
                mobileConfigInit.updateMobileConfigManagerHolderIfNecessary(credentials, (MobileConfigFactoryImpl) mobileConfigInit.mMobileConfigFactoryProvider.get());
                return null;
            }
        }, Task.BACKGROUND_EXECUTOR);
    }

    public synchronized boolean updateMobileConfigManagerHolderIfNecessary(Credentials credentials, MobileConfigFactoryImpl mobileConfigFactoryImpl) {
        if (!(mobileConfigFactoryImpl.getManagerHolder() instanceof MobileConfigManagerSingletonHolder)) {
            return false;
        }
        MobileConfigManagerSingletonHolder mobileConfigManagerSingletonHolder = (MobileConfigManagerSingletonHolder) mobileConfigFactoryImpl.getManagerHolder();
        if (!(mobileConfigManagerSingletonHolder.getCurrentInstance() instanceof MobileConfigJavaManager)) {
            return false;
        }
        mobileConfigManagerSingletonHolder.setManagerHolderInstance(createMobileConfigManagerHolder(credentials), mobileConfigFactoryImpl);
        return true;
    }

    public synchronized void login(Credentials credentials, TigonServiceHolder tigonServiceHolder, boolean z) {
        if (shouldEnableMobileConfig(credentials)) {
            MobileConfigFactoryImpl mobileConfigFactoryImpl = (MobileConfigFactoryImpl) this.mMobileConfigFactoryProvider.get();
            mobileConfigFactoryImpl.initLightweightManagerIfNeeded();
            if (mobileConfigFactoryImpl.getManagerHolder() instanceof MobileConfigManagerSingletonHolder) {
                MobileConfigManagerSingletonHolder mobileConfigManagerSingletonHolder = (MobileConfigManagerSingletonHolder) mobileConfigFactoryImpl.getManagerHolder();
                MobileConfigManagerHolderImpl createMobileConfigManagerHolder = createMobileConfigManagerHolder(credentials);
                mobileConfigManagerSingletonHolder.setManagerHolderInstance(createMobileConfigManagerHolder, mobileConfigFactoryImpl);
                MobileConfigDependenciesInFBApps.setNetworkService(createMobileConfigManagerHolder, tigonServiceHolder, z);
                BLog.d(TAG, "Initialized MobileConfigManager after login - valid: %s", Boolean.valueOf(mobileConfigManagerSingletonHolder.isValid()));
            }
        }
    }
}
