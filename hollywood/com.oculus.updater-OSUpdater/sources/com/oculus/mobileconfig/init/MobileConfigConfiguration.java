package com.oculus.mobileconfig.init;

import bolts.Task;
import com.facebook.debug.log.BLog;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.mobileconfig.MobileConfigDependenciesInFBApps;
import com.facebook.mobileconfig.MobileConfigManagerHolder;
import com.facebook.mobileconfig.MobileConfigManagerHolderImpl;
import com.facebook.mobileconfig.factory.MobileConfig;
import com.facebook.mobileconfig.factory.module.MobileConfigFactoryModule;
import com.facebook.mobileconfig.impl.MobileConfigFactoryImpl;
import com.facebook.mobileconfig.impl.MobileConfigManagerSingletonHolder;
import com.facebook.mobileconfig.impl.module.MobileConfigFactoryImplModule;
import com.facebook.tigon.oktigon.OkTigonServiceHolder;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.oculus.auth.credentials.Credentials;
import com.oculus.auth.credentials.CredentialsModule;
import com.oculus.logging.utils.EventManager;
import com.oculus.logging.utils.UtilsModule;
import com.oculus.mobileconfig.init.MobileConfigInitModule;
import java.util.concurrent.Callable;
import javax.inject.Provider;

@Dependencies
public class MobileConfigConfiguration {
    private static String TAG;
    private InjectionContext _UL_mInjectionContext;
    @Inject
    private final Provider<Credentials> mCredentialsProvider;
    @Inject
    private final Provider<MobileConfig> mMobileConfigFactoryProvider;
    @Inject
    private final Provider<MobileConfigManagerSingletonHolder> mMobileConfigManagerHolderProvider;
    @Inject
    private final Provider<OkTigonServiceHolder> mOkTigonServiceHolderProvider;

    @AutoGeneratedFactoryMethod
    public static final MobileConfigConfiguration _UL__ULSEP_com_oculus_mobileconfig_init_MobileConfigConfiguration_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new MobileConfigConfiguration(injectorLike, MobileConfigInitModule._UL__ULSEP_com_oculus_mobileconfig_init_MobileConfigInitOptions_ULSEP_ACCESS_METHOD(injectorLike));
    }

    @Inject
    public MobileConfigConfiguration(InjectorLike injectorLike, MobileConfigInitOptions mobileConfigInitOptions) {
        this._UL_mInjectionContext = new InjectionContext(2, injectorLike);
        this.mMobileConfigManagerHolderProvider = MobileConfigFactoryImplModule._UL__ULSEP_javax_inject_Provider_ULLT_com_facebook_mobileconfig_impl_MobileConfigManagerSingletonHolder_ULGT__ULSEP_ACCESS_METHOD(injectorLike);
        this.mMobileConfigFactoryProvider = MobileConfigFactoryModule._UL__ULSEP_javax_inject_Provider_ULLT_com_facebook_mobileconfig_factory_MobileConfig_ULGT__ULSEP_ACCESS_METHOD(injectorLike);
        this.mCredentialsProvider = CredentialsModule._UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_auth_credentials_Credentials_ULGT__ULSEP_ACCESS_METHOD(injectorLike);
        this.mOkTigonServiceHolderProvider = OkTigonServiceHolder._UL__ULSEP_javax_inject_Provider_ULLT_com_facebook_tigon_oktigon_OkTigonServiceHolder_ULGT__ULSEP_ACCESS_METHOD(injectorLike);
        TAG = mobileConfigInitOptions.mTagPrefix + MobileConfigConfiguration.class.getSimpleName();
    }

    public Task<Void> fetchAsync() {
        final MobileConfigManagerSingletonHolder mobileConfigManagerSingletonHolder = this.mMobileConfigManagerHolderProvider.get();
        if (mobileConfigManagerSingletonHolder == null) {
            return Task.forResult(null);
        }
        return Task.call(new Callable<Void>() {
            /* class com.oculus.mobileconfig.init.MobileConfigConfiguration.AnonymousClass1 */

            @Override // java.util.concurrent.Callable
            public Void call() throws Exception {
                MobileConfigConfiguration.this.updateConfigs(mobileConfigManagerSingletonHolder);
                return null;
            }
        }, Task.BACKGROUND_EXECUTOR);
    }

    private void setUpManagerForUpdate(MobileConfigManagerHolder mobileConfigManagerHolder) {
        ((MobileConfigInit) FbInjector.lazyInstance(0, MobileConfigInitModule.UL_id._UL__ULSEP_com_oculus_mobileconfig_init_MobileConfigInit_ULSEP_BINDING_ID, this._UL_mInjectionContext)).updateMobileConfigManagerHolderIfNecessary(this.mCredentialsProvider.get(), (MobileConfigFactoryImpl) this.mMobileConfigFactoryProvider.get());
        if (mobileConfigManagerHolder instanceof MobileConfigManagerSingletonHolder) {
            mobileConfigManagerHolder = ((MobileConfigManagerSingletonHolder) mobileConfigManagerHolder).getCurrentInstance();
        }
        if (mobileConfigManagerHolder instanceof MobileConfigManagerHolderImpl) {
            MobileConfigManagerHolderImpl mobileConfigManagerHolderImpl = (MobileConfigManagerHolderImpl) mobileConfigManagerHolder;
            if (!mobileConfigManagerHolderImpl.isNetworkServiceSet()) {
                MobileConfigDependenciesInFBApps.setAuthenticatedNetworkService(mobileConfigManagerHolderImpl, this.mOkTigonServiceHolderProvider.get());
            }
        }
    }

    public boolean updateConfigs(MobileConfigManagerHolder mobileConfigManagerHolder) {
        setUpManagerForUpdate(mobileConfigManagerHolder);
        BLog.v(TAG, "Force updating MobileConfig in background");
        boolean updateConfigs = mobileConfigManagerHolder.updateConfigs();
        ((EventManager) FbInjector.lazyInstance(1, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent("oculus_mobile_config_fetch").addExtra("fetch_result", updateConfigs).logAndRelease();
        BLog.v(TAG, "Updated config result: %s", Boolean.valueOf(updateConfigs));
        return updateConfigs;
    }
}
