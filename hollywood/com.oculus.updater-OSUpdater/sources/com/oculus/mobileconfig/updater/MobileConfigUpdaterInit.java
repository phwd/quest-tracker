package com.oculus.mobileconfig.updater;

import android.annotation.TargetApi;
import android.app.job.JobInfo;
import android.app.job.JobScheduler;
import android.content.ComponentName;
import android.content.Context;
import com.facebook.debug.log.BLog;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.UnsafeContextInjection;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Eager;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.oculus.auth.credentials.Credentials;
import com.oculus.auth.credentials.CredentialsModule;
import com.oculus.common.init.INeedInit;
import com.oculus.errorreporting.interfaces.IErrorReporter;
import com.oculus.errorreporting.interfaces.InterfacesModule;
import com.oculus.logging.utils.EventManager;
import com.oculus.logging.utils.UtilsModule;
import com.oculus.mobileconfig.init.MobileConfigInitModule;
import com.oculus.mobileconfig.init.MobileConfigInitOptions;
import java.util.concurrent.TimeUnit;
import javax.inject.Provider;

@Dependencies
@TargetApi(UL.id._UL__ULSEP_java_lang_String_ULSEP_com_oculus_http_core_annotations_FacebookGraphEndpoint_ULSEP_BINDING_ID)
public class MobileConfigUpdaterInit implements INeedInit {
    private static String TAG;
    private static final long UPDATE_PERIOD_MS = TimeUnit.HOURS.toMillis(6);
    private InjectionContext _UL_mInjectionContext;
    @UnsafeContextInjection
    @Inject
    @Eager
    private final Context mContext;
    @Inject
    private final Provider<Credentials> mCredentialsProvider;

    @AutoGeneratedFactoryMethod
    public static final MobileConfigUpdaterInit _UL__ULSEP_com_oculus_mobileconfig_updater_MobileConfigUpdaterInit_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new MobileConfigUpdaterInit(injectorLike, MobileConfigInitModule._UL__ULSEP_com_oculus_mobileconfig_init_MobileConfigInitOptions_ULSEP_ACCESS_METHOD(injectorLike));
    }

    @Inject
    public MobileConfigUpdaterInit(InjectorLike injectorLike, MobileConfigInitOptions mobileConfigInitOptions) {
        this._UL_mInjectionContext = new InjectionContext(2, injectorLike);
        this.mContext = BundledAndroidModule._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_UnsafeContextInjection_ULSEP_ACCESS_METHOD(injectorLike);
        this.mCredentialsProvider = CredentialsModule._UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_auth_credentials_Credentials_ULGT__ULSEP_ACCESS_METHOD(injectorLike);
        TAG = mobileConfigInitOptions.mTagPrefix + MobileConfigUpdaterInit.class.getSimpleName();
    }

    @Override // com.oculus.common.init.INeedInit
    public void init() {
        ((EventManager) FbInjector.lazyInstance(1, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent("oc_mobileconfig_schedule_init").logAndRelease();
        if (this.mCredentialsProvider.get() == null) {
            BLog.v(TAG, "Not scheduling job, no user is logged in");
        } else if (isScheduled()) {
            BLog.v(TAG, "Job is already scheduled");
        } else {
            if (getJobScheduler().schedule(new JobInfo.Builder(1828726827, new ComponentName(this.mContext, MobileConfigUpdaterJobService.class)).setPeriodic(UPDATE_PERIOD_MS).setRequiredNetworkType(1).build()) == 1) {
                onSuccess();
            } else {
                onFailure();
            }
        }
    }

    private void onSuccess() {
        BLog.v(TAG, "job successfully scheduled");
        ((EventManager) FbInjector.lazyInstance(1, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent("oc_mobileconfig_schedule_successful").logAndRelease();
    }

    private void onFailure() {
        ((IErrorReporter) FbInjector.lazyInstance(0, InterfacesModule.UL_id._UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_BINDING_ID, this._UL_mInjectionContext)).softError("mobileconfig_updater_job_schedule_failed", "failed to schedule mc update job");
        ((EventManager) FbInjector.lazyInstance(1, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent("oc_mobileconfig_schedule_failed").logAndRelease();
    }

    private boolean isScheduled() {
        for (JobInfo jobInfo : getJobScheduler().getAllPendingJobs()) {
            if (jobInfo.getId() == 1828726827) {
                return true;
            }
        }
        return false;
    }

    private JobScheduler getJobScheduler() {
        return (JobScheduler) this.mContext.getSystemService("jobscheduler");
    }
}
