package com.oculus.dsatauth;

import bolts.Task;
import bolts.TaskCompletionSource;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.oculus.auth.credentials.Credentials;
import com.oculus.auth.credentials.CredentialsModule;
import com.oculus.authapi.AuthCredentials;
import com.oculus.authapi.AuthError;
import com.oculus.authapi.AuthResultCallback;
import com.oculus.authapi.OVRAuth;
import com.oculus.authapi.inject.OVRAuthModule;
import javax.inject.Provider;

@Dependencies
@ApplicationScoped
public class DsatFetcher {
    private static volatile DsatFetcher _UL__ULSEP_com_oculus_dsatauth_DsatFetcher_ULSEP_INSTANCE;
    private InjectionContext _UL_mInjectionContext;
    @Inject
    private final Provider<Credentials> mCredentialsProvider;
    private volatile boolean mIsDeviceMissingIdentity;

    @AutoGeneratedFactoryMethod
    public static final DsatFetcher _UL__ULSEP_com_oculus_dsatauth_DsatFetcher_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_dsatauth_DsatFetcher_ULSEP_INSTANCE == null) {
            synchronized (DsatFetcher.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_dsatauth_DsatFetcher_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        _UL__ULSEP_com_oculus_dsatauth_DsatFetcher_ULSEP_INSTANCE = new DsatFetcher(injectorLike.getApplicationInjector());
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_dsatauth_DsatFetcher_ULSEP_INSTANCE;
    }

    @Inject
    public DsatFetcher(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(1, injectorLike);
        this.mCredentialsProvider = CredentialsModule._UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_auth_credentials_Credentials_ULGT__ULSEP_ACCESS_METHOD(injectorLike);
    }

    public Task<String> fetchDsatElseRegularTokenAsync() {
        final TaskCompletionSource<String> taskCompletionSource = new TaskCompletionSource<>();
        if (this.mIsDeviceMissingIdentity) {
            onNoDeviceIdentity(taskCompletionSource);
        } else {
            ((OVRAuth) FbInjector.lazyInstance(0, OVRAuthModule.UL_id._UL__ULSEP_com_oculus_authapi_OVRAuth_ULSEP_BINDING_ID, this._UL_mInjectionContext)).fetchHorizonDeviceScopedCredentials(new AuthResultCallback<AuthCredentials, AuthError>() {
                /* class com.oculus.dsatauth.DsatFetcher.AnonymousClass1 */

                public void onResult(AuthCredentials authCredentials) {
                    taskCompletionSource.setResult(authCredentials.getAccessToken());
                }

                @Override // com.oculus.authapi.AuthResultCallback
                public void onError(AuthError authError) {
                    if (authError.getErrorCode() == -16) {
                        DsatFetcher.this.mIsDeviceMissingIdentity = true;
                        DsatFetcher.this.onNoDeviceIdentity(taskCompletionSource);
                        return;
                    }
                    taskCompletionSource.setError(authError);
                }
            });
        }
        return taskCompletionSource.getTask();
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private void onNoDeviceIdentity(TaskCompletionSource<String> taskCompletionSource) {
        Credentials credentials = this.mCredentialsProvider.get();
        if (credentials == null) {
            taskCompletionSource.setResult(null);
        } else {
            taskCompletionSource.setResult(credentials.getAccessToken());
        }
    }
}
