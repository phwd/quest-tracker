package com.oculus.http.core;

import android.content.Context;
import android.content.pm.PackageInfo;
import com.facebook.common.android.AndroidModule;
import com.facebook.inject.AbstractLibraryModule;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.ForAppContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.InjectorModule;
import com.facebook.inject.ProviderMethod;
import com.facebook.stetho.okhttp3.StethoInterceptor;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.AutoGeneratedSwitchIdClass;
import com.facebook.ultralight.UL;
import com.google.inject.Key;
import com.jakewharton.retrofit.Ok3Client;
import com.oculus.http.common.HttpModule;
import com.oculus.http.core.annotations.CustomUserAgentOculusRestAdapter;
import com.oculus.http.core.annotations.FacebookApiRestAdapter;
import com.oculus.http.core.annotations.FacebookGraphRestAdapter;
import com.oculus.http.core.annotations.FacebookGraphVideoRestAdapter;
import com.oculus.http.core.annotations.OculusApiEndpoint;
import com.oculus.http.core.annotations.OculusRestAdapter;
import com.oculus.http.core.annotations.ReportGraphBackendException;
import com.oculus.http.core.endpoint.EndpointModule;
import com.oculus.http.core.interceptor.ApiInterceptor;
import com.oculus.http.core.interceptor.GzipInterceptor;
import com.oculus.http.core.interceptor.NpeExceptionHandlerInterceptor;
import com.oculus.http.core.interceptor.OculusAuthorizationInterceptor;
import com.oculus.http.core.interceptor.RequestHeadersInterceptor;
import com.oculus.http.core.util.CustomApiEndpointValidator;
import com.oculus.http.customuseragentclient.CustomUserAgentHttpClient;
import com.oculus.http.defaultclient.DefaultClientModule;
import com.oculus.http.defaultclient.DefaultHttpClient;
import com.oculus.http.headers.RequestHeaders;
import com.oculus.http.useragent.UserAgentModule;
import com.oculus.http.useragent.UserAgentString;
import com.oculus.locale.LocaleModule;
import java.lang.annotation.Annotation;
import java.util.Locale;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit.ErrorHandler;
import retrofit.RestAdapter;

@InjectorModule
public class ApiModule extends AbstractLibraryModule {
    private static volatile OkHttpClient _UL__ULSEP_okhttp3_OkHttpClient_ULSEP_com_oculus_http_defaultclient_DefaultHttpClient_ULSEP_INSTANCE;
    private static final Object _UL__ULSEP_okhttp3_OkHttpClient_ULSEP_com_oculus_http_defaultclient_DefaultHttpClient_ULSEP_LOCK = new Object();
    private static final Object _UL__ULSEP_retrofit_RestAdapter_ULSEP_com_oculus_http_core_annotations_FacebookApiRestAdapter_ULSEP_LOCK = new Object();
    private static final Object _UL__ULSEP_retrofit_RestAdapter_ULSEP_com_oculus_http_core_annotations_FacebookGraphRestAdapter_ULSEP_LOCK = new Object();
    private static final Object _UL__ULSEP_retrofit_RestAdapter_ULSEP_com_oculus_http_core_annotations_FacebookGraphVideoRestAdapter_ULSEP_LOCK = new Object();
    private static volatile RestAdapter _UL__ULSEP_retrofit_RestAdapter_ULSEP_com_oculus_http_core_annotations_OculusRestAdapter_ULSEP_INSTANCE;
    private static final Object _UL__ULSEP_retrofit_RestAdapter_ULSEP_com_oculus_http_core_annotations_OculusRestAdapter_ULSEP_LOCK = new Object();

    @AutoGeneratedSwitchIdClass
    public static final class UL_id {
        public static final int _UL__ULSEP_com_oculus_http_core_ApiResponseConverter_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_http_core_ApiResponseConverter_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(ApiResponseConverter.class)));
        public static final int _UL__ULSEP_com_oculus_http_core_HttpCoreLogger_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_http_core_HttpCoreLogger_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(HttpCoreLogger.class)));
        public static final int _UL__ULSEP_com_oculus_http_core_LoggingErrorHandler_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_http_core_LoggingErrorHandler_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(LoggingErrorHandler.class)));
        public static final int _UL__ULSEP_java_lang_Boolean_ULSEP_com_oculus_http_core_annotations_ReportGraphBackendException_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_java_lang_Boolean_ULSEP_com_oculus_http_core_annotations_ReportGraphBackendException_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(Boolean.class, (Class<? extends Annotation>) ReportGraphBackendException.class)));
        public static final int _UL__ULSEP_okhttp3_OkHttpClient_ULSEP_com_oculus_http_customuseragentclient_CustomUserAgentHttpClient_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_okhttp3_OkHttpClient_ULSEP_com_oculus_http_customuseragentclient_CustomUserAgentHttpClient_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(OkHttpClient.class, (Class<? extends Annotation>) CustomUserAgentHttpClient.class)));
        public static final int _UL__ULSEP_okhttp3_OkHttpClient_ULSEP_com_oculus_http_defaultclient_DefaultHttpClient_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_okhttp3_OkHttpClient_ULSEP_com_oculus_http_defaultclient_DefaultHttpClient_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(OkHttpClient.class, (Class<? extends Annotation>) DefaultHttpClient.class)));
        public static final int _UL__ULSEP_retrofit_ErrorHandler_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_retrofit_ErrorHandler_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(ErrorHandler.class)));
        public static final int _UL__ULSEP_retrofit_RestAdapter_LogLevel_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_retrofit_RestAdapter_LogLevel_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(RestAdapter.LogLevel.class)));
        public static final int _UL__ULSEP_retrofit_RestAdapter_ULSEP_com_oculus_http_core_annotations_CustomUserAgentOculusRestAdapter_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_retrofit_RestAdapter_ULSEP_com_oculus_http_core_annotations_CustomUserAgentOculusRestAdapter_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(RestAdapter.class, (Class<? extends Annotation>) CustomUserAgentOculusRestAdapter.class)));
        public static final int _UL__ULSEP_retrofit_RestAdapter_ULSEP_com_oculus_http_core_annotations_FacebookApiRestAdapter_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_retrofit_RestAdapter_ULSEP_com_oculus_http_core_annotations_FacebookApiRestAdapter_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(RestAdapter.class, (Class<? extends Annotation>) FacebookApiRestAdapter.class)));
        public static final int _UL__ULSEP_retrofit_RestAdapter_ULSEP_com_oculus_http_core_annotations_FacebookGraphRestAdapter_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_retrofit_RestAdapter_ULSEP_com_oculus_http_core_annotations_FacebookGraphRestAdapter_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(RestAdapter.class, (Class<? extends Annotation>) FacebookGraphRestAdapter.class)));
        public static final int _UL__ULSEP_retrofit_RestAdapter_ULSEP_com_oculus_http_core_annotations_FacebookGraphVideoRestAdapter_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_retrofit_RestAdapter_ULSEP_com_oculus_http_core_annotations_FacebookGraphVideoRestAdapter_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(RestAdapter.class, (Class<? extends Annotation>) FacebookGraphVideoRestAdapter.class)));
        public static final int _UL__ULSEP_retrofit_RestAdapter_ULSEP_com_oculus_http_core_annotations_OculusRestAdapter_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_retrofit_RestAdapter_ULSEP_com_oculus_http_core_annotations_OculusRestAdapter_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(RestAdapter.class, (Class<? extends Annotation>) OculusRestAdapter.class)));
    }

    @ProviderMethod
    static ErrorHandler provideErrorHandler(LoggingErrorHandler loggingErrorHandler) {
        return loggingErrorHandler;
    }

    @AutoGeneratedFactoryMethod
    public static final Boolean _UL__ULSEP_java_lang_Boolean_ULSEP_com_oculus_http_core_annotations_ReportGraphBackendException_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return provideReportGraphBackendException();
    }

    @AutoGeneratedFactoryMethod
    public static final OkHttpClient _UL__ULSEP_okhttp3_OkHttpClient_ULSEP_com_oculus_http_customuseragentclient_CustomUserAgentHttpClient_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return provideCustomUserAgentHttpClient(HttpModule._UL__ULSEP_okhttp3_OkHttpClient_ULSEP_ACCESS_METHOD(injectorLike), BundledAndroidModule._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_ACCESS_METHOD(injectorLike), AndroidModule._UL__ULSEP_android_content_pm_PackageInfo_ULSEP_ACCESS_METHOD(injectorLike), EndpointModule._UL__ULSEP_java_lang_String_ULSEP_com_oculus_http_core_annotations_OculusApiEndpoint_ULSEP_ACCESS_METHOD(injectorLike), LocaleModule._UL__ULSEP_javax_inject_Provider_ULLT_java_util_Locale_ULGT__ULSEP_ACCESS_METHOD(injectorLike), OculusAuthorizationInterceptor._UL__ULSEP_com_oculus_http_core_interceptor_OculusAuthorizationInterceptor_ULSEP_ACCESS_METHOD(injectorLike));
    }

    @AutoGeneratedFactoryMethod
    public static final OkHttpClient _UL__ULSEP_okhttp3_OkHttpClient_ULSEP_com_oculus_http_defaultclient_DefaultHttpClient_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_okhttp3_OkHttpClient_ULSEP_com_oculus_http_defaultclient_DefaultHttpClient_ULSEP_INSTANCE == null) {
            synchronized (_UL__ULSEP_okhttp3_OkHttpClient_ULSEP_com_oculus_http_defaultclient_DefaultHttpClient_ULSEP_LOCK) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_okhttp3_OkHttpClient_ULSEP_com_oculus_http_defaultclient_DefaultHttpClient_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        InjectorLike applicationInjector = injectorLike.getApplicationInjector();
                        _UL__ULSEP_okhttp3_OkHttpClient_ULSEP_com_oculus_http_defaultclient_DefaultHttpClient_ULSEP_INSTANCE = provideDefaultHttpClient(HttpModule._UL__ULSEP_okhttp3_OkHttpClient_ULSEP_ACCESS_METHOD(applicationInjector), BundledAndroidModule._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_ACCESS_METHOD(applicationInjector), AndroidModule._UL__ULSEP_android_content_pm_PackageInfo_ULSEP_ACCESS_METHOD(applicationInjector), EndpointModule._UL__ULSEP_java_lang_String_ULSEP_com_oculus_http_core_annotations_OculusApiEndpoint_ULSEP_ACCESS_METHOD(applicationInjector), UserAgentModule._UL__ULSEP_java_lang_String_ULSEP_com_oculus_http_useragent_UserAgentString_ULSEP_ACCESS_METHOD(applicationInjector), LocaleModule._UL__ULSEP_javax_inject_Provider_ULLT_java_util_Locale_ULGT__ULSEP_ACCESS_METHOD(applicationInjector), OculusAuthorizationInterceptor._UL__ULSEP_com_oculus_http_core_interceptor_OculusAuthorizationInterceptor_ULSEP_ACCESS_METHOD(applicationInjector));
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_okhttp3_OkHttpClient_ULSEP_com_oculus_http_defaultclient_DefaultHttpClient_ULSEP_INSTANCE;
    }

    @AutoGeneratedAccessMethod
    public static final ErrorHandler _UL__ULSEP_retrofit_ErrorHandler_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (ErrorHandler) UL.factorymap.get(UL_id._UL__ULSEP_retrofit_ErrorHandler_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final ErrorHandler _UL__ULSEP_retrofit_ErrorHandler_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return provideErrorHandler(LoggingErrorHandler._UL__ULSEP_com_oculus_http_core_LoggingErrorHandler_ULSEP_ACCESS_METHOD(injectorLike));
    }

    @AutoGeneratedAccessMethod
    public static final RestAdapter.LogLevel _UL__ULSEP_retrofit_RestAdapter_LogLevel_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (RestAdapter.LogLevel) UL.factorymap.get(UL_id._UL__ULSEP_retrofit_RestAdapter_LogLevel_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final RestAdapter _UL__ULSEP_retrofit_RestAdapter_ULSEP_com_oculus_http_core_annotations_OculusRestAdapter_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (RestAdapter) UL.factorymap.get(UL_id._UL__ULSEP_retrofit_RestAdapter_ULSEP_com_oculus_http_core_annotations_OculusRestAdapter_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final RestAdapter _UL__ULSEP_retrofit_RestAdapter_ULSEP_com_oculus_http_core_annotations_OculusRestAdapter_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_retrofit_RestAdapter_ULSEP_com_oculus_http_core_annotations_OculusRestAdapter_ULSEP_INSTANCE == null) {
            synchronized (_UL__ULSEP_retrofit_RestAdapter_ULSEP_com_oculus_http_core_annotations_OculusRestAdapter_ULSEP_LOCK) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_retrofit_RestAdapter_ULSEP_com_oculus_http_core_annotations_OculusRestAdapter_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        InjectorLike applicationInjector = injectorLike.getApplicationInjector();
                        _UL__ULSEP_retrofit_RestAdapter_ULSEP_com_oculus_http_core_annotations_OculusRestAdapter_ULSEP_INSTANCE = provideOculusRestAdapter(DefaultClientModule._UL__ULSEP_okhttp3_OkHttpClient_ULSEP_com_oculus_http_defaultclient_DefaultHttpClient_ULSEP_ACCESS_METHOD(applicationInjector), EndpointModule._UL__ULSEP_java_lang_String_ULSEP_com_oculus_http_core_annotations_OculusApiEndpoint_ULSEP_ACCESS_METHOD(applicationInjector), _UL__ULSEP_retrofit_ErrorHandler_ULSEP_ACCESS_METHOD(applicationInjector), ApiResponseConverter._UL__ULSEP_com_oculus_http_core_ApiResponseConverter_ULSEP_ACCESS_METHOD(applicationInjector), _UL__ULSEP_retrofit_RestAdapter_LogLevel_ULSEP_ACCESS_METHOD(applicationInjector));
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_retrofit_RestAdapter_ULSEP_com_oculus_http_core_annotations_OculusRestAdapter_ULSEP_INSTANCE;
    }

    @ReportGraphBackendException
    @ProviderMethod
    static Boolean provideReportGraphBackendException() {
        return false;
    }

    @ApplicationScoped
    @ProviderMethod
    @DefaultHttpClient
    static OkHttpClient provideDefaultHttpClient(OkHttpClient okHttpClient, @ForAppContext Context context, PackageInfo packageInfo, @OculusApiEndpoint String str, @UserAgentString String str2, Provider<Locale> provider, OculusAuthorizationInterceptor oculusAuthorizationInterceptor) {
        OkHttpClient.Builder newBuilder = okHttpClient.newBuilder();
        if (CustomApiEndpointValidator.isDisabledUriValid(str)) {
            CustomApiEndpointValidator.disableCertCheckForHttpClient(newBuilder);
        }
        newBuilder.addNetworkInterceptor(ApiInterceptor.create(context, packageInfo, str2, provider));
        newBuilder.addNetworkInterceptor(oculusAuthorizationInterceptor);
        newBuilder.addNetworkInterceptor(new GzipInterceptor());
        newBuilder.addNetworkInterceptor(new StethoInterceptor());
        newBuilder.addNetworkInterceptor(new NpeExceptionHandlerInterceptor());
        newBuilder.addNetworkInterceptor(new RequestHeadersInterceptor(RequestHeaders.DEFAULT_REQUEST_HEADERS));
        return newBuilder.build();
    }

    @CustomUserAgentHttpClient
    @ProviderMethod
    static OkHttpClient provideCustomUserAgentHttpClient(OkHttpClient okHttpClient, @ForAppContext Context context, PackageInfo packageInfo, @OculusApiEndpoint String str, Provider<Locale> provider, OculusAuthorizationInterceptor oculusAuthorizationInterceptor) {
        OkHttpClient.Builder newBuilder = okHttpClient.newBuilder();
        if (CustomApiEndpointValidator.isDisabledUriValid(str)) {
            CustomApiEndpointValidator.disableCertCheckForHttpClient(newBuilder);
        }
        newBuilder.addNetworkInterceptor(ApiInterceptor.create(context, packageInfo, null, provider));
        newBuilder.addNetworkInterceptor(oculusAuthorizationInterceptor);
        newBuilder.addNetworkInterceptor(new GzipInterceptor());
        newBuilder.addNetworkInterceptor(new StethoInterceptor());
        newBuilder.addNetworkInterceptor(new NpeExceptionHandlerInterceptor());
        return newBuilder.build();
    }

    @OculusRestAdapter
    @ApplicationScoped
    @ProviderMethod
    static RestAdapter provideOculusRestAdapter(@DefaultHttpClient OkHttpClient okHttpClient, @OculusApiEndpoint String str, ErrorHandler errorHandler, ApiResponseConverter apiResponseConverter, RestAdapter.LogLevel logLevel) {
        return new RestAdapter.Builder().setEndpoint(str).setErrorHandler(errorHandler).setClient(new Ok3Client(okHttpClient)).setConverter(apiResponseConverter).setLogLevel(logLevel).build();
    }
}
