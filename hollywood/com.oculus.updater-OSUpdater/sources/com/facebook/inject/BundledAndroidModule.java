package com.facebook.inject;

import android.content.Context;
import com.facebook.auth.viewercontext.ViewerContextManager;
import com.facebook.auth.viewercontext.ViewerContextManagerForApp;
import com.facebook.auth.viewercontext.ViewerContextManagerForContext;
import com.facebook.infer.annotation.Assertions;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.AutoGeneratedSwitchIdClass;
import com.facebook.ultralight.UL;
import com.google.inject.Key;
import java.lang.annotation.Annotation;

@InjectorModule
public class BundledAndroidModule extends AbstractLibraryModule {

    @AutoGeneratedSwitchIdClass
    public static final class UL_id {
        public static final int _UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(Context.class, (Class<? extends Annotation>) ForAppContext.class)));
        public static final int _UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_UnsafeContextInjection_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_UnsafeContextInjection_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(Context.class, (Class<? extends Annotation>) UnsafeContextInjection.class)));
        public static final int _UL__ULSEP_com_facebook_auth_viewercontext_ViewerContextManager_ULSEP_com_facebook_auth_viewercontext_ViewerContextManagerForApp_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_facebook_auth_viewercontext_ViewerContextManager_ULSEP_com_facebook_auth_viewercontext_ViewerContextManagerForApp_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(ViewerContextManager.class, (Class<? extends Annotation>) ViewerContextManagerForApp.class)));
        public static final int _UL__ULSEP_com_facebook_auth_viewercontext_ViewerContextManager_ULSEP_com_facebook_auth_viewercontext_ViewerContextManagerForContext_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_facebook_auth_viewercontext_ViewerContextManager_ULSEP_com_facebook_auth_viewercontext_ViewerContextManagerForContext_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(ViewerContextManager.class, (Class<? extends Annotation>) ViewerContextManagerForContext.class)));
        public static final int _UL__ULSEP_com_facebook_inject_ApplicationScope_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_facebook_inject_ApplicationScope_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(ApplicationScope.class)));
        public static final int _UL__ULSEP_com_facebook_inject_ContextScope_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_facebook_inject_ContextScope_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(ContextScope.class)));
        public static final int _UL__ULSEP_com_facebook_inject_FbInjector_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_facebook_inject_FbInjector_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(FbInjector.class)));
        public static final int _UL__ULSEP_com_facebook_inject_InjectorLike_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_facebook_inject_InjectorLike_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(InjectorLike.class)));
    }

    @AutoGeneratedAccessMethod
    public static final InjectorLike _UL__ULSEP_com_facebook_inject_InjectorLike_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return injectorLike;
    }

    @AutoGeneratedAccessMethod
    public static final Context _UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (Context) UL.factorymap.get(UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final Context _UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return provideAppContext(_UL__ULSEP_com_facebook_inject_InjectorLike_ULSEP_ACCESS_METHOD(injectorLike));
    }

    @AutoGeneratedAccessMethod
    public static final Context _UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_UnsafeContextInjection_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (Context) UL.factorymap.get(UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_UnsafeContextInjection_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final Context _UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_UnsafeContextInjection_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return provideUnsafeCurrentContext(_UL__ULSEP_com_facebook_inject_InjectorLike_ULSEP_ACCESS_METHOD(injectorLike));
    }

    @AutoGeneratedFactoryMethod
    public static final ViewerContextManager _UL__ULSEP_com_facebook_auth_viewercontext_ViewerContextManager_ULSEP_com_facebook_auth_viewercontext_ViewerContextManagerForApp_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return assertViewerContextManagerForApp();
    }

    @AutoGeneratedFactoryMethod
    public static final ViewerContextManager _UL__ULSEP_com_facebook_auth_viewercontext_ViewerContextManager_ULSEP_com_facebook_auth_viewercontext_ViewerContextManagerForContext_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return assertViewerContextManagerForContext();
    }

    @AutoGeneratedFactoryMethod
    public static final InjectorLike _UL__ULSEP_com_facebook_inject_InjectorLike_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return assertInjectorLike();
    }

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_android_content_Context_ULGT__ULSEP_com_facebook_inject_ForAppContext_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, injectorLike);
    }

    @ProviderMethod
    static InjectorLike assertInjectorLike() {
        throw Assertions.assertUnreachable();
    }

    @ViewerContextManagerForContext
    @ProviderMethod
    static ViewerContextManager assertViewerContextManagerForContext() {
        throw Assertions.assertUnreachable();
    }

    @ProviderMethod
    @ViewerContextManagerForApp
    static ViewerContextManager assertViewerContextManagerForApp() {
        throw Assertions.assertUnreachable();
    }

    @UnsafeContextInjection
    @ProviderMethod
    static Context provideUnsafeCurrentContext(InjectorLike injectorLike) {
        return getContext(injectorLike);
    }

    private static Context getContext(InjectorLike injectorLike) {
        Context injectorContext = injectorLike.getScopeAwareInjector().getInjectorContext();
        if (injectorContext == null) {
            throw new RuntimeException();
        } else if (injectorContext == injectorContext.getApplicationContext() || !ScopeSet.get().hasScope((byte) 1)) {
            return injectorContext;
        } else {
            throw new ProvisioningException("Should not call getContext in singleton creation. Can lead to memory leaks.");
        }
    }

    @ForAppContext
    @ProviderMethod
    static Context provideAppContext(InjectorLike injectorLike) {
        Context injectorContext = injectorLike.getScopeAwareInjector().getInjectorContext();
        if (injectorContext != null) {
            return injectorContext.getApplicationContext();
        }
        throw new RuntimeException();
    }
}
