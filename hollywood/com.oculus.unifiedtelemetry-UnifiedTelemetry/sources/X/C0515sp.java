package X;

import androidx.core.app.NotificationCompat$MessagingStyle;
import androidx.core.app.NotificationCompat$WearableExtender;
import com.facebook.acra.util.minidump.MinidumpReader;
import com.facebook.gk.sessionless.GkSessionlessModule;
import com.facebook.tigon.oktigon.OkTigonService;
import com.facebook.tigon.oktigon.OkTigonServiceHolder;
import com.facebook.ultralight.AutoGeneratedSwitch;
import com.facebook.ultralight.AutoGeneratedSwitchMasterMethod;
import com.oculus.aidl.IUnifiedTelemetryService;
import com.oculus.android.AndroidModule;
import com.oculus.android.os.internal.inject.InternalModule;
import com.oculus.auth.credentials.CredentialsModule;
import com.oculus.auth.service.contract.ServiceContract;
import com.oculus.authapi.inject.AuthServiceClientAuxiliaryProvider;
import com.oculus.authapi.inject.CallerInfoProviderImpl;
import com.oculus.authapi.inject.OVRAuthModule;
import com.oculus.base.app.AppInfo;
import com.oculus.common.init.AppInitModule;
import com.oculus.directboot.DirectBootModule;
import com.oculus.directboot.DirectBootUtils;
import com.oculus.dsatauth.DsatFetcher;
import com.oculus.errorreporting.ErrorReportingModule;
import com.oculus.executors.ExecutorsModule;
import com.oculus.http.common.HttpModule;
import com.oculus.http.core.ApiModule;
import com.oculus.http.core.ApiResponseConverter;
import com.oculus.http.core.HttpCoreLogger;
import com.oculus.http.core.LoggingErrorHandler;
import com.oculus.http.core.endpoint.EndpointModule;
import com.oculus.http.core.interceptor.OculusAuthorizationInterceptor;
import com.oculus.http.socketconfig.SocketConfigModule;
import com.oculus.http.useragent.UserAgentFactory;
import com.oculus.http.useragent.UserAgentModule;
import com.oculus.library.utils.app.ImagesBuilder;
import com.oculus.libraryapi.OVRLibraryModule;
import com.oculus.locale.LocaleModule;
import com.oculus.logging.analytics2.Analytics2LoggerModule;
import com.oculus.logging.analytics2.Analytics2LoggerProvider;
import com.oculus.logging.analytics2.AppInfoProviderImpl;
import com.oculus.logging.analytics2.EventBuilderConfig;
import com.oculus.logging.analytics2.EventBuilderProvider;
import com.oculus.logging.analytics2.EventCacheProvider;
import com.oculus.logging.analytics2.EventFactoryWithAnalytics2SupportProvider;
import com.oculus.logging.analytics2.FileOps;
import com.oculus.logging.analytics2.OculusDeviceIdProvider;
import com.oculus.logging.analytics2.RtcClock;
import com.oculus.logging.analytics2.SessionManagerImpl;
import com.oculus.logging.funnel.FunnelLoggerManagerProvider;
import com.oculus.logging.utils.EventManagerImpl;
import com.oculus.logging.utils.StorageLoggingUtils;
import com.oculus.mobileconfig.init.MobileConfigConfiguration;
import com.oculus.mobileconfig.init.MobileConfigInit;
import com.oculus.mobileconfig.init.MobileConfigInitModule;
import com.oculus.mobileconfig.init.MobileConfigInitOptions;
import com.oculus.mobileconfig.init.MobileConfigLoginHandler;
import com.oculus.mobileconfig.init.MobileConfigLogoutHandler;
import com.oculus.mobileconfig.updater.MobileConfigUpdaterInit;
import com.oculus.multiuser.UserClassifier;
import com.oculus.oktigon.OculusOkTigonModule;
import com.oculus.ossdk.inject.OsSdkModule;
import com.oculus.security.basecomponent.OculusIntentLogger;
import com.oculus.time.Clock;
import com.oculus.unifiedtelemetry.UnifiedTelemetryApplicationModule;
import com.oculus.unifiedtelemetry.appinit.UnifiedTelemetryAppInitializer;
import com.oculus.unifiedtelemetry.collectors.AppCrashCollector;
import com.oculus.unifiedtelemetry.collectors.CollectorsControl;
import com.oculus.unifiedtelemetry.collectors.FirstPartyAppsMemStatsCollector;
import com.oculus.unifiedtelemetry.collectors.FuelGaugeCollector;
import com.oculus.unifiedtelemetry.collectors.LowBatteryCheckScheduler;
import com.oculus.unifiedtelemetry.collectors.NetworkStatsCollector;
import com.oculus.unifiedtelemetry.collectors.PowerCollector;
import com.oculus.unifiedtelemetry.collectors.StorageStatsCollector;
import com.oculus.unifiedtelemetry.collectors.ThermalCollector;
import com.oculus.unifiedtelemetry.collectors.WiFiCollector;
import com.oculus.unifiedtelemetry.credentialsmanager.NoopAuthDatastore;
import com.oculus.unifiedtelemetry.credentialsmanager.UnifiedTelemetryCredentialsManager;
import com.oculus.unifiedtelemetry.credentialsmanager.UnifiedTelemetryCredentialsPrefs;
import com.oculus.unifiedtelemetry.unifiedlogging.EventCacheShutdownBroadcastReceiver;
import com.oculus.unifiedtelemetry.unifiedlogging.EventMonitoring;
import com.oculus.unifiedtelemetry.unifiedlogging.LoggingHandler;
import com.oculus.unifiedtelemetry.unifiedlogging.LoggingHandlerBroadcastReceiver;
import com.oculus.unifiedtelemetry.unifiedlogging.MobileConfigClient;
import com.oculus.unifiedtelemetry.unifiedlogging.NonSystemLoggingUserProvider;
import com.oculus.unifiedtelemetry.unifiedlogging.PresenceReporterProvider;
import com.oculus.unifiedtelemetry.unifiedlogging.SessionController;
import com.oculus.unifiedtelemetry.unifiedlogging.SystemLoggingUser;
import com.oculus.unifiedtelemetry.unifiedlogging.UserMonitor;
import com.oculus.unifiedtelemetry.unifiedlogging.utils.SettingsManager;
import com.oculus.unifiedtelemetry.unifiedlogging.utils.TelemetryStateMonitor;
import com.oculus.util.constants.OculusConstants;
import com.oculus.util.task.TaskDelayFactory;
import com.oculus.util.thread.ThreadUtils;
import com.oculus.xanalytics.OculusXAnalyticsModule;
import com.oculus.xanalytics.OculusXAnalyticsProvider;
import com.squareup.okhttp.internal.framed.Hpack;
import java.util.Set;

@AutoGeneratedSwitch
/* renamed from: X.sp  reason: case insensitive filesystem */
public final class C0515sp {
    @AutoGeneratedSwitchMasterMethod
    public static Object A00(int i, AbstractC0247Xu xu) {
        Fe fe;
        if (((i >> 11) & 31) == 0) {
            int i2 = (i >> 7) & 15;
            if (i2 == 0) {
                switch ((i >> 0) & Hpack.PREFIX_7_BITS) {
                    case 0:
                        return OculusOkTigonModule.A00(xu);
                    case 1:
                        return MobileConfigConfiguration.A00(xu);
                    case 2:
                        return MobileConfigUpdaterInit.A00(xu);
                    case 3:
                        return C00208d.A01(xu);
                    case 4:
                        return new PresenceReporterProvider(xu);
                    case 5:
                        return HttpModule.A02(xu);
                    case 6:
                        return UserAgentFactory.A01(xu);
                    case 7:
                        return new Qp(xu, C0501sU.A03);
                    case 8:
                        C00208d.A04();
                        throw new RuntimeException("Redex: Unreachable code after no-return invoke");
                    case 9:
                        return new Qp(xu, C0501sU.A07);
                    case 10:
                        return TaskDelayFactory.A00();
                    case 11:
                        return AuthServiceClientAuxiliaryProvider.A00(xu);
                    case IUnifiedTelemetryService.Stub.TRANSACTION_startSession /*{ENCODED_INT: 12}*/:
                        return HttpCoreLogger.A01(xu);
                    case IUnifiedTelemetryService.Stub.TRANSACTION_stopSession /*{ENCODED_INT: 13}*/:
                        return new Qp(xu, C0501sU.A09);
                    case 14:
                        if (SessionController._UL__ULSEP_com_oculus_unifiedtelemetry_unifiedlogging_SessionController_ULSEP_INSTANCE == null) {
                            synchronized (SessionController.class) {
                                Pj A00 = Pj.A00(SessionController._UL__ULSEP_com_oculus_unifiedtelemetry_unifiedlogging_SessionController_ULSEP_INSTANCE, xu);
                                if (A00 != null) {
                                    try {
                                        SessionController._UL__ULSEP_com_oculus_unifiedtelemetry_unifiedlogging_SessionController_ULSEP_INSTANCE = new SessionController(xu.getApplicationInjector());
                                    } finally {
                                        A00.A01();
                                    }
                                }
                            }
                        }
                        return SessionController._UL__ULSEP_com_oculus_unifiedtelemetry_unifiedlogging_SessionController_ULSEP_INSTANCE;
                    case Hpack.PREFIX_4_BITS /*{ENCODED_INT: 15}*/:
                        return ApiModule.A08();
                    case 16:
                        return new EventMonitoring(xu);
                    case 17:
                        return GkSessionlessModule.A02(xu);
                    case 18:
                        return new FileOps();
                    case 19:
                        return new SystemLoggingUser(xu);
                    case 20:
                        if (SettingsManager._UL__ULSEP_com_oculus_unifiedtelemetry_unifiedlogging_utils_SettingsManager_ULSEP_INSTANCE == null) {
                            synchronized (SettingsManager.class) {
                                Pj A002 = Pj.A00(SettingsManager._UL__ULSEP_com_oculus_unifiedtelemetry_unifiedlogging_utils_SettingsManager_ULSEP_INSTANCE, xu);
                                if (A002 != null) {
                                    try {
                                        xu.getApplicationInjector();
                                        SettingsManager._UL__ULSEP_com_oculus_unifiedtelemetry_unifiedlogging_utils_SettingsManager_ULSEP_INSTANCE = new SettingsManager();
                                    } finally {
                                        A002.A01();
                                    }
                                }
                            }
                        }
                        return SettingsManager._UL__ULSEP_com_oculus_unifiedtelemetry_unifiedlogging_utils_SettingsManager_ULSEP_INSTANCE;
                    case 21:
                        if (NetworkStatsCollector._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_NetworkStatsCollector_ULSEP_INSTANCE == null) {
                            synchronized (NetworkStatsCollector.class) {
                                Pj A003 = Pj.A00(NetworkStatsCollector._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_NetworkStatsCollector_ULSEP_INSTANCE, xu);
                                if (A003 != null) {
                                    try {
                                        NetworkStatsCollector._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_NetworkStatsCollector_ULSEP_INSTANCE = new NetworkStatsCollector(xu.getApplicationInjector());
                                    } finally {
                                        A003.A01();
                                    }
                                }
                            }
                        }
                        return NetworkStatsCollector._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_NetworkStatsCollector_ULSEP_INSTANCE;
                    case 22:
                        return UserClassifier.A00(xu);
                    case 23:
                        return new NoopAuthDatastore();
                    case MinidumpReader.MODULE_LIST_OFFSET /*{ENCODED_INT: 24}*/:
                        return OculusConstants.UNIFIED_TELEMETRY_APP_NAME;
                    case NotificationCompat$MessagingStyle.MAXIMUM_RETAINED_MESSAGES /*{ENCODED_INT: 25}*/:
                        return OculusIntentLogger.A01(xu);
                    case 26:
                        return new EventFactoryWithAnalytics2SupportProvider(xu);
                    case 27:
                        return UserAgentModule.A00();
                    case 28:
                        return new EventCacheProvider(xu);
                    case 29:
                        if (Analytics2LoggerModule._UL__ULSEP_com_facebook_pigeon_common_protocol_DeviceIdProvider_ULSEP_INSTANCE == null) {
                            synchronized (SU.class) {
                                Pj A004 = Pj.A00(Analytics2LoggerModule._UL__ULSEP_com_facebook_pigeon_common_protocol_DeviceIdProvider_ULSEP_INSTANCE, xu);
                                if (A004 != null) {
                                    try {
                                        Analytics2LoggerModule._UL__ULSEP_com_facebook_pigeon_common_protocol_DeviceIdProvider_ULSEP_INSTANCE = new OculusDeviceIdProvider(C00208d.A00(xu.getApplicationInjector()));
                                    } finally {
                                        A004.A01();
                                    }
                                }
                            }
                        }
                        return Analytics2LoggerModule._UL__ULSEP_com_facebook_pigeon_common_protocol_DeviceIdProvider_ULSEP_INSTANCE;
                    case 30:
                        return new RtcClock(xu);
                    case Hpack.PREFIX_5_BITS /*{ENCODED_INT: 31}*/:
                        return new Qp(xu, C0501sU.A06);
                    case NotificationCompat$WearableExtender.FLAG_BIG_PICTURE_AMBIENT /*{ENCODED_INT: 32}*/:
                        return new Qp(xu, C0501sU.A02);
                    case 33:
                        return new LoggingHandlerBroadcastReceiver(xu);
                    case 34:
                        return EndpointModule.A02();
                    case 35:
                        return new EventCacheShutdownBroadcastReceiver(xu);
                    case 36:
                        return ApiModule.A00();
                    case 37:
                        if (EventBuilderConfig._UL__ULSEP_com_oculus_logging_analytics2_EventBuilderConfig_ULSEP_INSTANCE == null) {
                            synchronized (EventBuilderConfig.class) {
                                Pj A005 = Pj.A00(EventBuilderConfig._UL__ULSEP_com_oculus_logging_analytics2_EventBuilderConfig_ULSEP_INSTANCE, xu);
                                if (A005 != null) {
                                    try {
                                        EventBuilderConfig._UL__ULSEP_com_oculus_logging_analytics2_EventBuilderConfig_ULSEP_INSTANCE = new EventBuilderConfig(xu.getApplicationInjector());
                                    } finally {
                                        A005.A01();
                                    }
                                }
                            }
                        }
                        return EventBuilderConfig._UL__ULSEP_com_oculus_logging_analytics2_EventBuilderConfig_ULSEP_INSTANCE;
                    case 38:
                        if (FuelGaugeCollector._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_FuelGaugeCollector_ULSEP_INSTANCE == null) {
                            synchronized (FuelGaugeCollector.class) {
                                Pj A006 = Pj.A00(FuelGaugeCollector._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_FuelGaugeCollector_ULSEP_INSTANCE, xu);
                                if (A006 != null) {
                                    try {
                                        FuelGaugeCollector._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_FuelGaugeCollector_ULSEP_INSTANCE = new FuelGaugeCollector(xu.getApplicationInjector());
                                    } finally {
                                        A006.A01();
                                    }
                                }
                            }
                        }
                        return FuelGaugeCollector._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_FuelGaugeCollector_ULSEP_INSTANCE;
                    case 39:
                        return AnonymousClass8W.A00();
                    case 40:
                        return OculusAuthorizationInterceptor.A01(xu);
                    case 41:
                        return MobileConfigInit.A01(xu);
                    case 42:
                        return new Qp(xu, C0501sU.A01);
                    case 43:
                        if (WiFiCollector._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_WiFiCollector_ULSEP_INSTANCE == null) {
                            synchronized (WiFiCollector.class) {
                                Pj A007 = Pj.A00(WiFiCollector._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_WiFiCollector_ULSEP_INSTANCE, xu);
                                if (A007 != null) {
                                    try {
                                        WiFiCollector._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_WiFiCollector_ULSEP_INSTANCE = new WiFiCollector(xu.getApplicationInjector());
                                    } finally {
                                        A007.A01();
                                    }
                                }
                            }
                        }
                        return WiFiCollector._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_WiFiCollector_ULSEP_INSTANCE;
                    case 44:
                        return LoggingErrorHandler.A01(xu);
                    case 45:
                        return C00238n.A01(xu);
                    case 46:
                        return OculusXAnalyticsModule.A00(xu);
                    case 47:
                        return EndpointModule.A00();
                    case 48:
                        return EventManagerImpl.A01(xu);
                    case 49:
                        return new FunnelLoggerManagerProvider(xu);
                    case 50:
                        C00208d.A06();
                        throw new RuntimeException("Redex: Unreachable code after no-return invoke");
                    case 51:
                        return GkSessionlessModule.A05(xu);
                    case 52:
                        if (FirstPartyAppsMemStatsCollector._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_FirstPartyAppsMemStatsCollector_ULSEP_INSTANCE == null) {
                            synchronized (FirstPartyAppsMemStatsCollector.class) {
                                Pj A008 = Pj.A00(FirstPartyAppsMemStatsCollector._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_FirstPartyAppsMemStatsCollector_ULSEP_INSTANCE, xu);
                                if (A008 != null) {
                                    try {
                                        FirstPartyAppsMemStatsCollector._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_FirstPartyAppsMemStatsCollector_ULSEP_INSTANCE = new FirstPartyAppsMemStatsCollector(xu.getApplicationInjector());
                                    } finally {
                                        A008.A01();
                                    }
                                }
                            }
                        }
                        return FirstPartyAppsMemStatsCollector._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_FirstPartyAppsMemStatsCollector_ULSEP_INSTANCE;
                    case 53:
                        return new EventBuilderProvider(xu);
                    case 54:
                        return GkSessionlessModule.A06(xu);
                    case 55:
                        return HttpModule.A04();
                    case 56:
                        return LocaleModule.A00(xu);
                    case 57:
                        return C00228l.A02(xu);
                    case 58:
                        return HttpModule.A07(xu);
                    case 59:
                        return UnifiedTelemetryCredentialsPrefs.A02(xu);
                    case 60:
                        return A00(MinidumpReader.MODULE_FULL_SIZE, xu);
                    case 61:
                        if (CollectorsControl._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_CollectorsControl_ULSEP_INSTANCE == null) {
                            synchronized (CollectorsControl.class) {
                                Pj A009 = Pj.A00(CollectorsControl._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_CollectorsControl_ULSEP_INSTANCE, xu);
                                if (A009 != null) {
                                    try {
                                        CollectorsControl._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_CollectorsControl_ULSEP_INSTANCE = new CollectorsControl(xu.getApplicationInjector());
                                    } finally {
                                        A009.A01();
                                    }
                                }
                            }
                        }
                        return CollectorsControl._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_CollectorsControl_ULSEP_INSTANCE;
                    case 62:
                        return Clock.A00();
                    case Hpack.PREFIX_6_BITS /*{ENCODED_INT: 63}*/:
                        C00208d.A05();
                        throw new RuntimeException("Redex: Unreachable code after no-return invoke");
                    case NotificationCompat$WearableExtender.FLAG_HINT_CONTENT_INTENT_LAUNCHES_ACTIVITY /*{ENCODED_INT: 64}*/:
                        return AnonymousClass8X.A01(xu);
                    case 65:
                        return StorageLoggingUtils.A00(xu);
                    case 66:
                        return new Qp(xu, C0501sU.A04);
                    case 67:
                        return UserAgentModule.A03(xu);
                    case 68:
                        if (StorageStatsCollector._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_StorageStatsCollector_ULSEP_INSTANCE == null) {
                            synchronized (StorageStatsCollector.class) {
                                Pj A0010 = Pj.A00(StorageStatsCollector._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_StorageStatsCollector_ULSEP_INSTANCE, xu);
                                if (A0010 != null) {
                                    try {
                                        StorageStatsCollector._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_StorageStatsCollector_ULSEP_INSTANCE = new StorageStatsCollector(xu.getApplicationInjector());
                                    } finally {
                                        A0010.A01();
                                    }
                                }
                            }
                        }
                        return StorageStatsCollector._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_StorageStatsCollector_ULSEP_INSTANCE;
                    case 69:
                        return OkTigonService._UL__ULSEP_com_facebook_tigon_oktigon_OkTigonService_ULSEP_FACTORY_METHOD(xu);
                    case 70:
                        return OVRAuthModule.A01(xu);
                    case 71:
                        return new Qp(xu, C0501sU.A00);
                    case 72:
                        if (AppCrashCollector._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_AppCrashCollector_ULSEP_INSTANCE == null) {
                            synchronized (AppCrashCollector.class) {
                                Pj A0011 = Pj.A00(AppCrashCollector._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_AppCrashCollector_ULSEP_INSTANCE, xu);
                                if (A0011 != null) {
                                    try {
                                        AppCrashCollector._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_AppCrashCollector_ULSEP_INSTANCE = new AppCrashCollector(xu.getApplicationInjector());
                                    } finally {
                                        A0011.A01();
                                    }
                                }
                            }
                        }
                        return AppCrashCollector._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_AppCrashCollector_ULSEP_INSTANCE;
                    case 73:
                        if (Analytics2LoggerModule._UL__ULSEP_com_fasterxml_jackson_databind_ObjectMapper_ULSEP_INSTANCE == null) {
                            synchronized (C0219We.class) {
                                Pj A0012 = Pj.A00(Analytics2LoggerModule._UL__ULSEP_com_fasterxml_jackson_databind_ObjectMapper_ULSEP_INSTANCE, xu);
                                if (A0012 != null) {
                                    try {
                                        xu.getApplicationInjector();
                                        Analytics2LoggerModule._UL__ULSEP_com_fasterxml_jackson_databind_ObjectMapper_ULSEP_INSTANCE = new C0219We(new X0(), null, null);
                                    } finally {
                                        A0012.A01();
                                    }
                                }
                            }
                        }
                        return Analytics2LoggerModule._UL__ULSEP_com_fasterxml_jackson_databind_ObjectMapper_ULSEP_INSTANCE;
                    case 74:
                        return ApiModule.A07(xu);
                    case 75:
                        return ExecutorsModule.A01();
                    case 76:
                        if (PowerCollector._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_PowerCollector_ULSEP_INSTANCE == null) {
                            synchronized (PowerCollector.class) {
                                Pj A0013 = Pj.A00(PowerCollector._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_PowerCollector_ULSEP_INSTANCE, xu);
                                if (A0013 != null) {
                                    try {
                                        PowerCollector._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_PowerCollector_ULSEP_INSTANCE = new PowerCollector(xu.getApplicationInjector());
                                    } finally {
                                        A0013.A01();
                                    }
                                }
                            }
                        }
                        return PowerCollector._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_PowerCollector_ULSEP_INSTANCE;
                    case 77:
                        if (Analytics2LoggerProvider._UL__ULSEP_com_oculus_logging_analytics2_Analytics2LoggerProvider_ULSEP_INSTANCE == null) {
                            synchronized (Analytics2LoggerProvider.class) {
                                Pj A0014 = Pj.A00(Analytics2LoggerProvider._UL__ULSEP_com_oculus_logging_analytics2_Analytics2LoggerProvider_ULSEP_INSTANCE, xu);
                                if (A0014 != null) {
                                    try {
                                        AbstractC0247Xu applicationInjector = xu.getApplicationInjector();
                                        Analytics2LoggerProvider._UL__ULSEP_com_oculus_logging_analytics2_Analytics2LoggerProvider_ULSEP_INSTANCE = new Analytics2LoggerProvider(C00208d.A00(applicationInjector), (Set) A00(42, applicationInjector), (Set) A00(71, applicationInjector), (SU) A00(29, applicationInjector), (SessionManagerImpl) A00(137, applicationInjector), (AppInfoProviderImpl) A00(130, applicationInjector));
                                    } finally {
                                        A0014.A01();
                                    }
                                }
                            }
                        }
                        return Analytics2LoggerProvider._UL__ULSEP_com_oculus_logging_analytics2_Analytics2LoggerProvider_ULSEP_INSTANCE;
                    case 78:
                        return MobileConfigLogoutHandler.A00(xu);
                    case 79:
                        return AnonymousClass8k.A00();
                    case NotificationCompat$WearableExtender.DEFAULT_GRAVITY /*{ENCODED_INT: 80}*/:
                        return C00208d.A03(xu);
                    case 81:
                        return new com.oculus.unifiedtelemetry.unifiedlogging.xappsupport.EventManagerImpl(xu);
                    case 82:
                        return GkSessionlessModule.A03(xu);
                    case 83:
                        return InternalModule.A00();
                    case 84:
                        return AndroidModule.A00();
                    case 85:
                        return OsSdkModule.A02(xu);
                    case 86:
                        if (UserMonitor._UL__ULSEP_com_oculus_unifiedtelemetry_unifiedlogging_UserMonitor_ULSEP_INSTANCE == null) {
                            synchronized (UserMonitor.class) {
                                Pj A0015 = Pj.A00(UserMonitor._UL__ULSEP_com_oculus_unifiedtelemetry_unifiedlogging_UserMonitor_ULSEP_INSTANCE, xu);
                                if (A0015 != null) {
                                    try {
                                        UserMonitor._UL__ULSEP_com_oculus_unifiedtelemetry_unifiedlogging_UserMonitor_ULSEP_INSTANCE = new UserMonitor(xu.getApplicationInjector());
                                    } finally {
                                        A0015.A01();
                                    }
                                }
                            }
                        }
                        return UserMonitor._UL__ULSEP_com_oculus_unifiedtelemetry_unifiedlogging_UserMonitor_ULSEP_INSTANCE;
                    case 87:
                        return C00228l.A01(xu);
                    case 88:
                        return SocketConfigModule.A00();
                    case 89:
                        return MobileConfigInitModule.A01(xu);
                    case PowerCollector.BATTERY_LEVEL_CHARGED_THRESHOLD /*{ENCODED_INT: 90}*/:
                        return ExecutorsModule.A00(xu);
                    case 91:
                        return C00238n.A02(xu);
                    case 92:
                        return new C0522tJ(C00208d.A00(xu), (Fe) A00(101, xu));
                    case 93:
                        return new Qp(xu, C0501sU.A0A);
                    case 94:
                        if (ThermalCollector._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_ThermalCollector_ULSEP_INSTANCE == null) {
                            synchronized (ThermalCollector.class) {
                                Pj A0016 = Pj.A00(ThermalCollector._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_ThermalCollector_ULSEP_INSTANCE, xu);
                                if (A0016 != null) {
                                    try {
                                        ThermalCollector._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_ThermalCollector_ULSEP_INSTANCE = new ThermalCollector(xu.getApplicationInjector());
                                    } finally {
                                        A0016.A01();
                                    }
                                }
                            }
                        }
                        return ThermalCollector._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_ThermalCollector_ULSEP_INSTANCE;
                    case 95:
                        return AnonymousClass8j.A00(xu);
                    case 96:
                        return CallerInfoProviderImpl.A01(xu);
                    case 97:
                        return MobileConfigLoginHandler.A00(xu);
                    case 98:
                        return new Qp(xu, C0501sU.A08);
                    case 99:
                        return DirectBootModule.A00(xu);
                    case 100:
                        return EndpointModule.A03();
                    case 101:
                        Analytics2LoggerProvider analytics2LoggerProvider = (Analytics2LoggerProvider) A00(77, xu);
                        synchronized (analytics2LoggerProvider) {
                            fe = analytics2LoggerProvider.mAnalytics2Logger;
                        }
                        return fe;
                    case 102:
                        return AnonymousClass8k.A03();
                    case 103:
                        return ApiModule.A02(xu);
                    case 104:
                        return AnonymousClass8k.A02();
                    case 105:
                        return AnonymousClass8X.A03(xu);
                    case 106:
                        return A00(81, xu);
                    case 107:
                        return MobileConfigInitModule.A03(xu);
                    case MinidumpReader.MODULE_FULL_SIZE /*{ENCODED_INT: 108}*/:
                        return UnifiedTelemetryCredentialsManager.A00(xu);
                    case 109:
                        return GkSessionlessModule.A00(xu);
                    case 110:
                        return CredentialsModule._UL__ULSEP_com_oculus_auth_credentials_Credentials_ULSEP_FACTORY_METHOD(xu);
                    case 111:
                        return new AppInfo();
                    case 112:
                        return ApiModule.A03(xu);
                    case 113:
                        return OkTigonServiceHolder._UL__ULSEP_com_facebook_tigon_oktigon_OkTigonServiceHolder_ULSEP_FACTORY_METHOD(xu);
                    case 114:
                        if (LoggingHandler._UL__ULSEP_com_oculus_unifiedtelemetry_unifiedlogging_LoggingHandler_ULSEP_INSTANCE == null) {
                            synchronized (LoggingHandler.class) {
                                Pj A0017 = Pj.A00(LoggingHandler._UL__ULSEP_com_oculus_unifiedtelemetry_unifiedlogging_LoggingHandler_ULSEP_INSTANCE, xu);
                                if (A0017 != null) {
                                    try {
                                        LoggingHandler._UL__ULSEP_com_oculus_unifiedtelemetry_unifiedlogging_LoggingHandler_ULSEP_INSTANCE = new LoggingHandler(xu.getApplicationInjector());
                                    } finally {
                                        A0017.A01();
                                    }
                                }
                            }
                        }
                        return LoggingHandler._UL__ULSEP_com_oculus_unifiedtelemetry_unifiedlogging_LoggingHandler_ULSEP_INSTANCE;
                    case 115:
                        return MobileConfigInitModule.A02(xu);
                    case 116:
                        return ApiResponseConverter.A01(xu);
                    case 117:
                        return DsatFetcher.A00(xu);
                    case 118:
                        return AnonymousClass8k.A01(xu);
                    case 119:
                        return OVRLibraryModule.A00(xu);
                    case ImagesBuilder.IMAGE_LANDSCAPE_HEIGHT /*{ENCODED_INT: 120}*/:
                        return new TelemetryStateMonitor();
                    case 121:
                        return DirectBootUtils.A00(xu);
                    case 122:
                        return OculusOkTigonModule.A01(xu);
                    case 123:
                        return C00228l.A04(xu);
                    case 124:
                        return C00208d.A00(xu).getSystemService(ServiceContract.EXTRA_USER);
                    case 125:
                        return ThreadUtils.A00();
                    case 126:
                        return UnifiedTelemetryAppInitializer.A00(xu);
                    case Hpack.PREFIX_7_BITS /*{ENCODED_INT: 127}*/:
                        return new Qp(xu, C0501sU.A05);
                }
            } else if (i2 == 1) {
                switch ((i >> 0) & Hpack.PREFIX_7_BITS) {
                    case 0:
                        if (LowBatteryCheckScheduler._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_LowBatteryCheckScheduler_ULSEP_INSTANCE == null) {
                            synchronized (LowBatteryCheckScheduler.class) {
                                Pj A0018 = Pj.A00(LowBatteryCheckScheduler._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_LowBatteryCheckScheduler_ULSEP_INSTANCE, xu);
                                if (A0018 != null) {
                                    try {
                                        LowBatteryCheckScheduler._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_LowBatteryCheckScheduler_ULSEP_INSTANCE = new LowBatteryCheckScheduler(xu.getApplicationInjector());
                                    } finally {
                                        A0018.A01();
                                    }
                                }
                            }
                        }
                        return LowBatteryCheckScheduler._UL__ULSEP_com_oculus_unifiedtelemetry_collectors_LowBatteryCheckScheduler_ULSEP_INSTANCE;
                    case 1:
                        return EndpointModule.A01();
                    case 2:
                        return new AppInfoProviderImpl(xu);
                    case 3:
                        if (UnifiedTelemetryApplicationModule._UL__ULSEP_com_oculus_mobileconfig_init_MobileConfigInitOptions_ULSEP_INSTANCE == null) {
                            synchronized (MobileConfigInitOptions.class) {
                                Pj A0019 = Pj.A00(UnifiedTelemetryApplicationModule._UL__ULSEP_com_oculus_mobileconfig_init_MobileConfigInitOptions_ULSEP_INSTANCE, xu);
                                if (A0019 != null) {
                                    try {
                                        xu.getApplicationInjector();
                                        UnifiedTelemetryApplicationModule._UL__ULSEP_com_oculus_mobileconfig_init_MobileConfigInitOptions_ULSEP_INSTANCE = new MobileConfigInitOptions(RX.Oculus);
                                    } finally {
                                        A0019.A01();
                                    }
                                }
                            }
                        }
                        return UnifiedTelemetryApplicationModule._UL__ULSEP_com_oculus_mobileconfig_init_MobileConfigInitOptions_ULSEP_INSTANCE;
                    case 4:
                        return new NonSystemLoggingUserProvider(xu);
                    case 5:
                        return AppInitModule.A00(xu);
                    case 6:
                        if (MobileConfigClient._UL__ULSEP_com_oculus_unifiedtelemetry_unifiedlogging_MobileConfigClient_ULSEP_INSTANCE == null) {
                            synchronized (MobileConfigClient.class) {
                                Pj A0020 = Pj.A00(MobileConfigClient._UL__ULSEP_com_oculus_unifiedtelemetry_unifiedlogging_MobileConfigClient_ULSEP_INSTANCE, xu);
                                if (A0020 != null) {
                                    try {
                                        MobileConfigClient._UL__ULSEP_com_oculus_unifiedtelemetry_unifiedlogging_MobileConfigClient_ULSEP_INSTANCE = new MobileConfigClient(xu.getApplicationInjector());
                                    } finally {
                                        A0020.A01();
                                    }
                                }
                            }
                        }
                        return MobileConfigClient._UL__ULSEP_com_oculus_unifiedtelemetry_unifiedlogging_MobileConfigClient_ULSEP_INSTANCE;
                    case 7:
                        return ErrorReportingModule.A00(xu);
                    case 8:
                        return OculusXAnalyticsProvider.A01(xu);
                    case 9:
                        if (SessionManagerImpl._UL__ULSEP_com_oculus_logging_analytics2_SessionManagerImpl_ULSEP_INSTANCE == null) {
                            synchronized (SessionManagerImpl.class) {
                                Pj A0021 = Pj.A00(SessionManagerImpl._UL__ULSEP_com_oculus_logging_analytics2_SessionManagerImpl_ULSEP_INSTANCE, xu);
                                if (A0021 != null) {
                                    try {
                                        SessionManagerImpl._UL__ULSEP_com_oculus_logging_analytics2_SessionManagerImpl_ULSEP_INSTANCE = new SessionManagerImpl(xu.getApplicationInjector());
                                    } finally {
                                        A0021.A01();
                                    }
                                }
                            }
                        }
                        return SessionManagerImpl._UL__ULSEP_com_oculus_logging_analytics2_SessionManagerImpl_ULSEP_INSTANCE;
                }
            }
        }
        throw new IllegalArgumentException("Invalid Static DI binding id");
    }
}
