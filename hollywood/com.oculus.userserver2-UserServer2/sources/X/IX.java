package X;

import android.bluetooth.BluetoothAdapter;
import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.net.ConnectivityManager;
import android.os.Handler;
import android.os.Looper;
import android.text.TextUtils;
import androidx.core.app.NotificationCompat$MessagingStyle;
import androidx.core.app.NotificationCompat$WearableExtender;
import com.facebook.acra.util.minidump.MinidumpReader;
import com.facebook.common.time.AwakeTimeSinceBootClock;
import com.facebook.common.time.RealtimeSinceBootClock;
import com.facebook.ultralight.AutoGeneratedSwitch;
import com.facebook.ultralight.AutoGeneratedSwitchMasterMethod;
import com.oculus.android.os.internal.UserHandleInternal;
import com.oculus.auth.credentials.Credentials;
import com.oculus.auth.credentials.CredentialsManager;
import com.oculus.auth.credentials.CredentialsModule;
import com.oculus.auth.storage.AuthDatastore;
import com.oculus.authapi.OVRAuth;
import com.oculus.authapi.inject.AuthServiceClientAuxiliaryProvider;
import com.oculus.authapi.inject.CallerInfoProviderImpl;
import com.oculus.authapi.inject.OVRAuthModule;
import com.oculus.base.app.AppInfo;
import com.oculus.common.init.AppInitLock;
import com.oculus.common.init.AppInitModule;
import com.oculus.common.init.impl.AppInitializer;
import com.oculus.dsatauth.DsatFetcher;
import com.oculus.errorreporting.ErrorReporter;
import com.oculus.errorreporting.ErrorReportingModule;
import com.oculus.errorreporting.interfaces.IErrorReporter;
import com.oculus.executors.OculusThreadExecutor;
import com.oculus.http.common.HttpModule;
import com.oculus.http.core.ApiModule;
import com.oculus.http.core.ApiResponseConverter;
import com.oculus.http.core.HttpCoreLogger;
import com.oculus.http.core.LoggingErrorHandler;
import com.oculus.http.core.endpoint.EndpointModule;
import com.oculus.http.core.interceptor.OculusAuthorizationInterceptor;
import com.oculus.http.socketconfig.OculusSocketConfig;
import com.oculus.http.useragent.UserAgentFactory;
import com.oculus.http.useragent.UserAgentModule;
import com.oculus.logging.utils.EventManagerImpl;
import com.oculus.logging.utils.StorageLoggingUtils;
import com.oculus.managed.ManagedMode;
import com.oculus.ossdk.inject.OsSdkModule;
import com.oculus.perflogs.impl.noop.NoOpPerformanceLogger;
import com.oculus.security.basecomponent.OculusContentProviderLogger;
import com.oculus.security.basecomponent.OculusIntentLogger;
import com.oculus.userserver.http.UserServerHttpModule;
import com.oculus.userserver.managerservice.BitmapFactoryAccessor;
import com.oculus.userserver.managerservice.DsatFetcherForUser;
import com.oculus.userserver.managerservice.IOculusUserManager;
import com.oculus.userserver.managerservice.OculusUserBackend;
import com.oculus.userserver.managerservice.OculusUserManagerImpl;
import com.oculus.userserver.managerservice.OculusUserStore;
import com.oculus.userserver.managerservice.PictureApplier;
import com.oculus.userserver.managerservice.SharingManagerImpl;
import com.oculus.userserver.managerservice.SharingStore;
import com.oculus.userserver.managerservice.UserManagerAccessor;
import com.oculus.userserver.managerservice.UserSyncScheduler;
import com.oculus.userserver.managerservice.callerverifiers.SignatureVerifier;
import com.oculus.userserver.net.OculusUserMethods;
import com.oculus.userserver.usercleaner.UserCleanerScheduler;
import com.oculus.util.constants.OculusConstants;
import com.oculus.util.device.DeviceUtils;
import com.squareup.okhttp.internal.framed.Hpack;
import java.text.DateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import javax.annotation.Nullable;
import retrofit.ErrorHandler;
import retrofit.RestAdapter;

@AutoGeneratedSwitch
public final class IX {
    @AutoGeneratedSwitchMasterMethod
    public static Object A00(int i, SZ sz) {
        long j;
        if (((i >> 11) & 31) == 0 && ((i >> 7) & 15) == 0) {
            switch ((i >> 0) & Hpack.PREFIX_7_BITS) {
                case 0:
                    return new UserSyncScheduler(sz);
                case 1:
                    Context A1j = sz.getScopeAwareInjector().A1j();
                    if (A1j != null) {
                        return A1j.getApplicationContext();
                    }
                    throw new RuntimeException();
                case 2:
                    return new PP(sz, IH.A03);
                case 3:
                    return AwakeTimeSinceBootClock.INSTANCE;
                case 4:
                    return HttpModule.A00((KO) A00(18, sz));
                case 5:
                    A00(21, sz);
                    return UserServerHttpModule.A00((C0178Xd) A00(67, sz));
                case 6:
                    return new UserAgentFactory(sz, (Context) A00(1, sz), (String) A00(37, sz), (PackageInfo) A00(22, sz), new BW(68, sz));
                case 7:
                case 65:
                case 74:
                    throw new AssertionError();
                case 8:
                    return new OculusUserBackend(sz);
                case 9:
                    Context A1j2 = sz.getScopeAwareInjector().A1j();
                    if (A1j2 == null) {
                        throw new RuntimeException();
                    } else if (A1j2 == A1j2.getApplicationContext() || (1 & PE.A01.get().A00) == 0) {
                        return A1j2;
                    } else {
                        throw new P9("Should not call getContext in singleton creation. Can lead to memory leaks.");
                    }
                case 10:
                    return new PP(sz, IH.A01);
                case IOculusUserManager.Stub.TRANSACTION_refreshUsers /*{ENCODED_INT: 11}*/:
                    return new UserHandleInternal();
                case IOculusUserManager.Stub.TRANSACTION_getSelf /*{ENCODED_INT: 12}*/:
                    return new AuthServiceClientAuxiliaryProvider(sz);
                case IOculusUserManager.Stub.TRANSACTION_removeUnclaimedUser /*{ENCODED_INT: 13}*/:
                    return new HttpCoreLogger(sz);
                case 14:
                    return BluetoothAdapter.getDefaultAdapter();
                case Hpack.PREFIX_4_BITS /*{ENCODED_INT: 15}*/:
                    return OsSdkModule.A01((Context) A00(1, sz));
                case 16:
                    return new SignatureVerifier((Context) A00(1, sz));
                case 17:
                    return new OculusContentProviderLogger(sz);
                case 18:
                    if (AnonymousClass8T.A00 == null) {
                        synchronized (KO.class) {
                            OJ A00 = OJ.A00(AnonymousClass8T.A00, sz);
                            if (A00 != null) {
                                try {
                                    KP kp = (KP) A00(69, sz.getApplicationInjector());
                                    String str = kp.A00;
                                    KP.A00(kp, "com.facebook.versioncontrol.revision", str);
                                    KP.A00(kp, "com.facebook.versioncontrol.branch", str);
                                    String A002 = KP.A00(kp, "com.facebook.build_time", str);
                                    if (A002 == null || !KP.A03.matcher(A002).matches()) {
                                        j = 0;
                                    } else {
                                        j = Long.parseLong(A002.substring(0, A002.length() - 1));
                                        DateFormat dateTimeInstance = DateFormat.getDateTimeInstance(1, 0, Locale.US);
                                        dateTimeInstance.setTimeZone(TimeZone.getTimeZone("PST8PDT"));
                                        dateTimeInstance.format(new Date(j));
                                    }
                                    AnonymousClass8T.A00 = new KO(j);
                                } finally {
                                    A00.A01();
                                }
                            }
                        }
                    }
                    return AnonymousClass8T.A00;
                case 19:
                    if (OculusUserStore._UL__ULSEP_com_oculus_userserver_managerservice_OculusUserStore_ULSEP_INSTANCE == null) {
                        synchronized (OculusUserStore.class) {
                            OJ A003 = OJ.A00(OculusUserStore._UL__ULSEP_com_oculus_userserver_managerservice_OculusUserStore_ULSEP_INSTANCE, sz);
                            if (A003 != null) {
                                try {
                                    OculusUserStore._UL__ULSEP_com_oculus_userserver_managerservice_OculusUserStore_ULSEP_INSTANCE = new OculusUserStore((Context) A00(85, sz.getApplicationInjector()));
                                } finally {
                                    A003.A01();
                                }
                            }
                        }
                    }
                    return OculusUserStore._UL__ULSEP_com_oculus_userserver_managerservice_OculusUserStore_ULSEP_INSTANCE;
                case 20:
                    return new SharingStore((Context) A00(85, sz));
                case 21:
                    return new OculusSocketConfig();
                case 22:
                    if (AnonymousClass8V.A06 == null) {
                        synchronized (AnonymousClass8V.A00) {
                            OJ A004 = OJ.A00(AnonymousClass8V.A06, sz);
                            if (A004 != null) {
                                try {
                                    SZ applicationInjector = sz.getApplicationInjector();
                                    try {
                                        PackageInfo packageInfo = ((PackageManager) A00(59, applicationInjector)).getPackageInfo(((Context) A00(9, applicationInjector)).getPackageName(), 0);
                                        int A005 = If.A00();
                                        int i2 = packageInfo.versionCode;
                                        if (i2 != A005) {
                                            String format = String.format(Locale.US, "Android PackageManager returned version code: %d, apk version code is: %d", Integer.valueOf(i2), Integer.valueOf(A005));
                                            if (Mi.A01.A2C(6)) {
                                                Mi.A01.A45("AndroidModule", format);
                                            }
                                        }
                                        AnonymousClass8V.A06 = packageInfo;
                                    } catch (PackageManager.NameNotFoundException e) {
                                        throw new RuntimeException(e);
                                    }
                                } finally {
                                    A004.A01();
                                }
                            }
                        }
                    }
                    return AnonymousClass8V.A06;
                case 23:
                    return new Handler((Looper) A00(84, sz));
                case MinidumpReader.MODULE_LIST_OFFSET /*{ENCODED_INT: 24}*/:
                    try {
                        return (ConnectivityManager) ((Context) A00(9, sz)).getSystemService("connectivity");
                    } catch (Exception unused) {
                        return null;
                    }
                case NotificationCompat$MessagingStyle.MAXIMUM_RETAINED_MESSAGES /*{ENCODED_INT: 25}*/:
                    return RestAdapter.LogLevel.NONE;
                case 26:
                    if (ManagedMode._UL__ULSEP_com_oculus_managed_ManagedMode_ULSEP_INSTANCE == null) {
                        synchronized (ManagedMode.class) {
                            OJ A006 = OJ.A00(ManagedMode._UL__ULSEP_com_oculus_managed_ManagedMode_ULSEP_INSTANCE, sz);
                            if (A006 != null) {
                                try {
                                    ManagedMode._UL__ULSEP_com_oculus_managed_ManagedMode_ULSEP_INSTANCE = new ManagedMode(sz.getApplicationInjector());
                                } finally {
                                    A006.A01();
                                }
                            }
                        }
                    }
                    return ManagedMode._UL__ULSEP_com_oculus_managed_ManagedMode_ULSEP_INSTANCE;
                case 27:
                    synchronized (Sl.class) {
                        OJ A007 = OJ.A00(null, sz);
                        if (A007 != null) {
                            try {
                                sz.getApplicationInjector();
                                throw new IllegalStateException("Application did not provide its own FbAppType");
                            } catch (Throwable th) {
                                A007.A01();
                                throw th;
                            }
                        }
                    }
                    return null;
                case 28:
                    return new CallerInfoProviderImpl(sz);
                case 29:
                    return new DeviceUtils(sz);
                case 30:
                    return new UserCleanerScheduler(sz);
                case Hpack.PREFIX_5_BITS /*{ENCODED_INT: 31}*/:
                    return EndpointModule.GRAPH_VIDEO_ENDPOINT_FACEBOOK;
                case NotificationCompat$WearableExtender.FLAG_BIG_PICTURE_AMBIENT /*{ENCODED_INT: 32}*/:
                    if (UserServerHttpModule._UL__ULSEP_com_oculus_auth_storage_AuthDatastore_ULSEP_INSTANCE == null) {
                        synchronized (AuthDatastore.class) {
                            OJ A008 = OJ.A00(UserServerHttpModule._UL__ULSEP_com_oculus_auth_storage_AuthDatastore_ULSEP_INSTANCE, sz);
                            if (A008 != null) {
                                try {
                                    sz.getApplicationInjector();
                                    UserServerHttpModule._UL__ULSEP_com_oculus_auth_storage_AuthDatastore_ULSEP_INSTANCE = new AuthDatastore() {
                                        /* class com.oculus.userserver.http.UserServerHttpModule.AnonymousClass2 */

                                        @Override // com.oculus.auth.storage.AuthDatastore
                                        public final void clear() {
                                        }

                                        @Override // com.oculus.auth.storage.AuthDatastore
                                        public final void clearCredentials() {
                                        }

                                        @Override // com.oculus.auth.storage.AuthDatastore
                                        @Nullable
                                        public final Credentials getCredentials() {
                                            return null;
                                        }

                                        @Override // com.oculus.auth.storage.AuthDatastore
                                        public final long getCredentialsUpdateTimeMillis() {
                                            return 0;
                                        }

                                        @Override // com.oculus.auth.storage.AuthDatastore
                                        @Nullable
                                        public final String getUserId() {
                                            return null;
                                        }

                                        @Override // com.oculus.auth.storage.AuthDatastore
                                        public final void storeCredentials(Credentials credentials) {
                                        }
                                    };
                                } finally {
                                    A008.A01();
                                }
                            }
                        }
                    }
                    return UserServerHttpModule._UL__ULSEP_com_oculus_auth_storage_AuthDatastore_ULSEP_INSTANCE;
                case 33:
                    return Sm.A00;
                case 34:
                    return ApiModule.A01((AbstractC0054Ej) A00(71, sz), (Context) A00(1, sz), (PackageInfo) A00(22, sz), (String) A00(60, sz), new BW(68, sz), (OculusAuthorizationInterceptor) A00(56, sz));
                case 35:
                    return RealtimeSinceBootClock.A00;
                case 36:
                    return new OculusIntentLogger(sz);
                case 37:
                    return OculusConstants.USER_SERVER_USER_AGENT_APP_NAME;
                case 38:
                    return "";
                case 39:
                    if (NoOpPerformanceLogger._UL__ULSEP_com_oculus_perflogs_impl_noop_NoOpPerformanceLogger_ULSEP_INSTANCE == null) {
                        synchronized (NoOpPerformanceLogger.class) {
                            OJ A009 = OJ.A00(NoOpPerformanceLogger._UL__ULSEP_com_oculus_perflogs_impl_noop_NoOpPerformanceLogger_ULSEP_INSTANCE, sz);
                            if (A009 != null) {
                                try {
                                    sz.getApplicationInjector();
                                    NoOpPerformanceLogger._UL__ULSEP_com_oculus_perflogs_impl_noop_NoOpPerformanceLogger_ULSEP_INSTANCE = new NoOpPerformanceLogger();
                                } finally {
                                    A009.A01();
                                }
                            }
                        }
                    }
                    return NoOpPerformanceLogger._UL__ULSEP_com_oculus_perflogs_impl_noop_NoOpPerformanceLogger_ULSEP_INSTANCE;
                case 40:
                    return new SharingManagerImpl(sz);
                case 41:
                    return new PP(sz, IH.A00);
                case 42:
                    return new DsatFetcherForUser(sz);
                case 43:
                    return A00(62, sz);
                case 44:
                    if (OculusUserManagerImpl._UL__ULSEP_com_oculus_userserver_managerservice_OculusUserManagerImpl_ULSEP_INSTANCE == null) {
                        synchronized (OculusUserManagerImpl.class) {
                            OJ A0010 = OJ.A00(OculusUserManagerImpl._UL__ULSEP_com_oculus_userserver_managerservice_OculusUserManagerImpl_ULSEP_INSTANCE, sz);
                            if (A0010 != null) {
                                try {
                                    OculusUserManagerImpl._UL__ULSEP_com_oculus_userserver_managerservice_OculusUserManagerImpl_ULSEP_INSTANCE = new OculusUserManagerImpl(sz.getApplicationInjector());
                                } finally {
                                    A0010.A01();
                                }
                            }
                        }
                    }
                    return OculusUserManagerImpl._UL__ULSEP_com_oculus_userserver_managerservice_OculusUserManagerImpl_ULSEP_INSTANCE;
                case 45:
                    return OsSdkModule.A02((Context) A00(1, sz));
                case 46:
                    if (UserServerHttpModule._UL__ULSEP_okhttp3_OkHttpClient_ULSEP_com_oculus_userserver_http_OculusApi_ULSEP_INSTANCE == null) {
                        synchronized (UserServerHttpModule._UL__ULSEP_okhttp3_OkHttpClient_ULSEP_com_oculus_userserver_http_OculusApi_ULSEP_LOCK) {
                            OJ A0011 = OJ.A00(UserServerHttpModule._UL__ULSEP_okhttp3_OkHttpClient_ULSEP_com_oculus_userserver_http_OculusApi_ULSEP_INSTANCE, sz);
                            if (A0011 != null) {
                                try {
                                    SZ applicationInjector2 = sz.getApplicationInjector();
                                    UserServerHttpModule._UL__ULSEP_okhttp3_OkHttpClient_ULSEP_com_oculus_userserver_http_OculusApi_ULSEP_INSTANCE = UserServerHttpModule.A01((AbstractC0054Ej) A00(71, applicationInjector2), (Context) A00(1, applicationInjector2), (PackageInfo) A00(22, applicationInjector2), (String) A00(60, applicationInjector2), (String) A00(77, applicationInjector2), new BW(68, applicationInjector2));
                                } finally {
                                    A0011.A01();
                                }
                            }
                        }
                    }
                    return UserServerHttpModule._UL__ULSEP_okhttp3_OkHttpClient_ULSEP_com_oculus_userserver_http_OculusApi_ULSEP_INSTANCE;
                case 47:
                    String A01 = Hw.A01("debug.oculus.graphtier");
                    return !TextUtils.isEmpty(A01) ? AnonymousClass06.A04("https://graph.", A01, ".facebook.com") : EndpointModule.GRAPH_ENDPOINT_FACEBOOK;
                case 48:
                    return CredentialsModule._UL__ULSEP_com_oculus_auth_credentials_Credentials_ULSEP_FACTORY_METHOD(sz);
                case 49:
                    return new AppInfo();
                case 50:
                    return false;
                case 51:
                    if (ApiModule._UL__ULSEP_okhttp3_OkHttpClient_ULSEP_com_oculus_http_defaultclient_DefaultHttpClient_ULSEP_INSTANCE == null) {
                        synchronized (ApiModule._UL__ULSEP_okhttp3_OkHttpClient_ULSEP_com_oculus_http_defaultclient_DefaultHttpClient_ULSEP_LOCK) {
                            OJ A0012 = OJ.A00(ApiModule._UL__ULSEP_okhttp3_OkHttpClient_ULSEP_com_oculus_http_defaultclient_DefaultHttpClient_ULSEP_INSTANCE, sz);
                            if (A0012 != null) {
                                try {
                                    SZ applicationInjector3 = sz.getApplicationInjector();
                                    ApiModule._UL__ULSEP_okhttp3_OkHttpClient_ULSEP_com_oculus_http_defaultclient_DefaultHttpClient_ULSEP_INSTANCE = ApiModule.A00((AbstractC0054Ej) A00(71, applicationInjector3), (Context) A00(1, applicationInjector3), (PackageInfo) A00(22, applicationInjector3), (String) A00(60, applicationInjector3), (String) A00(77, applicationInjector3), new BW(68, applicationInjector3), (OculusAuthorizationInterceptor) A00(56, applicationInjector3));
                                } finally {
                                    A0012.A01();
                                }
                            }
                        }
                    }
                    return ApiModule._UL__ULSEP_okhttp3_OkHttpClient_ULSEP_com_oculus_http_defaultclient_DefaultHttpClient_ULSEP_INSTANCE;
                case 52:
                    if (AnonymousClass88.A02 == null) {
                        synchronized (AnonymousClass88.A00) {
                            OJ A0013 = OJ.A00(AnonymousClass88.A02, sz);
                            if (A0013 != null) {
                                try {
                                    sz.getApplicationInjector();
                                    AnonymousClass88.A02 = new BV();
                                } finally {
                                    A0013.A01();
                                }
                            }
                        }
                    }
                    return AnonymousClass88.A02;
                case 53:
                    return new ApiResponseConverter(sz);
                case 54:
                    if (DsatFetcher._UL__ULSEP_com_oculus_dsatauth_DsatFetcher_ULSEP_INSTANCE == null) {
                        synchronized (DsatFetcher.class) {
                            OJ A0014 = OJ.A00(DsatFetcher._UL__ULSEP_com_oculus_dsatauth_DsatFetcher_ULSEP_INSTANCE, sz);
                            if (A0014 != null) {
                                try {
                                    DsatFetcher._UL__ULSEP_com_oculus_dsatauth_DsatFetcher_ULSEP_INSTANCE = new DsatFetcher(sz.getApplicationInjector());
                                } finally {
                                    A0014.A01();
                                }
                            }
                        }
                    }
                    return DsatFetcher._UL__ULSEP_com_oculus_dsatauth_DsatFetcher_ULSEP_INSTANCE;
                case 55:
                    if (AnonymousClass8S.A00 == null) {
                        synchronized (So.class) {
                            OJ A0015 = OJ.A00(AnonymousClass8S.A00, sz);
                            if (A0015 != null) {
                                try {
                                    sz.getApplicationInjector();
                                    AnonymousClass8S.A00 = new So();
                                } finally {
                                    A0015.A01();
                                }
                            }
                        }
                    }
                    return AnonymousClass8S.A00;
                case 56:
                    return new OculusAuthorizationInterceptor(sz);
                case 57:
                    OculusThreadExecutor oculusThreadExecutor = OculusThreadExecutor.sInstance;
                    if (oculusThreadExecutor != null) {
                        return oculusThreadExecutor;
                    }
                    OculusThreadExecutor oculusThreadExecutor2 = new OculusThreadExecutor();
                    OculusThreadExecutor.sInstance = oculusThreadExecutor2;
                    return oculusThreadExecutor2;
                case 58:
                    return new LoggingErrorHandler(sz);
                case 59:
                    if (AnonymousClass8V.A07 == null) {
                        synchronized (AnonymousClass8V.A01) {
                            OJ A0016 = OJ.A00(AnonymousClass8V.A07, sz);
                            if (A0016 != null) {
                                try {
                                    AnonymousClass8V.A07 = ((Context) A00(9, sz.getApplicationInjector())).getApplicationContext().getPackageManager();
                                } finally {
                                    A0016.A01();
                                }
                            }
                        }
                    }
                    return AnonymousClass8V.A07;
                case 60:
                    String A012 = Hw.A01("debug.oculus.graphtier");
                    return !TextUtils.isEmpty(A012) ? AnonymousClass06.A04("https://graph.", A012, ".oculus.com") : EndpointModule.ENDPOINT_OCULUS;
                case 61:
                    return new OculusUserMethods((RestAdapter) A00(66, sz));
                case 62:
                    return new EventManagerImpl(sz);
                case Hpack.PREFIX_6_BITS /*{ENCODED_INT: 63}*/:
                    return new KU((Context) A00(9, sz));
                case NotificationCompat$WearableExtender.FLAG_HINT_CONTENT_INTENT_LAUNCHES_ACTIVITY /*{ENCODED_INT: 64}*/:
                    return new PP(sz, IH.A02);
                case 66:
                    if (UserServerHttpModule._UL__ULSEP_retrofit_RestAdapter_ULSEP_com_oculus_userserver_http_OculusApi_ULSEP_INSTANCE == null) {
                        synchronized (UserServerHttpModule._UL__ULSEP_retrofit_RestAdapter_ULSEP_com_oculus_userserver_http_OculusApi_ULSEP_LOCK) {
                            OJ A0017 = OJ.A00(UserServerHttpModule._UL__ULSEP_retrofit_RestAdapter_ULSEP_com_oculus_userserver_http_OculusApi_ULSEP_INSTANCE, sz);
                            if (A0017 != null) {
                                try {
                                    SZ applicationInjector4 = sz.getApplicationInjector();
                                    RestAdapter.Builder builder = new RestAdapter.Builder();
                                    builder.setEndpoint((String) A00(60, applicationInjector4));
                                    builder.setErrorHandler((ErrorHandler) A00(82, applicationInjector4));
                                    builder.setClient(new K1((AbstractC0054Ej) A00(46, applicationInjector4)));
                                    builder.setConverter((ApiResponseConverter) A00(53, applicationInjector4));
                                    builder.setLogLevel((RestAdapter.LogLevel) A00(25, applicationInjector4));
                                    UserServerHttpModule._UL__ULSEP_retrofit_RestAdapter_ULSEP_com_oculus_userserver_http_OculusApi_ULSEP_INSTANCE = builder.build();
                                } finally {
                                    A0017.A01();
                                }
                            }
                        }
                    }
                    return UserServerHttpModule._UL__ULSEP_retrofit_RestAdapter_ULSEP_com_oculus_userserver_http_OculusApi_ULSEP_INSTANCE;
                case 67:
                    return HttpModule.A01();
                case 68:
                    Locale locale = ((Context) A00(1, sz)).getResources().getConfiguration().locale;
                    if (locale == null) {
                        return Locale.getDefault();
                    }
                    return locale;
                case 69:
                    return new KP((Context) A00(9, sz), (KU) A00(63, sz));
                case 70:
                    return EndpointModule.API_ENDPOINT_FACEBOOK;
                case 71:
                    A00(21, sz);
                    return HttpModule.A02((C0183Xi) A00(4, sz), (C0178Xd) A00(67, sz), (KO) A00(18, sz));
                case 72:
                    if (UserServerHttpModule._UL__ULSEP_com_oculus_auth_credentials_CredentialsManager_ULSEP_INSTANCE == null) {
                        synchronized (CredentialsManager.class) {
                            OJ A0018 = OJ.A00(UserServerHttpModule._UL__ULSEP_com_oculus_auth_credentials_CredentialsManager_ULSEP_INSTANCE, sz);
                            if (A0018 != null) {
                                try {
                                    sz.getApplicationInjector();
                                    UserServerHttpModule._UL__ULSEP_com_oculus_auth_credentials_CredentialsManager_ULSEP_INSTANCE = new CredentialsManager() {
                                        /* class com.oculus.userserver.http.UserServerHttpModule.AnonymousClass1 */

                                        @Override // com.oculus.auth.credentials.CredentialsManager
                                        @Nullable
                                        public final Credentials getCredentials() {
                                            return null;
                                        }
                                    };
                                } finally {
                                    A0018.A01();
                                }
                            }
                        }
                    }
                    return UserServerHttpModule._UL__ULSEP_com_oculus_auth_credentials_CredentialsManager_ULSEP_INSTANCE;
                case 73:
                    return new BitmapFactoryAccessor();
                case 75:
                    return new StorageLoggingUtils(sz);
                case 76:
                    if (AppInitModule._UL__ULSEP_com_oculus_common_init_AppInitLock_ULSEP_INSTANCE == null) {
                        synchronized (AppInitLock.class) {
                            OJ A0019 = OJ.A00(AppInitModule._UL__ULSEP_com_oculus_common_init_AppInitLock_ULSEP_INSTANCE, sz);
                            if (A0019 != null) {
                                try {
                                    sz.getApplicationInjector();
                                    AppInitModule._UL__ULSEP_com_oculus_common_init_AppInitLock_ULSEP_INSTANCE = new AppInitLock();
                                } finally {
                                    A0019.A01();
                                }
                            }
                        }
                    }
                    return AppInitModule._UL__ULSEP_com_oculus_common_init_AppInitLock_ULSEP_INSTANCE;
                case 77:
                    return UserAgentModule.A00((UserAgentFactory) A00(6, sz));
                case 78:
                    if (ErrorReportingModule._UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_INSTANCE == null) {
                        synchronized (IErrorReporter.class) {
                            OJ A0020 = OJ.A00(ErrorReportingModule._UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_INSTANCE, sz);
                            if (A0020 != null) {
                                try {
                                    sz.getApplicationInjector();
                                    ErrorReportingModule._UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_INSTANCE = ErrorReporter.A00();
                                } finally {
                                    A0020.A01();
                                }
                            }
                        }
                    }
                    return ErrorReportingModule._UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_INSTANCE;
                case 79:
                    return new AppInitializer(sz);
                case NotificationCompat$WearableExtender.DEFAULT_GRAVITY /*{ENCODED_INT: 80}*/:
                    if (OVRAuthModule._UL__ULSEP_com_oculus_authapi_OVRAuth_ULSEP_INSTANCE == null) {
                        synchronized (OVRAuth.class) {
                            OJ A0021 = OJ.A00(OVRAuthModule._UL__ULSEP_com_oculus_authapi_OVRAuth_ULSEP_INSTANCE, sz);
                            if (A0021 != null) {
                                try {
                                    SZ applicationInjector5 = sz.getApplicationInjector();
                                    OVRAuthModule._UL__ULSEP_com_oculus_authapi_OVRAuth_ULSEP_INSTANCE = new OVRAuth((Context) A00(1, applicationInjector5), (CallerInfoProviderImpl) A00(28, applicationInjector5));
                                } finally {
                                    A0021.A01();
                                }
                            }
                        }
                    }
                    return OVRAuthModule._UL__ULSEP_com_oculus_authapi_OVRAuth_ULSEP_INSTANCE;
                case 81:
                    return new UserManagerAccessor(sz);
                case 82:
                    return A00(58, sz);
                case 83:
                    return new PictureApplier(sz);
                case 84:
                    return Looper.getMainLooper();
                case 85:
                    return ((Context) A00(1, sz)).createDeviceProtectedStorageContext();
            }
        }
        throw new IllegalArgumentException("Invalid Static DI binding id");
    }
}
