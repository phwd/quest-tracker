package com.oculus.auth.receiver;

import bolts.Continuation;
import bolts.Task;
import com.facebook.debug.log.BLog;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightSingletonProvider;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.oculus.auth.handler.AuthHandlerModule;
import com.oculus.auth.handler.LoginHandler;
import com.oculus.auth.receiver.ReceiverModule;
import com.oculus.time.Clock;
import com.oculus.time.TimeModule;
import java.util.ArrayList;
import java.util.Set;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_java_util_Set_ULLT_com_oculus_auth_handler_LoginHandler_ULGT__ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID"})
@ApplicationScoped
public class LoginHandlersRunner {
    private static final String TAG = "LoginHandlersRunner";
    private static volatile LoginHandlersRunner _UL__ULSEP_com_oculus_auth_receiver_LoginHandlersRunner_ULSEP_INSTANCE;
    private InjectionContext _UL_mInjectionContext;
    private LoginHandlerCompletionListener mListener;

    public interface LoginHandlerCompletionListener {
        void onLoginInternalCompleted();
    }

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_auth_receiver_LoginHandlersRunner_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(ReceiverModule.UL_id._UL__ULSEP_com_oculus_auth_receiver_LoginHandlersRunner_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_auth_receiver_LoginHandlersRunner_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(ReceiverModule.UL_id._UL__ULSEP_com_oculus_auth_receiver_LoginHandlersRunner_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final LoginHandlersRunner _UL__ULSEP_com_oculus_auth_receiver_LoginHandlersRunner_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (LoginHandlersRunner) UL.factorymap.get(ReceiverModule.UL_id._UL__ULSEP_com_oculus_auth_receiver_LoginHandlersRunner_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final LoginHandlersRunner _UL__ULSEP_com_oculus_auth_receiver_LoginHandlersRunner_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_auth_receiver_LoginHandlersRunner_ULSEP_INSTANCE == null) {
            synchronized (LoginHandlersRunner.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_auth_receiver_LoginHandlersRunner_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        _UL__ULSEP_com_oculus_auth_receiver_LoginHandlersRunner_ULSEP_INSTANCE = new LoginHandlersRunner(injectorLike.getApplicationInjector());
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_auth_receiver_LoginHandlersRunner_ULSEP_INSTANCE;
    }

    @Inject
    public LoginHandlersRunner(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(2, injectorLike);
    }

    public void runLoginHandlers() {
        final long uptime = ((Clock) FbInjector.lazyInstance(1, TimeModule.UL_id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID, this._UL_mInjectionContext)).uptime();
        Set<LoginHandler> set = (Set) FbInjector.lazyInstance(0, AuthHandlerModule.UL_id._UL__ULSEP_java_util_Set_ULLT_com_oculus_auth_handler_LoginHandler_ULGT__ULSEP_BINDING_ID, this._UL_mInjectionContext);
        ArrayList arrayList = new ArrayList(set.size());
        BLog.d(TAG, "Executing %d tasks", Integer.valueOf(set.size()));
        for (LoginHandler loginHandler : set) {
            final String simpleName = loginHandler.getClass().getSimpleName();
            BLog.d(TAG, "Executing login handler: %s", simpleName);
            arrayList.add(loginHandler.afterLoginAsync().continueWithTask(new Continuation<Void, Task<Void>>() {
                /* class com.oculus.auth.receiver.LoginHandlersRunner.AnonymousClass1 */

                @Override // bolts.Continuation
                public Task<Void> then(Task<Void> task) {
                    BLog.d(LoginHandlersRunner.TAG, "Executing login handler complete: %s [%dms]", simpleName, Long.valueOf(((Clock) FbInjector.lazyInstance(1, TimeModule.UL_id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID, LoginHandlersRunner.this._UL_mInjectionContext)).uptime() - uptime));
                    return task;
                }
            }));
        }
        Task.whenAll(arrayList).continueWithTask(new Continuation<Void, Task<Void>>() {
            /* class com.oculus.auth.receiver.LoginHandlersRunner.AnonymousClass2 */

            @Override // bolts.Continuation
            public Task<Void> then(Task<Void> task) {
                BLog.d(LoginHandlersRunner.TAG, "Executing all login handlers completed! %dms", Long.valueOf(((Clock) FbInjector.lazyInstance(1, TimeModule.UL_id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID, LoginHandlersRunner.this._UL_mInjectionContext)).uptime() - uptime));
                if (LoginHandlersRunner.this.mListener == null) {
                    return null;
                }
                LoginHandlersRunner.this.mListener.onLoginInternalCompleted();
                return null;
            }
        }, Task.UI_THREAD_EXECUTOR);
    }

    public void setListener(LoginHandlerCompletionListener loginHandlerCompletionListener) {
        this.mListener = loginHandlerCompletionListener;
    }
}
