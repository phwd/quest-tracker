package com.oculus.debug;

import android.os.Environment;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightSingletonProvider;
import com.facebook.mobileconfig.factory.MobileConfig;
import com.facebook.mobileconfig.factory.module.MobileConfigFactoryModule;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.google.common.base.Strings;
import com.oculus.common.build.BuildConstants;
import com.oculus.debug.DebugModule;
import com.oculus.debug.MC;
import java.io.File;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID"})
@ApplicationScoped
public class DebugMode {
    private static final String DEBUG_ROADBLOCK_FILE = "oculus_debug_roadblock.test";
    private static volatile DebugMode _UL__ULSEP_com_oculus_debug_DebugMode_ULSEP_INSTANCE;
    private InjectionContext _UL_mInjectionContext;

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_debug_DebugMode_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(DebugModule.UL_id._UL__ULSEP_com_oculus_debug_DebugMode_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_debug_DebugMode_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(DebugModule.UL_id._UL__ULSEP_com_oculus_debug_DebugMode_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final DebugMode _UL__ULSEP_com_oculus_debug_DebugMode_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (DebugMode) UL.factorymap.get(DebugModule.UL_id._UL__ULSEP_com_oculus_debug_DebugMode_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final DebugMode _UL__ULSEP_com_oculus_debug_DebugMode_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_debug_DebugMode_ULSEP_INSTANCE == null) {
            synchronized (DebugMode.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_debug_DebugMode_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        _UL__ULSEP_com_oculus_debug_DebugMode_ULSEP_INSTANCE = new DebugMode(injectorLike.getApplicationInjector());
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_debug_DebugMode_ULSEP_INSTANCE;
    }

    @Inject
    public DebugMode(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(1, injectorLike);
    }

    public boolean isEnabled() {
        if (isDevBuild()) {
            return true;
        }
        return ((MobileConfig) FbInjector.lazyInstance(0, MobileConfigFactoryModule.UL_id._UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getBoolean(MC.oculus_shared_core.is_trusted_user);
    }

    public boolean isDevBuild() {
        return BuildConstants.DEBUG;
    }

    public boolean isUpdateRoadblockForced() {
        File file = new File(Environment.getExternalStorageDirectory(), DEBUG_ROADBLOCK_FILE);
        return file.exists() && !file.isDirectory();
    }

    private boolean isTrustedEmail(String str) {
        if (Strings.isNullOrEmpty(str)) {
            return false;
        }
        if (str.endsWith("@fb.com") || str.endsWith("@oculus.com")) {
            return true;
        }
        return false;
    }
}
