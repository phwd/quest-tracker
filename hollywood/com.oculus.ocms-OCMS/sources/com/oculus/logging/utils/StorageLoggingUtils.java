package com.oculus.logging.utils;

import android.annotation.TargetApi;
import android.content.Context;
import android.os.Environment;
import android.os.StatFs;
import android.text.TextUtils;
import com.facebook.debug.log.BLog;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.oculus.logging.utils.UtilsModule;
import java.io.File;
import javax.annotation.Nullable;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_UnsafeContextInjection_ULSEP_BINDING_ID"})
public class StorageLoggingUtils {
    private static final Integer BYTES_PER_MEGABYTE = 1048576;
    public static final String FREE_SPACE_INTERNAL = "free_space_internal";
    public static final String FREE_SPACE_SD = "free_space_sd";
    private static final String TAG = "StorageLoggingUtils";
    private InjectionContext _UL_mInjectionContext;

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_logging_utils_StorageLoggingUtils_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_StorageLoggingUtils_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final StorageLoggingUtils _UL__ULSEP_com_oculus_logging_utils_StorageLoggingUtils_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (StorageLoggingUtils) UL.factorymap.get(UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_StorageLoggingUtils_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final StorageLoggingUtils _UL__ULSEP_com_oculus_logging_utils_StorageLoggingUtils_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new StorageLoggingUtils(injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_logging_utils_StorageLoggingUtils_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_StorageLoggingUtils_ULSEP_BINDING_ID, injectorLike);
    }

    @Inject
    public StorageLoggingUtils(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(1, injectorLike);
    }

    @Nullable
    public Long getInternalFreeSpace() {
        return getFreeSpace(((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_UnsafeContextInjection_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getFilesDir().getAbsolutePath());
    }

    @Nullable
    public Long getSDFreeSpace() {
        return getFreeSpace(Environment.getExternalStorageDirectory().getAbsolutePath());
    }

    @Nullable
    @TargetApi(18)
    private static Long getFreeSpace(String str) {
        if (TextUtils.isEmpty(str)) {
            return null;
        }
        File file = new File(str);
        if (!file.exists() || !file.canRead()) {
            BLog.d(TAG, "Got path to SD card [%s] but location doesn't exist", str);
            return null;
        }
        try {
            StatFs statFs = new StatFs(str);
            return Long.valueOf((statFs.getAvailableBlocksLong() * statFs.getBlockSizeLong()) / ((long) BYTES_PER_MEGABYTE.intValue()));
        } catch (RuntimeException e) {
            BLog.d(TAG, e, "Got an exception while running statfs on the SD card [%s]", str);
            return null;
        }
    }
}
