package com.oculus.appmanager.uninstaller.events;

import android.os.Looper;
import com.facebook.inject.Assisted;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.oculus.appmanager.uninstaller.events.EventsModule;
import com.oculus.executors.OculusThreadExecutor;
import com.oculus.logging.utils.Event;
import com.oculus.logging.utils.EventManager;
import com.oculus.logging.utils.UtilsModule;
import javax.annotation.Nullable;

@Dependencies({"_UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID"})
public class UninstallCompleteEvent {
    public static final String API_NAME_PROVIDER = "provider";
    public static final String API_NAME_PROVIDER_LEGACY = "provider_legacy";
    public static final String API_NAME_SERVICE = "service";
    public static final String CALLING_PACKAGE = "calling_package";
    public static final String ERROR_CODE = "error_code";
    public static final String EVENT_VALUE = "event_value";
    public static final String INSTALLER_API = "installer_api";
    public static final String INSTALLER_RESULT = "installer_result";
    public static final String MESSAGE = "message";
    public static final String UNINSTALL = "moonlight_uninstall";
    private InjectionContext _UL_mInjectionContext;
    @Nullable
    private String mCallingPackage;
    @Nullable
    private Integer mErrorCode;
    @Nullable
    private Throwable mException;
    @Nullable
    private String mInstallerApi;
    @Nullable
    private String mPackageName;
    @Nullable
    private Boolean mResult;

    @AutoGeneratedAccessMethod
    public static final UninstallCompleteEventProvider _UL__ULSEP_com_oculus_appmanager_uninstaller_events_UninstallCompleteEventProvider_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (UninstallCompleteEventProvider) UL.factorymap.get(EventsModule.UL_id._UL__ULSEP_com_oculus_appmanager_uninstaller_events_UninstallCompleteEventProvider_ULSEP_BINDING_ID, injectorLike);
    }

    @Inject
    public UninstallCompleteEvent(InjectorLike injectorLike, @Assisted @Nullable String str, @Assisted @Nullable String str2, @Assisted @Nullable Integer num, @Assisted @Nullable Throwable th, @Assisted @Nullable Boolean bool, @Assisted @Nullable String str3) {
        this._UL_mInjectionContext = new InjectionContext(1, injectorLike);
        this.mPackageName = str;
        this.mInstallerApi = str2;
        this.mErrorCode = num;
        this.mException = th;
        this.mResult = bool;
        this.mCallingPackage = str3;
    }

    public UninstallCompleteEvent setPackageName(String str) {
        this.mPackageName = str;
        return this;
    }

    public UninstallCompleteEvent setCallingPackage(String str) {
        this.mCallingPackage = str;
        return this;
    }

    public UninstallCompleteEvent setServiceApi() {
        this.mInstallerApi = "service";
        return this;
    }

    public UninstallCompleteEvent setProviderApi() {
        this.mInstallerApi = API_NAME_PROVIDER;
        return this;
    }

    public UninstallCompleteEvent setProviderLegacyApi() {
        this.mInstallerApi = API_NAME_PROVIDER_LEGACY;
        return this;
    }

    public UninstallCompleteEvent setErrorCode(int i) {
        this.mErrorCode = Integer.valueOf(i);
        return this;
    }

    public UninstallCompleteEvent setException(Throwable th) {
        this.mException = th;
        return this;
    }

    public UninstallCompleteEvent setResult(boolean z) {
        this.mResult = Boolean.valueOf(z);
        return this;
    }

    public void report() {
        if (Looper.myLooper() != Looper.getMainLooper()) {
            OculusThreadExecutor.getInstance().execute(new Runnable() {
                /* class com.oculus.appmanager.uninstaller.events.UninstallCompleteEvent.AnonymousClass1 */

                public void run() {
                    UninstallCompleteEvent.this.report();
                }
            });
        } else if (this.mPackageName != null) {
            Event addExtra = ((EventManager) FbInjector.lazyInstance(0, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent(UNINSTALL).appendStorageInformation().addExtra("event_value", this.mPackageName).addExtra("calling_package", this.mCallingPackage);
            String str = this.mInstallerApi;
            if (str != null) {
                addExtra.addExtra(INSTALLER_API, str);
            }
            Integer num = this.mErrorCode;
            if (num != null) {
                addExtra.addExtra("error_code", num.intValue());
            }
            Throwable th = this.mException;
            if (th != null) {
                addExtra.addExtra(MESSAGE, th.toString());
            }
            Boolean bool = this.mResult;
            if (bool != null) {
                addExtra.addExtra(INSTALLER_RESULT, bool.booleanValue());
            }
            addExtra.logAndRelease();
        }
    }
}
