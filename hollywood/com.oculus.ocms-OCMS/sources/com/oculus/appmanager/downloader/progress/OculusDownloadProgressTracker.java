package com.oculus.appmanager.downloader.progress;

import android.content.ContentResolver;
import android.content.Context;
import android.database.ContentObserver;
import android.net.Uri;
import android.os.Handler;
import android.os.HandlerThread;
import androidx.annotation.VisibleForTesting;
import com.facebook.debug.log.BLog;
import com.facebook.debug.log.LoggingUtil;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightSingletonProvider;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Eager;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.google.common.base.MoreObjects;
import com.oculus.appmanager.downloader.OculusFileDownloader;
import com.oculus.appmanager.downloader.progress.OuculusDownloadProgressTrackerModule;
import com.oculus.appmanager.info.ApkUpdateInfo;
import com.oculus.appmanager.info.InfoUtils;
import com.oculus.appmanager.info.model.RequestOrigin;
import com.oculus.appmanager.installer.broadcast.AssetBroadcastDispatch;
import com.oculus.appmanager.installer.events.DownloadResponse;
import com.oculus.appmanager.installer.events.DownloadingResponse;
import com.oculus.appmanager.installer.events.InstallCancelledResponse;
import com.oculus.appmanager.installer.events.InstallerEventBus;
import com.oculus.downloader.contract.DownloaderContract;
import com.oculus.downloader.extras.DownloadExtras;
import com.oculus.downloader.extras.contract.DownloadExtrasKeys;
import com.oculus.downloader.model.DownloadInfo;
import com.oculus.downloader.progress.DownloadProgressChangeListener;
import com.oculus.downloader.progress.DownloadProgressTracker;
import com.oculus.downloader.progress.model.DownloadProgressItem;
import com.oculus.downloader.progress.model.DownloadProgressUnit;
import com.oculus.errorreporting.ErrorReporter;
import com.oculus.extras.Extras;
import com.oculus.extras.ExtrasBuilder;
import com.oculus.logging.utils.EventManager;
import com.oculus.logging.utils.UtilsModule;
import com.oculus.time.Clock;
import com.oculus.time.TimeModule;
import com.oculus.util.network.NetworkUtils;
import com.oculus.util.thread.ThreadUtils;
import com.squareup.otto.Subscribe;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.Executors;
import javax.annotation.Nullable;
import javax.annotation.concurrent.GuardedBy;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_downloader_OculusFileDownloader_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_installer_broadcast_AssetBroadcastDispatch_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_downloader_extras_DownloadExtras_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_util_thread_ThreadUtils_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_downloader_contract_DownloaderContract_ULSEP_BINDING_ID"})
@ApplicationScoped
public class OculusDownloadProgressTracker implements DownloadProgressTracker {
    public static final String CALLING_PACKAGE = "calling_package";
    private static final Uri DOWNLOADS_CONTENT_URI = Uri.parse("content://downloads/my_downloads");
    private static final String DOWNLOADS_OBSERVE_THREAD = "downloads_observe_thread";
    public static final String DOWNLOAD_BINARY_TYPE = "download_binary_type";
    public static final String DOWNLOAD_CONNECTION_IS_ROAMING = "download_connection_is_roaming";
    public static final String DOWNLOAD_CONNECTION_SPEED = "download_connection_speed";
    public static final String DOWNLOAD_CONNECTION_TYPE = "download_connection_type";
    public static final String DOWNLOAD_ID = "download_id";
    public static final String DOWNLOAD_PROGRESS = "download_progress";
    public static final String DOWNLOAD_RESOURCE_NAME = "download_resource_name";
    public static final String DOWNLOAD_SCHEDULE_TIME_MS = "download_schedule_time_ms";
    public static final String DOWNLOAD_START_TIME_MS = "download_start_time_ms";
    public static final String DOWNLOAD_URI = "download_uri";
    public static final String EVENT_DOWNLOAD_PROGRESS = "moonlight_download_progress";
    public static final String EVENT_DOWNLOAD_STARTED = "moonlight_download_started";
    public static final long INVALID_DOWNLOAD_ID = -1;
    private static final String NUMBER_REGEX = "\\d+";
    private static final float[] PROGRESS_REPORT_THRESHOLD = {0.25f, 0.5f, 0.75f};
    private static final String TAG = "OculusDownloadProgressTracker";
    private static volatile OculusDownloadProgressTracker _UL__ULSEP_com_oculus_appmanager_downloader_progress_OculusDownloadProgressTracker_ULSEP_INSTANCE;
    private InjectionContext _UL_mInjectionContext;
    @Inject
    @Eager
    private final AssetBroadcastDispatch mAssetBroadcastDispatch;
    private final ContentResolver mContentResolver;
    @Inject
    @Eager
    private final DownloaderContract mDownloaderContract;
    private HandlerThread mDownloadsObserveThread;
    @Inject
    @Eager
    private final DownloadExtras mExtrasManager;
    @Inject
    @Eager
    private final InfoUtils mInfoUtils;
    @GuardedBy("mSync")
    private boolean mIsTrackingChanges;
    private final Set<DownloadProgressChangeListener> mListeners = new HashSet();
    @Inject
    @Eager
    private final OculusFileDownloader mOculusDownloader;
    private final Object mSync = new Object();
    @Inject
    @Eager
    private final ThreadUtils mThreadUtils;
    @GuardedBy("mSync")
    private final Map<String, DownloadProgressUnit> mUnCompletedDownloads = new HashMap();

    private boolean isDownloadComplete(int i) {
        return i == 16 || i == 8;
    }

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_appmanager_downloader_progress_OculusDownloadProgressTracker_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(OuculusDownloadProgressTrackerModule.UL_id._UL__ULSEP_com_oculus_appmanager_downloader_progress_OculusDownloadProgressTracker_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_appmanager_downloader_progress_OculusDownloadProgressTracker_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(OuculusDownloadProgressTrackerModule.UL_id._UL__ULSEP_com_oculus_appmanager_downloader_progress_OculusDownloadProgressTracker_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final OculusDownloadProgressTracker _UL__ULSEP_com_oculus_appmanager_downloader_progress_OculusDownloadProgressTracker_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (OculusDownloadProgressTracker) UL.factorymap.get(OuculusDownloadProgressTrackerModule.UL_id._UL__ULSEP_com_oculus_appmanager_downloader_progress_OculusDownloadProgressTracker_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final OculusDownloadProgressTracker _UL__ULSEP_com_oculus_appmanager_downloader_progress_OculusDownloadProgressTracker_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_appmanager_downloader_progress_OculusDownloadProgressTracker_ULSEP_INSTANCE == null) {
            synchronized (OculusDownloadProgressTracker.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_appmanager_downloader_progress_OculusDownloadProgressTracker_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        _UL__ULSEP_com_oculus_appmanager_downloader_progress_OculusDownloadProgressTracker_ULSEP_INSTANCE = new OculusDownloadProgressTracker(injectorLike.getApplicationInjector());
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_appmanager_downloader_progress_OculusDownloadProgressTracker_ULSEP_INSTANCE;
    }

    @Inject
    public OculusDownloadProgressTracker(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(3, injectorLike);
        this.mInfoUtils = InfoUtils._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_ACCESS_METHOD(injectorLike);
        this.mOculusDownloader = OculusFileDownloader._UL__ULSEP_com_oculus_appmanager_downloader_OculusFileDownloader_ULSEP_ACCESS_METHOD(injectorLike);
        this.mAssetBroadcastDispatch = AssetBroadcastDispatch._UL__ULSEP_com_oculus_appmanager_installer_broadcast_AssetBroadcastDispatch_ULSEP_ACCESS_METHOD(injectorLike);
        this.mExtrasManager = DownloadExtras._UL__ULSEP_com_oculus_downloader_extras_DownloadExtras_ULSEP_ACCESS_METHOD(injectorLike);
        this.mThreadUtils = ThreadUtils._UL__ULSEP_com_oculus_util_thread_ThreadUtils_ULSEP_ACCESS_METHOD(injectorLike);
        this.mDownloaderContract = DownloaderContract._UL__ULSEP_com_oculus_downloader_contract_DownloaderContract_ULSEP_ACCESS_METHOD(injectorLike);
        this.mContentResolver = ((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getContentResolver();
    }

    @Subscribe
    public void onDownloadResponse(DownloadResponse downloadResponse) {
        removeDownload(downloadResponse.installIdentifier);
    }

    @Subscribe
    public void onDownloadingResponse(DownloadingResponse downloadingResponse) {
        removeDownload(downloadingResponse.installIdentifier);
    }

    @Subscribe
    public void onInstallCancelled(InstallCancelledResponse installCancelledResponse) {
        removeDownload(installCancelledResponse.installIdentifier);
    }

    @Override // com.oculus.downloader.progress.DownloadProgressTracker
    public void startTrackingChangesIfNeeded() {
        synchronized (this.mSync) {
            if (!this.mIsTrackingChanges) {
                this.mIsTrackingChanges = true;
                if (this.mDownloadsObserveThread == null) {
                    this.mDownloadsObserveThread = new HandlerThread(DOWNLOADS_OBSERVE_THREAD);
                    this.mDownloadsObserveThread.start();
                }
                this.mContentResolver.registerContentObserver(DOWNLOADS_CONTENT_URI, true, new DownloadsObserver(new Handler(this.mDownloadsObserveThread.getLooper())));
                Executors.newSingleThreadExecutor().execute(new Runnable() {
                    /* class com.oculus.appmanager.downloader.progress.OculusDownloadProgressTracker.AnonymousClass1 */

                    public void run() {
                        OculusDownloadProgressTracker.this.updateDownloads();
                    }
                });
                InstallerEventBus.getInstance().register(this);
            }
        }
    }

    @Override // com.oculus.downloader.progress.DownloadProgressTracker
    @Nullable
    public DownloadProgressUnit getDownloadProgress(String str) {
        DownloadProgressUnit downloadProgressUnit;
        synchronized (this.mSync) {
            downloadProgressUnit = this.mUnCompletedDownloads.get(str);
        }
        return downloadProgressUnit;
    }

    @Override // com.oculus.downloader.progress.DownloadProgressTracker
    public void removeDownloadProgress(String str) {
        synchronized (this.mSync) {
            this.mUnCompletedDownloads.remove(str);
        }
    }

    @Override // com.oculus.downloader.progress.DownloadProgressTracker
    public void addDownloadProgressChangeListener(DownloadProgressChangeListener downloadProgressChangeListener) {
        this.mListeners.add(downloadProgressChangeListener);
    }

    @Override // com.oculus.downloader.progress.DownloadProgressTracker
    public void removeDownloadProgressChangeListener(DownloadProgressChangeListener downloadProgressChangeListener) {
        this.mListeners.remove(downloadProgressChangeListener);
    }

    public void updateDownloads() {
        ThreadUtils.assertOnNonUiThread();
        HashSet hashSet = new HashSet();
        for (DownloadInfo downloadInfo : this.mOculusDownloader.queryAll()) {
            if (processDownloadInfoInfoProgressUnit(downloadInfo) && downloadInfo.description.isPresent()) {
                hashSet.add(downloadInfo.description.get());
            }
        }
        synchronized (this.mSync) {
            this.mUnCompletedDownloads.keySet().retainAll(hashSet);
        }
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private void updateDownload(long j) {
        ThreadUtils.assertOnNonUiThread();
        DownloadInfo query = this.mOculusDownloader.query(j);
        if (query != null) {
            if (query.status == 16) {
                this.mDownloaderContract.onDownloadComplete(j);
            } else {
                processDownloadInfoInfoProgressUnit(query);
            }
        }
    }

    private void removeDownload(String str) {
        synchronized (this.mSync) {
            this.mUnCompletedDownloads.remove(str);
        }
    }

    private boolean processDownloadInfoInfoProgressUnit(DownloadInfo downloadInfo) {
        ApkUpdateInfo updateInfo;
        DownloadProgressItem downloadProgressItem;
        if (!downloadInfo.description.isPresent() || (updateInfo = getUpdateInfo(downloadInfo.id)) == null) {
            return false;
        }
        DownloadProgressUnit orCreateDownloadProgressUnit = getOrCreateDownloadProgressUnit(downloadInfo.description.get());
        DownloadProgressItem apkItem = orCreateDownloadProgressUnit.getApkItem();
        DownloadProgressItem obbItem = orCreateDownloadProgressUnit.getObbItem();
        Map<Long, DownloadProgressItem> assetItems = orCreateDownloadProgressUnit.getAssetItems();
        String binaryType = this.mInfoUtils.getBinaryType(updateInfo);
        if (updateInfo.updateType.isApk()) {
            if (apkItem == null) {
                apkItem = new DownloadProgressItem(downloadInfo.description.get(), updateInfo.id);
                if (!isDownloadComplete(downloadInfo.status)) {
                    logDownloadStart(downloadInfo.id, updateInfo, updateInfo.identifier);
                }
            }
            apkItem.setState(downloadInfo.id, downloadInfo.status, downloadInfo.reason, downloadInfo.totalSizeBytes, downloadInfo.downloadedBytes);
            orCreateDownloadProgressUnit.setApkItem(apkItem);
        } else if (updateInfo.updateType.isObb()) {
            if (obbItem == null) {
                obbItem = new DownloadProgressItem(downloadInfo.description.get(), updateInfo.id);
                if (!isDownloadComplete(downloadInfo.status)) {
                    logDownloadStart(downloadInfo.id, updateInfo, updateInfo.identifier);
                }
            }
            obbItem.setState(downloadInfo.id, downloadInfo.status, downloadInfo.reason, downloadInfo.totalSizeBytes, downloadInfo.downloadedBytes);
            orCreateDownloadProgressUnit.setObbItem(obbItem);
        } else if (updateInfo.updateType.isAsset()) {
            if (assetItems == null) {
                assetItems = new HashMap<>();
            }
            if (!assetItems.containsKey(Long.valueOf(downloadInfo.id))) {
                downloadProgressItem = new DownloadProgressItem(downloadInfo.description.get(), updateInfo.id);
                assetItems.put(Long.valueOf(downloadInfo.id), downloadProgressItem);
            } else {
                downloadProgressItem = assetItems.get(Long.valueOf(downloadInfo.id));
            }
            downloadProgressItem.setState(downloadInfo.id, downloadInfo.status, downloadInfo.reason, downloadInfo.totalSizeBytes, downloadInfo.downloadedBytes);
            orCreateDownloadProgressUnit.setAssetItems(assetItems);
            if (!this.mInfoUtils.hasParentUpdate(updateInfo) && updateInfo.requestOrigin == RequestOrigin.PLATFORM_SDK) {
                this.mAssetBroadcastDispatch.broadcastDownloadProgress(updateInfo, downloadInfo.downloadedBytes, downloadInfo.totalSizeBytes);
            }
        }
        maybeLogDownloadProgress(downloadInfo.id, downloadInfo.description.get(), binaryType, downloadInfo.totalSizeBytes, downloadInfo.downloadedBytes);
        if (isDownloadComplete(orCreateDownloadProgressUnit.getStatus())) {
            return false;
        }
        postDownloadProgress(orCreateDownloadProgressUnit);
        return true;
    }

    /* access modifiers changed from: package-private */
    @VisibleForTesting
    public void maybeLogDownloadProgress(long j, String str, String str2, long j2, long j3) {
        DownloadInfo downloadInfo;
        if (!(j2 == 0 || (downloadInfo = getDownloadInfo(j)) == null)) {
            float f = 0.0f;
            float f2 = downloadInfo.extras.getFloat(DownloadExtrasKeys.KEY_DOWNLOAD_PROGRESS_ANALYTICS_REPORTED, 0.0f);
            if (j2 > 0) {
                f = (float) (j3 / j2);
            }
            float[] fArr = PROGRESS_REPORT_THRESHOLD;
            for (float f3 : fArr) {
                if (f >= f3 && f2 < f3) {
                    logDownloadProgress(downloadInfo, str, str2, f3);
                    f2 = f3;
                }
            }
            setDownloadExtras(j, downloadInfo.extras.buildUpon().putFloat(DownloadExtrasKeys.KEY_DOWNLOAD_PROGRESS_ANALYTICS_REPORTED, f2).build());
        }
    }

    private void logDownloadProgress(DownloadInfo downloadInfo, String str, String str2, float f) {
        ((EventManager) FbInjector.lazyInstance(1, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent("moonlight_download_progress").addExtra("download_id", downloadInfo.id).addExtra(DOWNLOAD_RESOURCE_NAME, str).addExtra("download_uri", (String) MoreObjects.firstNonNull(downloadInfo.extras.getString(DownloadExtrasKeys.KEY_CURRENT_DOWNLOAD_URI, ""), LoggingUtil.NO_HASHCODE)).addExtra("download_connection_type", NetworkUtils.getConnectionType((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext))).addExtra("download_connection_speed", NetworkUtils.getConnectionSpeed((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext))).addExtra("download_connection_is_roaming", NetworkUtils.isRoamingConnection((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext))).addExtra(DOWNLOAD_SCHEDULE_TIME_MS, downloadInfo.extras.getLong(DownloadExtrasKeys.KEY_DOWNLOAD_SCHEDULED_TIME_MS, -1)).addExtra(DOWNLOAD_START_TIME_MS, downloadInfo.extras.getLong(DownloadExtrasKeys.KEY_DOWNLOAD_START_TIME_MS, -1)).addExtra(DOWNLOAD_BINARY_TYPE, str2).addExtra(DOWNLOAD_PROGRESS, (double) f).logAndRelease();
    }

    private DownloadProgressUnit getOrCreateDownloadProgressUnit(String str) {
        DownloadProgressUnit downloadProgressUnit;
        synchronized (this.mSync) {
            downloadProgressUnit = this.mUnCompletedDownloads.get(str);
            if (downloadProgressUnit == null) {
                downloadProgressUnit = new DownloadProgressUnit(str);
                this.mUnCompletedDownloads.put(str, downloadProgressUnit);
            }
        }
        return downloadProgressUnit;
    }

    private class DownloadsObserver extends ContentObserver {
        public DownloadsObserver(Handler handler) {
            super(handler);
        }

        public void onChange(boolean z) {
            onChange(z, null);
        }

        public void onChange(boolean z, Uri uri) {
            long downloadId = OculusDownloadProgressTracker.getDownloadId(uri);
            if (downloadId != -1) {
                OculusDownloadProgressTracker.this.updateDownload(downloadId);
            }
        }
    }

    /* access modifiers changed from: private */
    public static long getDownloadId(Uri uri) {
        String lastPathSegment = uri.getLastPathSegment();
        if (!lastPathSegment.matches(NUMBER_REGEX)) {
            return -1;
        }
        return Long.parseLong(lastPathSegment);
    }

    private void postDownloadProgress(DownloadProgressUnit downloadProgressUnit) {
        synchronized (this.mSync) {
            if (this.mIsTrackingChanges) {
                for (DownloadProgressChangeListener downloadProgressChangeListener : this.mListeners) {
                    downloadProgressChangeListener.onChange(downloadProgressUnit);
                }
            }
        }
    }

    @Nullable
    private DownloadInfo getDownloadInfo(long j) {
        DownloadInfo query = this.mOculusDownloader.query(j);
        if (query != null) {
            return query;
        }
        BLog.e(TAG, "Failed to get download info for id: %s", Long.valueOf(j));
        return null;
    }

    @Nullable
    private ApkUpdateInfo getUpdateInfo(long j) {
        DownloadInfo downloadInfo = getDownloadInfo(j);
        if (downloadInfo != null) {
            return this.mInfoUtils.getFromExtras(downloadInfo.extras, "update_id");
        }
        String str = TAG;
        ErrorReporter.softReport(str, "Cannot get binaryType, no downloadInfo for download ID: " + j);
        return null;
    }

    private void logDownloadStart(long j, ApkUpdateInfo apkUpdateInfo, String str) {
        ThreadUtils.assertOnNonUiThread();
        DownloadInfo downloadInfo = getDownloadInfo(j);
        if (downloadInfo != null) {
            ExtrasBuilder buildUpon = downloadInfo.extras.buildUpon();
            long elapsedRealtime = ((Clock) FbInjector.lazyInstance(2, TimeModule.UL_id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID, this._UL_mInjectionContext)).elapsedRealtime();
            buildUpon.putLong(DownloadExtrasKeys.KEY_DOWNLOAD_START_TIME_MS, elapsedRealtime);
            setDownloadExtras(j, buildUpon.build());
            ((EventManager) FbInjector.lazyInstance(1, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent("moonlight_download_started").appendStorageInformation().addExtra("download_id", j).addExtra(DOWNLOAD_RESOURCE_NAME, str).addExtra("download_uri", (String) MoreObjects.firstNonNull(apkUpdateInfo.downloadUrl, LoggingUtil.NO_HASHCODE)).addExtra("download_connection_type", NetworkUtils.getConnectionType((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext))).addExtra("download_connection_speed", NetworkUtils.getConnectionSpeed((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext))).addExtra("download_connection_is_roaming", NetworkUtils.isRoamingConnection((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext))).addExtra(DOWNLOAD_SCHEDULE_TIME_MS, downloadInfo.extras.getLong(DownloadExtrasKeys.KEY_DOWNLOAD_SCHEDULED_TIME_MS, -1)).addExtra(DOWNLOAD_START_TIME_MS, elapsedRealtime).addExtra(DOWNLOAD_BINARY_TYPE, this.mInfoUtils.getBinaryType(apkUpdateInfo)).addExtra("calling_package", (String) MoreObjects.firstNonNull(apkUpdateInfo.requestingPackage, LoggingUtil.NO_HASHCODE)).logAndRelease();
        }
    }

    public void setDownloadExtras(long j, Extras extras) {
        this.mThreadUtils.assertIsNonUiThread("cannot be run on ui thread");
        this.mExtrasManager.setExtras(j, extras);
    }
}
