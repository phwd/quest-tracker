package com.oculus.appmanager.util;

import android.content.pm.PackageInfo;
import android.text.TextUtils;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.google.common.collect.UnmodifiableIterator;
import com.oculus.appmanager.assets.AssetStorage;
import com.oculus.appmanager.assets.AssetsModule;
import com.oculus.appmanager.info.ApkUpdateInfo;
import com.oculus.appmanager.info.InfoModule;
import com.oculus.appmanager.info.InfoUtils;
import com.oculus.appmanager.installer.common.CommonModule;
import com.oculus.appmanager.installer.common.InstallerFileUtils;
import com.oculus.appmanager.model.UpdateConfig;
import com.oculus.appmanager.model.UrlFetchResult;
import com.oculus.appmanager.util.UtilModule;
import com.oculus.common.packagescache.PackageManagerUtils;
import com.oculus.common.packagescache.PackagesCacheModule;
import com.oculus.extras.Extras;
import com.oculus.library.model.App;
import com.oculus.library.model.AssetInfo;
import com.oculus.util.device.DeviceModule;
import com.oculus.util.device.DeviceUtils;
import java.util.HashMap;
import java.util.Map;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_util_device_DeviceUtils_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_installer_common_InstallerFileUtils_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_common_packagescache_PackageManagerUtils_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_util_FileOps_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_assets_AssetStorage_ULSEP_BINDING_ID"})
public class InstallationDiskSpaceUtil {
    private InjectionContext _UL_mInjectionContext;

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_appmanager_util_InstallationDiskSpaceUtil_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(UtilModule.UL_id._UL__ULSEP_com_oculus_appmanager_util_InstallationDiskSpaceUtil_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_appmanager_util_InstallationDiskSpaceUtil_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(UtilModule.UL_id._UL__ULSEP_com_oculus_appmanager_util_InstallationDiskSpaceUtil_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final InstallationDiskSpaceUtil _UL__ULSEP_com_oculus_appmanager_util_InstallationDiskSpaceUtil_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (InstallationDiskSpaceUtil) UL.factorymap.get(UtilModule.UL_id._UL__ULSEP_com_oculus_appmanager_util_InstallationDiskSpaceUtil_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final InstallationDiskSpaceUtil _UL__ULSEP_com_oculus_appmanager_util_InstallationDiskSpaceUtil_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new InstallationDiskSpaceUtil(injectorLike);
    }

    @Inject
    public InstallationDiskSpaceUtil(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(6, injectorLike);
    }

    /* access modifiers changed from: private */
    public static class StorageRequirements {
        long indeterminateSize;
        long installSize;

        public StorageRequirements(long j, long j2) {
            this.indeterminateSize = j;
            this.installSize = j2;
        }
    }

    public boolean canInstallApp(App app, UrlFetchResult urlFetchResult) {
        long j;
        long j2;
        HashMap hashMap = new HashMap();
        for (AssetInfo assetInfo : ((AssetStorage) FbInjector.lazyInstance(5, AssetsModule.UL_id._UL__ULSEP_com_oculus_appmanager_assets_AssetStorage_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getAssetList(app)) {
            hashMap.put(assetInfo.name, assetInfo);
        }
        long j3 = 0;
        if (urlFetchResult.assetConfigs != null) {
            j2 = 0;
            j = 0;
            for (UpdateConfig updateConfig : urlFetchResult.assetConfigs) {
                StorageRequirements calculateConfigRequiredStorage = calculateConfigRequiredStorage(app, updateConfig, hashMap);
                j += calculateConfigRequiredStorage.installSize;
                j2 = Math.max(calculateConfigRequiredStorage.indeterminateSize, j2);
            }
        } else {
            j2 = 0;
            j = 0;
        }
        if (urlFetchResult.obbConfig != null) {
            StorageRequirements calculateConfigRequiredStorage2 = calculateConfigRequiredStorage(app, urlFetchResult.obbConfig, hashMap);
            j3 = calculateConfigRequiredStorage2.installSize;
            j2 = Math.max(calculateConfigRequiredStorage2.indeterminateSize, j2);
        }
        StorageRequirements calculateConfigRequiredStorage3 = calculateConfigRequiredStorage(app, urlFetchResult.apkConfig, hashMap);
        return canInstallApp(calculateConfigRequiredStorage3.installSize, j3, j, Math.max(calculateConfigRequiredStorage3.indeterminateSize, j2));
    }

    private StorageRequirements calculateConfigRequiredStorage(App app, UpdateConfig updateConfig, Map<String, AssetInfo> map) {
        long j;
        long j2;
        long fileSize;
        if (updateConfig.updateType.isFullUpdate()) {
            j2 = updateConfig.downloadSize;
            j = updateConfig.downloadSize;
        } else {
            ApkUpdateInfo.ApkUpdateExtras apkUpdateExtras = new ApkUpdateInfo.ApkUpdateExtras(new Extras(updateConfig.extras));
            long j3 = updateConfig.downloadSize;
            long patchFailureFallbackDownloadSize = apkUpdateExtras.getPatchFailureFallbackDownloadSize();
            if (patchFailureFallbackDownloadSize <= 0) {
                if (updateConfig.updateType.isAsset()) {
                    AssetInfo assetInfo = map.get(apkUpdateExtras.getAssetRequiredFilename());
                    if (assetInfo != null) {
                        fileSize = assetInfo.size;
                    }
                    patchFailureFallbackDownloadSize = 0;
                } else {
                    if (updateConfig.updateType.isObb()) {
                        String finalObbPath = ((InstallerFileUtils) FbInjector.lazyInstance(1, CommonModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_common_InstallerFileUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getFinalObbPath(app.packageName, app.versionCode);
                        if (((FileOps) FbInjector.lazyInstance(4, UtilModule.UL_id._UL__ULSEP_com_oculus_appmanager_util_FileOps_ULSEP_BINDING_ID, this._UL_mInjectionContext)).exists(finalObbPath)) {
                            fileSize = ((FileOps) FbInjector.lazyInstance(4, UtilModule.UL_id._UL__ULSEP_com_oculus_appmanager_util_FileOps_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getFileSize(finalObbPath);
                        }
                    } else {
                        PackageInfo packageInfo = ((PackageManagerUtils) FbInjector.lazyInstance(3, PackagesCacheModule.UL_id._UL__ULSEP_com_oculus_common_packagescache_PackageManagerUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getPackageInfo(app.packageName);
                        if (packageInfo != null) {
                            String str = packageInfo.applicationInfo.sourceDir;
                            if (((FileOps) FbInjector.lazyInstance(4, UtilModule.UL_id._UL__ULSEP_com_oculus_appmanager_util_FileOps_ULSEP_BINDING_ID, this._UL_mInjectionContext)).exists(str)) {
                                patchFailureFallbackDownloadSize = ((FileOps) FbInjector.lazyInstance(4, UtilModule.UL_id._UL__ULSEP_com_oculus_appmanager_util_FileOps_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getFileSize(str);
                            }
                        }
                    }
                    patchFailureFallbackDownloadSize = 0;
                }
                patchFailureFallbackDownloadSize = fileSize;
            }
            if (patchFailureFallbackDownloadSize == 0) {
                patchFailureFallbackDownloadSize = j3;
            }
            j = j3 + patchFailureFallbackDownloadSize;
            j2 = patchFailureFallbackDownloadSize;
        }
        return new StorageRequirements(j, j2);
    }

    public boolean canInstallApp(long j, long j2, long j3) {
        return canInstallApp(j, j2, j3, 0);
    }

    public boolean canInstallApp(long j, long j2, long j3, long j4) {
        long availableInternalMemory = ((DeviceUtils) FbInjector.lazyInstance(0, DeviceModule.UL_id._UL__ULSEP_com_oculus_util_device_DeviceUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getAvailableInternalMemory();
        long availableExternalStorageMemory = ((DeviceUtils) FbInjector.lazyInstance(0, DeviceModule.UL_id._UL__ULSEP_com_oculus_util_device_DeviceUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getAvailableExternalStorageMemory();
        long minimumInternalMemoryInstallationTreshold = ((DeviceUtils) FbInjector.lazyInstance(0, DeviceModule.UL_id._UL__ULSEP_com_oculus_util_device_DeviceUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getMinimumInternalMemoryInstallationTreshold();
        long internalSpaceRequiredInQueue = availableInternalMemory - internalSpaceRequiredInQueue();
        long externalSpaceRequiredInQueue = availableExternalStorageMemory - externalSpaceRequiredInQueue();
        if (j4 <= externalSpaceRequiredInQueue && j + j2 + j3 <= externalSpaceRequiredInQueue && j <= internalSpaceRequiredInQueue && internalSpaceRequiredInQueue >= (2 * j) + minimumInternalMemoryInstallationTreshold) {
            return true;
        }
        return false;
    }

    private long internalSpaceRequiredInQueue() {
        long j;
        long j2;
        long j3;
        long j4 = 0;
        for (ApkUpdateInfo apkUpdateInfo : ((InfoUtils) FbInjector.lazyInstance(2, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getAllUpdates()) {
            if (apkUpdateInfo.getExtras().getState().isTransient() && apkUpdateInfo.updateType.isApk()) {
                if (apkUpdateInfo.updateType.isPatchUpdate()) {
                    j3 = apkUpdateInfo.getExtras().getPatchFailureFallbackDownloadSize();
                    if (j3 > 0) {
                        j2 = getApkSize(apkUpdateInfo);
                    } else {
                        j = 0;
                        j4 += j;
                    }
                } else if (apkUpdateInfo.updateType.isFullUpdate()) {
                    j3 = apkUpdateInfo.downloadSize;
                    j2 = getApkSize(apkUpdateInfo);
                }
                j = j3 - j2;
                j4 += j;
            }
        }
        return j4;
    }

    private long externalSpaceRequiredInQueue() {
        long j;
        long j2;
        long j3;
        UnmodifiableIterator<ApkUpdateInfo> it = ((InfoUtils) FbInjector.lazyInstance(2, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getAllUpdates().iterator();
        long j4 = 0;
        while (it.hasNext()) {
            ApkUpdateInfo next = it.next();
            if (next.getExtras().getState().isTransient()) {
                if (next.updateType.isPatchUpdate()) {
                    if (next.updateType.isObb()) {
                        j3 = next.getExtras().getPatchFailureFallbackDownloadSize();
                        if (j3 > 0) {
                            j2 = getObbSize(next);
                        }
                    } else if (next.updateType.isAsset()) {
                        j3 = next.getExtras().getPatchFailureFallbackDownloadSize();
                        if (j3 > 0) {
                            j2 = getAssetSize(next);
                        }
                    }
                    j = 0;
                    j4 += j;
                } else if (next.updateType.isObb()) {
                    j3 = next.downloadSize;
                    j2 = getObbSize(next);
                } else if (next.updateType.isAsset()) {
                    j3 = next.downloadSize;
                    j2 = getAssetSize(next);
                }
                j = j3 - j2;
                j4 += j;
            }
        }
        return j4;
    }

    private long getApkSize(ApkUpdateInfo apkUpdateInfo) {
        PackageInfo packageInfo;
        String packageName = apkUpdateInfo.getPackageName();
        if (!TextUtils.isEmpty(packageName) && (packageInfo = ((PackageManagerUtils) FbInjector.lazyInstance(3, PackagesCacheModule.UL_id._UL__ULSEP_com_oculus_common_packagescache_PackageManagerUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getPackageInfo(packageName)) != null) {
            return ((FileOps) FbInjector.lazyInstance(4, UtilModule.UL_id._UL__ULSEP_com_oculus_appmanager_util_FileOps_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getFileSize(packageInfo.applicationInfo.sourceDir);
        }
        return 0;
    }

    private long getObbSize(ApkUpdateInfo apkUpdateInfo) {
        String finalObbPath;
        String packageName = apkUpdateInfo.getPackageName();
        if (!TextUtils.isEmpty(packageName) && (finalObbPath = ((InstallerFileUtils) FbInjector.lazyInstance(1, CommonModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_common_InstallerFileUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getFinalObbPath(packageName, apkUpdateInfo.baseVersion)) != null) {
            return ((FileOps) FbInjector.lazyInstance(4, UtilModule.UL_id._UL__ULSEP_com_oculus_appmanager_util_FileOps_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getFileSize(finalObbPath);
        }
        return 0;
    }

    private long getAssetSize(ApkUpdateInfo apkUpdateInfo) {
        String packageName = apkUpdateInfo.getPackageName();
        if (TextUtils.isEmpty(packageName)) {
            return 0;
        }
        return ((FileOps) FbInjector.lazyInstance(4, UtilModule.UL_id._UL__ULSEP_com_oculus_appmanager_util_FileOps_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getFileSize(InstallerFileUtils.getFinalAssetPath(packageName, apkUpdateInfo.getExtras().getAssetRequiredFilename()));
    }
}
