package com.oculus.appmanager.info;

import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightSingletonProvider;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.UL;
import com.oculus.appmanager.info.ApkUpdateInfo;
import com.oculus.appmanager.info.ApkUpdateInfoListener;
import com.oculus.appmanager.info.InfoModule;
import com.oculus.dispatcher.ListenerDispatcher;
import com.oculus.errorreporting.interfaces.IErrorReporter;
import com.oculus.errorreporting.interfaces.InterfacesModule;
import java.util.Set;
import javax.inject.Inject;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_BINDING_ID", "_UL__ULSEP_java_util_Set_ULLT_com_oculus_appmanager_info_ApkUpdateInfoListener_ULGT__ULSEP_BINDING_ID"})
@ApplicationScoped
public class ApkUpdateInfoDispatcher extends ListenerDispatcher<ApkUpdateInfoListener> {
    private static final String ERROR_CATEGORY = "ApkUpdateInfoDispatcher";
    private static volatile ApkUpdateInfoDispatcher _UL__ULSEP_com_oculus_appmanager_info_ApkUpdateInfoDispatcher_ULSEP_INSTANCE;
    private final IErrorReporter mErrorReporter;

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_appmanager_info_ApkUpdateInfoDispatcher_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_ApkUpdateInfoDispatcher_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_appmanager_info_ApkUpdateInfoDispatcher_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_ApkUpdateInfoDispatcher_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final ApkUpdateInfoDispatcher _UL__ULSEP_com_oculus_appmanager_info_ApkUpdateInfoDispatcher_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (ApkUpdateInfoDispatcher) UL.factorymap.get(InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_ApkUpdateInfoDispatcher_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final ApkUpdateInfoDispatcher _UL__ULSEP_com_oculus_appmanager_info_ApkUpdateInfoDispatcher_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_appmanager_info_ApkUpdateInfoDispatcher_ULSEP_INSTANCE == null) {
            synchronized (ApkUpdateInfoDispatcher.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_appmanager_info_ApkUpdateInfoDispatcher_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        InjectorLike applicationInjector = injectorLike.getApplicationInjector();
                        _UL__ULSEP_com_oculus_appmanager_info_ApkUpdateInfoDispatcher_ULSEP_INSTANCE = new ApkUpdateInfoDispatcher(InterfacesModule._UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_ACCESS_METHOD(applicationInjector), InfoModule._UL__ULSEP_java_util_Set_ULLT_com_oculus_appmanager_info_ApkUpdateInfoListener_ULGT__ULSEP_ACCESS_METHOD(applicationInjector));
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_appmanager_info_ApkUpdateInfoDispatcher_ULSEP_INSTANCE;
    }

    @Inject
    public ApkUpdateInfoDispatcher(IErrorReporter iErrorReporter, Set<ApkUpdateInfoListener> set) {
        super(set);
        this.mErrorReporter = iErrorReporter;
    }

    public void notifyCreated(ApkUpdateInfo apkUpdateInfo, ApkUpdateInfoListener.CreationType creationType) {
        for (ApkUpdateInfoListener apkUpdateInfoListener : getListeners()) {
            try {
                apkUpdateInfoListener.onCreated(apkUpdateInfo, creationType);
            } catch (Throwable th) {
                this.mErrorReporter.softError(ERROR_CATEGORY, "exception in update listener", th);
            }
        }
    }

    public void notifyChanged(ApkUpdateInfo apkUpdateInfo, Set<String> set, ApkUpdateInfo.ApkUpdateExtras apkUpdateExtras) {
        for (ApkUpdateInfoListener apkUpdateInfoListener : getListeners()) {
            try {
                apkUpdateInfoListener.onChanged(apkUpdateInfo, set, apkUpdateExtras);
            } catch (Throwable th) {
                this.mErrorReporter.softError(ERROR_CATEGORY, "exception in update listener", th);
            }
        }
    }

    public void notifyDeleted(ApkUpdateInfo apkUpdateInfo) {
        for (ApkUpdateInfoListener apkUpdateInfoListener : getListeners()) {
            try {
                apkUpdateInfoListener.onDeleted(apkUpdateInfo);
            } catch (Throwable th) {
                this.mErrorReporter.softError(ERROR_CATEGORY, "exception in update listener", th);
            }
        }
    }
}
