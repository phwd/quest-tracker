package com.oculus.appmanager.info;

import android.content.ContentValues;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.text.TextUtils;
import androidx.annotation.VisibleForTesting;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightSingletonProvider;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Eager;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.google.common.base.Optional;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.UnmodifiableIterator;
import com.oculus.appmanager.info.ApkUpdateInfoContract;
import com.oculus.appmanager.info.ApkUpdateInfoListener;
import com.oculus.appmanager.info.InfoModule;
import com.oculus.appmanager.info.database.ApkUpdateDatabaseSupplier;
import com.oculus.appmanager.info.database.ApkUpdateExtrasManager;
import com.oculus.appmanager.info.model.RequestOrigin;
import com.oculus.common.init.INeedInit;
import com.oculus.executors.OculusThreadExecutor;
import com.oculus.extras.Extras;
import com.oculus.time.Clock;
import com.oculus.time.TimeModule;
import com.oculus.util.thread.ThreadUtils;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;
import javax.annotation.concurrent.GuardedBy;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_info_database_ApkUpdateDatabaseSupplier_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_info_database_ApkUpdateExtrasManager_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_info_ApkUpdateInfoDispatcher_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_info_ApkUpdateInfoProvider_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_util_thread_ThreadUtils_ULSEP_BINDING_ID"})
@ApplicationScoped
@VisibleForTesting
public class ApkUpdateStorage implements INeedInit {
    private static final String COL_ACCESS_TOKEN = ApkUpdateInfoContract.ApkUpdateTable.Columns.ACCESS_TOKEN.name;
    private static final String COL_BASE_VERSION = ApkUpdateInfoContract.ApkUpdateTable.Columns.BASE_VERSION.name;
    private static final String COL_CHECKSUM_HASH = ApkUpdateInfoContract.ApkUpdateTable.Columns.DOWNLOAD_CHECKSUM.name;
    private static final String COL_CHECKSUM_HASH_ALG = ApkUpdateInfoContract.ApkUpdateTable.Columns.DOWNLOAD_CHECKSUM_ALG.name;
    private static final String COL_DEPENDENCIES = ApkUpdateInfoContract.ApkUpdateTable.Columns.DEPENDENCIES.name;
    private static final String COL_DISPLAY_TITLE = ApkUpdateInfoContract.ApkUpdateTable.Columns.DISPLAY_TITLE.name;
    private static final String COL_DOWNLOAD_SIZE = ApkUpdateInfoContract.ApkUpdateTable.Columns.DOWNLOAD_SIZE.name;
    private static final String COL_DOWNLOAD_URL = ApkUpdateInfoContract.ApkUpdateTable.Columns.DOWNLOAD_URL.name;
    private static final String COL_EXTERNAL_SIGNATURES = ApkUpdateInfoContract.ApkUpdateTable.Columns.EXTERNAL_SIGNATURES.name;
    private static final String COL_IDENTIFIER = ApkUpdateInfoContract.ApkUpdateTable.Columns.IDENTIFIER.name;
    private static final String COL_IS_UPDATE = ApkUpdateInfoContract.ApkUpdateTable.Columns.IS_UPDATE.name;
    private static final String COL_ITEM_ID = ApkUpdateInfoContract.ApkUpdateTable.Columns.ITEM_ID.name;
    private static final String COL_REQUESTING_PACKAGE = ApkUpdateInfoContract.ApkUpdateTable.Columns.REQUESTING_PACKAGE.name;
    private static final String COL_REQUEST_HEADERS = ApkUpdateInfoContract.ApkUpdateTable.Columns.REQUEST_HEADERS.name;
    private static final String COL_REQUEST_ORIGIN = ApkUpdateInfoContract.ApkUpdateTable.Columns.REQUEST_ORIGIN.name;
    private static final String COL_SIGNATURE = ApkUpdateInfoContract.ApkUpdateTable.Columns.SIGNATURE.name;
    private static final String COL_TARGET_VERSION = ApkUpdateInfoContract.ApkUpdateTable.Columns.TARGET_VERSION.name;
    private static final String COL_UPDATE_ID = ApkUpdateInfoContract.ApkUpdateTable.Columns.ID.name;
    private static final String COL_UPDATE_TYPE = ApkUpdateInfoContract.ApkUpdateTable.Columns.UPDATE_TYPE.name;
    private static final String LIST_DELIMITER = ":";
    private static final String TABLE_NAME = ApkUpdateInfoContract.ApkUpdateTable.NAME;
    private static volatile ApkUpdateStorage _UL__ULSEP_com_oculus_appmanager_info_ApkUpdateStorage_ULSEP_INSTANCE;
    private InjectionContext _UL_mInjectionContext;
    @GuardedBy("this")
    private final Map<Long, ApkUpdateInfo> mCachedUpdates = Collections.synchronizedMap(new HashMap());
    @Inject
    @Eager
    private final ApkUpdateDatabaseSupplier mDatabaseSupplier;
    @Inject
    @Eager
    private final ApkUpdateExtrasManager mExtrasManager;
    @Inject
    @Eager
    private final ApkUpdateInfoDispatcher mListenerDispatcher;
    @GuardedBy("this")
    private boolean mLoadedUpdatesFromDb = false;
    @Inject
    @Eager
    private final ThreadUtils mThreadUtils;
    @Inject
    @Eager
    private final ApkUpdateInfoProvider mUpdateInfoProvider;

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_appmanager_info_ApkUpdateStorage_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_ApkUpdateStorage_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final ApkUpdateStorage _UL__ULSEP_com_oculus_appmanager_info_ApkUpdateStorage_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (ApkUpdateStorage) UL.factorymap.get(InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_ApkUpdateStorage_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final ApkUpdateStorage _UL__ULSEP_com_oculus_appmanager_info_ApkUpdateStorage_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_appmanager_info_ApkUpdateStorage_ULSEP_INSTANCE == null) {
            synchronized (ApkUpdateStorage.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_appmanager_info_ApkUpdateStorage_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        _UL__ULSEP_com_oculus_appmanager_info_ApkUpdateStorage_ULSEP_INSTANCE = new ApkUpdateStorage(injectorLike.getApplicationInjector());
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_appmanager_info_ApkUpdateStorage_ULSEP_INSTANCE;
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_appmanager_info_ApkUpdateStorage_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_ApkUpdateStorage_ULSEP_BINDING_ID, injectorLike);
    }

    @Inject
    public ApkUpdateStorage(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(1, injectorLike);
        this.mDatabaseSupplier = ApkUpdateDatabaseSupplier._UL__ULSEP_com_oculus_appmanager_info_database_ApkUpdateDatabaseSupplier_ULSEP_ACCESS_METHOD(injectorLike);
        this.mExtrasManager = ApkUpdateExtrasManager._UL__ULSEP_com_oculus_appmanager_info_database_ApkUpdateExtrasManager_ULSEP_ACCESS_METHOD(injectorLike);
        this.mListenerDispatcher = ApkUpdateInfoDispatcher._UL__ULSEP_com_oculus_appmanager_info_ApkUpdateInfoDispatcher_ULSEP_ACCESS_METHOD(injectorLike);
        this.mUpdateInfoProvider = ApkUpdateInfo._UL__ULSEP_com_oculus_appmanager_info_ApkUpdateInfoProvider_ULSEP_ACCESS_METHOD(injectorLike);
        this.mThreadUtils = ThreadUtils._UL__ULSEP_com_oculus_util_thread_ThreadUtils_ULSEP_ACCESS_METHOD(injectorLike);
    }

    @Override // com.oculus.common.init.INeedInit
    public void init() {
        OculusThreadExecutor.getInstance().execute(new Runnable() {
            /* class com.oculus.appmanager.info.ApkUpdateStorage.AnonymousClass1 */

            public void run() {
                ApkUpdateStorage.this.loadUpdates();
            }
        });
    }

    @VisibleForTesting
    public ApkUpdateInfo addUpdate(String str, ApkUpdateInfoContract.UpdateType updateType, long j, long j2, boolean z, long j3, @Nullable String str2, RequestOrigin requestOrigin, @Nullable ImmutableList<Long> immutableList, @Nullable String str3, @Nullable String str4, @Nullable String str5, @Nullable String str6, @Nullable String str7, @Nullable String str8, @Nullable String str9, @Nullable String str10, @Nullable Extras extras, @Nullable ImmutableMap<String, String> immutableMap) {
        SQLiteDatabase sQLiteDatabase;
        Throwable th;
        Extras build;
        this.mThreadUtils.assertIsNonUiThread();
        Extras extras2 = extras == null ? new Extras() : extras;
        ImmutableList<Long> of = immutableList == null ? ImmutableList.of() : immutableList;
        ContentValues contentValues = new ContentValues();
        contentValues.put(COL_ITEM_ID, str4);
        contentValues.put(COL_BASE_VERSION, Long.valueOf(j));
        contentValues.put(COL_TARGET_VERSION, Long.valueOf(j2));
        contentValues.put(COL_ACCESS_TOKEN, str3);
        contentValues.put(COL_IDENTIFIER, str);
        contentValues.put(COL_DOWNLOAD_URL, str2);
        contentValues.put(COL_DOWNLOAD_SIZE, Long.valueOf(j3));
        contentValues.put(COL_DISPLAY_TITLE, str7);
        contentValues.put(COL_UPDATE_TYPE, Integer.valueOf(updateType.asInt()));
        contentValues.put(COL_IS_UPDATE, Integer.valueOf(z ? 1 : 0));
        contentValues.put(COL_DEPENDENCIES, listToString(of));
        contentValues.put(COL_REQUESTING_PACKAGE, str8);
        contentValues.put(COL_REQUEST_ORIGIN, requestOrigin.name());
        contentValues.put(COL_SIGNATURE, str9);
        contentValues.put(COL_EXTERNAL_SIGNATURES, str10);
        contentValues.put(COL_CHECKSUM_HASH, str5);
        contentValues.put(COL_CHECKSUM_HASH_ALG, str6);
        contentValues.put(COL_REQUEST_HEADERS, mapToString(immutableMap));
        SQLiteDatabase sQLiteDatabase2 = this.mDatabaseSupplier.get();
        sQLiteDatabase2.beginTransaction();
        try {
            long insert = sQLiteDatabase2.insert(TABLE_NAME, null, contentValues);
            try {
                build = extras2.buildUpon().putInt("state", ApkUpdateInfoContract.STATE_NEW).putLong(ApkUpdateInfoContract.EXTRA_CREATED_TIMESTAMP, ((Clock) FbInjector.lazyInstance(0, TimeModule.UL_id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID, this._UL_mInjectionContext)).now()).build();
                this.mExtrasManager.setExtras(insert, build);
                sQLiteDatabase = sQLiteDatabase2;
            } catch (Throwable th2) {
                th = th2;
                sQLiteDatabase = sQLiteDatabase2;
                sQLiteDatabase.endTransaction();
                throw th;
            }
            try {
                ApkUpdateInfo apkUpdateInfo = this.mUpdateInfoProvider.get(insert, str, updateType, j, j2, z, j3, str2, requestOrigin, of, str3, str4, str5, str6, str7, str8, str9, str10, build, immutableMap);
                sQLiteDatabase.setTransactionSuccessful();
                sQLiteDatabase.endTransaction();
                synchronized (this) {
                    this.mCachedUpdates.put(Long.valueOf(apkUpdateInfo.id), apkUpdateInfo);
                }
                this.mListenerDispatcher.notifyCreated(apkUpdateInfo, ApkUpdateInfoListener.CreationType.NEW);
                return apkUpdateInfo;
            } catch (Throwable th3) {
                th = th3;
                sQLiteDatabase.endTransaction();
                throw th;
            }
        } catch (Throwable th4) {
            th = th4;
            sQLiteDatabase = sQLiteDatabase2;
            sQLiteDatabase.endTransaction();
            throw th;
        }
    }

    @VisibleForTesting
    public void deleteUpdate(long j) {
        ApkUpdateInfo remove;
        this.mThreadUtils.assertIsNonUiThread();
        synchronized (this) {
            remove = this.mCachedUpdates.remove(Long.valueOf(j));
            if (remove != null) {
                remove.markDeleted();
            }
        }
        SQLiteDatabase sQLiteDatabase = this.mDatabaseSupplier.get();
        sQLiteDatabase.beginTransaction();
        try {
            sQLiteDatabase.delete(TABLE_NAME, COL_UPDATE_ID + " = ?", new String[]{Long.toString(j)});
            this.mExtrasManager.removeAllExtras(j);
            sQLiteDatabase.setTransactionSuccessful();
            if (remove != null) {
                this.mListenerDispatcher.notifyDeleted(remove);
            }
        } finally {
            sQLiteDatabase.endTransaction();
        }
    }

    /* access modifiers changed from: package-private */
    @VisibleForTesting
    public synchronized Map<Long, ApkUpdateInfo> loadUpdates() {
        int i;
        boolean z;
        int i2;
        if (this.mLoadedUpdatesFromDb) {
            return this.mCachedUpdates;
        }
        Cursor query = this.mDatabaseSupplier.get().query(TABLE_NAME, new String[]{COL_UPDATE_ID, COL_ITEM_ID, COL_BASE_VERSION, COL_TARGET_VERSION, COL_ACCESS_TOKEN, COL_IDENTIFIER, COL_DOWNLOAD_URL, COL_DOWNLOAD_SIZE, COL_DISPLAY_TITLE, COL_UPDATE_TYPE, COL_IS_UPDATE, COL_DEPENDENCIES, COL_REQUESTING_PACKAGE, COL_REQUEST_ORIGIN, COL_SIGNATURE, COL_EXTERNAL_SIGNATURES, COL_CHECKSUM_HASH, COL_CHECKSUM_HASH_ALG, COL_REQUEST_HEADERS}, null, null, null, null, null);
        if (query == null) {
            this.mLoadedUpdatesFromDb = true;
            return this.mCachedUpdates;
        } else if (!query.moveToFirst()) {
            query.close();
            this.mLoadedUpdatesFromDb = true;
            return this.mCachedUpdates;
        } else {
            int columnIndex = query.getColumnIndex(COL_UPDATE_ID);
            int columnIndex2 = query.getColumnIndex(COL_ITEM_ID);
            int columnIndex3 = query.getColumnIndex(COL_BASE_VERSION);
            int columnIndex4 = query.getColumnIndex(COL_TARGET_VERSION);
            int columnIndex5 = query.getColumnIndex(COL_ACCESS_TOKEN);
            int columnIndex6 = query.getColumnIndex(COL_IDENTIFIER);
            int columnIndex7 = query.getColumnIndex(COL_DOWNLOAD_URL);
            int columnIndex8 = query.getColumnIndex(COL_DOWNLOAD_SIZE);
            int columnIndex9 = query.getColumnIndex(COL_DISPLAY_TITLE);
            int columnIndex10 = query.getColumnIndex(COL_UPDATE_TYPE);
            int columnIndex11 = query.getColumnIndex(COL_IS_UPDATE);
            int columnIndex12 = query.getColumnIndex(COL_DEPENDENCIES);
            int columnIndex13 = query.getColumnIndex(COL_REQUESTING_PACKAGE);
            int columnIndex14 = query.getColumnIndex(COL_REQUEST_ORIGIN);
            int columnIndex15 = query.getColumnIndex(COL_SIGNATURE);
            int columnIndex16 = query.getColumnIndex(COL_EXTERNAL_SIGNATURES);
            int columnIndex17 = query.getColumnIndex(COL_CHECKSUM_HASH);
            int columnIndex18 = query.getColumnIndex(COL_CHECKSUM_HASH_ALG);
            int columnIndex19 = query.getColumnIndex(COL_REQUEST_HEADERS);
            while (!query.isAfterLast()) {
                int i3 = columnIndex13;
                int i4 = columnIndex19;
                long j = query.getLong(columnIndex);
                int i5 = columnIndex12;
                if (!this.mCachedUpdates.containsKey(Long.valueOf(j))) {
                    long j2 = query.getLong(columnIndex3);
                    long j3 = query.getLong(columnIndex4);
                    String string = query.getString(columnIndex2);
                    String string2 = query.getString(columnIndex5);
                    String string3 = query.getString(columnIndex6);
                    String string4 = query.getString(columnIndex7);
                    long j4 = query.getLong(columnIndex8);
                    String string5 = query.getString(columnIndex9);
                    ApkUpdateInfoContract.UpdateType fromInt = ApkUpdateInfoContract.UpdateType.fromInt(query.getInt(columnIndex10));
                    if (query.getInt(columnIndex11) == 1) {
                        i2 = i5;
                        z = true;
                    } else {
                        i2 = i5;
                        z = false;
                    }
                    String string6 = query.getString(i2);
                    i5 = i2;
                    String string7 = query.getString(i3);
                    i3 = i3;
                    RequestOrigin valueOf = RequestOrigin.valueOf(query.getString(columnIndex14));
                    columnIndex14 = columnIndex14;
                    String string8 = query.getString(columnIndex15);
                    columnIndex15 = columnIndex15;
                    String string9 = query.getString(columnIndex16);
                    columnIndex16 = columnIndex16;
                    String string10 = query.getString(columnIndex17);
                    columnIndex17 = columnIndex17;
                    String string11 = query.getString(columnIndex18);
                    columnIndex18 = columnIndex18;
                    String string12 = query.getString(i4);
                    i4 = i4;
                    Extras extras = this.mExtrasManager.getExtras(j);
                    ApkUpdateInfo apkUpdateInfo = this.mUpdateInfoProvider.get(j, string3, fromInt, j2, j3, z, j4, string4, valueOf, stringToLongList(string6), string2, string, string10, string11, string5, string7, string8, string9, extras, stringToMap(string12));
                    i = columnIndex2;
                    if (!this.mCachedUpdates.containsKey(Long.valueOf(j))) {
                        this.mCachedUpdates.put(Long.valueOf(j), apkUpdateInfo);
                        this.mListenerDispatcher.notifyCreated(apkUpdateInfo, ApkUpdateInfoListener.CreationType.RESTORED);
                    }
                } else {
                    i = columnIndex2;
                }
                query.moveToNext();
                columnIndex13 = i3;
                columnIndex2 = i;
                columnIndex19 = i4;
                columnIndex = columnIndex;
                columnIndex12 = i5;
            }
            query.close();
            this.mLoadedUpdatesFromDb = true;
            return this.mCachedUpdates;
        }
    }

    @VisibleForTesting
    public Optional<ApkUpdateInfo> findUpdateById(long j) {
        ApkUpdateInfo apkUpdateInfo = loadUpdates().get(Long.valueOf(j));
        if (apkUpdateInfo == null || apkUpdateInfo.isDeleted()) {
            return Optional.absent();
        }
        return Optional.of(apkUpdateInfo);
    }

    @VisibleForTesting
    public List<ApkUpdateInfo> findUpdates(Predicate<ApkUpdateInfo> predicate) {
        ImmutableList<ApkUpdateInfo> allUpdates = getAllUpdates();
        LinkedList linkedList = new LinkedList();
        UnmodifiableIterator<ApkUpdateInfo> it = allUpdates.iterator();
        while (it.hasNext()) {
            ApkUpdateInfo next = it.next();
            if (predicate.apply(next)) {
                linkedList.add(next);
            }
        }
        return linkedList;
    }

    @Nullable
    @VisibleForTesting
    public ApkUpdateInfo findFirstUpdate(Predicate<ApkUpdateInfo> predicate) {
        UnmodifiableIterator<ApkUpdateInfo> it = getAllUpdates().iterator();
        while (it.hasNext()) {
            ApkUpdateInfo next = it.next();
            if (predicate.apply(next)) {
                return next;
            }
        }
        return null;
    }

    @VisibleForTesting
    public ImmutableList<ApkUpdateInfo> getAllUpdates() {
        return ImmutableList.copyOf((Collection) loadUpdates().values());
    }

    private static String mapToString(@Nullable ImmutableMap<String, ?> immutableMap) {
        if (immutableMap == null || immutableMap.isEmpty()) {
            return "";
        }
        StringBuilder sb = new StringBuilder();
        UnmodifiableIterator<Map.Entry<String, ?>> it = immutableMap.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry<String, ?> next = it.next();
            sb.append(next.getKey());
            sb.append(LIST_DELIMITER);
            sb.append(next.getValue());
            if (it.hasNext()) {
                sb.append(LIST_DELIMITER);
            }
        }
        return sb.toString();
    }

    private static ImmutableMap<String, String> stringToMap(String str) {
        ImmutableMap.Builder builder = ImmutableMap.builder();
        String[] split = TextUtils.split(str, LIST_DELIMITER);
        for (int i = 0; i < split.length / 2; i++) {
            int i2 = i * 2;
            builder.put(split[i2], split[i2 + 1]);
        }
        return builder.build();
    }

    private static String listToString(@Nullable ImmutableList<?> immutableList) {
        return (immutableList == null || immutableList.isEmpty()) ? "" : TextUtils.join(LIST_DELIMITER, immutableList);
    }

    private static ImmutableList<Long> stringToLongList(String str) {
        if (TextUtils.isEmpty(str)) {
            return ImmutableList.of();
        }
        String[] split = str.split(LIST_DELIMITER);
        ArrayList arrayList = new ArrayList(split.length);
        for (String str2 : split) {
            arrayList.add(Long.valueOf(Long.parseLong(str2)));
        }
        return ImmutableList.copyOf((Collection) arrayList);
    }
}
