package com.oculus.appmanager.installer.notification;

import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Eager;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.oculus.appmanager.installer.notification.InstallerNotificationsModule;
import com.oculus.appmanager.installer.notification.contract.InstallerNotificationsContract;
import com.oculus.common.init.INeedInit;
import com.oculus.downloader.progress.DownloadProgressChangeListener;
import com.oculus.downloader.progress.DownloadProgressTracker;
import com.oculus.downloader.progress.DownloaderProgressModule;
import com.oculus.downloader.progress.model.DownloadProgressItem;
import com.oculus.downloader.progress.model.DownloadProgressUnit;
import java.util.Collection;
import java.util.Collections;
import java.util.LinkedHashSet;
import javax.annotation.Nullable;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_appmanager_installer_notification_contract_InstallerNotificationsContract_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_downloader_progress_DownloadProgressTracker_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_installer_notification_NotificationEligibility_ULSEP_BINDING_ID"})
public class NotificationDownloadListener implements INeedInit, DownloadProgressChangeListener {
    @Inject
    @Eager
    private final DownloadProgressTracker mDownloadProgressTracker;
    @Inject
    @Eager
    private final InstallerNotificationsContract mInstallerNotificationsContract;
    @Inject
    @Eager
    private final NotificationEligibility mNotificationEligibility;

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_appmanager_installer_notification_NotificationDownloadListener_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(InstallerNotificationsModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_notification_NotificationDownloadListener_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final NotificationDownloadListener _UL__ULSEP_com_oculus_appmanager_installer_notification_NotificationDownloadListener_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (NotificationDownloadListener) UL.factorymap.get(InstallerNotificationsModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_notification_NotificationDownloadListener_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final NotificationDownloadListener _UL__ULSEP_com_oculus_appmanager_installer_notification_NotificationDownloadListener_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new NotificationDownloadListener(injectorLike);
    }

    @Inject
    public NotificationDownloadListener(InjectorLike injectorLike) {
        this.mInstallerNotificationsContract = InstallerNotificationsContract._UL__ULSEP_com_oculus_appmanager_installer_notification_contract_InstallerNotificationsContract_ULSEP_ACCESS_METHOD(injectorLike);
        this.mDownloadProgressTracker = DownloaderProgressModule._UL__ULSEP_com_oculus_downloader_progress_DownloadProgressTracker_ULSEP_ACCESS_METHOD(injectorLike);
        this.mNotificationEligibility = NotificationEligibility._UL__ULSEP_com_oculus_appmanager_installer_notification_NotificationEligibility_ULSEP_ACCESS_METHOD(injectorLike);
    }

    @Override // com.oculus.common.init.INeedInit
    public void init() {
        this.mDownloadProgressTracker.addDownloadProgressChangeListener(this);
    }

    @Override // com.oculus.downloader.progress.DownloadProgressChangeListener
    public void onChange(DownloadProgressUnit downloadProgressUnit) {
        if (shouldShowNotification(downloadProgressUnit)) {
            this.mInstallerNotificationsContract.updateProgress(downloadProgressUnit.getPackageName());
        }
    }

    @Nullable
    private DownloadProgressItem getLeadItem(DownloadProgressUnit downloadProgressUnit) {
        Collection<DownloadProgressItem> collection;
        LinkedHashSet<DownloadProgressItem> linkedHashSet = new LinkedHashSet();
        linkedHashSet.add(downloadProgressUnit.getApkItem());
        linkedHashSet.add(downloadProgressUnit.getObbItem());
        if (downloadProgressUnit.getAssetItems() == null) {
            collection = Collections.EMPTY_SET;
        } else {
            collection = downloadProgressUnit.getAssetItems().values();
        }
        linkedHashSet.addAll(collection);
        linkedHashSet.remove(null);
        for (DownloadProgressItem downloadProgressItem : linkedHashSet) {
            if (downloadProgressItem != null) {
                return downloadProgressItem;
            }
        }
        return null;
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_appmanager_installer_notification_NotificationDownloadListener_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(InstallerNotificationsModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_notification_NotificationDownloadListener_ULSEP_BINDING_ID, injectorLike);
    }

    private boolean shouldShowNotification(DownloadProgressUnit downloadProgressUnit) {
        long j;
        DownloadProgressItem leadItem = getLeadItem(downloadProgressUnit);
        if (leadItem == null) {
            j = -1;
        } else {
            j = leadItem.getUpdateId();
        }
        return this.mNotificationEligibility.shouldShowNotification(j);
    }
}
