package com.oculus.appmanager.installer.notification;

import android.app.Notification;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.widget.Toast;
import androidx.core.app.NotificationCompat;
import com.facebook.debug.log.BLog;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightSingletonProvider;
import com.facebook.secure.trustedapp.CallerInfoHelper;
import com.facebook.secure.trustedapp.exception.CannotAttachCallerInfoException;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Eager;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.oculus.appmanager.installer.notification.InstallerNotificationsModule;
import com.oculus.appmanager.installer.notification.contract.InstallerNotificationsContract;
import com.oculus.auth.service.contract.ServiceContract;
import com.oculus.common.vrshell.Constants;
import com.oculus.common.vrshell.SystemUXRoute;
import com.oculus.device.DeviceType;
import com.oculus.executors.ExecutorsModule;
import com.oculus.executors.ForUiThread;
import com.oculus.horizon.R;
import com.oculus.library.model.App;
import com.oculus.library.model.Category;
import com.oculus.library.model.Image;
import com.oculus.library.model.SupportedPlatform;
import com.oculus.libraryapi.OVRLibrary;
import com.oculus.libraryapi.OVRLibraryModule;
import com.oculus.time.Clock;
import com.oculus.time.TimeModule;
import com.oculus.util.device.DeviceUtils;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.annotation.Nullable;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_util_device_DeviceUtils_ULSEP_BINDING_ID", "_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID", "_UL__ULSEP_android_os_Handler_ULSEP_com_oculus_executors_ForUiThread_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_installer_notification_contract_InstallerNotificationsContract_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID"})
@ApplicationScoped
public class InstallerNotificationManager {
    private static final String CANCEL_CTA = "cancel download";
    private static final String CANCEL_DOWNLOAD = "cancel_download";
    private static final Uri DEFAULT_URI = Uri.parse("oculus.store://link/home");
    private static final String EXTRA_BLACKSCREEN = "blackscreen";
    private static final String EXTRA_DISMISS_FLAG = "hide_dismiss";
    private static final String EXTRA_DOWNLOAD_IN_PROGRESS = "download_in_progress";
    private static final String EXTRA_INSTALL_IN_PROGRESS = "install_in_progress";
    private static final String EXTRA_IS_DOWNLOAD = "is_download";
    private static final String EXTRA_ORIGINAL_POST_TIME = "original_post_time";
    private static final String EXTRA_PACKAGE_NAME = "package_name";
    private static final String EXTRA_PROGRESS_BAR_RATIO = "progress_bar_ratio";
    private static final String EXTRA_SHOW_TITLE_IN_TOAST = "title_as_description_in_toast";
    private static final String EXTRA_URI = "uri";
    private static final int IN_PROGRESS_NOTIFICATION_ID = 20000;
    private static final String LAUNCH_CTA = "launch";
    private static final String LAUNCH_DOWNLOAD = "com.oculus.systemux.download.LAUNCH_APPLICATION";
    private static final int NOTIFICATION_ICON = R.drawable.status_icon;
    private static final int NOTIFICATION_ICON_STANDALONE = R.drawable.status_icon_filled;
    public static final String REFERRER_DOWNLOAD_FAIL = "notif_download_failed";
    public static final String REFERRER_DOWNLOAD_IN_PROGRESS = "notif_download_in_progress";
    public static final String REFERRER_INSTALL_FAIL = "notif_install_failed";
    public static final String REFERRER_INSTALL_IN_PROGRESS = "notif_install_in_progress";
    public static final String REFERRER_INSTALL_SUCCESS = "notif_install_success";
    private static final String RETRY_CTA = "retry";
    private static final String RETRY_DOWNLOAD = "retry_download";
    private static final String SEE_MORE_CTA = "see more";
    private static final String SEE_MORE_DOWNLOAD = "com.oculus.systemux.download.SEE_MORE";
    private static final String SYSTEM_UX_SETTINGS_ENVIRONMENT_URI = "/environment";
    private static final String TAG = "com.oculus.appmanager.installer.notification.InstallerNotificationManager";
    private static volatile InstallerNotificationManager _UL__ULSEP_com_oculus_appmanager_installer_notification_InstallerNotificationManager_ULSEP_INSTANCE;
    private InjectionContext _UL_mInjectionContext;
    @Inject
    @Eager
    private final InstallerNotificationsContract mInstallerNotificationsContract;
    private final boolean mIsStandaloneDevice;
    private final HashMap<String, Bitmap> mNotificationIcons = new HashMap<>();
    private final HashMap<String, Long> mOriginalPostTimes = new HashMap<>();
    @Inject
    @Eager
    @ForUiThread
    private final Handler mUiHandler;
    private final List<String> recentlyStartedDownloads = new ArrayList();

    /* access modifiers changed from: package-private */
    public enum InstallState {
        DOWNLOADING,
        DOWNLOAD_FAIL,
        INSTALLING,
        INSTALL_FAIL,
        COMPLETED,
        CANCELED
    }

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_appmanager_installer_notification_InstallerNotificationManager_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(InstallerNotificationsModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_notification_InstallerNotificationManager_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final InstallerNotificationManager _UL__ULSEP_com_oculus_appmanager_installer_notification_InstallerNotificationManager_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (InstallerNotificationManager) UL.factorymap.get(InstallerNotificationsModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_notification_InstallerNotificationManager_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final InstallerNotificationManager _UL__ULSEP_com_oculus_appmanager_installer_notification_InstallerNotificationManager_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_appmanager_installer_notification_InstallerNotificationManager_ULSEP_INSTANCE == null) {
            synchronized (InstallerNotificationManager.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_appmanager_installer_notification_InstallerNotificationManager_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        InjectorLike applicationInjector = injectorLike.getApplicationInjector();
                        _UL__ULSEP_com_oculus_appmanager_installer_notification_InstallerNotificationManager_ULSEP_INSTANCE = new InstallerNotificationManager(applicationInjector, DeviceUtils._UL__ULSEP_com_oculus_util_device_DeviceUtils_ULSEP_ACCESS_METHOD(applicationInjector));
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_appmanager_installer_notification_InstallerNotificationManager_ULSEP_INSTANCE;
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_appmanager_installer_notification_InstallerNotificationManager_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(InstallerNotificationsModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_notification_InstallerNotificationManager_ULSEP_BINDING_ID, injectorLike);
    }

    static class State {
        public final InstallState installState;
        public boolean isNotificationPrepared = false;
        public final boolean isUpdate;

        public State(InstallState installState2, boolean z) {
            this.installState = installState2;
            this.isUpdate = z;
        }
    }

    @Inject
    public InstallerNotificationManager(InjectorLike injectorLike, DeviceUtils deviceUtils) {
        this._UL_mInjectionContext = new InjectionContext(3, injectorLike);
        this.mUiHandler = ExecutorsModule._UL__ULSEP_android_os_Handler_ULSEP_com_oculus_executors_ForUiThread_ULSEP_ACCESS_METHOD(injectorLike);
        this.mInstallerNotificationsContract = InstallerNotificationsContract._UL__ULSEP_com_oculus_appmanager_installer_notification_contract_InstallerNotificationsContract_ULSEP_ACCESS_METHOD(injectorLike);
        this.mIsStandaloneDevice = deviceUtils.isStandAloneDevice();
    }

    /* access modifiers changed from: package-private */
    public void setDownloading(String str) {
        this.recentlyStartedDownloads.add(str);
    }

    /* access modifiers changed from: package-private */
    public void setDownloadFailure(String str) {
        final App app = ((OVRLibrary) FbInjector.lazyInstance(1, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getApp(str);
        if (app == null) {
            BLog.w(TAG, "Unable to find library app for %s", str);
            return;
        }
        this.mUiHandler.post(new Runnable() {
            /* class com.oculus.appmanager.installer.notification.InstallerNotificationManager.AnonymousClass1 */

            public void run() {
                Toast.makeText((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, InstallerNotificationManager.this._UL_mInjectionContext), ((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, InstallerNotificationManager.this._UL_mInjectionContext)).getString(R.string.notifications_download_failed_message, app.displayName), 1).show();
            }
        });
    }

    /* access modifiers changed from: package-private */
    public void setInstallFailure(String str) {
        final App app = ((OVRLibrary) FbInjector.lazyInstance(1, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getApp(str);
        if (app == null) {
            BLog.w(TAG, "Unable to find library app for %s", str);
            return;
        }
        this.mUiHandler.post(new Runnable() {
            /* class com.oculus.appmanager.installer.notification.InstallerNotificationManager.AnonymousClass2 */

            public void run() {
                Toast.makeText((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, InstallerNotificationManager.this._UL_mInjectionContext), ((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, InstallerNotificationManager.this._UL_mInjectionContext)).getString(R.string.notifications_install_failed_message, app.displayName), 1).show();
            }
        });
    }

    /* access modifiers changed from: package-private */
    @Nullable
    public Notification generateProgressNotification(String str, InstallState installState, int i) {
        int i2;
        PendingIntent pendingIntent;
        App app = ((OVRLibrary) FbInjector.lazyInstance(1, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getApp(str);
        if (app == null) {
            BLog.w(TAG, "Unable to find library app for %s", str);
            return null;
        }
        NotificationCompat.Builder builder = new NotificationCompat.Builder((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext));
        NotificationCompat.InboxStyle inboxStyle = new NotificationCompat.InboxStyle();
        if (this.mIsStandaloneDevice && this.mNotificationIcons.get(app.packageName) == null) {
            new FetchNotificationIconTask().execute(app);
        }
        Bundle bundle = new Bundle();
        if (installState == InstallState.DOWNLOADING) {
            int downloadProgress = setDownloadProgress(builder, app.downloadedSizeBytes, app.downloadSizeBytes, bundle);
            if (this.recentlyStartedDownloads.contains(app.packageName)) {
                this.recentlyStartedDownloads.remove(app.packageName);
            }
            i2 = downloadProgress;
        } else {
            if (installState == InstallState.INSTALLING) {
                builder.setProgress(1, 0, true);
            }
            i2 = 0;
        }
        String populateIntentAndStyle = populateIntentAndStyle(installState, app.displayName, inboxStyle, i2, builder, app.packageName, i);
        String decideReferrer = decideReferrer(installState);
        Intent intent = new Intent();
        if (this.mIsStandaloneDevice) {
            setIntentForStandalone(intent, app.packageName);
            pendingIntent = PendingIntent.getBroadcast((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext), i, intent, 134217728);
        } else {
            setIntentForNonStandalone(intent, app.packageName, decideReferrer);
            pendingIntent = PendingIntent.getActivity((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext), 20000, intent, 1073741824);
        }
        if (this.mIsStandaloneDevice) {
            addNotificationExtras(bundle, installState, app.packageName);
        }
        builder.addExtras(bundle);
        return buildNotification(builder, populateIntentAndStyle, inboxStyle, pendingIntent, installState, app.packageName);
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private void updateBitmap(Bitmap bitmap, String str) {
        BLog.d(TAG, "Fetched icon for notification %s.", str);
        this.mNotificationIcons.put(str, bitmap);
    }

    private String populateIntentAndStyle(InstallState installState, String str, NotificationCompat.InboxStyle inboxStyle, int i, NotificationCompat.Builder builder, String str2, int i2) {
        switch (installState) {
            case DOWNLOADING:
                inboxStyle.addLine(((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getString(R.string.notifications_progress_of_download_message, Integer.valueOf(i)));
                addSeeMoreActionIfStandalone(builder, str2, i2);
                addInteractiveDownloadActionIfStandalone(builder, str2, i2, CANCEL_DOWNLOAD, CANCEL_CTA);
                return ((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getString(R.string.notifications_download_in_progress_message, str);
            case INSTALLING:
                addSeeMoreActionIfStandalone(builder, str2, i2);
                if (this.mIsStandaloneDevice) {
                    inboxStyle.addLine(str);
                    return ((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getString(R.string.notifications_head_installing_message);
                }
                return ((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getString(R.string.notifications_install_in_progress_message, str);
            case DOWNLOAD_FAIL:
                addInteractiveDownloadActionIfStandalone(builder, str2, i2, RETRY_DOWNLOAD, RETRY_CTA);
                if (this.mIsStandaloneDevice) {
                    inboxStyle.addLine(str);
                    return ((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getString(R.string.notifications_download_failed_title);
                }
                return ((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getString(R.string.notifications_download_failed_message, str);
            case CANCELED:
                addSeeMoreActionIfStandalone(builder, str2, i2);
                addInteractiveDownloadActionIfStandalone(builder, str2, i2, RETRY_DOWNLOAD, RETRY_CTA);
                if (this.mIsStandaloneDevice) {
                    inboxStyle.addLine(str);
                    return ((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getString(R.string.notifications_download_canceled_title);
                }
                return ((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getString(R.string.notifications_download_canceled_message, str);
            case INSTALL_FAIL:
                addInteractiveDownloadActionIfStandalone(builder, str2, i2, RETRY_DOWNLOAD, RETRY_CTA);
                if (this.mIsStandaloneDevice) {
                    inboxStyle.addLine(str);
                    return ((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getString(R.string.notifications_head_install_failed_message);
                }
                return ((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getString(R.string.notifications_install_failed_message, str);
            case COMPLETED:
                if (((OVRLibrary) FbInjector.lazyInstance(1, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getApp(str2).category != Category.ENVIRONMENTS) {
                    addInteractiveDownloadActionIfStandalone(builder, str2, i2, LAUNCH_DOWNLOAD, LAUNCH_CTA);
                }
                if (this.mIsStandaloneDevice) {
                    inboxStyle.addLine(str);
                    return ((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getString(R.string.notifications_head_installed_message);
                }
                return ((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getString(R.string.notifications_install_succeeded_message, str);
            default:
                return ((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getString(R.string.notifications_downloading_and_installing_apps);
        }
    }

    private void addInteractiveDownloadActionIfStandalone(NotificationCompat.Builder builder, String str, int i, String str2, String str3) {
        if (this.mIsStandaloneDevice) {
            Intent intent = new Intent();
            intent.setAction(str2);
            Bundle bundle = new Bundle();
            if (str2.equals(LAUNCH_DOWNLOAD)) {
                intent.setPackage("com.oculus.systemux");
                bundle.putString(Constants.EXTRA_INTENT_DATA, str);
            } else {
                intent.setPackage("com.oculus.vrshell.home");
                bundle.putString("package_name", str);
            }
            intent.putExtras(bundle);
            try {
                CallerInfoHelper.attachCallerInfo(intent, (Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext), InstallerNotificationManager.class.getSimpleName() + "::addInteractiveDownloadActionIfStandalone()");
                builder.addAction(NOTIFICATION_ICON_STANDALONE, str3, PendingIntent.getBroadcast((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext), i, intent, 134217728));
            } catch (CannotAttachCallerInfoException e) {
                BLog.e(TAG, "Error sending interactive download action intent.", e);
            }
        }
    }

    private void addSeeMoreActionIfStandalone(NotificationCompat.Builder builder, String str, int i) {
        if (this.mIsStandaloneDevice) {
            Intent intent = new Intent();
            setIntentForStandalone(intent, str);
            builder.addAction(NOTIFICATION_ICON_STANDALONE, SEE_MORE_CTA, PendingIntent.getBroadcast((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext), i, intent, 134217728));
        }
    }

    private void addNotificationExtras(Bundle bundle, InstallState installState, String str) {
        bundle.putBoolean(EXTRA_IS_DOWNLOAD, true);
        if (installState == InstallState.DOWNLOADING || installState == InstallState.INSTALLING) {
            bundle.putBoolean(EXTRA_DISMISS_FLAG, true);
        }
        if (installState == InstallState.DOWNLOADING) {
            bundle.putBoolean(EXTRA_DOWNLOAD_IN_PROGRESS, true);
        } else if (installState == InstallState.INSTALLING) {
            bundle.putBoolean(EXTRA_INSTALL_IN_PROGRESS, true);
        }
        if (this.mIsStandaloneDevice) {
            bundle.putBoolean(Constants.EXTRA_VRSHELL_AUI_PERSIST, true);
            bundle.putLong(EXTRA_ORIGINAL_POST_TIME, getOriginalPostTime(str));
            bundle.putBoolean(EXTRA_SHOW_TITLE_IN_TOAST, true);
        }
    }

    private long getOriginalPostTime(String str) {
        Long l = this.mOriginalPostTimes.get(str);
        if (l == null) {
            l = Long.valueOf(((Clock) FbInjector.lazyInstance(2, TimeModule.UL_id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID, this._UL_mInjectionContext)).now());
            this.mOriginalPostTimes.put(str, l);
        }
        return l.longValue();
    }

    private static int setDownloadProgress(NotificationCompat.Builder builder, long j, long j2, Bundle bundle) {
        while (j2 > 2147483647L) {
            j2 /= 1000;
            j /= 1000;
        }
        builder.setProgress((int) j2, (int) j, false);
        if (j2 == 0 || j == 0) {
            return 0;
        }
        bundle.putFloat(EXTRA_PROGRESS_BAR_RATIO, ((float) j) / ((float) j2));
        double d = (double) j;
        double d2 = (double) j2;
        Double.isNaN(d);
        Double.isNaN(d2);
        return (int) ((d / d2) * 100.0d);
    }

    private void setIntentForStandalone(Intent intent, String str) {
        intent.setPackage("com.oculus.systemux");
        intent.setAction(SEE_MORE_DOWNLOAD);
        App app = ((OVRLibrary) FbInjector.lazyInstance(1, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getApp(str);
        if (app.category == Category.ENVIRONMENTS) {
            intent.putExtra(Constants.EXTRA_INTENT_DATA, SystemUXRoute.SETTINGS.path());
            intent.putExtra("uri", SYSTEM_UX_SETTINGS_ENVIRONMENT_URI);
        } else if (DeviceType.current() == DeviceType.Monterey && app.platform == SupportedPlatform.ANDROID) {
            intent.putExtra(Constants.EXTRA_INTENT_DATA, SystemUXRoute.LIBRARY.path());
            intent.putExtra("uri", "/installed/ANDROID");
        } else {
            intent.putExtra(Constants.EXTRA_INTENT_DATA, SystemUXRoute.STORE.path());
            intent.putExtra("uri", "/item/" + app.id);
        }
        intent.putExtra(EXTRA_BLACKSCREEN, false);
    }

    private void setIntentForNonStandalone(Intent intent, String str, String str2) {
        intent.setPackage("com.oculus.horizon");
        intent.setData(buildDeepLinkUriForPackage(str, str2));
    }

    private static String decideReferrer(InstallState installState) {
        switch (installState) {
            case DOWNLOADING:
                return REFERRER_DOWNLOAD_IN_PROGRESS;
            case INSTALLING:
                return REFERRER_INSTALL_IN_PROGRESS;
            case DOWNLOAD_FAIL:
            case CANCELED:
                return REFERRER_DOWNLOAD_FAIL;
            case INSTALL_FAIL:
                return REFERRER_INSTALL_FAIL;
            case COMPLETED:
                return REFERRER_INSTALL_SUCCESS;
            default:
                BLog.w(TAG, "Undetermined state when trying to decide referrer.");
                return REFERRER_DOWNLOAD_IN_PROGRESS;
        }
    }

    public void onDownloadTerminated(String str) {
        BLog.d(TAG, "Download for package %s terminated", str);
        this.mOriginalPostTimes.remove(str);
        this.mNotificationIcons.remove(str);
    }

    private Notification buildNotification(NotificationCompat.Builder builder, String str, NotificationCompat.Style style, PendingIntent pendingIntent, @Nullable InstallState installState, String str2) {
        builder.setSmallIcon(this.mIsStandaloneDevice ? NOTIFICATION_ICON_STANDALONE : NOTIFICATION_ICON).setTicker(str).setContentTitle(str).setStyle(style).setContentIntent(pendingIntent).setAutoCancel(true);
        if (installState != null) {
            builder.setDeleteIntent(buildPendingIntentForDismissAction(installState));
        }
        Bitmap bitmap = this.mNotificationIcons.get(str2);
        if (bitmap != null) {
            builder.setLargeIcon(bitmap);
        }
        return builder.build();
    }

    private Uri buildDeepLinkUriForPackage(String str, String str2) {
        return buildDeepLinkForEntitledItem(str, ((OVRLibrary) FbInjector.lazyInstance(1, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getApp(str).id, str2);
    }

    private Uri buildDeepLinkForEntitledItem(String str, String str2, String str3) {
        if (((OVRLibrary) FbInjector.lazyInstance(1, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getApp(str) == null) {
            return DEFAULT_URI;
        }
        return new Uri.Builder().scheme("oculus.store").authority(ServiceContract.FOLLOW_UP_LINK).appendPath("products").appendQueryParameter("item_id", str2).appendQueryParameter("referrer", str3).build();
    }

    private PendingIntent buildPendingIntentForDismissAction(InstallState installState) {
        return PendingIntent.getService((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext), 0, this.mInstallerNotificationsContract.generateDismissIntent(installState), 1073741824);
    }

    private class FetchNotificationIconTask extends AsyncTask<App, Void, Bitmap> {
        String packageName;

        private FetchNotificationIconTask() {
        }

        /* access modifiers changed from: protected */
        public Bitmap doInBackground(App... appArr) {
            if (appArr.length != 1) {
                return null;
            }
            this.packageName = appArr[0].packageName;
            try {
                Image image = appArr[0].images.get(Image.ImageName.SOURCE_SQUARE);
                if (image == null) {
                    BLog.w(InstallerNotificationManager.TAG, "No image found for package name %s.", this.packageName);
                    return null;
                }
                Bitmap decodeStream = BitmapFactory.decodeStream(new URL(image.uri).openConnection().getInputStream());
                if (decodeStream != null) {
                    return Bitmap.createScaledBitmap(decodeStream, 60, 60, false);
                }
                BLog.w(InstallerNotificationManager.TAG, "Unable to decode image to bitmap for %s.", this.packageName);
                return null;
            } catch (IOException e) {
                BLog.w(InstallerNotificationManager.TAG, "Unable to fetch notification icon for %s.", this.packageName, e);
                return null;
            }
        }

        /* access modifiers changed from: protected */
        public void onPostExecute(Bitmap bitmap) {
            if (bitmap != null) {
                InstallerNotificationManager.this.updateBitmap(bitmap, this.packageName);
            }
        }
    }
}
