package com.oculus.appmanager.installer.notification;

import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Eager;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.oculus.appmanager.info.ApkUpdateInfo;
import com.oculus.appmanager.info.InfoUtils;
import com.oculus.appmanager.info.model.RequestOrigin;
import com.oculus.appmanager.installer.events.DownloadResponse;
import com.oculus.appmanager.installer.events.InstallResponse;
import com.oculus.appmanager.installer.notification.InstallerNotificationsModule;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID"})
public class NotificationEligibility {
    @Inject
    @Eager
    private final InfoUtils mInfoUtils;

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_appmanager_installer_notification_NotificationEligibility_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(InstallerNotificationsModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_notification_NotificationEligibility_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final NotificationEligibility _UL__ULSEP_com_oculus_appmanager_installer_notification_NotificationEligibility_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (NotificationEligibility) UL.factorymap.get(InstallerNotificationsModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_notification_NotificationEligibility_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final NotificationEligibility _UL__ULSEP_com_oculus_appmanager_installer_notification_NotificationEligibility_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new NotificationEligibility(injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_appmanager_installer_notification_NotificationEligibility_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(InstallerNotificationsModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_notification_NotificationEligibility_ULSEP_BINDING_ID, injectorLike);
    }

    @Inject
    public NotificationEligibility(InjectorLike injectorLike) {
        this.mInfoUtils = InfoUtils._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_ACCESS_METHOD(injectorLike);
    }

    public boolean shouldShowNotification(DownloadResponse downloadResponse) {
        return shouldShowNotification(downloadResponse.updateId);
    }

    public boolean shouldShowNotification(InstallResponse installResponse) {
        return shouldShowNotification(installResponse.updateId);
    }

    public boolean shouldShowNotification(long j) {
        if (j == -1) {
            return true;
        }
        ApkUpdateInfo update = this.mInfoUtils.getUpdate(j);
        if (update == null || !shouldShowNotification(update)) {
            return false;
        }
        return true;
    }

    public boolean shouldShowNotification(ApkUpdateInfo apkUpdateInfo) {
        if (!this.mInfoUtils.getRootUpdate(apkUpdateInfo).updateType.isAsset() && apkUpdateInfo.requestOrigin != RequestOrigin.PACIFIC_SETUP) {
            return apkUpdateInfo.updateType.isFromStore();
        }
        return false;
    }
}
