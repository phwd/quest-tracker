package com.oculus.appmanager.installer.analytics;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.text.TextUtils;
import com.facebook.common.util.exception.ExceptionUtil;
import com.facebook.debug.log.BLog;
import com.facebook.debug.log.LoggingUtil;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightSingletonProvider;
import com.facebook.quicklog.identifiers.PerformanceEventFields;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Eager;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.google.common.base.MoreObjects;
import com.google.common.base.Preconditions;
import com.oculus.appmanager.downloader.progress.OculusDownloadProgressTracker;
import com.oculus.appmanager.info.ApkUpdateInfo;
import com.oculus.appmanager.info.ApkUpdateInfoContract;
import com.oculus.appmanager.info.InfoUtils;
import com.oculus.appmanager.info.model.RequestOrigin;
import com.oculus.appmanager.installer.analytics.AnalyticsModule;
import com.oculus.common.build.BuildConstants;
import com.oculus.common.packagescache.PackageManagerUtils;
import com.oculus.common.packagescache.PackagesCacheModule;
import com.oculus.debug.DebugMode;
import com.oculus.library.database.contract.LibraryDBContract;
import com.oculus.logging.utils.Event;
import com.oculus.logging.utils.EventManager;
import com.oculus.logging.utils.FunnelData;
import com.oculus.logging.utils.UtilsModule;
import com.oculus.util.network.NetworkUtils;
import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.TimeUnit;
import javax.annotation.Nullable;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_common_packagescache_PackageManagerUtils_ULSEP_BINDING_ID", "_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_debug_DebugMode_ULSEP_BINDING_ID"})
@ApplicationScoped
public class InstallerAnalytics {
    public static final String ACTION_APPMANAGER_VR_ENABLE_FAILURE = "appmanager_enable_vr_failure";
    public static final String ACTION_CANCELED = "cancelled";
    public static final String ACTION_CONSISTENCY_DOWNLOADED_TIMEOUT = "downloaded_timeout";
    public static final String ACTION_CONSISTENCY_DOWNLOAD_TIMEOUT = "download_timeout";
    public static final String ACTION_CONSISTENCY_INSTALL_TIMEOUT = "install_timeout";
    public static final String ACTION_CONSISTENCY_VERIFIED_TIMEOUT = "verified_timeout";
    public static final String ACTION_CONSISTENCY_VERIFYING_TIMEOUT = "verifying_timeout";
    public static final String ACTION_DOWNLOAD = "download";
    public static final String ACTION_DOWNLOADED_FILE_NOT_FOUND = "downloaded_file_not_found";
    public static final String ACTION_DOWNLOADMANAGER_DISABLED = "downloadmanager_disabled";
    public static final String ACTION_DOWNLOAD_CONFIG_FAILED = "download_config_failed";
    public static final String ACTION_DOWNLOAD_FAILURE = "download_failure";
    public static final String ACTION_DOWNLOAD_FAILURE_CANNOT_RESUME = "download_fail_cant_resume";
    public static final String ACTION_DOWNLOAD_FAILURE_CANT_START_INSTALLER_SERVICE = "download_fail_cant_start_installer";
    public static final String ACTION_DOWNLOAD_FAILURE_DOWNLOAD_CANCELED = "download_fail_user_canceled";
    public static final String ACTION_DOWNLOAD_FAILURE_DOWNLOAD_INFO_GENERATION = "download_fail_downloadinfo_generation";
    public static final String ACTION_DOWNLOAD_FAILURE_FILE_ERROR = "download_fail_file_error";
    public static final String ACTION_DOWNLOAD_FAILURE_FILE_EXISTS = "download_fail_file_exists";
    public static final String ACTION_DOWNLOAD_FAILURE_HTTP_ERROR = "download_fail_http_error";
    public static final String ACTION_DOWNLOAD_FAILURE_INSUFFICIENT_SPACE = "download_fail_insufficient_space";
    public static final String ACTION_DOWNLOAD_FAILURE_IO_EXCEPTION_DURING_RENAME = "download_fail_rename_io_exception";
    public static final String ACTION_DOWNLOAD_FAILURE_NO_EXTERNAL_STORAGE = "download_fail_no_external_storage";
    public static final String ACTION_DOWNLOAD_FAILURE_TOO_MANY_REDIRECTS = "download_fail_too_many_redirects";
    public static final String ACTION_DOWNLOAD_FAILURE_UNHANDLED_HTTP = "download_fail_unhandled_http";
    public static final String ACTION_DOWNLOAD_FAILURE_UNKNOWN = "download_fail_unknown";
    public static final String ACTION_DOWNLOAD_FAILURE_VR_SIGN = "download_fail_not_vr_signed";
    public static final String ACTION_DOWNLOAD_PREP_FAILURE = "download_prep_failure";
    public static final String ACTION_INSTALL = "install";
    public static final String ACTION_INSTALL_ASSET = "asset_install";
    public static final String ACTION_INSTALL_FAILURE = "install_failure";
    public static final String ACTION_INSTALL_SUCCESS = "install_success";
    public static final String ACTION_PACKAGE_CHANGE_BEFORE_VERIFICATION = "update_fail_base_version_changed";
    public static final String ACTION_REQUEST_ORIGIN = "request_origin_";
    public static final String ACTION_SIGNATURE_VERIFICATION_FAILURE = "verify_signature_failure";
    public static final String ACTION_UNINSTALL = "uninstall";
    public static final String ACTION_UNINSTALL_FAILURE = "uninstall_failure";
    public static final String ACTION_UNINSTALL_SUCCESS = "uninstall_success";
    public static final String ACTION_VERIFICATION = "verify";
    public static final String ACTION_VERIFICATION_FAILURE = "verify_failure";
    public static final String EVENT_BOOT_CLEAN_LINGERING_FILES = "moonlight_boot_clean_lingering_files";
    public static final String EVENT_CONSISTENCY_CHECK_STARTED = "moonlight_consistency_check_started";
    public static final String EVENT_DOWNLOAD_CANCELLED = "moonlight_download_cancelled";
    public static final String EVENT_DOWNLOAD_FAILED = "moonlight_download_failed";
    public static final String EVENT_DOWNLOAD_QUEUED = "moonlight_download_queued";
    public static final String EVENT_DOWNLOAD_SCHEDULED = "moonlight_download_scheduled";
    public static final String EVENT_DOWNLOAD_SUCCEEDED = "moonlight_download_succeeded";
    public static final String EVENT_FINAL_UPDATE_STATE = "moonlight_final_update_state";
    public static final String EVENT_INSTALLER_DELETE_FAILED = "moonlight_installer_delete_failed";
    public static final String EVENT_INSTALL_ASSET_REQUESTED = "moonlight_install_asset_request";
    public static final String EVENT_INSTALL_ASSET_STARTED = "moonlight_install_asset_started";
    public static final String EVENT_INSTALL_ASSET_SUCCEEDED = "moonlight_install_asset_succeeded";
    public static final String EVENT_INSTALL_CANCELLED = "moonlight_install_cancelled";
    public static final String EVENT_INSTALL_FAILED = "moonlight_install_failed";
    public static final String EVENT_INSTALL_RECOVERY_FAILURE = "moonlight_recovery_failure";
    public static final String EVENT_INSTALL_REQUESTED = "moonlight_install_request";
    public static final String EVENT_INSTALL_RETRIED = "moonlight_install_retried";
    public static final String EVENT_INSTALL_STARTED = "moonlight_install_started";
    public static final String EVENT_INSTALL_SUCCEEDED = "moonlight_install_succeeded";
    public static final String EVENT_SIGNATURE_VERIFICATION_FAILED = "moonlight_signature_verification_failed";
    public static final String EVENT_UNINSTALL_FAILED = "moonlight_uninstall_failed";
    public static final String EVENT_UNINSTALL_STARTED = "moonlight_uninstall_started";
    public static final String EVENT_UNINSTALL_SUCCEEDED = "moonlight_uninstall_succeeded";
    public static final String EVENT_VERIFICATION_FAILED = "moonlight_verification_failed";
    public static final String EVENT_VERIFICATION_SUCCEEDED = "moonlight_verification_succeeded";
    private static final String EXTRA_ACTUAL_VERSION = "actual_version";
    private static final String EXTRA_EXPECTED_SIGNATURE = "expected_signature";
    private static final String EXTRA_EXPECTED_VERSION = "expected_version";
    private static final String EXTRA_PACKAGE_NAME = "package_name";
    public static final String INSTALL_FUNNEL_NAME = "OC_INSTALL_FUNNEL";
    private static final String TAG = "InstallerAnalytics";
    private static volatile InstallerAnalytics _UL__ULSEP_com_oculus_appmanager_installer_analytics_InstallerAnalytics_ULSEP_INSTANCE;
    private InjectionContext _UL_mInjectionContext;
    @Inject
    @Eager
    private final DebugMode mDebugMode;
    @Inject
    @Eager
    private final InfoUtils mInfoUtils;

    /* access modifiers changed from: private */
    public enum InstallType {
        FULL,
        PATCH,
        MIXED
    }

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_appmanager_installer_analytics_InstallerAnalytics_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(AnalyticsModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_analytics_InstallerAnalytics_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final InstallerAnalytics _UL__ULSEP_com_oculus_appmanager_installer_analytics_InstallerAnalytics_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (InstallerAnalytics) UL.factorymap.get(AnalyticsModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_analytics_InstallerAnalytics_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final InstallerAnalytics _UL__ULSEP_com_oculus_appmanager_installer_analytics_InstallerAnalytics_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_appmanager_installer_analytics_InstallerAnalytics_ULSEP_INSTANCE == null) {
            synchronized (InstallerAnalytics.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_appmanager_installer_analytics_InstallerAnalytics_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        _UL__ULSEP_com_oculus_appmanager_installer_analytics_InstallerAnalytics_ULSEP_INSTANCE = new InstallerAnalytics(injectorLike.getApplicationInjector());
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_appmanager_installer_analytics_InstallerAnalytics_ULSEP_INSTANCE;
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_appmanager_installer_analytics_InstallerAnalytics_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(AnalyticsModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_analytics_InstallerAnalytics_ULSEP_BINDING_ID, injectorLike);
    }

    private static abstract class Extras {
        private static final String APK_PAYLOAD_SIZE = "apk_payload_size";
        private static final String APK_SIZE = "apk_size";
        public static final String APP_FROM_VERSION_CODE = "app_from_version_code";
        private static final String ASSETS_NAMES = "assets_names";
        private static final String ASSETS_PRESENT = "assets_present";
        private static final String ASSETS_REQUIRED = "assets_required";
        private static final String ASSETS_SIZE = "assets_size";
        public static final String BASE_VERSION = "base_version";
        public static final String DEPENDENCIES = "dependencies_count";
        public static final String DOWNLOAD_CONNECTION_IS_ROAMING = "download_connection_is_roaming";
        public static final String DOWNLOAD_CONNECTION_SPEED = "download_connection_speed";
        public static final String DOWNLOAD_CONNECTION_TYPE = "download_connection_type";
        private static final String DOWNLOAD_DURTATION_MS = "download_duration_ms";
        public static final String DOWNLOAD_ID = "download_id";
        private static final String DOWNLOAD_PENDING_DURATION_SECONDS = "download_pending_duration_s";
        public static final String DOWNLOAD_REASON = "download_reason";
        private static final String DOWNLOAD_RUNNING_DURATION_SECONDS = "download_running_duration_s";
        private static final String DOWNLOAD_SCHEDULE_TIME_MS = "download_schedule_time_ms";
        private static final String DOWNLOAD_START_TIME_MS = "download_start_time_ms";
        public static final String DOWNLOAD_STATUS = "download_status";
        public static final String DOWNLOAD_URI = "download_uri";
        private static final String DURATION_MS = "duration_ms";
        public static final String ERROR_CODE = "error_code";
        public static final String EXPECTED_SIGNATURE = "expected_signature";
        public static final String FAILED_CATEGORY = "failed_category";
        public static final String FAILED_DESCRIPTION = "failed_description";
        public static final String FAILED_STATE = "failed_state";
        public static final String FAILURE_CODE = "failure_code";
        private static final String FILES_LIST = "file_list";
        private static final String FILE_PATH = "file_path";
        public static final String FOUND_SIGNATURE = "found_signature";
        public static final String HAS_PARENT = "has_parent_update";
        public static final String IDENTIFIER = "install_identifier";
        private static final String INSTALL_RECOVERY_EXCEPTION = "recovery_exception";
        private static final String INSTALL_TYPE = "install_type";
        public static final String IS_RETRY = "is_retry";
        public static final String IS_TRANSITIVE_FAILURE = "is_transitive_failure";
        public static final String IS_UPDATE = "is_update";
        public static final String ITEM_ID = "item_id";
        private static final String OBB_PRESENT = "obb_present";
        private static final String OBB_SIZE = "obb_size";
        public static final String PACKAGE_NAME = "package_name";
        private static final String PATCHING_DURATION_MS = "patching_duration_ms";
        public static final String PATH = "path";
        public static final String REQUESTING_PKG = "requesting_package";
        public static final String REQUEST_ORIGIN = "request_origin";
        public static final String STACK_TRACE = "stack_trace";
        public static final String TARGET_VERSION = "target_version";
        private static final String TOTAL_DOWNLOAD_SIZE = "total_download_size_bytes";
        private static final String TOTAL_PAYLOAD_SIZE = "total_payload_size_bytes";
        public static final String UPDATE_STATE = "state";
        public static final String UPDATE_STATE_TIMESTAMP = "state_timestamp";
        public static final String UPDATE_TYPE = "update_type";
        public static final String UUID = "uuid";
        private static final String VERIFICATION_DURATION_MS = "verification_duration_ms";

        private Extras() {
        }
    }

    @Inject
    public InstallerAnalytics(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(3, injectorLike);
        this.mInfoUtils = InfoUtils._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_ACCESS_METHOD(injectorLike);
        this.mDebugMode = DebugMode._UL__ULSEP_com_oculus_debug_DebugMode_ULSEP_ACCESS_METHOD(injectorLike);
        ((EventManager) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).registerFunnel(INSTALL_FUNNEL_NAME, (int) TimeUnit.DAYS.toSeconds(1));
    }

    public Event appendUpdateInfoData(Event event, ApkUpdateInfo apkUpdateInfo) {
        ApkUpdateInfo.ApkUpdateExtras extras = apkUpdateInfo.getExtras();
        event.addExtra("uuid", this.mInfoUtils.getRootUpdate(apkUpdateInfo).getExtras().getUUID()).addExtra(Extras.BASE_VERSION, apkUpdateInfo.baseVersion).addExtra(Extras.TARGET_VERSION, apkUpdateInfo.targetVersion).addExtra("is_update", apkUpdateInfo.isUpdate).addExtra("item_id", (String) MoreObjects.firstNonNull(apkUpdateInfo.storeItemId, LoggingUtil.NO_HASHCODE)).addExtra("package_name", (String) MoreObjects.firstNonNull(apkUpdateInfo.getPackageName(), LoggingUtil.NO_HASHCODE)).addExtra(Extras.IDENTIFIER, apkUpdateInfo.identifier).addExtra(Extras.UPDATE_TYPE, apkUpdateInfo.updateType.name()).addExtra(Extras.REQUESTING_PKG, (String) MoreObjects.firstNonNull(apkUpdateInfo.requestingPackage, LoggingUtil.NO_HASHCODE)).addExtra(Extras.REQUEST_ORIGIN, apkUpdateInfo.requestOrigin.name()).addExtra(Extras.DEPENDENCIES, this.mInfoUtils.getDependencies(apkUpdateInfo).size());
        boolean z = true;
        Event addExtra = event.addExtra("state", apkUpdateInfo.getState().name()).addExtra(Extras.UPDATE_STATE_TIMESTAMP, extras.getStateTimestamp()).addExtra(Extras.HAS_PARENT, extras.getDependentStartedBy() != -1);
        if (extras.getRetryOf() == -1) {
            z = false;
        }
        addExtra.addExtra(Extras.IS_RETRY, z);
        if (extras.hasKey("failed_state")) {
            event.addExtra("failed_state", extras.getFailedState().name());
        }
        if (extras.hasKey("failed_category")) {
            event.addExtra("failed_category", extras.getFailedCategory());
        }
        if (extras.hasKey(ApkUpdateInfoContract.EXTRA_FAILED_DESCR)) {
            event.addExtra(Extras.FAILED_DESCRIPTION, extras.getFailedDescription());
        }
        if (extras.hasKey(ApkUpdateInfoContract.EXTRA_TRANSITIVE_FAILURE)) {
            event.addExtra(Extras.IS_TRANSITIVE_FAILURE, extras.isTransitiveFailure());
        }
        if (extras.hasKey("stack_trace")) {
            event.addExtra("stack_trace", extras.getStackTrace());
        }
        if (extras.hasKey("failure_code")) {
            event.addExtra("failure_code", extras.getFailureCode());
        }
        if (extras.hasKey("error_code")) {
            event.addExtra("error_code", extras.getErrorCode());
        }
        return event;
    }

    private Event appendUpdateInfoCollectionData(Event event, InfoUtils.UpdateInfoCollection updateInfoCollection) {
        ArrayList arrayList = new ArrayList();
        boolean z = false;
        long j = 0;
        long j2 = 0;
        int i = 0;
        for (ApkUpdateInfo apkUpdateInfo : updateInfoCollection.assets) {
            arrayList.add(apkUpdateInfo.getExtras().getAssetRequiredFilename());
            j2 += apkUpdateInfo.downloadSize;
            if (apkUpdateInfo.getExtras().isRequiredAsset()) {
                i++;
            }
        }
        appendUpdateInfoData(event, updateInfoCollection.apk);
        Event addExtra = event.addExtra("uuid", updateInfoCollection.apk.getExtras().getUUID());
        if (updateInfoCollection.obb != null) {
            z = true;
        }
        Event addExtra2 = addExtra.addExtra("obb_present", z).addExtra("assets_present", updateInfoCollection.assets.size()).addExtra("apk_size", updateInfoCollection.apk.downloadSize);
        if (updateInfoCollection.obb != null) {
            j = updateInfoCollection.obb.downloadSize;
        }
        addExtra2.addExtra("obb_size", j).addExtra("assets_size", j2).addExtra("assets_required", i).addExtra("assets_names", TextUtils.join(",", arrayList));
        return event;
    }

    private Event appendInstallationCompletionData(Event event, InfoUtils.UpdateInfoCollection updateInfoCollection) {
        long j;
        long installationDurationMs = updateInfoCollection.apk.getExtras().getInstallationDurationMs();
        long j2 = updateInfoCollection.apk.downloadSize;
        long updatePayloadSize = updateInfoCollection.apk.getExtras().getUpdatePayloadSize();
        long verificationDurationMs = updateInfoCollection.apk.getExtras().getVerificationDurationMs();
        long millis = TimeUnit.SECONDS.toMillis(updateInfoCollection.apk.getExtras().getDownloadRunningDurationSec());
        boolean isPatchUpdate = updateInfoCollection.apk.updateType.isPatchUpdate();
        boolean isFullUpdate = updateInfoCollection.apk.updateType.isFullUpdate();
        long patchingDurationMs = updateInfoCollection.apk.getExtras().getPatchingDurationMs();
        long j3 = 0;
        if (patchingDurationMs != -1) {
            j3 = patchingDurationMs + 0;
        }
        if (updateInfoCollection.obb != null) {
            long max = Math.max(installationDurationMs, updateInfoCollection.obb.getExtras().getInstallationDurationMs());
            j2 += updateInfoCollection.obb.downloadSize;
            updatePayloadSize += updateInfoCollection.obb.getExtras().getUpdatePayloadSize();
            verificationDurationMs += updateInfoCollection.obb.getExtras().getVerificationDurationMs();
            j = max;
            millis += TimeUnit.SECONDS.toMillis(updateInfoCollection.obb.getExtras().getDownloadRunningDurationSec());
            isPatchUpdate |= updateInfoCollection.obb.updateType.isPatchUpdate();
            isFullUpdate |= updateInfoCollection.obb.updateType.isFullUpdate();
            long patchingDurationMs2 = updateInfoCollection.obb.getExtras().getPatchingDurationMs();
            if (patchingDurationMs2 != -1) {
                j3 = patchingDurationMs2;
            }
        } else {
            j = installationDurationMs;
        }
        long j4 = j3;
        boolean z = isFullUpdate;
        long j5 = verificationDurationMs;
        long j6 = millis;
        long j7 = updatePayloadSize;
        long j8 = j2;
        for (Iterator<ApkUpdateInfo> it = updateInfoCollection.assets.iterator(); it.hasNext(); it = it) {
            ApkUpdateInfo next = it.next();
            long max2 = Math.max(j, next.getExtras().getInstallationDurationMs());
            j8 += next.downloadSize;
            j7 += next.getExtras().getUpdatePayloadSize();
            j5 += next.getExtras().getVerificationDurationMs();
            j = max2;
            j6 += TimeUnit.SECONDS.toMillis(next.getExtras().getDownloadRunningDurationSec());
            isPatchUpdate |= next.updateType.isPatchUpdate();
            z |= next.updateType.isFullUpdate();
            long patchingDurationMs3 = next.getExtras().getPatchingDurationMs();
            if (patchingDurationMs3 != -1) {
                j4 = patchingDurationMs3;
            }
        }
        if (isPatchUpdate && z) {
            event.addExtra("install_type", InstallType.MIXED.name());
        } else if (isPatchUpdate) {
            event.addExtra("install_type", InstallType.PATCH.name());
        } else {
            event.addExtra("install_type", InstallType.FULL.name());
        }
        return event.addExtra(PerformanceEventFields.DURATION_MS, j).addExtra("total_download_size_bytes", j8).addExtra("total_payload_size_bytes", j7).addExtra("download_duration_ms", j6).addExtra("patching_duration_ms", j4).addExtra(ApkUpdateInfoContract.EXTRA_VERIFICATION_DURATION_MS, j5).addExtra("apk_payload_size", updateInfoCollection.apk.getExtras().getUpdatePayloadSize());
    }

    public void reportNewAssetInstallRequest(ApkUpdateInfo apkUpdateInfo) {
        appendUpdateInfoData(((EventManager) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent(EVENT_INSTALL_ASSET_REQUESTED), apkUpdateInfo).appendStorageInformation().addExtra("assets_size", apkUpdateInfo.downloadSize).addExtra("assets_names", apkUpdateInfo.getExtras().getAssetRequiredFilename()).logAndRelease();
    }

    public void reportNewInstallRequest(InfoUtils.UpdateInfoCollection updateInfoCollection) {
        appendUpdateInfoCollectionData(((EventManager) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent(EVENT_INSTALL_REQUESTED), updateInfoCollection).appendStorageInformation().logAndRelease();
    }

    public void reportConsistencyCheckStarted(ApkUpdateInfo apkUpdateInfo) {
        appendUpdateInfoData(((EventManager) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent(EVENT_CONSISTENCY_CHECK_STARTED), apkUpdateInfo).appendStorageInformation().logAndRelease();
    }

    public void reportInstallStarted(InfoUtils.UpdateInfoCollection updateInfoCollection) {
        Preconditions.checkArgument(updateInfoCollection.apk != null);
        Event createEvent = ((EventManager) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent(EVENT_INSTALL_STARTED);
        appendUpdateInfoCollectionData(createEvent, updateInfoCollection);
        appendUpdateInfoData(createEvent, updateInfoCollection.apk);
        createEvent.appendStorageInformation();
        createEvent.logAndRelease();
    }

    public void reportAssetInstallStarted(ApkUpdateInfo apkUpdateInfo) {
        appendUpdateInfoData(((EventManager) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent(EVENT_INSTALL_ASSET_STARTED), apkUpdateInfo).appendStorageInformation().logAndRelease();
    }

    public void reportInstallSuccess(InfoUtils.UpdateInfoCollection updateInfoCollection) {
        Preconditions.checkArgument(updateInfoCollection.apk != null);
        Event createEvent = ((EventManager) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent(EVENT_INSTALL_SUCCEEDED);
        appendInstallationCompletionData(createEvent, updateInfoCollection);
        appendUpdateInfoCollectionData(createEvent, updateInfoCollection);
        appendUpdateInfoData(createEvent, updateInfoCollection.apk).appendStorageInformation().logAndRelease();
    }

    public void reportInstallAssetSuccess(ApkUpdateInfo apkUpdateInfo) {
        appendUpdateInfoData(((EventManager) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent(EVENT_INSTALL_ASSET_SUCCEEDED), apkUpdateInfo).appendStorageInformation().addExtra(PerformanceEventFields.DURATION_MS, apkUpdateInfo.getExtras().getInstallationDurationMs()).logAndRelease();
    }

    public void reportInstallFailed(ApkUpdateInfo apkUpdateInfo) {
        ApkUpdateInfo.ApkUpdateExtras extras = apkUpdateInfo.getExtras();
        Event createEvent = ((EventManager) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent(EVENT_INSTALL_FAILED);
        appendUpdateInfoData(createEvent, apkUpdateInfo).appendStorageInformation().addExtra(Extras.APP_FROM_VERSION_CODE, ((PackageManagerUtils) FbInjector.lazyInstance(0, PackagesCacheModule.UL_id._UL__ULSEP_com_oculus_common_packagescache_PackageManagerUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getInstalledVersionCode(apkUpdateInfo.getPackageName(), LibraryDBContract.VERSION_NOT_INSTALLED)).addExtra(PerformanceEventFields.DURATION_MS, extras.getInstallationDurationMs()).logAndRelease();
    }

    public void reportUninstallFailed(ApkUpdateInfo apkUpdateInfo) {
        ApkUpdateInfo.ApkUpdateExtras extras = apkUpdateInfo.getExtras();
        Event createEvent = ((EventManager) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent(EVENT_UNINSTALL_FAILED);
        appendUpdateInfoData(createEvent, apkUpdateInfo).appendStorageInformation().addExtra(Extras.APP_FROM_VERSION_CODE, ((PackageManagerUtils) FbInjector.lazyInstance(0, PackagesCacheModule.UL_id._UL__ULSEP_com_oculus_common_packagescache_PackageManagerUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getInstalledVersionCode(apkUpdateInfo.getPackageName(), LibraryDBContract.VERSION_NOT_INSTALLED)).addExtra(PerformanceEventFields.DURATION_MS, extras.getInstallationDurationMs()).logAndRelease();
    }

    public void reportUninstallSuccess(ApkUpdateInfo apkUpdateInfo) {
        appendUpdateInfoData(((EventManager) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent(EVENT_UNINSTALL_SUCCEEDED), apkUpdateInfo).appendStorageInformation().addExtra(PerformanceEventFields.DURATION_MS, apkUpdateInfo.getExtras().getInstallationDurationMs()).logAndRelease();
    }

    public void reportInstallRecoveryFailed(ApkUpdateInfo apkUpdateInfo, Exception exc) {
        appendUpdateInfoData(((EventManager) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent(EVENT_INSTALL_RECOVERY_FAILURE), apkUpdateInfo).appendStorageInformation().addExtra("recovery_exception", ExceptionUtil.getStackTraceString(exc)).logAndRelease();
    }

    public void reportVerificationSuccess(ApkUpdateInfo apkUpdateInfo) {
        appendUpdateInfoData(((EventManager) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent(EVENT_VERIFICATION_SUCCEEDED), apkUpdateInfo).appendStorageInformation().addExtra("path", apkUpdateInfo.getExtras().getFinalPatchedExternalFilePath()).addExtra("download_uri", (String) MoreObjects.firstNonNull(apkUpdateInfo.downloadUrl, LoggingUtil.NO_HASHCODE)).logAndRelease();
    }

    public void reportVerificationFailed(ApkUpdateInfo apkUpdateInfo) {
        appendUpdateInfoData(((EventManager) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent(EVENT_VERIFICATION_FAILED), apkUpdateInfo).appendStorageInformation().addExtra("path", apkUpdateInfo.getExtras().getFinalPatchedExternalFilePath()).addExtra("download_uri", (String) MoreObjects.firstNonNull(apkUpdateInfo.downloadUrl, LoggingUtil.NO_HASHCODE)).logAndRelease();
    }

    public void reportSignatureVerificationFailed(ApkUpdateInfo apkUpdateInfo, String str) {
        appendUpdateInfoData(((EventManager) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent(EVENT_SIGNATURE_VERIFICATION_FAILED), apkUpdateInfo).appendStorageInformation().addExtra("path", apkUpdateInfo.getExtras().getFinalPatchedExternalFilePath()).addExtra("download_uri", (String) MoreObjects.firstNonNull(apkUpdateInfo.downloadUrl, LoggingUtil.NO_HASHCODE)).addExtra("expected_signature", (String) MoreObjects.firstNonNull(apkUpdateInfo.expectedSignature, LoggingUtil.NO_HASHCODE)).addExtra(Extras.FOUND_SIGNATURE, str).logAndRelease();
    }

    public void reportDownloadQueued(ApkUpdateInfo apkUpdateInfo) {
        ApkUpdateInfo.ApkUpdateExtras extras = apkUpdateInfo.getExtras();
        appendUpdateInfoData(((EventManager) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent(EVENT_DOWNLOAD_QUEUED), apkUpdateInfo).appendStorageInformation().addExtra("download_connection_type", NetworkUtils.getConnectionType((Context) FbInjector.lazyInstance(1, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext))).addExtra("download_connection_speed", NetworkUtils.getConnectionSpeed((Context) FbInjector.lazyInstance(1, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext))).addExtra("download_connection_is_roaming", NetworkUtils.isRoamingConnection((Context) FbInjector.lazyInstance(1, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext))).addExtra(OculusDownloadProgressTracker.DOWNLOAD_SCHEDULE_TIME_MS, extras.getDownloadScheduledTime()).addExtra(OculusDownloadProgressTracker.DOWNLOAD_START_TIME_MS, extras.getDownloadStartTime()).logAndRelease();
    }

    public void reportDownloadCancelled(ApkUpdateInfo apkUpdateInfo) {
        ApkUpdateInfo.ApkUpdateExtras extras = apkUpdateInfo.getExtras();
        appendUpdateInfoData(((EventManager) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent(EVENT_DOWNLOAD_CANCELLED), apkUpdateInfo).appendStorageInformation().addExtra("download_connection_type", NetworkUtils.getConnectionType((Context) FbInjector.lazyInstance(1, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext))).addExtra("download_connection_speed", NetworkUtils.getConnectionSpeed((Context) FbInjector.lazyInstance(1, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext))).addExtra("download_connection_is_roaming", NetworkUtils.isRoamingConnection((Context) FbInjector.lazyInstance(1, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext))).addExtra(OculusDownloadProgressTracker.DOWNLOAD_SCHEDULE_TIME_MS, extras.getDownloadScheduledTime()).addExtra(OculusDownloadProgressTracker.DOWNLOAD_START_TIME_MS, extras.getDownloadStartTime()).addExtra("download_pending_duration_s", extras.getDownloadPendingDurationSec()).addExtra("download_running_duration_s", extras.getDownloadRunningDurationSec()).logAndRelease();
    }

    public void reportDownloadScheduled(ApkUpdateInfo apkUpdateInfo) {
        appendUpdateInfoData(((EventManager) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent(EVENT_DOWNLOAD_SCHEDULED), apkUpdateInfo).appendStorageInformation().logAndRelease();
    }

    public void reportDownloadSuccess(ApkUpdateInfo apkUpdateInfo) {
        ApkUpdateInfo.ApkUpdateExtras extras = apkUpdateInfo.getExtras();
        appendUpdateInfoData(((EventManager) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent(EVENT_DOWNLOAD_SUCCEEDED), apkUpdateInfo).appendStorageInformation().addExtra("download_id", extras.getDownloadId()).addExtra("download_pending_duration_s", extras.getDownloadPendingDurationSec()).addExtra("download_running_duration_s", extras.getDownloadRunningDurationSec()).addExtra("download_uri", (String) MoreObjects.firstNonNull(apkUpdateInfo.downloadUrl, LoggingUtil.NO_HASHCODE)).addExtra(OculusDownloadProgressTracker.DOWNLOAD_SCHEDULE_TIME_MS, extras.getDownloadScheduledTime()).addExtra(OculusDownloadProgressTracker.DOWNLOAD_START_TIME_MS, extras.getDownloadStartTime()).logAndRelease();
    }

    public void reportDownloadFailed(ApkUpdateInfo apkUpdateInfo) {
        ApkUpdateInfo.ApkUpdateExtras extras = apkUpdateInfo.getExtras();
        appendUpdateInfoData(((EventManager) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent(EVENT_DOWNLOAD_FAILED), apkUpdateInfo).appendStorageInformation().addExtra("download_id", extras.getDownloadId()).addExtra("download_reason", extras.getDownloadReason()).addExtra("download_status", extras.getDownloadStatus()).addExtra("download_pending_duration_s", extras.getDownloadPendingDurationSec()).addExtra("download_running_duration_s", extras.getDownloadRunningDurationSec()).addExtra("download_uri", (String) MoreObjects.firstNonNull(apkUpdateInfo.downloadUrl, LoggingUtil.NO_HASHCODE)).addExtra(OculusDownloadProgressTracker.DOWNLOAD_SCHEDULE_TIME_MS, extras.getDownloadScheduledTime()).addExtra(OculusDownloadProgressTracker.DOWNLOAD_START_TIME_MS, extras.getDownloadStartTime()).logAndRelease();
    }

    public void reportInstallCanceled(ApkUpdateInfo apkUpdateInfo) {
        appendUpdateInfoData(((EventManager) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent(EVENT_INSTALL_CANCELLED), apkUpdateInfo).appendStorageInformation().logAndRelease();
    }

    public void reportFinalUpdateState(ApkUpdateInfo apkUpdateInfo) {
        ApkUpdateInfo.ApkUpdateExtras extras = apkUpdateInfo.getExtras();
        appendUpdateInfoData(((EventManager) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent(EVENT_FINAL_UPDATE_STATE), apkUpdateInfo).appendStorageInformation().addExtra("download_reason", extras.getDownloadReason()).addExtra("download_status", extras.getDownloadStatus()).addExtra("download_pending_duration_s", extras.getDownloadPendingDurationSec()).addExtra("download_running_duration_s", extras.getDownloadRunningDurationSec()).addExtra(PerformanceEventFields.DURATION_MS, extras.getInstallationDurationMs()).logAndRelease();
    }

    public void reportUpdateRetried(ApkUpdateInfo apkUpdateInfo) {
        appendUpdateInfoData(((EventManager) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent(EVENT_INSTALL_RETRIED), apkUpdateInfo).appendStorageInformation().logAndRelease();
    }

    public void reportLingeringFilesAtBoot(List<File> list) {
        ((EventManager) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent(EVENT_BOOT_CLEAN_LINGERING_FILES).appendStorageInformation().addExtra("file_list", TextUtils.join(",", list)).logAndRelease();
    }

    public void reportDeleteFailed(File file, Exception exc) {
        ((EventManager) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent(EVENT_INSTALLER_DELETE_FAILED).appendStorageInformation().addExtra("stack_trace", ExceptionUtil.getStackTraceString(exc)).addExtra("file_path", file.getAbsolutePath()).logAndRelease();
    }

    public void reportUninstallStarted(ApkUpdateInfo apkUpdateInfo) {
        appendUpdateInfoData(((EventManager) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent("moonlight_uninstall_started"), apkUpdateInfo).appendStorageInformation().logAndRelease();
    }

    public void reportNewInstallFunnel(ApkUpdateInfo apkUpdateInfo) {
        if (!BuildConstants.DEBUG) {
            ((EventManager) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).startFunnel(INSTALL_FUNNEL_NAME, Long.valueOf(apkUpdateInfo.id));
        }
    }

    public void reportEndInstallFunnel(ApkUpdateInfo apkUpdateInfo) {
        if (!BuildConstants.DEBUG) {
            ((EventManager) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).endFunnel(INSTALL_FUNNEL_NAME, Long.valueOf(apkUpdateInfo.id));
        }
    }

    private void reportInstallFunnelAction(String str, ApkUpdateInfo apkUpdateInfo) {
        reportInstallFunnelAction(str, apkUpdateInfo, ((EventManager) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createFunnelData());
    }

    private void reportInstallFunnelAction(String str, ApkUpdateInfo apkUpdateInfo, FunnelData funnelData) {
        if (!BuildConstants.DEBUG) {
            ApkUpdateInfo rootUpdate = this.mInfoUtils.getRootUpdate(apkUpdateInfo);
            funnelData.addExtra("package_name", (String) MoreObjects.firstNonNull(apkUpdateInfo.getPackageName(), LoggingUtil.NO_HASHCODE));
            ((EventManager) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).reportFunnelAction(INSTALL_FUNNEL_NAME, str, Long.valueOf(rootUpdate.id), null, funnelData);
        }
    }

    public void reportInstallFunnelRequestOrigin(ApkUpdateInfo apkUpdateInfo, RequestOrigin requestOrigin, @Nullable String str) {
        FunnelData createFunnelData = ((EventManager) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createFunnelData();
        if (str != null) {
            createFunnelData.addExtra("package_name", (String) MoreObjects.firstNonNull(str, LoggingUtil.NO_HASHCODE));
        }
        reportInstallFunnelAction(ACTION_REQUEST_ORIGIN + requestOrigin.name(), apkUpdateInfo, createFunnelData);
    }

    public void reportInstallFunnelDownload(ApkUpdateInfo apkUpdateInfo) {
        reportInstallFunnelAction("download", apkUpdateInfo);
    }

    public void reportInstallFunnelDownloadPrepFailure(ApkUpdateInfo apkUpdateInfo) {
        reportInstallFunnelAction(ACTION_DOWNLOAD_PREP_FAILURE, apkUpdateInfo);
    }

    /* JADX INFO: Can't fix incorrect switch cases order, some code will duplicate */
    /* JADX WARNING: Removed duplicated region for block: B:18:0x005a  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void reportInstallFunnelDownloadFailure(com.oculus.appmanager.info.ApkUpdateInfo r6) {
        /*
        // Method dump skipped, instructions count: 140
        */
        throw new UnsupportedOperationException("Method not decompiled: com.oculus.appmanager.installer.analytics.InstallerAnalytics.reportInstallFunnelDownloadFailure(com.oculus.appmanager.info.ApkUpdateInfo):void");
    }

    public void reportInstallFunnelVerification(ApkUpdateInfo apkUpdateInfo) {
        reportInstallFunnelAction(ACTION_VERIFICATION, apkUpdateInfo);
    }

    public void reportInstallFunnelVerificationFailed(ApkUpdateInfo apkUpdateInfo) {
        reportInstallFunnelAction(ACTION_VERIFICATION_FAILURE, apkUpdateInfo);
    }

    public void reportInstallFunnelSignatureVerificationFailed(ApkUpdateInfo apkUpdateInfo) {
        FunnelData createFunnelData = ((EventManager) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createFunnelData();
        createFunnelData.addExtra("expected_signature", apkUpdateInfo.expectedSignature);
        reportInstallFunnelAction(ACTION_SIGNATURE_VERIFICATION_FAILURE, apkUpdateInfo, createFunnelData);
    }

    public void reportInstallFunnelInstallStarted(ApkUpdateInfo apkUpdateInfo) {
        reportInstallFunnelAction("install", apkUpdateInfo);
    }

    public void reportInstallFunnelUnInstallStarted(ApkUpdateInfo apkUpdateInfo) {
        reportInstallFunnelAction(ACTION_UNINSTALL, apkUpdateInfo);
    }

    public void reportInstallFunnelAssetInstallStarted(ApkUpdateInfo apkUpdateInfo) {
        reportInstallFunnelAction(ACTION_INSTALL_ASSET, apkUpdateInfo);
    }

    public void reportInstallFunnelInstallSuccess(ApkUpdateInfo apkUpdateInfo) {
        reportInstallFunnelAction("install_success", apkUpdateInfo);
    }

    public void reportInstallFunnelUninstallSuccess(ApkUpdateInfo apkUpdateInfo) {
        reportInstallFunnelAction(ACTION_UNINSTALL_SUCCESS, apkUpdateInfo);
    }

    public void reportInstallFunnelInstallFailure(ApkUpdateInfo apkUpdateInfo) {
        reportInstallFunnelAction("install_failure", apkUpdateInfo);
    }

    public void reportInstallFunnelUninstallFailure(ApkUpdateInfo apkUpdateInfo) {
        reportInstallFunnelAction(ACTION_UNINSTALL_FAILURE, apkUpdateInfo);
    }

    public void reportInstallFunnelCanceled(ApkUpdateInfo apkUpdateInfo) {
        reportInstallFunnelAction("cancelled", apkUpdateInfo);
    }

    public void reportInstallFunnelDownloadManagerDisabled(ApkUpdateInfo apkUpdateInfo) {
        reportInstallFunnelAction(ACTION_DOWNLOADMANAGER_DISABLED, apkUpdateInfo);
    }

    public void reportInstallFunnelDownloadConfigFailed(ApkUpdateInfo apkUpdateInfo) {
        reportInstallFunnelAction(ACTION_DOWNLOAD_CONFIG_FAILED, apkUpdateInfo);
    }

    public void reportInstallFunnelDownloadedFileNotFound(ApkUpdateInfo apkUpdateInfo) {
        reportInstallFunnelAction(ACTION_DOWNLOADED_FILE_NOT_FOUND, apkUpdateInfo);
    }

    public void reportInstallFunnelBaseVersionChanged(ApkUpdateInfo apkUpdateInfo) {
        PackageInfo packageInfo = ((PackageManagerUtils) FbInjector.lazyInstance(0, PackagesCacheModule.UL_id._UL__ULSEP_com_oculus_common_packagescache_PackageManagerUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getPackageInfo(apkUpdateInfo.getPackageName());
        long j = packageInfo != null ? (long) packageInfo.versionCode : LibraryDBContract.VERSION_NOT_INSTALLED;
        FunnelData createFunnelData = ((EventManager) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createFunnelData();
        createFunnelData.addExtra(EXTRA_EXPECTED_VERSION, apkUpdateInfo.baseVersion).addExtra(EXTRA_ACTUAL_VERSION, j);
        reportInstallFunnelAction(ACTION_PACKAGE_CHANGE_BEFORE_VERIFICATION, apkUpdateInfo, createFunnelData);
    }

    public void reportInstallFunnelTimedOut(ApkUpdateInfo apkUpdateInfo) {
        switch (apkUpdateInfo.getState()) {
            case DOWNLOADING:
                reportInstallFunnelAction(ACTION_CONSISTENCY_DOWNLOAD_TIMEOUT, apkUpdateInfo);
                return;
            case DOWNLOADED:
                reportInstallFunnelAction(ACTION_CONSISTENCY_DOWNLOADED_TIMEOUT, apkUpdateInfo);
                return;
            case VERIFYING:
                reportInstallFunnelAction(ACTION_CONSISTENCY_VERIFYING_TIMEOUT, apkUpdateInfo);
                return;
            case VERIFIED:
                reportInstallFunnelAction(ACTION_CONSISTENCY_VERIFIED_TIMEOUT, apkUpdateInfo);
                return;
            case INSTALLING:
                reportInstallFunnelAction(ACTION_CONSISTENCY_INSTALL_TIMEOUT, apkUpdateInfo);
                return;
            case NEW:
            case QUEUED_DOWNLOAD:
            case CANCELED:
            case RETRIED:
            case FAILED:
            case SUCCESS:
            case DELETING:
                return;
            default:
                String str = "Unhandled state: " + apkUpdateInfo.getState().name();
                if (!this.mDebugMode.isEnabled()) {
                    BLog.w(TAG, str);
                    return;
                }
                throw new IllegalArgumentException(str);
        }
    }
}
