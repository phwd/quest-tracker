package com.oculus.appmanager.installer.broadcast;

import android.content.Context;
import android.content.Intent;
import android.text.TextUtils;
import com.facebook.debug.log.BLog;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightSingletonProvider;
import com.facebook.inject.UnsafeContextInjection;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Eager;
import com.facebook.ultralight.UL;
import com.google.common.base.Preconditions;
import com.oculus.appmanager.info.ApkUpdateInfo;
import com.oculus.appmanager.info.model.RequestOrigin;
import com.oculus.appmanager.installer.broadcast.BroadcastModule;
import java.util.HashSet;
import java.util.Set;
import javax.inject.Inject;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_UnsafeContextInjection_ULSEP_BINDING_ID"})
@ApplicationScoped
public class AssetBroadcastDispatch {
    private static final String ASSET_BROADCAST_ACTION = "com.oculus.asset_file_download_update";
    private static final String ASSET_BYTES_TOTAL = "bytes_total";
    private static final String ASSET_BYTES_TRANSFERRED = "bytes_transferred";
    private static final String ASSET_COMPLETED = "completed";
    private static final String ASSET_ID = "asset_id";
    private static final String ASSET_ID_DEPRECATED = "asset_file_id";
    private static final String TAG = "com.oculus.appmanager.installer.broadcast.AssetBroadcastDispatch";
    private static volatile AssetBroadcastDispatch _UL__ULSEP_com_oculus_appmanager_installer_broadcast_AssetBroadcastDispatch_ULSEP_INSTANCE;
    private final Set<Long> mCompletedSet = new HashSet();
    @UnsafeContextInjection
    @Inject
    @Eager
    private final Context mContext;

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_appmanager_installer_broadcast_AssetBroadcastDispatch_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(BroadcastModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_broadcast_AssetBroadcastDispatch_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_appmanager_installer_broadcast_AssetBroadcastDispatch_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(BroadcastModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_broadcast_AssetBroadcastDispatch_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final AssetBroadcastDispatch _UL__ULSEP_com_oculus_appmanager_installer_broadcast_AssetBroadcastDispatch_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (AssetBroadcastDispatch) UL.factorymap.get(BroadcastModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_broadcast_AssetBroadcastDispatch_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final AssetBroadcastDispatch _UL__ULSEP_com_oculus_appmanager_installer_broadcast_AssetBroadcastDispatch_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_appmanager_installer_broadcast_AssetBroadcastDispatch_ULSEP_INSTANCE == null) {
            synchronized (AssetBroadcastDispatch.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_appmanager_installer_broadcast_AssetBroadcastDispatch_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        _UL__ULSEP_com_oculus_appmanager_installer_broadcast_AssetBroadcastDispatch_ULSEP_INSTANCE = new AssetBroadcastDispatch(injectorLike.getApplicationInjector());
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_appmanager_installer_broadcast_AssetBroadcastDispatch_ULSEP_INSTANCE;
    }

    @Inject
    public AssetBroadcastDispatch(InjectorLike injectorLike) {
        this.mContext = BundledAndroidModule._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_UnsafeContextInjection_ULSEP_ACCESS_METHOD(injectorLike);
    }

    public synchronized void broadcastDownloadProgress(ApkUpdateInfo apkUpdateInfo, long j, long j2) {
        boolean z = true;
        Preconditions.checkArgument(!TextUtils.isEmpty(apkUpdateInfo.getPackageName()));
        Preconditions.checkArgument(apkUpdateInfo.updateType.isAsset());
        if (apkUpdateInfo.requestOrigin != RequestOrigin.PLATFORM_SDK) {
            if (apkUpdateInfo.requestOrigin != RequestOrigin.DUMPER) {
                z = false;
            }
        }
        Preconditions.checkArgument(z);
        if (this.mCompletedSet.contains(Long.valueOf(apkUpdateInfo.id))) {
            BLog.i(TAG, "Ignoring broadcast request for id = %d packageName = %s", Long.valueOf(apkUpdateInfo.id), apkUpdateInfo.getPackageName());
            return;
        }
        if (j2 < 0) {
            j2 = 0;
        }
        Intent intent = new Intent(ASSET_BROADCAST_ACTION);
        intent.setPackage(apkUpdateInfo.getPackageName());
        intent.putExtra("asset_id", apkUpdateInfo.storeItemId);
        intent.putExtra(ASSET_ID_DEPRECATED, apkUpdateInfo.storeItemId);
        intent.putExtra(ASSET_BYTES_TRANSFERRED, j);
        intent.putExtra(ASSET_BYTES_TOTAL, j2);
        intent.putExtra("completed", false);
        this.mContext.sendBroadcast(intent);
    }

    public synchronized void broadcastAssetInstallComplete(ApkUpdateInfo apkUpdateInfo) {
        boolean z = false;
        Preconditions.checkArgument(!TextUtils.isEmpty(apkUpdateInfo.getPackageName()));
        Preconditions.checkArgument(apkUpdateInfo.updateType.isAsset());
        if (apkUpdateInfo.requestOrigin == RequestOrigin.PLATFORM_SDK || apkUpdateInfo.requestOrigin == RequestOrigin.DUMPER) {
            z = true;
        }
        Preconditions.checkArgument(z);
        long downloadedSize = apkUpdateInfo.getExtras().getDownloadedSize();
        Intent intent = new Intent(ASSET_BROADCAST_ACTION);
        intent.setPackage(apkUpdateInfo.getPackageName());
        intent.putExtra("asset_id", apkUpdateInfo.storeItemId);
        intent.putExtra(ASSET_ID_DEPRECATED, apkUpdateInfo.storeItemId);
        intent.putExtra(ASSET_BYTES_TRANSFERRED, downloadedSize);
        intent.putExtra(ASSET_BYTES_TOTAL, downloadedSize);
        intent.putExtra("completed", true);
        this.mCompletedSet.add(Long.valueOf(apkUpdateInfo.id));
        this.mContext.sendBroadcast(intent);
    }
}
