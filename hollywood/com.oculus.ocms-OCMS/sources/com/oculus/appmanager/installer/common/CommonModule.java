package com.oculus.appmanager.installer.common;

import com.facebook.common.android.AndroidModule;
import com.facebook.inject.AbstractLibraryModule;
import com.facebook.inject.AutoGeneratedBinder;
import com.facebook.inject.Binder;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.InjectorModule;
import com.facebook.ultralight.AutoGeneratedSwitchIdClass;
import com.facebook.ultralight.UL;
import com.google.inject.Key;
import com.oculus.appmanager.info.InfoModule;
import com.oculus.appmanager.installer.analytics.AnalyticsModule;
import com.oculus.appmanager.installer.contract.ContractModule;
import com.oculus.appmanager.installer.events.EventsModule;
import com.oculus.appmanager.patcher.PatcherModule;
import com.oculus.appmanager.vrsign.VrsignModule;
import com.oculus.common.init.AppInitModule;
import com.oculus.common.packagescache.PackagesCacheModule;
import com.oculus.errorreporting.interfaces.InterfacesModule;
import com.oculus.time.TimeModule;
import com.oculus.util.device.DeviceModule;

@InjectorModule
public class CommonModule extends AbstractLibraryModule {

    @AutoGeneratedSwitchIdClass
    public static final class UL_id {
        public static final int _UL__ULSEP_com_oculus_appmanager_installer_common_CryptoMethods_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_appmanager_installer_common_CryptoMethods_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(CryptoMethods.class)));
        public static final int _UL__ULSEP_com_oculus_appmanager_installer_common_EcdsaSignatureVerifier_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_appmanager_installer_common_EcdsaSignatureVerifier_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(EcdsaSignatureVerifier.class)));
        public static final int _UL__ULSEP_com_oculus_appmanager_installer_common_InstallerDownloadStatusChecker_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_appmanager_installer_common_InstallerDownloadStatusChecker_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(InstallerDownloadStatusChecker.class)));
        public static final int _UL__ULSEP_com_oculus_appmanager_installer_common_InstallerFileUtils_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_appmanager_installer_common_InstallerFileUtils_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(InstallerFileUtils.class)));
    }

    @AutoGeneratedBinder
    static class AutoGeneratedBindingsForCommonModule {
        AutoGeneratedBindingsForCommonModule() {
        }

        static void bind(Binder binder) {
            if (!UL.USE_STATIC_DI) {
                binder.require(AndroidModule.class);
                binder.require(BundledAndroidModule.class);
                binder.require(com.oculus.android.AndroidModule.class);
                binder.require(InfoModule.class);
                binder.require(AnalyticsModule.class);
                binder.require(ContractModule.class);
                binder.require(EventsModule.class);
                binder.require(PatcherModule.class);
                binder.require(VrsignModule.class);
                binder.require(AppInitModule.class);
                binder.require(PackagesCacheModule.class);
                binder.require(com.oculus.downloader.contract.ContractModule.class);
                binder.require(InterfacesModule.class);
                binder.require(TimeModule.class);
                binder.require(DeviceModule.class);
                binder.bind(CryptoMethods.class).toProvider(new CryptoMethodsAutoProvider());
                binder.bind(EcdsaSignatureVerifier.class).toProvider(new EcdsaSignatureVerifierAutoProvider());
                binder.bind(InstallerDownloadStatusChecker.class).toProvider(new InstallerDownloadStatusCheckerAutoProvider());
                binder.bind(InstallerFileUtils.class).toProvider(new InstallerFileUtilsAutoProvider());
            }
        }
    }
}
