package com.oculus.appmanager.installer.common;

import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.qe.schema.Types;
import com.facebook.stetho.dumpapp.Framer;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.UL;
import com.fasterxml.jackson.dataformat.smile.SmileConstants;
import com.google.common.base.Ascii;
import com.oculus.appmanager.installer.common.CommonModule;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.X509EncodedKeySpec;
import javax.annotation.Nullable;
import javax.inject.Provider;

@Dependencies({})
public class EcdsaSignatureVerifier {
    private static final byte[] OCULUS_PUBLIC_KEY = {48, 89, 48, 19, 6, 7, 42, -122, 72, -50, 61, 2, 1, 6, 8, 42, -122, 72, -50, 61, 3, 1, 7, 3, 66, 0, 4, 86, -117, -53, 81, -10, -119, 55, -25, 85, 7, -3, -112, Ascii.FF, -88, 71, Ascii.US, 57, -54, -38, -34, -12, -59, -102, Ascii.CR, SmileConstants.A_TOKEN_MISC_SHARED_STRING_LONG, -37, 7, -47, 124, Ascii.DC4, Framer.STDIN_FRAME_PREFIX, -33, Ascii.DEL, Ascii.SO, Types.TYPE_FLOAT, 69, -37, 72, -69, -38, 98, 111, -6, Ascii.ESC, -119, -18, 75, 92, 83, -14, -4, -3, -33, -26, -98, Ascii.SUB, 32, 80, 115, 114, 90, -62, 84, -100};
    @Nullable
    private PublicKey mPublicKey;

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_appmanager_installer_common_EcdsaSignatureVerifier_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(CommonModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_common_EcdsaSignatureVerifier_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final EcdsaSignatureVerifier _UL__ULSEP_com_oculus_appmanager_installer_common_EcdsaSignatureVerifier_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (EcdsaSignatureVerifier) UL.factorymap.get(CommonModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_common_EcdsaSignatureVerifier_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final EcdsaSignatureVerifier _UL__ULSEP_com_oculus_appmanager_installer_common_EcdsaSignatureVerifier_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new EcdsaSignatureVerifier();
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_appmanager_installer_common_EcdsaSignatureVerifier_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(CommonModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_common_EcdsaSignatureVerifier_ULSEP_BINDING_ID, injectorLike);
    }

    public boolean verifySignature(byte[] bArr, byte[] bArr2) throws SignatureException, InvalidKeySpecException, NoSuchAlgorithmException, InvalidKeyException {
        Signature instance = Signature.getInstance("SHA256withECDSA");
        instance.initVerify(getPublicKey());
        instance.update(bArr);
        return instance.verify(bArr2);
    }

    private synchronized PublicKey getPublicKey() throws NoSuchAlgorithmException, InvalidKeySpecException {
        if (this.mPublicKey == null) {
            this.mPublicKey = KeyFactory.getInstance("EC").generatePublic(new X509EncodedKeySpec(OCULUS_PUBLIC_KEY));
        }
        return this.mPublicKey;
    }
}
