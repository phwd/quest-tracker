package com.oculus.appmanager.installer.contract;

import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import com.facebook.debug.log.BLog;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.inject.UnsafeContextInjection;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Eager;
import com.facebook.ultralight.UL;
import com.google.common.util.concurrent.SettableFuture;
import com.oculus.appmanager.info.ApkUpdateInfo;
import com.oculus.appmanager.info.model.InstallerResult;
import com.oculus.appmanager.installer.contract.ContractModule;
import com.oculus.common.build.BuildConstants;
import com.oculus.util.service.ServiceFutures;
import javax.inject.Inject;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_UnsafeContextInjection_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_util_service_ServiceFutures_ULSEP_BINDING_ID"})
public class InstallerServiceContract {
    public static final String ACCESS_TOKEN_KEY = "access_token";
    public static final String DOWNLOAD_ID = "download_id";
    public static final String INSTALLER_CLASS = "com.oculus.appmanager.installer.service.InstallerService";
    public static final String INSTALLER_PACKAGE = BuildConstants.PACKAGE_NAME_HORIZON;
    public static final String RETRY_VERIFYING_ATTEMPT = "retry_verifying_attempt";
    private static final String TAG = "InstallerServiceContract";
    public static final String UPDATE_ID = "update_id";
    private Context mContext;
    @Inject
    @Eager
    private final ServiceFutures mServiceFutures;

    public static class Cancel {
        public static final String ACTION_CANCEL = "action_cancel";
        public static final String ACTION_CANCELED = "action_canceled";
    }

    public static class Consistency {
        public static final String ACTION_CONSISTENCY_FOR_ID = "action_consistency_for_id";
    }

    public static class Download {
        public static final String ACTION_DOWNLOAD_AND_INSTALL = "action_download_and_install";
        public static final String ACTION_DOWNLOAD_COMPLETE = "action_download_complete";
        public static final String ACTION_DOWNLOAD_NOTIFICATION = "action_notify_download_complete";
    }

    public static class Failure {
        public static final String ACTION_FAILED = "action_failed";
    }

    public static class Install {
        public static final String ACTION_INSTALL_COMPLETED = "action_install_complete";
        public static final String ACTION_INSTALL_SUCCESSFUL = "action_install_success";
    }

    public static class Misc {
        public static final String ACTION_BOOT_CLEANUP = "action_boot_cleanup";
        public static final String ACTION_CONTINUE_UPDATE_TICKLE = "action_continue_next_update";
    }

    public static class Retry {
        public static final String ACTION_RETRY = "action_retry";
    }

    public static class Uninstall {
        public static final String ACTION_UNINSTALL = "action_uninstall";
        public static final String ACTION_UNINSTALL_COMPLETED = "action_uninstall_complete";
    }

    public static class Verify {
        public static final String ACTION_VERIFICATION_COMPLETE = "action_verification_complete";
    }

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_appmanager_installer_contract_InstallerServiceContract_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(ContractModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_contract_InstallerServiceContract_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_appmanager_installer_contract_InstallerServiceContract_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(ContractModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_contract_InstallerServiceContract_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final InstallerServiceContract _UL__ULSEP_com_oculus_appmanager_installer_contract_InstallerServiceContract_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (InstallerServiceContract) UL.factorymap.get(ContractModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_contract_InstallerServiceContract_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final InstallerServiceContract _UL__ULSEP_com_oculus_appmanager_installer_contract_InstallerServiceContract_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new InstallerServiceContract(injectorLike, BundledAndroidModule._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_UnsafeContextInjection_ULSEP_ACCESS_METHOD(injectorLike));
    }

    @Inject
    public InstallerServiceContract(InjectorLike injectorLike, @UnsafeContextInjection Context context) {
        this.mServiceFutures = ServiceFutures._UL__ULSEP_com_oculus_util_service_ServiceFutures_ULSEP_ACCESS_METHOD(injectorLike);
        this.mContext = context;
    }

    private Intent createIntent(String str) {
        Intent intent = new Intent();
        intent.setComponent(new ComponentName(this.mContext, INSTALLER_CLASS));
        intent.setAction(str);
        return intent;
    }

    public SettableFuture<InstallerResult> downloadAndInstall(ApkUpdateInfo apkUpdateInfo) {
        Intent createIntent = createIntent(Download.ACTION_DOWNLOAD_AND_INSTALL);
        SettableFuture<InstallerResult> createFuture = this.mServiceFutures.createFuture(createIntent);
        createIntent.putExtra("update_id", apkUpdateInfo.id);
        this.mContext.startService(createIntent);
        return createFuture;
    }

    public SettableFuture<InstallerResult> uninstall(ApkUpdateInfo apkUpdateInfo) {
        Intent createIntent = createIntent(Uninstall.ACTION_UNINSTALL);
        SettableFuture<InstallerResult> createFuture = this.mServiceFutures.createFuture(createIntent);
        createIntent.putExtra("update_id", apkUpdateInfo.id);
        this.mContext.startService(createIntent);
        return createFuture;
    }

    public SettableFuture<InstallerResult> cancel(ApkUpdateInfo apkUpdateInfo) {
        if (!apkUpdateInfo.getState().isCancelable()) {
            BLog.w(TAG, "Attempting to cancel an uncancellable update. Ignoring request.");
            SettableFuture<InstallerResult> create = SettableFuture.create();
            create.set(null);
            return create;
        }
        Intent createIntent = createIntent(Cancel.ACTION_CANCEL);
        SettableFuture<InstallerResult> createFuture = this.mServiceFutures.createFuture(createIntent);
        createIntent.putExtra("update_id", apkUpdateInfo.id);
        this.mContext.startService(createIntent);
        return createFuture;
    }

    public void onUpdateCancelled(ApkUpdateInfo apkUpdateInfo) {
        Intent createIntent = createIntent(Cancel.ACTION_CANCELED);
        createIntent.putExtra("update_id", apkUpdateInfo.id);
        this.mContext.startService(createIntent);
    }

    public void onUpdateRetried(ApkUpdateInfo apkUpdateInfo) {
        Intent createIntent = createIntent(Retry.ACTION_RETRY);
        createIntent.putExtra("update_id", apkUpdateInfo.id);
        this.mContext.startService(createIntent);
    }

    public void onDownloadCompleteNotification(long j) {
        Intent createIntent = createIntent(Download.ACTION_DOWNLOAD_NOTIFICATION);
        createIntent.putExtra("download_id", j);
        this.mContext.startService(createIntent);
    }

    public void onDownloadComplete(ApkUpdateInfo apkUpdateInfo, boolean z) {
        Intent createIntent = createIntent(Download.ACTION_DOWNLOAD_COMPLETE);
        createIntent.putExtra("update_id", apkUpdateInfo.id);
        createIntent.putExtra(RETRY_VERIFYING_ATTEMPT, z);
        this.mContext.startService(createIntent);
    }

    public void onVerificationComplete(ApkUpdateInfo apkUpdateInfo) {
        Intent createIntent = createIntent(Verify.ACTION_VERIFICATION_COMPLETE);
        createIntent.putExtra("update_id", apkUpdateInfo.id);
        this.mContext.startService(createIntent);
    }

    public void onUpdateSuccessful(ApkUpdateInfo apkUpdateInfo) {
        Intent createIntent = createIntent(Install.ACTION_INSTALL_SUCCESSFUL);
        createIntent.putExtra("update_id", apkUpdateInfo.id);
        this.mContext.startService(createIntent);
    }

    public void onUpdateFailed(ApkUpdateInfo apkUpdateInfo) {
        Intent createIntent = createIntent(Failure.ACTION_FAILED);
        createIntent.putExtra("update_id", apkUpdateInfo.id);
        this.mContext.startService(createIntent);
    }

    public Intent createInstallCompleteIntent(ApkUpdateInfo apkUpdateInfo) {
        Intent createIntent = createIntent(Install.ACTION_INSTALL_COMPLETED);
        createIntent.putExtra("update_id", apkUpdateInfo.id);
        return createIntent;
    }

    public Intent createUninstallCompleteIntent(ApkUpdateInfo apkUpdateInfo) {
        Intent createIntent = createIntent(Uninstall.ACTION_UNINSTALL_COMPLETED);
        createIntent.putExtra("update_id", apkUpdateInfo.id);
        return createIntent;
    }

    public void performConsistencyCheckForId(long j) {
        Intent createIntent = createIntent(Consistency.ACTION_CONSISTENCY_FOR_ID);
        createIntent.putExtra("update_id", j);
        this.mContext.startService(createIntent);
    }

    public void performBootCleanup() {
        this.mContext.startService(createIntent(Misc.ACTION_BOOT_CLEANUP));
    }

    public void tickleContinueUpdate(ApkUpdateInfo apkUpdateInfo) {
        Intent createIntent = createIntent(Misc.ACTION_CONTINUE_UPDATE_TICKLE);
        createIntent.putExtra("update_id", apkUpdateInfo.id);
        this.mContext.startService(createIntent);
    }
}
