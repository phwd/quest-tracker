package com.oculus.appmanager.installer.service;

import android.annotation.TargetApi;
import android.app.job.JobInfo;
import android.app.job.JobScheduler;
import android.content.ComponentName;
import android.content.Context;
import android.os.PersistableBundle;
import androidx.annotation.VisibleForTesting;
import com.facebook.debug.log.BLog;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.mobileconfig.factory.MobileConfig;
import com.facebook.mobileconfig.factory.module.MobileConfigFactoryModule;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.google.common.base.Predicate;
import com.oculus.appmanager.info.ApkUpdateInfo;
import com.oculus.appmanager.info.ApkUpdateInfoContract;
import com.oculus.appmanager.info.InfoModule;
import com.oculus.appmanager.info.InfoUtils;
import com.oculus.appmanager.info.model.InstallerResultError;
import com.oculus.appmanager.installer.analytics.AnalyticsModule;
import com.oculus.appmanager.installer.analytics.InstallerAnalytics;
import com.oculus.appmanager.installer.contract.ContractModule;
import com.oculus.appmanager.installer.contract.InstallerServiceContract;
import com.oculus.appmanager.installer.contract.errors.ErrorCategories;
import com.oculus.appmanager.installer.service.InstallerServiceModule;
import com.oculus.appmanager.installer.service.MC;
import com.oculus.errorreporting.interfaces.IErrorReporter;
import com.oculus.errorreporting.interfaces.InterfacesModule;
import com.oculus.time.Clock;
import com.oculus.time.TimeModule;
import java.util.List;
import java.util.concurrent.TimeUnit;
import javax.annotation.Nullable;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_installer_analytics_InstallerAnalytics_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_installer_contract_InstallerServiceContract_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_BINDING_ID", "_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID", "_UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID"})
@TargetApi(21)
public class InstallerConsistencyHelper {
    private static final String TAG = "InstallerConsistencyHelper";
    private InjectionContext _UL_mInjectionContext;

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_appmanager_installer_service_InstallerConsistencyHelper_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerConsistencyHelper_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final InstallerConsistencyHelper _UL__ULSEP_com_oculus_appmanager_installer_service_InstallerConsistencyHelper_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (InstallerConsistencyHelper) UL.factorymap.get(InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerConsistencyHelper_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final InstallerConsistencyHelper _UL__ULSEP_com_oculus_appmanager_installer_service_InstallerConsistencyHelper_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new InstallerConsistencyHelper(injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_appmanager_installer_service_InstallerConsistencyHelper_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerConsistencyHelper_ULSEP_BINDING_ID, injectorLike);
    }

    @Inject
    public InstallerConsistencyHelper(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(7, injectorLike);
    }

    private boolean isConsistencyCheckerDisabled() {
        return ((MobileConfig) FbInjector.lazyInstance(6, MobileConfigFactoryModule.UL_id._UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getLong(MC.oculus_library.concurrent_download_max) != 1;
    }

    @Nullable
    private Long getTimeoutForState(ApkUpdateInfoContract.UpdateState updateState) {
        Long l;
        switch (updateState) {
            case DOWNLOADED:
                l = Long.valueOf(((MobileConfig) FbInjector.lazyInstance(6, MobileConfigFactoryModule.UL_id._UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getLong(MC.oculus_library.consistency_downloaded_state_timeout_mins));
                break;
            case VERIFYING:
                l = Long.valueOf(((MobileConfig) FbInjector.lazyInstance(6, MobileConfigFactoryModule.UL_id._UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getLong(MC.oculus_library.consistency_verifying_state_timeout_mins));
                break;
            case VERIFIED:
                l = Long.valueOf(((MobileConfig) FbInjector.lazyInstance(6, MobileConfigFactoryModule.UL_id._UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getLong(MC.oculus_library.consistency_verified_state_timeout_mins));
                break;
            case INSTALLING:
                l = Long.valueOf(((MobileConfig) FbInjector.lazyInstance(6, MobileConfigFactoryModule.UL_id._UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getLong(MC.oculus_library.consistency_installing_state_timeout_mins));
                break;
            case DELETING:
                l = Long.valueOf(((MobileConfig) FbInjector.lazyInstance(6, MobileConfigFactoryModule.UL_id._UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getLong(MC.oculus_library.consistency_deleting_state_timeout_mins));
                break;
            case UNINSTALLING:
                l = Long.valueOf(((MobileConfig) FbInjector.lazyInstance(6, MobileConfigFactoryModule.UL_id._UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getLong(MC.oculus_library.consistency_uninstalling_state_timeout_mins));
                break;
            default:
                l = null;
                break;
        }
        if (l == null) {
            return null;
        }
        return Long.valueOf(TimeUnit.MINUTES.toMillis(l.longValue()));
    }

    /* access modifiers changed from: package-private */
    @VisibleForTesting
    public boolean isTimedOut(ApkUpdateInfo apkUpdateInfo) {
        Long timeoutForState = getTimeoutForState(apkUpdateInfo.getState());
        if (timeoutForState == null || apkUpdateInfo.getExtras().getStateTimestamp() > ((Clock) FbInjector.lazyInstance(1, TimeModule.UL_id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID, this._UL_mInjectionContext)).now() - timeoutForState.longValue()) {
            return false;
        }
        return true;
    }

    public void onApkUpdateInfoStateChanged(ApkUpdateInfo apkUpdateInfo) {
        if (!isConsistencyCheckerDisabled()) {
            ApkUpdateInfoContract.UpdateState state = apkUpdateInfo.getState();
            if (!state.isInitial() && state != ApkUpdateInfoContract.UpdateState.QUEUED_DOWNLOAD) {
                cancelJob();
                if (!state.isFinal()) {
                    Long timeoutForState = getTimeoutForState(state);
                    if (timeoutForState == null) {
                        BLog.e(TAG, "unhandled timeout value for state: %s", state.name());
                        return;
                    }
                    scheduleJobForJobId(timeoutForState.longValue(), apkUpdateInfo);
                }
            }
        }
    }

    private void cancelJob() {
        JobScheduler jobScheduler = (JobScheduler) ((Context) FbInjector.lazyInstance(5, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getSystemService("jobscheduler");
        if (jobScheduler != null) {
            jobScheduler.cancel(1828726832);
        }
    }

    private void scheduleJobForJobId(long j, ApkUpdateInfo apkUpdateInfo) {
        JobScheduler jobScheduler = (JobScheduler) ((Context) FbInjector.lazyInstance(5, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getSystemService("jobscheduler");
        if (jobScheduler == null) {
            ((IErrorReporter) FbInjector.lazyInstance(4, InterfacesModule.UL_id._UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_BINDING_ID, this._UL_mInjectionContext)).softError(TAG, "job scheduler not available");
            return;
        }
        PersistableBundle persistableBundle = new PersistableBundle();
        persistableBundle.putLong("update_id", apkUpdateInfo.id);
        BLog.v(TAG, "schedule with timeout %d", Long.valueOf(j));
        JobInfo.Builder builder = new JobInfo.Builder(1828726832, new ComponentName((Context) FbInjector.lazyInstance(5, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext), ConsistencyJobService.class.getCanonicalName()));
        builder.setMinimumLatency(j).setExtras(persistableBundle);
        jobScheduler.schedule(builder.build());
    }

    public void performConsistencyCheck(final ApkUpdateInfo apkUpdateInfo) {
        if (!isConsistencyCheckerDisabled()) {
            ((InstallerAnalytics) FbInjector.lazyInstance(2, AnalyticsModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_analytics_InstallerAnalytics_ULSEP_BINDING_ID, this._UL_mInjectionContext)).reportConsistencyCheckStarted(apkUpdateInfo);
            if (apkUpdateInfo.getState() == ApkUpdateInfoContract.UpdateState.VERIFIED) {
                if (((InfoUtils) FbInjector.lazyInstance(0, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).searchFirstInDependencyTree(apkUpdateInfo, new Predicate<ApkUpdateInfo>() {
                    /* class com.oculus.appmanager.installer.service.InstallerConsistencyHelper.AnonymousClass1 */

                    public boolean apply(@Nullable ApkUpdateInfo apkUpdateInfo) {
                        if (apkUpdateInfo == null || apkUpdateInfo.id == apkUpdateInfo.id) {
                            return false;
                        }
                        ApkUpdateInfoContract.UpdateState state = apkUpdateInfo.getState();
                        if (state == ApkUpdateInfoContract.UpdateState.QUEUED_DOWNLOAD || state == ApkUpdateInfoContract.UpdateState.DOWNLOADING || state == ApkUpdateInfoContract.UpdateState.DOWNLOADED || state == ApkUpdateInfoContract.UpdateState.VERIFYING) {
                            return true;
                        }
                        return false;
                    }
                }) == null) {
                    ApkUpdateInfo rootUpdate = ((InfoUtils) FbInjector.lazyInstance(0, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getRootUpdate(apkUpdateInfo);
                    List<ApkUpdateInfo> searchEntireDependencyTree = ((InfoUtils) FbInjector.lazyInstance(0, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).searchEntireDependencyTree(rootUpdate, new Predicate<ApkUpdateInfo>() {
                        /* class com.oculus.appmanager.installer.service.InstallerConsistencyHelper.AnonymousClass2 */

                        public boolean apply(@Nullable ApkUpdateInfo apkUpdateInfo) {
                            return apkUpdateInfo != null && apkUpdateInfo.getState() == ApkUpdateInfoContract.UpdateState.VERIFIED;
                        }
                    });
                    int dependencyCount = rootUpdate.getDependencyCount() + 1;
                    if (dependencyCount > 1 && searchEntireDependencyTree.size() == dependencyCount) {
                        ((InstallerServiceContract) FbInjector.lazyInstance(3, ContractModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_contract_InstallerServiceContract_ULSEP_BINDING_ID, this._UL_mInjectionContext)).tickleContinueUpdate(apkUpdateInfo);
                        return;
                    }
                } else {
                    return;
                }
            }
            if (isTimedOut(apkUpdateInfo)) {
                ((InstallerAnalytics) FbInjector.lazyInstance(2, AnalyticsModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_analytics_InstallerAnalytics_ULSEP_BINDING_ID, this._UL_mInjectionContext)).reportInstallFunnelTimedOut(apkUpdateInfo);
                InfoUtils infoUtils = (InfoUtils) FbInjector.lazyInstance(0, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext);
                infoUtils.failQuiet(apkUpdateInfo, ErrorCategories.CONSISTENCY_TIMED_OUT, apkUpdateInfo.getState().name() + " timed out", InstallerResultError.CONSISTENCY_FAILURE, null);
            }
        }
    }
}
