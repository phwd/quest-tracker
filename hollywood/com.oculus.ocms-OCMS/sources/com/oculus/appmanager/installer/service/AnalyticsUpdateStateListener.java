package com.oculus.appmanager.installer.service;

import com.facebook.debug.log.BLog;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Eager;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.oculus.appmanager.info.ApkUpdateInfo;
import com.oculus.appmanager.info.ApkUpdateInfoContract;
import com.oculus.appmanager.info.ApkUpdateInfoListener;
import com.oculus.appmanager.info.InfoUtils;
import com.oculus.appmanager.installer.analytics.InstallerAnalytics;
import com.oculus.appmanager.installer.service.InstallerServiceModule;
import java.util.Set;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_appmanager_installer_analytics_InstallerAnalytics_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID"})
public class AnalyticsUpdateStateListener implements ApkUpdateInfoListener {
    private static final String TAG = "AnalyticsUpdateStateListener";
    @Inject
    @Eager
    private final InfoUtils mInfoUtils;
    @Inject
    @Eager
    private final InstallerAnalytics mInstallerAnalytics;

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_appmanager_installer_service_AnalyticsUpdateStateListener_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_AnalyticsUpdateStateListener_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_appmanager_installer_service_AnalyticsUpdateStateListener_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_AnalyticsUpdateStateListener_ULSEP_BINDING_ID, injectorLike);
    }

    @Override // com.oculus.appmanager.info.ApkUpdateInfoListener
    public void onCreated(ApkUpdateInfo apkUpdateInfo, ApkUpdateInfoListener.CreationType creationType) {
    }

    @Override // com.oculus.appmanager.info.ApkUpdateInfoListener
    public void onDeleted(ApkUpdateInfo apkUpdateInfo) {
    }

    @AutoGeneratedAccessMethod
    public static final AnalyticsUpdateStateListener _UL__ULSEP_com_oculus_appmanager_installer_service_AnalyticsUpdateStateListener_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (AnalyticsUpdateStateListener) UL.factorymap.get(InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_AnalyticsUpdateStateListener_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final AnalyticsUpdateStateListener _UL__ULSEP_com_oculus_appmanager_installer_service_AnalyticsUpdateStateListener_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new AnalyticsUpdateStateListener(injectorLike);
    }

    @Inject
    public AnalyticsUpdateStateListener(InjectorLike injectorLike) {
        this.mInstallerAnalytics = InstallerAnalytics._UL__ULSEP_com_oculus_appmanager_installer_analytics_InstallerAnalytics_ULSEP_ACCESS_METHOD(injectorLike);
        this.mInfoUtils = InfoUtils._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_ACCESS_METHOD(injectorLike);
    }

    @Override // com.oculus.appmanager.info.ApkUpdateInfoListener
    public void onChanged(ApkUpdateInfo apkUpdateInfo, Set<String> set, ApkUpdateInfo.ApkUpdateExtras apkUpdateExtras) {
        for (String str : set) {
            if ("state".equals(str)) {
                handleStateChange(apkUpdateInfo, apkUpdateExtras.getState(), apkUpdateInfo.getState());
            }
        }
    }

    private void handleStateChange(ApkUpdateInfo apkUpdateInfo, ApkUpdateInfoContract.UpdateState updateState, ApkUpdateInfoContract.UpdateState updateState2) {
        switch (updateState2) {
            case NEW:
            case INSTALLING:
            case UNINSTALLING:
            case SUCCESS:
            case DELETING:
                break;
            case QUEUED_DOWNLOAD:
                this.mInstallerAnalytics.reportDownloadQueued(apkUpdateInfo);
                break;
            case DOWNLOADING:
                this.mInstallerAnalytics.reportDownloadScheduled(apkUpdateInfo);
                this.mInstallerAnalytics.reportInstallFunnelDownload(apkUpdateInfo);
                break;
            case DOWNLOADED:
                this.mInstallerAnalytics.reportDownloadSuccess(apkUpdateInfo);
                break;
            case VERIFYING:
                this.mInstallerAnalytics.reportInstallFunnelVerification(apkUpdateInfo);
                break;
            case VERIFIED:
                this.mInstallerAnalytics.reportVerificationSuccess(apkUpdateInfo);
                break;
            case FAILED:
                handleFailed(apkUpdateInfo, updateState);
                break;
            case CANCELED:
                handleCancel(apkUpdateInfo, updateState);
                break;
            case RETRIED:
                this.mInstallerAnalytics.reportUpdateRetried(apkUpdateInfo);
                break;
            default:
                throw new IllegalStateException("Unhandled state change for analytics");
        }
        if (updateState2.isFinal() && this.mInfoUtils.isRoot(apkUpdateInfo)) {
            this.mInstallerAnalytics.reportEndInstallFunnel(apkUpdateInfo);
        }
    }

    /* JADX INFO: Can't fix incorrect switch cases order, some code will duplicate */
    private void handleCancel(ApkUpdateInfo apkUpdateInfo, ApkUpdateInfoContract.UpdateState updateState) {
        apkUpdateInfo.getExtras().getCancelledBy();
        switch (updateState) {
            case NEW:
            case QUEUED_DOWNLOAD:
            case DOWNLOADING:
                this.mInstallerAnalytics.reportDownloadCancelled(apkUpdateInfo);
                this.mInstallerAnalytics.reportInstallFunnelCanceled(apkUpdateInfo);
                return;
            case DOWNLOADED:
            case VERIFYING:
            case VERIFIED:
                this.mInstallerAnalytics.reportInstallCanceled(apkUpdateInfo);
                this.mInstallerAnalytics.reportInstallFunnelCanceled(apkUpdateInfo);
                break;
            case INSTALLING:
            case UNINSTALLING:
            case SUCCESS:
            case DELETING:
            case FAILED:
            case CANCELED:
            case RETRIED:
                break;
            default:
                throw new IllegalStateException("Unhandled state change for analytics");
        }
        BLog.w(TAG, "Invalid state transition. From: %s to CANCELED", updateState.name());
    }

    private void handleFailed(ApkUpdateInfo apkUpdateInfo, ApkUpdateInfoContract.UpdateState updateState) {
        if (!apkUpdateInfo.getExtras().isTransitiveFailure()) {
            switch (updateState) {
                case NEW:
                case QUEUED_DOWNLOAD:
                    onDownloadPrepFailed(apkUpdateInfo);
                    return;
                case DOWNLOADING:
                    onDownloadFailed(apkUpdateInfo);
                    return;
                case DOWNLOADED:
                case VERIFYING:
                    onVerificationFailure(apkUpdateInfo);
                    return;
                case VERIFIED:
                case INSTALLING:
                    onInstallFailed(apkUpdateInfo);
                    return;
                case UNINSTALLING:
                    onUninstallFailed(apkUpdateInfo);
                    return;
                case SUCCESS:
                case FAILED:
                case CANCELED:
                case RETRIED:
                    BLog.w(TAG, "Invalid state transition. From: %s to FAILED", updateState.name());
                    return;
                case DELETING:
                    return;
                default:
                    throw new IllegalStateException("Unhandled state change for analytics");
            }
        }
    }

    private void onDownloadPrepFailed(ApkUpdateInfo apkUpdateInfo) {
        this.mInstallerAnalytics.reportDownloadFailed(apkUpdateInfo);
        this.mInstallerAnalytics.reportInstallFunnelDownloadPrepFailure(apkUpdateInfo);
    }

    private void onDownloadFailed(ApkUpdateInfo apkUpdateInfo) {
        this.mInstallerAnalytics.reportDownloadFailed(apkUpdateInfo);
        this.mInstallerAnalytics.reportInstallFunnelDownloadFailure(apkUpdateInfo);
    }

    private void onVerificationFailure(ApkUpdateInfo apkUpdateInfo) {
        this.mInstallerAnalytics.reportVerificationFailed(apkUpdateInfo);
        this.mInstallerAnalytics.reportInstallFunnelVerificationFailed(apkUpdateInfo);
    }

    private void onInstallFailed(ApkUpdateInfo apkUpdateInfo) {
        this.mInstallerAnalytics.reportInstallFailed(apkUpdateInfo);
        this.mInstallerAnalytics.reportInstallFunnelInstallFailure(apkUpdateInfo);
    }

    private void onUninstallFailed(ApkUpdateInfo apkUpdateInfo) {
        this.mInstallerAnalytics.reportUninstallFailed(apkUpdateInfo);
        this.mInstallerAnalytics.reportInstallFunnelUninstallFailure(apkUpdateInfo);
    }
}
