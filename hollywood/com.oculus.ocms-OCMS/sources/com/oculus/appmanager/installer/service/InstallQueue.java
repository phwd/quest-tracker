package com.oculus.appmanager.installer.service;

import android.text.TextUtils;
import com.facebook.debug.log.BLog;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.mobileconfig.factory.MobileConfig;
import com.facebook.mobileconfig.factory.module.MobileConfigFactoryModule;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.google.common.base.Predicate;
import com.oculus.appmanager.info.ApkUpdateInfo;
import com.oculus.appmanager.info.ApkUpdateInfoContract;
import com.oculus.appmanager.info.InfoModule;
import com.oculus.appmanager.info.InfoUtils;
import com.oculus.appmanager.installer.service.InstallerServiceModule;
import com.oculus.appmanager.installer.service.MC;
import com.oculus.time.Clock;
import com.oculus.time.TimeModule;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Set;
import javax.annotation.Nullable;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID", "_UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_installer_service_InstallerEventEmitter_ULSEP_BINDING_ID"})
public class InstallQueue {
    private static final String TAG = "InstallQueue";
    private InjectionContext _UL_mInjectionContext;

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_appmanager_installer_service_InstallQueue_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallQueue_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_appmanager_installer_service_InstallQueue_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallQueue_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final InstallQueue _UL__ULSEP_com_oculus_appmanager_installer_service_InstallQueue_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (InstallQueue) UL.factorymap.get(InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallQueue_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final InstallQueue _UL__ULSEP_com_oculus_appmanager_installer_service_InstallQueue_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new InstallQueue(injectorLike);
    }

    @Inject
    public InstallQueue(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(4, injectorLike);
    }

    /* access modifiers changed from: package-private */
    public boolean shouldEnqueue(ApkUpdateInfo apkUpdateInfo) {
        final Set<ApkUpdateInfo> allUpdatesInTree = ((InfoUtils) FbInjector.lazyInstance(0, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getAllUpdatesInTree(apkUpdateInfo);
        List<ApkUpdateInfo> findUpdates = ((InfoUtils) FbInjector.lazyInstance(0, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).findUpdates(new Predicate<ApkUpdateInfo>() {
            /* class com.oculus.appmanager.installer.service.InstallQueue.AnonymousClass1 */

            public boolean apply(@Nullable ApkUpdateInfo apkUpdateInfo) {
                if (apkUpdateInfo == null) {
                    return false;
                }
                boolean z = apkUpdateInfo.getState().isTransient() && apkUpdateInfo.getState() != ApkUpdateInfoContract.UpdateState.QUEUED_DOWNLOAD;
                boolean z2 = apkUpdateInfo.getState() == ApkUpdateInfoContract.UpdateState.VERIFIED && allUpdatesInTree.contains(apkUpdateInfo);
                if (!z || z2) {
                    return false;
                }
                return true;
            }
        });
        BLog.d(TAG, "found in queue: %s", TextUtils.join(", ", allUpdatesInTree));
        if (((long) findUpdates.size()) >= ((MobileConfig) FbInjector.lazyInstance(2, MobileConfigFactoryModule.UL_id._UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getLong(MC.oculus_library.concurrent_download_max)) {
            return true;
        }
        return false;
    }

    /* access modifiers changed from: package-private */
    public void enqueueUpdate(ApkUpdateInfo apkUpdateInfo) {
        BLog.d(TAG, "enqueueUpdate(%s)", apkUpdateInfo);
        apkUpdateInfo.edit().putState(ApkUpdateInfoContract.UpdateState.QUEUED_DOWNLOAD, ((Clock) FbInjector.lazyInstance(1, TimeModule.UL_id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID, this._UL_mInjectionContext)).now()).save();
        for (ApkUpdateInfo apkUpdateInfo2 : ((InfoUtils) FbInjector.lazyInstance(0, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getDependencies(apkUpdateInfo)) {
            apkUpdateInfo2.edit().putState(ApkUpdateInfoContract.UpdateState.QUEUED_DOWNLOAD, ((Clock) FbInjector.lazyInstance(1, TimeModule.UL_id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID, this._UL_mInjectionContext)).now()).save();
        }
        ((InstallerEventEmitter) FbInjector.lazyInstance(3, InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerEventEmitter_ULSEP_BINDING_ID, this._UL_mInjectionContext)).notifyDownloadQueued(apkUpdateInfo);
    }

    @Nullable
    public ApkUpdateInfo getNextQueuedUpdate() {
        if (((MobileConfig) FbInjector.lazyInstance(2, MobileConfigFactoryModule.UL_id._UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getBoolean(MC.oculus_library.prioritize_dlc_installs)) {
            List<ApkUpdateInfo> findUpdates = ((InfoUtils) FbInjector.lazyInstance(0, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).findUpdates(new Predicate<ApkUpdateInfo>() {
                /* class com.oculus.appmanager.installer.service.InstallQueue.AnonymousClass2 */

                public boolean apply(@Nullable ApkUpdateInfo apkUpdateInfo) {
                    if (apkUpdateInfo == null || apkUpdateInfo.isDeleted() || !apkUpdateInfo.updateType.isAsset() || ((InfoUtils) FbInjector.lazyInstance(0, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, InstallQueue.this._UL_mInjectionContext)).hasParentUpdate(apkUpdateInfo) || apkUpdateInfo.getState() != ApkUpdateInfoContract.UpdateState.QUEUED_DOWNLOAD) {
                        return false;
                    }
                    return true;
                }
            });
            if (!findUpdates.isEmpty()) {
                ApkUpdateInfo apkUpdateInfo = findUpdates.get(0);
                for (ApkUpdateInfo apkUpdateInfo2 : findUpdates) {
                    if (((int) apkUpdateInfo2.getExtras().getStateTimestamp()) < ((int) apkUpdateInfo.getExtras().getStateTimestamp())) {
                        apkUpdateInfo = apkUpdateInfo2;
                    }
                }
                return apkUpdateInfo;
            }
        }
        List<ApkUpdateInfo> findUpdates2 = ((InfoUtils) FbInjector.lazyInstance(0, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).findUpdates(new Predicate<ApkUpdateInfo>() {
            /* class com.oculus.appmanager.installer.service.InstallQueue.AnonymousClass3 */

            public boolean apply(@Nullable ApkUpdateInfo apkUpdateInfo) {
                if (apkUpdateInfo != null && !apkUpdateInfo.isDeleted() && apkUpdateInfo.getState() == ApkUpdateInfoContract.UpdateState.QUEUED_DOWNLOAD) {
                    return true;
                }
                return false;
            }
        });
        if (findUpdates2.isEmpty()) {
            return null;
        }
        if (findUpdates2.size() > 1) {
            Collections.sort(findUpdates2, new Comparator<ApkUpdateInfo>() {
                /* class com.oculus.appmanager.installer.service.InstallQueue.AnonymousClass4 */

                public int compare(ApkUpdateInfo apkUpdateInfo, ApkUpdateInfo apkUpdateInfo2) {
                    return ((int) apkUpdateInfo.getExtras().getStateTimestamp()) - ((int) apkUpdateInfo2.getExtras().getStateTimestamp());
                }
            });
        }
        return findUpdates2.get(0);
    }
}
