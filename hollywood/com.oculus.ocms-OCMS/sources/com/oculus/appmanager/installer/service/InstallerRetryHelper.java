package com.oculus.appmanager.installer.service;

import com.facebook.debug.log.BLog;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.oculus.appmanager.info.ApkUpdateInfo;
import com.oculus.appmanager.info.ApkUpdateInfoContract;
import com.oculus.appmanager.info.InfoModule;
import com.oculus.appmanager.info.InfoUtils;
import com.oculus.appmanager.installer.service.InstallerServiceModule;
import com.oculus.extras.Extras;
import com.oculus.time.Clock;
import com.oculus.time.TimeModule;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID"})
public class InstallerRetryHelper {
    private static final String TAG = "InstallerRetryHelper";
    private InjectionContext _UL_mInjectionContext;

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_appmanager_installer_service_InstallerRetryHelper_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerRetryHelper_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_appmanager_installer_service_InstallerRetryHelper_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerRetryHelper_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final InstallerRetryHelper _UL__ULSEP_com_oculus_appmanager_installer_service_InstallerRetryHelper_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (InstallerRetryHelper) UL.factorymap.get(InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerRetryHelper_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final InstallerRetryHelper _UL__ULSEP_com_oculus_appmanager_installer_service_InstallerRetryHelper_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new InstallerRetryHelper(injectorLike);
    }

    @Inject
    public InstallerRetryHelper(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(2, injectorLike);
    }

    public long maybeRetryForFullVersion(ApkUpdateInfo apkUpdateInfo) {
        if (apkUpdateInfo.isUpdate && apkUpdateInfo.updateType.isPatchUpdate()) {
            String patchFailureFallbackDownloadUri = apkUpdateInfo.getExtras().getPatchFailureFallbackDownloadUri();
            long patchFailureFallbackDownloadSize = apkUpdateInfo.getExtras().getPatchFailureFallbackDownloadSize();
            String patchFailureFallbackDownloadChecksum = apkUpdateInfo.getExtras().getPatchFailureFallbackDownloadChecksum();
            if (patchFailureFallbackDownloadUri == null || patchFailureFallbackDownloadSize == 0) {
                BLog.d(TAG, "Failed patch update doesn't contain full download fallback info. Cannot retry");
            } else {
                ApkUpdateInfo.ApkUpdateExtrasBuilder apkUpdateExtrasBuilder = new ApkUpdateInfo.ApkUpdateExtrasBuilder();
                if (apkUpdateInfo.getExtras().hasKey(ApkUpdateInfoContract.EXTRA_ASSET_REQUIRED_FILENAME)) {
                    apkUpdateExtrasBuilder.putAssetRequiredFilename(apkUpdateInfo.getExtras().getAssetRequiredFilename());
                }
                if (apkUpdateInfo.getExtras().hasKey(ApkUpdateInfoContract.EXTRA_DEPENDENT_START_BY)) {
                    apkUpdateExtrasBuilder.putDependentStartedBy(apkUpdateInfo.getExtras().getDependentStartedBy());
                }
                if (apkUpdateInfo.getExtras().hasKey(ApkUpdateInfoContract.EXTRA_IS_REQUIRED_ASSET)) {
                    apkUpdateExtrasBuilder.putIsRequiredAsset(apkUpdateInfo.getExtras().isRequiredAsset());
                }
                if (apkUpdateInfo.getExtras().hasKey("package_name")) {
                    apkUpdateExtrasBuilder.putPackageName(apkUpdateInfo.getPackageName());
                }
                apkUpdateExtrasBuilder.putRetryOf(apkUpdateInfo.id);
                Extras build = apkUpdateExtrasBuilder.build();
                ImmutableList.Builder builder = new ImmutableList.Builder();
                for (ApkUpdateInfo apkUpdateInfo2 : ((InfoUtils) FbInjector.lazyInstance(1, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getDependencies(apkUpdateInfo)) {
                    builder.add((Object) Long.valueOf(apkUpdateInfo2.id));
                }
                ApkUpdateInfo addUpdate = ((InfoUtils) FbInjector.lazyInstance(1, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).addUpdate(apkUpdateInfo.identifier, apkUpdateInfo.updateType.toFullUpdate(), apkUpdateInfo.baseVersion, apkUpdateInfo.targetVersion, true, patchFailureFallbackDownloadSize, patchFailureFallbackDownloadUri, apkUpdateInfo.requestOrigin, builder.build(), apkUpdateInfo.accessToken, apkUpdateInfo.storeItemId, patchFailureFallbackDownloadChecksum, apkUpdateInfo.checksumHashAlg, apkUpdateInfo.displayTitle, apkUpdateInfo.requestingPackage, apkUpdateInfo.expectedSignature, apkUpdateInfo.externalSignatures, build, ImmutableMap.copyOf(apkUpdateInfo.requestHeaders));
                apkUpdateInfo.edit().putState(ApkUpdateInfoContract.UpdateState.RETRIED, ((Clock) FbInjector.lazyInstance(0, TimeModule.UL_id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID, this._UL_mInjectionContext)).now()).putRetriedUpdate(addUpdate.id).save();
                return addUpdate.id;
            }
        }
        return -1;
    }
}
