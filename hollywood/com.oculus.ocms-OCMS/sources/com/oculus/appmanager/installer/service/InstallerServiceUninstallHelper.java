package com.oculus.appmanager.installer.service;

import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageInstaller;
import android.content.pm.PackageManager;
import android.text.TextUtils;
import com.facebook.common.stringformat.StringFormatUtil;
import com.facebook.debug.log.BLog;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.inject.UnsafeContextInjection;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Eager;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.google.common.base.Preconditions;
import com.oculus.appmanager.info.ApkUpdateInfo;
import com.oculus.appmanager.info.ApkUpdateInfoContract;
import com.oculus.appmanager.info.InfoUtils;
import com.oculus.appmanager.info.model.InstallerResultError;
import com.oculus.appmanager.installer.analytics.InstallerAnalytics;
import com.oculus.appmanager.installer.contract.InstallerServiceContract;
import com.oculus.appmanager.installer.contract.errors.ErrorCategories;
import com.oculus.appmanager.installer.service.InstallerServiceModule;
import com.oculus.appmanager.uninstaller.events.UninstallCompleteEvent;
import com.oculus.appmanager.uninstaller.events.UninstallCompleteEventProvider;
import com.oculus.time.Clock;
import com.oculus.time.TimeModule;
import javax.annotation.Nullable;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID", "_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_UnsafeContextInjection_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_installer_analytics_InstallerAnalytics_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_uninstaller_events_UninstallCompleteEventProvider_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_installer_contract_InstallerServiceContract_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_installer_service_InstallerEventEmitter_ULSEP_BINDING_ID"})
public class InstallerServiceUninstallHelper {
    private static final String TAG = "InstallerServiceUninstallHelper";
    private static final int UNINSTALL_ERROR_CODE_BAD_CALL = 99;
    private InjectionContext _UL_mInjectionContext;
    @UnsafeContextInjection
    @Inject
    @Eager
    private final Context mContext;
    @Inject
    @Eager
    private final InstallerEventEmitter mEventEmitter;
    @Inject
    @Eager
    private final InfoUtils mInfoUtils;
    @Inject
    @Eager
    private final InstallerAnalytics mInstallerAnalytics;
    @Inject
    @Eager
    private final InstallerServiceContract mInstallerServiceContract;
    @Inject
    @Eager
    private final UninstallCompleteEventProvider mUninstallCompleteEventProvider;

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_appmanager_installer_service_InstallerServiceUninstallHelper_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceUninstallHelper_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_appmanager_installer_service_InstallerServiceUninstallHelper_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceUninstallHelper_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final InstallerServiceUninstallHelper _UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceUninstallHelper_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (InstallerServiceUninstallHelper) UL.factorymap.get(InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceUninstallHelper_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final InstallerServiceUninstallHelper _UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceUninstallHelper_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new InstallerServiceUninstallHelper(injectorLike);
    }

    @Inject
    public InstallerServiceUninstallHelper(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(1, injectorLike);
        this.mContext = BundledAndroidModule._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_UnsafeContextInjection_ULSEP_ACCESS_METHOD(injectorLike);
        this.mInstallerAnalytics = InstallerAnalytics._UL__ULSEP_com_oculus_appmanager_installer_analytics_InstallerAnalytics_ULSEP_ACCESS_METHOD(injectorLike);
        this.mUninstallCompleteEventProvider = UninstallCompleteEvent._UL__ULSEP_com_oculus_appmanager_uninstaller_events_UninstallCompleteEventProvider_ULSEP_ACCESS_METHOD(injectorLike);
        this.mInstallerServiceContract = InstallerServiceContract._UL__ULSEP_com_oculus_appmanager_installer_contract_InstallerServiceContract_ULSEP_ACCESS_METHOD(injectorLike);
        this.mInfoUtils = InfoUtils._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_ACCESS_METHOD(injectorLike);
        this.mEventEmitter = InstallerEventEmitter._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerEventEmitter_ULSEP_ACCESS_METHOD(injectorLike);
    }

    public void handleUninstallCompletedIntent(ApkUpdateInfo apkUpdateInfo, int i, @Nullable String str) {
        if (i == 0) {
            onUninstallSuccess(apkUpdateInfo);
        } else {
            onUninstallFailed(apkUpdateInfo, null, i, str);
        }
    }

    private void onUninstallSuccess(ApkUpdateInfo apkUpdateInfo) {
        BLog.i(TAG, "uninstall successful for %s", apkUpdateInfo);
        this.mInstallerAnalytics.reportUninstallSuccess(apkUpdateInfo);
        this.mInstallerAnalytics.reportInstallFunnelUninstallSuccess(apkUpdateInfo);
        apkUpdateInfo.edit().putState(ApkUpdateInfoContract.UpdateState.SUCCESS, ((Clock) FbInjector.lazyInstance(0, TimeModule.UL_id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID, this._UL_mInjectionContext)).now()).putInstallationDurationMs(getDuration(apkUpdateInfo.getExtras().getInstallationStartTimeMs())).save();
        this.mEventEmitter.notifyUninstallSucceeded(apkUpdateInfo);
    }

    private void onUninstallFailed(ApkUpdateInfo apkUpdateInfo, @Nullable Throwable th, int i, @Nullable String str) {
        BLog.i(TAG, "uninstall unsuccessful for %s", apkUpdateInfo);
        apkUpdateInfo.edit().putInstallationDurationMs(getDuration(apkUpdateInfo.getExtras().getInstallationStartTimeMs())).putErrorCode(i).save();
        String formatStrLocaleSafe = StringFormatUtil.formatStrLocaleSafe("%s (%d)", str, Integer.valueOf(i));
        this.mEventEmitter.notifyUninstallFailed(apkUpdateInfo);
        this.mInfoUtils.failQuiet(apkUpdateInfo, ErrorCategories.UNINSTALL_FAILED, formatStrLocaleSafe, InstallerResultError.UNINSTALLER_ERROR, th);
    }

    private void onUninstallStart(ApkUpdateInfo apkUpdateInfo) {
        apkUpdateInfo.edit().putState(ApkUpdateInfoContract.UpdateState.UNINSTALLING, ((Clock) FbInjector.lazyInstance(0, TimeModule.UL_id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID, this._UL_mInjectionContext)).now()).putInstallationDurationMs(getDuration(apkUpdateInfo.getExtras().getInstallationStartTimeMs())).save();
        this.mEventEmitter.notifyUninstallStarted(apkUpdateInfo);
        this.mInstallerAnalytics.reportUninstallStarted(apkUpdateInfo);
        this.mInstallerAnalytics.reportInstallFunnelUnInstallStarted(apkUpdateInfo);
    }

    private long getDuration(long j) {
        if (j != -1) {
            return ((Clock) FbInjector.lazyInstance(0, TimeModule.UL_id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID, this._UL_mInjectionContext)).now() - j;
        }
        return -1;
    }

    public void performUninstall(ApkUpdateInfo apkUpdateInfo) {
        String packageName = apkUpdateInfo.getPackageName();
        Preconditions.checkArgument(!TextUtils.isEmpty(packageName));
        BLog.d(TAG, "performUninstall(%s)", apkUpdateInfo);
        try {
            this.mContext.getPackageManager().getPackageInfo(packageName, 0);
            onUninstallStart(apkUpdateInfo);
            PendingIntent service = PendingIntent.getService(this.mContext, 0, createUninstallCompletedIntent(apkUpdateInfo), 1073741824);
            PackageInstaller packageInstaller = this.mContext.getPackageManager().getPackageInstaller();
            BLog.i(TAG, "Sending uninstall request to Package Installer for %s", apkUpdateInfo);
            packageInstaller.uninstall(packageName, service.getIntentSender());
        } catch (PackageManager.NameNotFoundException e) {
            BLog.e(TAG, "Cannot uninstall(%s)", apkUpdateInfo, e);
            onUninstallFailed(apkUpdateInfo, e, 99, "not installed");
        }
    }

    private Intent createUninstallCompletedIntent(ApkUpdateInfo apkUpdateInfo) {
        String packageName = apkUpdateInfo.getPackageName();
        Preconditions.checkArgument(!TextUtils.isEmpty(packageName));
        Intent createUninstallCompleteIntent = this.mInstallerServiceContract.createUninstallCompleteIntent(apkUpdateInfo);
        createUninstallCompleteIntent.setClass(this.mContext, InstallerService.class);
        createUninstallCompleteIntent.addCategory(packageName);
        return createUninstallCompleteIntent;
    }
}
