package com.oculus.appmanager.installer.service;

import android.content.Context;
import android.os.Handler;
import android.os.Looper;
import com.facebook.debug.log.BLog;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazies;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightSingletonProvider;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.oculus.appmanager.installer.service.InstallerServiceModule;
import com.oculus.errorreporting.interfaces.IErrorReporter;
import com.oculus.errorreporting.interfaces.InterfacesModule;
import com.oculus.os.TimedWifiLock;
import com.oculus.os.Version;
import com.oculus.util.device.DeviceModule;
import com.oculus.util.device.DeviceUtils;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_UnsafeContextInjection_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_util_device_DeviceUtils_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_BINDING_ID"})
@ApplicationScoped
public class InstallerServiceInstallLock {
    private static final String TAG = "InstallerServiceInstallLock";
    private static final int WAKELOCK_TIMEOUT = 7200000;
    private static volatile InstallerServiceInstallLock _UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceInstallLock_ULSEP_INSTANCE = null;
    private static final String sLockTag = "installer_service";
    private InjectionContext _UL_mInjectionContext;
    private Lazy<TimedWifiLock> mTimedWifiLock = Lazies.of(null);

    @AutoGeneratedAccessMethod
    public static final InstallerServiceInstallLock _UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceInstallLock_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (InstallerServiceInstallLock) UL.factorymap.get(InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceInstallLock_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final InstallerServiceInstallLock _UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceInstallLock_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceInstallLock_ULSEP_INSTANCE == null) {
            synchronized (InstallerServiceInstallLock.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceInstallLock_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        _UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceInstallLock_ULSEP_INSTANCE = new InstallerServiceInstallLock(injectorLike.getApplicationInjector());
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceInstallLock_ULSEP_INSTANCE;
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_appmanager_installer_service_InstallerServiceInstallLock_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceInstallLock_ULSEP_BINDING_ID, injectorLike);
    }

    @Inject
    public InstallerServiceInstallLock(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(3, injectorLike);
    }

    public synchronized void tryAcquireInstallLock() {
        if (isTimedWifiLockAvailable()) {
            BLog.d(TAG, "tryAcquireInstallLock() called");
            ensureLocksInitialized();
            if (this.mTimedWifiLock.get() != null) {
                try {
                    this.mTimedWifiLock.get().acquire();
                } catch (Exception e) {
                    BLog.e(TAG, e, "Exception occurred when trying to acquire a TimedWifiLock");
                    ((IErrorReporter) FbInjector.lazyInstance(2, InterfacesModule.UL_id._UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_BINDING_ID, this._UL_mInjectionContext)).softError(TAG, "Error in acquiring TimedWifiLock", e);
                }
            }
        } else {
            BLog.d(TAG, "TimedWifiLock not available");
        }
    }

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_appmanager_installer_service_InstallerServiceInstallLock_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceInstallLock_ULSEP_BINDING_ID, injectorLike);
    }

    public synchronized void tryReleaseInstallLock() {
        if (isTimedWifiLockAvailable()) {
            BLog.d(TAG, "tryReleaseInstallLock() called");
            if (this.mTimedWifiLock.get() != null) {
                this.mTimedWifiLock.get().release();
            }
        }
    }

    private void ensureLocksInitialized() {
        if (isTimedWifiLockAvailable() && this.mTimedWifiLock.get() == null) {
            this.mTimedWifiLock = Lazies.of(new TimedWifiLock((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_UnsafeContextInjection_ULSEP_BINDING_ID, this._UL_mInjectionContext), sLockTag, (int) WAKELOCK_TIMEOUT, new Handler(Looper.getMainLooper())));
        }
    }

    private boolean isTimedWifiLockAvailable() {
        return ((DeviceUtils) FbInjector.lazyInstance(1, DeviceModule.UL_id._UL__ULSEP_com_oculus_util_device_DeviceUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).isStandAloneDevice() && Version.CURRENT_SDK_VERSION >= 8;
    }
}
