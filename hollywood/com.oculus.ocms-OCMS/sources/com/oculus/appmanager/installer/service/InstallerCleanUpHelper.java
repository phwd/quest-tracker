package com.oculus.appmanager.installer.service;

import android.text.TextUtils;
import com.facebook.debug.log.BLog;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Eager;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.google.common.collect.UnmodifiableIterator;
import com.oculus.appmanager.info.ApkUpdateInfo;
import com.oculus.appmanager.info.InfoUtils;
import com.oculus.appmanager.installer.analytics.InstallerAnalytics;
import com.oculus.appmanager.installer.common.InstallerFileUtils;
import com.oculus.appmanager.installer.service.InstallerServiceModule;
import com.oculus.time.Clock;
import com.oculus.time.TimeModule;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_installer_analytics_InstallerAnalytics_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_installer_common_InstallerFileUtils_ULSEP_BINDING_ID"})
public class InstallerCleanUpHelper {
    private static final String TAG = "InstallerCleanUpHelper";
    private InjectionContext _UL_mInjectionContext;
    @Inject
    @Eager
    private final InfoUtils mInfoUtils;
    @Inject
    @Eager
    private final InstallerAnalytics mInstallerAnalytics;
    @Inject
    @Eager
    private final InstallerFileUtils mInstallerFileUtils;

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_appmanager_installer_service_InstallerCleanUpHelper_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerCleanUpHelper_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final InstallerCleanUpHelper _UL__ULSEP_com_oculus_appmanager_installer_service_InstallerCleanUpHelper_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (InstallerCleanUpHelper) UL.factorymap.get(InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerCleanUpHelper_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final InstallerCleanUpHelper _UL__ULSEP_com_oculus_appmanager_installer_service_InstallerCleanUpHelper_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new InstallerCleanUpHelper(injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_appmanager_installer_service_InstallerCleanUpHelper_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerCleanUpHelper_ULSEP_BINDING_ID, injectorLike);
    }

    @Inject
    public InstallerCleanUpHelper(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(1, injectorLike);
        this.mInfoUtils = InfoUtils._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_ACCESS_METHOD(injectorLike);
        this.mInstallerAnalytics = InstallerAnalytics._UL__ULSEP_com_oculus_appmanager_installer_analytics_InstallerAnalytics_ULSEP_ACCESS_METHOD(injectorLike);
        this.mInstallerFileUtils = InstallerFileUtils._UL__ULSEP_com_oculus_appmanager_installer_common_InstallerFileUtils_ULSEP_ACCESS_METHOD(injectorLike);
    }

    public void cleanUpStorage(ApkUpdateInfo apkUpdateInfo) {
        String[] strArr = {apkUpdateInfo.getExtras().getDownloadingExternalFile(), apkUpdateInfo.getExtras().getDownloadedExternalFile(), apkUpdateInfo.getExtras().getFinalPatchedExternalFilePath(), apkUpdateInfo.getExtras().getSandboxedFilePath(), apkUpdateInfo.getExtras().getPreparedInstallFilePath(), apkUpdateInfo.getExtras().getInstallBackupFilePath()};
        for (String str : strArr) {
            if (!TextUtils.isEmpty(str)) {
                this.mInstallerFileUtils.removeFileWithReason(str, "clean up");
            }
        }
        for (ApkUpdateInfo apkUpdateInfo2 : this.mInfoUtils.getDependencies(apkUpdateInfo)) {
            cleanUpStorage(apkUpdateInfo2);
        }
    }

    public void performBootCleanUpProcess() {
        BLog.i(TAG, "Performing boot clean up");
        UnmodifiableIterator<ApkUpdateInfo> it = this.mInfoUtils.getAllUpdates().iterator();
        boolean z = false;
        boolean z2 = false;
        while (it.hasNext()) {
            ApkUpdateInfo next = it.next();
            if (next.getExtras().getStateTimestamp() >= ((Clock) FbInjector.lazyInstance(0, TimeModule.UL_id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID, this._UL_mInjectionContext)).now() - ((Clock) FbInjector.lazyInstance(0, TimeModule.UL_id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID, this._UL_mInjectionContext)).elapsedRealtime()) {
                z2 = true;
            } else {
                clearUpdate(next);
            }
        }
        if (!z2) {
            File externalStorageFilesFolder = this.mInstallerFileUtils.getExternalStorageFilesFolder();
            File internalStorageFilesFolder = this.mInstallerFileUtils.getInternalStorageFilesFolder();
            File legacyInternalStorageFilesFolder = this.mInstallerFileUtils.getLegacyInternalStorageFilesFolder();
            File[] listFiles = externalStorageFilesFolder.listFiles();
            File[] listFiles2 = internalStorageFilesFolder.listFiles();
            File[] listFiles3 = legacyInternalStorageFilesFolder.listFiles();
            ArrayList<File> arrayList = new ArrayList();
            if (listFiles != null && listFiles.length > 0) {
                arrayList.addAll(Arrays.asList(listFiles));
            }
            if (listFiles2 != null && listFiles2.length > 0) {
                arrayList.addAll(Arrays.asList(listFiles2));
            }
            if (listFiles3 != null && listFiles3.length > 0) {
                arrayList.addAll(Arrays.asList(listFiles3));
            }
            if (!arrayList.isEmpty()) {
                this.mInstallerAnalytics.reportLingeringFilesAtBoot(arrayList);
                for (File file : arrayList) {
                    if (!this.mInstallerFileUtils.removeFileWithReason(file.getAbsolutePath(), "boot cleanup") && file.exists()) {
                        z = true;
                    }
                }
            }
            if (!z) {
                this.mInstallerFileUtils.removeDirectoryWithReason(externalStorageFilesFolder, "boot cleanup");
                this.mInstallerFileUtils.removeDirectoryWithReason(internalStorageFilesFolder, "boot cleanup");
                this.mInstallerFileUtils.removeDirectoryWithReason(legacyInternalStorageFilesFolder, "legacy removal");
            }
        }
    }

    private void clearUpdate(ApkUpdateInfo apkUpdateInfo) {
        cleanUpStorage(apkUpdateInfo);
        if (!apkUpdateInfo.isDeleted()) {
            this.mInstallerAnalytics.reportFinalUpdateState(apkUpdateInfo);
            this.mInfoUtils.deleteUpdate(apkUpdateInfo.id);
        }
    }
}
