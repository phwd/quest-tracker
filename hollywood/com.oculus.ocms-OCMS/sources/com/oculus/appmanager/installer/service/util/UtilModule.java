package com.oculus.appmanager.installer.service.util;

import com.facebook.common.android.AndroidModule;
import com.facebook.inject.AbstractLibraryModule;
import com.facebook.inject.AutoGeneratedBinder;
import com.facebook.inject.Binder;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.InjectorModule;
import com.facebook.ultralight.AutoGeneratedSwitchIdClass;
import com.facebook.ultralight.UL;
import com.google.inject.Key;
import com.oculus.appmanager.info.InfoModule;
import com.oculus.appmanager.installer.common.CommonModule;
import com.oculus.appmanager.installer.contract.ContractModule;
import com.oculus.common.init.AppInitModule;
import com.oculus.common.packagescache.PackagesCacheModule;
import com.oculus.errorreporting.ErrorReportingModule;
import com.oculus.errorreporting.interfaces.InterfacesModule;
import com.oculus.executors.ExecutorsModule;
import com.oculus.time.TimeModule;
import com.oculus.util.device.DeviceModule;
import com.oculus.util.thread.ThreadModule;

@InjectorModule
public class UtilModule extends AbstractLibraryModule {

    @AutoGeneratedSwitchIdClass
    public static final class UL_id {
        public static final int _UL__ULSEP_com_oculus_appmanager_installer_service_util_InstallerServiceUtil_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_appmanager_installer_service_util_InstallerServiceUtil_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(InstallerServiceUtil.class)));
    }

    @AutoGeneratedBinder
    static class AutoGeneratedBindingsForUtilModule {
        AutoGeneratedBindingsForUtilModule() {
        }

        static void bind(Binder binder) {
            if (!UL.USE_STATIC_DI) {
                binder.require(AndroidModule.class);
                binder.require(BundledAndroidModule.class);
                binder.require(com.oculus.android.AndroidModule.class);
                binder.require(InfoModule.class);
                binder.require(CommonModule.class);
                binder.require(ContractModule.class);
                binder.require(AppInitModule.class);
                binder.require(PackagesCacheModule.class);
                binder.require(ErrorReportingModule.class);
                binder.require(InterfacesModule.class);
                binder.require(ExecutorsModule.class);
                binder.require(TimeModule.class);
                binder.require(DeviceModule.class);
                binder.require(ThreadModule.class);
                binder.bind(InstallerServiceUtil.class).toProvider(new InstallerServiceUtilAutoProvider());
            }
        }
    }
}
