package com.oculus.appmanager.installer.service;

import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Eager;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.oculus.appmanager.constants.OculusAppManagerErrorCodes;
import com.oculus.appmanager.info.ApkUpdateInfo;
import com.oculus.appmanager.info.InfoUtils;
import com.oculus.appmanager.info.model.InstallerResultError;
import com.oculus.appmanager.installer.events.DownloadQueuedResponse;
import com.oculus.appmanager.installer.events.DownloadResponse;
import com.oculus.appmanager.installer.events.DownloadingResponse;
import com.oculus.appmanager.installer.events.InstallCancelledResponse;
import com.oculus.appmanager.installer.events.InstallResponse;
import com.oculus.appmanager.installer.events.InstallerEventBus;
import com.oculus.appmanager.installer.service.InstallerServiceModule;
import com.oculus.appmanager.uninstaller.events.UninstallRequestedEvent;
import com.oculus.appmanager.uninstaller.events.UninstallResponse;
import com.oculus.appmanager.uninstaller.events.UninstallerEventBus;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID"})
public class InstallerEventEmitter {
    public static final String TAG = "InstallerEventEmitter";
    @Inject
    @Eager
    private final InfoUtils mInfoUtils;

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_appmanager_installer_service_InstallerEventEmitter_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerEventEmitter_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final InstallerEventEmitter _UL__ULSEP_com_oculus_appmanager_installer_service_InstallerEventEmitter_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (InstallerEventEmitter) UL.factorymap.get(InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerEventEmitter_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final InstallerEventEmitter _UL__ULSEP_com_oculus_appmanager_installer_service_InstallerEventEmitter_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new InstallerEventEmitter(injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_appmanager_installer_service_InstallerEventEmitter_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerEventEmitter_ULSEP_BINDING_ID, injectorLike);
    }

    @Inject
    public InstallerEventEmitter(InjectorLike injectorLike) {
        this.mInfoUtils = InfoUtils._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_ACCESS_METHOD(injectorLike);
    }

    public void notifyInstallCancelled(ApkUpdateInfo apkUpdateInfo) {
        InstallerEventBus.getInstance().post(new InstallCancelledResponse(apkUpdateInfo.identifier));
    }

    public void notifyDownloadFailed(ApkUpdateInfo apkUpdateInfo) {
        InstallerEventBus.getInstance().post(new DownloadResponse(apkUpdateInfo.id, false, apkUpdateInfo.isUpdate, apkUpdateInfo.identifier, apkUpdateInfo.getExtras().getDownloadReason(), this.mInfoUtils.resultForFinalUpdate(apkUpdateInfo)));
    }

    public void notifyDownloadQueued(ApkUpdateInfo apkUpdateInfo) {
        InstallerEventBus.getInstance().post(new DownloadQueuedResponse(apkUpdateInfo.identifier));
    }

    public void notifyDownloading(ApkUpdateInfo apkUpdateInfo) {
        long j = 0;
        for (ApkUpdateInfo apkUpdateInfo2 : this.mInfoUtils.getAllUpdatesInTree(apkUpdateInfo)) {
            j += apkUpdateInfo2.downloadSize;
        }
        InstallerEventBus.getInstance().post(new DownloadingResponse(apkUpdateInfo.identifier, j));
    }

    public void notifyDownloadSucceeded(ApkUpdateInfo apkUpdateInfo) {
        InstallerEventBus.getInstance().post(new DownloadResponse(apkUpdateInfo.id, true, apkUpdateInfo.isUpdate, apkUpdateInfo.identifier, OculusAppManagerErrorCodes.ERROR_CODE_NO_ERROR, this.mInfoUtils.defaultInstallerResult(apkUpdateInfo)));
    }

    public void notifyInstallSucceeded(ApkUpdateInfo apkUpdateInfo) {
        InstallerEventBus.getInstance().post(new InstallResponse(apkUpdateInfo.id, true, apkUpdateInfo.isUpdate, apkUpdateInfo.identifier, (int) apkUpdateInfo.targetVersion, null, this.mInfoUtils.resultForFinalUpdate(apkUpdateInfo)));
    }

    public void notifyInstallFailed(ApkUpdateInfo apkUpdateInfo, String str) {
        InstallerEventBus.getInstance().post(new InstallResponse(apkUpdateInfo.id, false, apkUpdateInfo.isUpdate, apkUpdateInfo.identifier, (int) apkUpdateInfo.targetVersion, str, this.mInfoUtils.resultForFinalUpdate(apkUpdateInfo)));
    }

    public void notifyUninstallStarted(ApkUpdateInfo apkUpdateInfo) {
        UninstallerEventBus.getInstance().post(new UninstallRequestedEvent(apkUpdateInfo.identifier));
    }

    public void notifyUninstallSucceeded(ApkUpdateInfo apkUpdateInfo) {
        UninstallerEventBus.getInstance().post(UninstallResponse.success(apkUpdateInfo.identifier, null));
    }

    public void notifyUninstallFailed(ApkUpdateInfo apkUpdateInfo) {
        UninstallerEventBus.getInstance().post(UninstallResponse.failure(apkUpdateInfo.identifier, InstallerResultError.UNKNOWN_ERROR, null));
    }
}
