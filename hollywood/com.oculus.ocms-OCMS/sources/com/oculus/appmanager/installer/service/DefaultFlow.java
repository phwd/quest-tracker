package com.oculus.appmanager.installer.service;

import androidx.annotation.VisibleForTesting;
import com.facebook.debug.log.BLog;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.oculus.appmanager.info.ApkUpdateInfo;
import com.oculus.appmanager.info.ApkUpdateInfoContract;
import com.oculus.appmanager.info.InfoModule;
import com.oculus.appmanager.info.InfoUtils;
import com.oculus.appmanager.installer.service.InstallerServiceModule;
import com.oculus.time.Clock;
import com.oculus.time.TimeModule;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceVerificationHelper_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceInstallHelper_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceDownloadHelper_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_installer_service_InstallQueue_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID"})
public class DefaultFlow implements InstallFlow {
    private static final String TAG = "DefaultFlow";
    private InjectionContext _UL_mInjectionContext;

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_appmanager_installer_service_DefaultFlow_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_DefaultFlow_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final DefaultFlow _UL__ULSEP_com_oculus_appmanager_installer_service_DefaultFlow_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (DefaultFlow) UL.factorymap.get(InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_DefaultFlow_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final DefaultFlow _UL__ULSEP_com_oculus_appmanager_installer_service_DefaultFlow_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new DefaultFlow(injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_appmanager_installer_service_DefaultFlow_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_DefaultFlow_ULSEP_BINDING_ID, injectorLike);
    }

    @Inject
    public DefaultFlow(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(6, injectorLike);
    }

    @Override // com.oculus.appmanager.installer.service.InstallFlow
    public boolean continueUpdate(ApkUpdateInfo apkUpdateInfo) {
        if (!downloadAndVerifyAllFiles(apkUpdateInfo) && areAllFilesDownloadedAndVerified(apkUpdateInfo) && !performInstallIfRoot(apkUpdateInfo)) {
            return false;
        }
        return true;
    }

    @VisibleForTesting
    public boolean downloadAndVerifyAllFiles(ApkUpdateInfo apkUpdateInfo) {
        ArrayList<ApkUpdateInfo> arrayList = new ArrayList(((InfoUtils) FbInjector.lazyInstance(3, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getDependencies(apkUpdateInfo));
        arrayList.add(apkUpdateInfo);
        Collections.sort(arrayList, new Comparator<ApkUpdateInfo>() {
            /* class com.oculus.appmanager.installer.service.DefaultFlow.AnonymousClass1 */

            public int compare(ApkUpdateInfo apkUpdateInfo, ApkUpdateInfo apkUpdateInfo2) {
                long j;
                long j2;
                if (apkUpdateInfo.updateType.isPatchUpdate() && apkUpdateInfo2.updateType.isPatchUpdate()) {
                    j = apkUpdateInfo2.downloadSize;
                    j2 = apkUpdateInfo.downloadSize;
                } else if (apkUpdateInfo.updateType.isPatchUpdate()) {
                    return -1;
                } else {
                    if (apkUpdateInfo2.updateType.isPatchUpdate()) {
                        return 1;
                    }
                    j = apkUpdateInfo2.downloadSize;
                    j2 = apkUpdateInfo.downloadSize;
                }
                return (int) (j - j2);
            }
        });
        boolean z = false;
        for (ApkUpdateInfo apkUpdateInfo2 : arrayList) {
            ApkUpdateInfoContract.UpdateState state = apkUpdateInfo2.getState();
            if (state.isInitial() || state == ApkUpdateInfoContract.UpdateState.QUEUED_DOWNLOAD) {
                BLog.d(TAG, "Found dependency w/ required download while processing %s", apkUpdateInfo);
                download(apkUpdateInfo2);
            } else if (state == ApkUpdateInfoContract.UpdateState.DOWNLOADED) {
                verify(apkUpdateInfo2, false);
            }
            z = true;
        }
        return z;
    }

    private boolean areAllFilesDownloadedAndVerified(ApkUpdateInfo apkUpdateInfo) {
        for (ApkUpdateInfo apkUpdateInfo2 : ((InfoUtils) FbInjector.lazyInstance(3, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getDependencies(apkUpdateInfo)) {
            ApkUpdateInfoContract.UpdateState state = apkUpdateInfo2.getState();
            if (!(state == ApkUpdateInfoContract.UpdateState.VERIFIED || state == ApkUpdateInfoContract.UpdateState.INSTALLING || state == ApkUpdateInfoContract.UpdateState.QUEUED_DOWNLOAD || state.isFinal())) {
                BLog.d(TAG, "Still waiting on dependencies to download and verify while processing %s. Waiting for: %s", apkUpdateInfo, apkUpdateInfo2);
                return false;
            }
        }
        ApkUpdateInfoContract.UpdateState state2 = apkUpdateInfo.getState();
        if (state2 == ApkUpdateInfoContract.UpdateState.VERIFIED || state2 == ApkUpdateInfoContract.UpdateState.INSTALLING || state2 == ApkUpdateInfoContract.UpdateState.QUEUED_DOWNLOAD || state2.isFinal()) {
            return true;
        }
        BLog.d(TAG, "Still waiting on self to download and verify while processing %s.", apkUpdateInfo);
        return false;
    }

    private boolean performInstallIfRoot(ApkUpdateInfo apkUpdateInfo) {
        if (((InfoUtils) FbInjector.lazyInstance(3, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).hasParentUpdate(apkUpdateInfo) || apkUpdateInfo.getState() != ApkUpdateInfoContract.UpdateState.VERIFIED) {
            return false;
        }
        install(apkUpdateInfo);
        return true;
    }

    @VisibleForTesting
    public void download(ApkUpdateInfo apkUpdateInfo) {
        BLog.d(TAG, "download(%s)", apkUpdateInfo);
        if (!((InstallQueue) FbInjector.lazyInstance(4, InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallQueue_ULSEP_BINDING_ID, this._UL_mInjectionContext)).shouldEnqueue(apkUpdateInfo)) {
            ((InstallerServiceDownloadHelper) FbInjector.lazyInstance(2, InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceDownloadHelper_ULSEP_BINDING_ID, this._UL_mInjectionContext)).download(apkUpdateInfo);
        } else if (apkUpdateInfo.getState() != ApkUpdateInfoContract.UpdateState.QUEUED_DOWNLOAD) {
            apkUpdateInfo.edit().putState(ApkUpdateInfoContract.UpdateState.QUEUED_DOWNLOAD, ((Clock) FbInjector.lazyInstance(5, TimeModule.UL_id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID, this._UL_mInjectionContext)).now()).save();
        }
    }

    @VisibleForTesting
    public void verify(ApkUpdateInfo apkUpdateInfo, boolean z) {
        BLog.d(TAG, "verify(%s)", apkUpdateInfo);
        ((InstallerServiceVerificationHelper) FbInjector.lazyInstance(0, InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceVerificationHelper_ULSEP_BINDING_ID, this._UL_mInjectionContext)).verifyDownload(apkUpdateInfo, z);
    }

    @VisibleForTesting
    public void install(ApkUpdateInfo apkUpdateInfo) {
        BLog.d(TAG, "install(%s)", apkUpdateInfo);
        if (apkUpdateInfo.updateType.isApk()) {
            ((InstallerServiceInstallHelper) FbInjector.lazyInstance(1, InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceInstallHelper_ULSEP_BINDING_ID, this._UL_mInjectionContext)).installOrUpdateApp(apkUpdateInfo);
        } else if (apkUpdateInfo.updateType.isAsset()) {
            ((InstallerServiceInstallHelper) FbInjector.lazyInstance(1, InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceInstallHelper_ULSEP_BINDING_ID, this._UL_mInjectionContext)).installAsset(apkUpdateInfo);
        } else {
            throw new IllegalArgumentException("Unknown type to install: " + apkUpdateInfo.updateType);
        }
    }
}
