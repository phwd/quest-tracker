package com.oculus.appmanager.installer.service;

import com.facebook.debug.log.BLog;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightSingletonProvider;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Eager;
import com.facebook.ultralight.UL;
import com.oculus.appmanager.installer.contract.InstallerServiceContract;
import com.oculus.appmanager.installer.service.InstallerServiceModule;
import com.oculus.downloader.OculusDownloadListener;
import com.oculus.downloader.model.DownloadInfo;
import javax.inject.Inject;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_appmanager_installer_contract_InstallerServiceContract_ULSEP_BINDING_ID"})
@ApplicationScoped
public class InstallerDownloadListener implements OculusDownloadListener {
    private static final String TAG = "InstallerDownloadListener";
    private static volatile InstallerDownloadListener _UL__ULSEP_com_oculus_appmanager_installer_service_InstallerDownloadListener_ULSEP_INSTANCE;
    @Inject
    @Eager
    private final InstallerServiceContract mInstallerServiceContract;

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_appmanager_installer_service_InstallerDownloadListener_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerDownloadListener_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final InstallerDownloadListener _UL__ULSEP_com_oculus_appmanager_installer_service_InstallerDownloadListener_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (InstallerDownloadListener) UL.factorymap.get(InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerDownloadListener_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final InstallerDownloadListener _UL__ULSEP_com_oculus_appmanager_installer_service_InstallerDownloadListener_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_appmanager_installer_service_InstallerDownloadListener_ULSEP_INSTANCE == null) {
            synchronized (InstallerDownloadListener.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_appmanager_installer_service_InstallerDownloadListener_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        _UL__ULSEP_com_oculus_appmanager_installer_service_InstallerDownloadListener_ULSEP_INSTANCE = new InstallerDownloadListener(injectorLike.getApplicationInjector());
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_appmanager_installer_service_InstallerDownloadListener_ULSEP_INSTANCE;
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_appmanager_installer_service_InstallerDownloadListener_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerDownloadListener_ULSEP_BINDING_ID, injectorLike);
    }

    @Inject
    public InstallerDownloadListener(InjectorLike injectorLike) {
        this.mInstallerServiceContract = InstallerServiceContract._UL__ULSEP_com_oculus_appmanager_installer_contract_InstallerServiceContract_ULSEP_ACCESS_METHOD(injectorLike);
    }

    @Override // com.oculus.downloader.OculusDownloadListener
    public void onDownloadComplete(DownloadInfo downloadInfo) {
        BLog.i(TAG, "Received download completion notification. id=%d pkg=%s status=%s reason=%s", Long.valueOf(downloadInfo.id), downloadInfo.description.isPresent() ? downloadInfo.description.get() : "unknown", Integer.valueOf(downloadInfo.status), Integer.valueOf(downloadInfo.reason));
        this.mInstallerServiceContract.onDownloadCompleteNotification(downloadInfo.id);
    }
}
