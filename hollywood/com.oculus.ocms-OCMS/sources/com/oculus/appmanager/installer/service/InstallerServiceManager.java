package com.oculus.appmanager.installer.service;

import android.text.TextUtils;
import androidx.annotation.VisibleForTesting;
import com.facebook.common.identifiers.SafeUUIDGenerator;
import com.facebook.debug.log.BLog;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.mobileconfig.factory.MobileConfig;
import com.facebook.mobileconfig.factory.module.MobileConfigFactoryModule;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.google.common.base.Preconditions;
import com.google.common.base.Predicate;
import com.google.common.util.concurrent.SettableFuture;
import com.oculus.appmanager.info.ApkUpdateInfo;
import com.oculus.appmanager.info.ApkUpdateInfoContract;
import com.oculus.appmanager.info.InfoModule;
import com.oculus.appmanager.info.InfoUtils;
import com.oculus.appmanager.info.model.InstallerResult;
import com.oculus.appmanager.info.model.InstallerResultError;
import com.oculus.appmanager.installer.analytics.AnalyticsModule;
import com.oculus.appmanager.installer.analytics.InstallerAnalytics;
import com.oculus.appmanager.installer.contract.errors.ErrorCategories;
import com.oculus.appmanager.installer.service.InstallerServiceModule;
import com.oculus.appmanager.installer.service.MC;
import com.oculus.time.Clock;
import com.oculus.time.TimeModule;
import java.util.List;
import java.util.Locale;
import javax.annotation.Nullable;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceInstallHelper_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceUninstallHelper_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceDownloadHelper_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_installer_analytics_InstallerAnalytics_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_installer_service_InstallerFailureHelper_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_installer_service_InstallerCancelHelper_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_installer_service_InstallerCleanUpHelper_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_installer_service_InstallerEventEmitter_ULSEP_BINDING_ID", "_UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceInstallLock_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_installer_service_DefaultFlow_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_installer_service_InstallQueue_ULSEP_BINDING_ID"})
public class InstallerServiceManager {
    private static final String TAG = "InstallerServiceManager";
    private InjectionContext _UL_mInjectionContext;

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_appmanager_installer_service_InstallerServiceManager_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceManager_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_appmanager_installer_service_InstallerServiceManager_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceManager_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final InstallerServiceManager _UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceManager_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (InstallerServiceManager) UL.factorymap.get(InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceManager_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final InstallerServiceManager _UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceManager_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new InstallerServiceManager(injectorLike);
    }

    @Inject
    public InstallerServiceManager(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(14, injectorLike);
    }

    /* access modifiers changed from: package-private */
    public void requestInstall(ApkUpdateInfo apkUpdateInfo) {
        BLog.i(TAG, "requestInstall(%s)", apkUpdateInfo);
        Preconditions.checkArgument(!((InfoUtils) FbInjector.lazyInstance(3, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).hasParentUpdate(apkUpdateInfo));
        apkUpdateInfo.edit().putUUID(SafeUUIDGenerator.randomUUID().toString()).save();
        ((InstallerAnalytics) FbInjector.lazyInstance(4, AnalyticsModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_analytics_InstallerAnalytics_ULSEP_BINDING_ID, this._UL_mInjectionContext)).reportNewInstallFunnel(apkUpdateInfo);
        ((InstallerAnalytics) FbInjector.lazyInstance(4, AnalyticsModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_analytics_InstallerAnalytics_ULSEP_BINDING_ID, this._UL_mInjectionContext)).reportInstallFunnelRequestOrigin(apkUpdateInfo, apkUpdateInfo.requestOrigin, apkUpdateInfo.requestingPackage);
        for (ApkUpdateInfo apkUpdateInfo2 : ((InfoUtils) FbInjector.lazyInstance(3, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getDependencies(apkUpdateInfo)) {
            if (apkUpdateInfo2.getState().isInitial()) {
                apkUpdateInfo2.edit().putDependentStartedBy(apkUpdateInfo.id).save();
            } else {
                BLog.w(TAG, "Found a dependency in non initial state for %s", apkUpdateInfo.toString());
            }
        }
        if (apkUpdateInfo.updateType.isApk()) {
            ((InstallerAnalytics) FbInjector.lazyInstance(4, AnalyticsModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_analytics_InstallerAnalytics_ULSEP_BINDING_ID, this._UL_mInjectionContext)).reportNewInstallRequest(((InfoUtils) FbInjector.lazyInstance(3, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getUpdateInfoCollection(apkUpdateInfo));
        } else if (apkUpdateInfo.updateType.isAsset()) {
            ((InstallerAnalytics) FbInjector.lazyInstance(4, AnalyticsModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_analytics_InstallerAnalytics_ULSEP_BINDING_ID, this._UL_mInjectionContext)).reportNewAssetInstallRequest(apkUpdateInfo);
        } else {
            throw new IllegalArgumentException("Unsupported install request");
        }
        if (!validateInstallRequestUpdate(apkUpdateInfo)) {
            return;
        }
        if (((InstallQueue) FbInjector.lazyInstance(13, InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallQueue_ULSEP_BINDING_ID, this._UL_mInjectionContext)).shouldEnqueue(apkUpdateInfo)) {
            ((InstallQueue) FbInjector.lazyInstance(13, InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallQueue_ULSEP_BINDING_ID, this._UL_mInjectionContext)).enqueueUpdate(apkUpdateInfo);
            return;
        }
        ((InstallerServiceInstallLock) FbInjector.lazyInstance(11, InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceInstallLock_ULSEP_BINDING_ID, this._UL_mInjectionContext)).tryAcquireInstallLock();
        continueUpdate(apkUpdateInfo);
    }

    /* access modifiers changed from: package-private */
    public void requestUninstall(ApkUpdateInfo apkUpdateInfo) {
        BLog.i(TAG, "requestUninstall(%s)", apkUpdateInfo);
        Preconditions.checkArgument(!((InfoUtils) FbInjector.lazyInstance(3, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).hasParentUpdate(apkUpdateInfo));
        apkUpdateInfo.edit().putUUID(SafeUUIDGenerator.randomUUID().toString()).save();
        if (((InstallQueue) FbInjector.lazyInstance(13, InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallQueue_ULSEP_BINDING_ID, this._UL_mInjectionContext)).shouldEnqueue(apkUpdateInfo)) {
            ((InstallQueue) FbInjector.lazyInstance(13, InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallQueue_ULSEP_BINDING_ID, this._UL_mInjectionContext)).enqueueUpdate(apkUpdateInfo);
            return;
        }
        ((InstallerServiceInstallLock) FbInjector.lazyInstance(11, InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceInstallLock_ULSEP_BINDING_ID, this._UL_mInjectionContext)).tryAcquireInstallLock();
        continueUpdate(apkUpdateInfo);
    }

    /* access modifiers changed from: package-private */
    public void requestCancel(ApkUpdateInfo apkUpdateInfo, @Nullable SettableFuture<InstallerResult> settableFuture) {
        BLog.d(TAG, "requestCancel(%s)", apkUpdateInfo);
        if (((InstallerCancelHelper) FbInjector.lazyInstance(6, InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerCancelHelper_ULSEP_BINDING_ID, this._UL_mInjectionContext)).cancelUpdateIfPossible(apkUpdateInfo)) {
            ((InstallerCleanUpHelper) FbInjector.lazyInstance(7, InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerCleanUpHelper_ULSEP_BINDING_ID, this._UL_mInjectionContext)).cleanUpStorage(((InfoUtils) FbInjector.lazyInstance(3, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getRootUpdate(apkUpdateInfo));
            ((InstallerEventEmitter) FbInjector.lazyInstance(8, InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerEventEmitter_ULSEP_BINDING_ID, this._UL_mInjectionContext)).notifyInstallCancelled(apkUpdateInfo);
        }
        if (settableFuture != null) {
            settableFuture.set(InstallerResult.createForSuccess(apkUpdateInfo.identifier, apkUpdateInfo.getPackageName(), ((Clock) FbInjector.lazyInstance(10, TimeModule.UL_id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID, this._UL_mInjectionContext)).now()));
        }
    }

    /* access modifiers changed from: package-private */
    public void onDownloadCompleteNotification(long j) {
        ((InstallerServiceDownloadHelper) FbInjector.lazyInstance(2, InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceDownloadHelper_ULSEP_BINDING_ID, this._UL_mInjectionContext)).onDownloadComplete(j);
    }

    /* access modifiers changed from: package-private */
    public void onDownloadComplete(ApkUpdateInfo apkUpdateInfo, boolean z) {
        BLog.d(TAG, "onDownloadComplete(%s)", apkUpdateInfo);
        if (!apkUpdateInfo.updateType.isInPlace()) {
            if (!canUpdateContinue(apkUpdateInfo)) {
                ((InstallerCleanUpHelper) FbInjector.lazyInstance(7, InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerCleanUpHelper_ULSEP_BINDING_ID, this._UL_mInjectionContext)).cleanUpStorage(apkUpdateInfo);
                return;
            } else if (!z) {
                maybeNotifyDownloadCompletion(apkUpdateInfo);
            }
        }
        continueUpdate(apkUpdateInfo);
    }

    /* access modifiers changed from: package-private */
    public void onVerificationComplete(ApkUpdateInfo apkUpdateInfo) {
        BLog.d(TAG, "onVerificationComplete(%s)", apkUpdateInfo);
        continueUpdate(apkUpdateInfo);
    }

    /* access modifiers changed from: package-private */
    public void onInstallComplete(ApkUpdateInfo apkUpdateInfo, int i, @Nullable String str) {
        BLog.d(TAG, "onInstallComplete(%s, %d, %s)", apkUpdateInfo, Integer.valueOf(i), str);
        ((InstallerServiceInstallHelper) FbInjector.lazyInstance(0, InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceInstallHelper_ULSEP_BINDING_ID, this._UL_mInjectionContext)).handleInstallCompletedIntent(apkUpdateInfo, i, str);
    }

    /* access modifiers changed from: package-private */
    public void onUninstallComplete(ApkUpdateInfo apkUpdateInfo, int i, @Nullable String str) {
        BLog.d(TAG, "onUninstallComplete(%s, %d, %s)", apkUpdateInfo, Integer.valueOf(i), str);
        ((InstallerServiceUninstallHelper) FbInjector.lazyInstance(1, InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceUninstallHelper_ULSEP_BINDING_ID, this._UL_mInjectionContext)).handleUninstallCompletedIntent(apkUpdateInfo, i, str);
    }

    /* access modifiers changed from: package-private */
    public void onUpdateSuccessful(ApkUpdateInfo apkUpdateInfo) {
        BLog.d(TAG, "onUpdateSuccessful(%s)", apkUpdateInfo);
        if (!continueUpdate(apkUpdateInfo) && ((InfoUtils) FbInjector.lazyInstance(3, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getParentUpdate(apkUpdateInfo) == null) {
            notifyInstallFuturesComplete(apkUpdateInfo);
            startNextUpdate(apkUpdateInfo);
        }
    }

    /* access modifiers changed from: package-private */
    public void onUpdateFailed(ApkUpdateInfo apkUpdateInfo) {
        BLog.d(TAG, "onUpdateFailed(%s)", apkUpdateInfo);
        if (apkUpdateInfo.updateType == ApkUpdateInfoContract.UpdateType.UNINSTALL) {
            notifyInstallFuturesComplete(apkUpdateInfo);
        } else if (!apkUpdateInfo.getExtras().isTransitiveFailure()) {
            ((InstallerFailureHelper) FbInjector.lazyInstance(5, InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerFailureHelper_ULSEP_BINDING_ID, this._UL_mInjectionContext)).onUpdateFailed(apkUpdateInfo);
            ApkUpdateInfo rootUpdate = ((InfoUtils) FbInjector.lazyInstance(3, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getRootUpdate(apkUpdateInfo);
            ((InstallerCleanUpHelper) FbInjector.lazyInstance(7, InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerCleanUpHelper_ULSEP_BINDING_ID, this._UL_mInjectionContext)).cleanUpStorage(rootUpdate);
            ApkUpdateInfoContract.UpdateState failedState = apkUpdateInfo.getExtras().getFailedState();
            if (failedState == ApkUpdateInfoContract.UpdateState.NEW || failedState == ApkUpdateInfoContract.UpdateState.QUEUED_DOWNLOAD || failedState == ApkUpdateInfoContract.UpdateState.DOWNLOADING) {
                ((InstallerEventEmitter) FbInjector.lazyInstance(8, InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerEventEmitter_ULSEP_BINDING_ID, this._UL_mInjectionContext)).notifyDownloadFailed(rootUpdate);
            } else {
                ((InstallerEventEmitter) FbInjector.lazyInstance(8, InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerEventEmitter_ULSEP_BINDING_ID, this._UL_mInjectionContext)).notifyInstallFailed(rootUpdate, String.format(Locale.US, "Update failed, caused by failure in %s", apkUpdateInfo));
            }
            notifyInstallFuturesComplete(rootUpdate);
        }
        if (!((InfoUtils) FbInjector.lazyInstance(3, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).hasParentUpdate(apkUpdateInfo)) {
            startNextUpdate(apkUpdateInfo);
        }
    }

    /* access modifiers changed from: package-private */
    public void onUpdateCanceled(ApkUpdateInfo apkUpdateInfo) {
        BLog.d(TAG, "onUpdateCanceled(%s)", apkUpdateInfo);
        ((InstallerCancelHelper) FbInjector.lazyInstance(6, InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerCancelHelper_ULSEP_BINDING_ID, this._UL_mInjectionContext)).onUpdateCanceled(apkUpdateInfo);
        ApkUpdateInfo rootUpdate = ((InfoUtils) FbInjector.lazyInstance(3, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getRootUpdate(apkUpdateInfo);
        ((InstallerCleanUpHelper) FbInjector.lazyInstance(7, InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerCleanUpHelper_ULSEP_BINDING_ID, this._UL_mInjectionContext)).cleanUpStorage(rootUpdate);
        if (!((InfoUtils) FbInjector.lazyInstance(3, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).hasParentUpdate(apkUpdateInfo)) {
            notifyInstallFuturesComplete(rootUpdate);
            startNextUpdate(apkUpdateInfo);
        }
    }

    /* access modifiers changed from: package-private */
    public void onUpdateRetried(ApkUpdateInfo apkUpdateInfo) {
        BLog.d(TAG, "onUpdateRetried(%s)", apkUpdateInfo);
        ((InstallerCleanUpHelper) FbInjector.lazyInstance(7, InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerCleanUpHelper_ULSEP_BINDING_ID, this._UL_mInjectionContext)).cleanUpStorage(apkUpdateInfo);
        ApkUpdateInfo retriedUpdate = ((InfoUtils) FbInjector.lazyInstance(3, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getRetriedUpdate(apkUpdateInfo);
        if (retriedUpdate == null) {
            ((InfoUtils) FbInjector.lazyInstance(3, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).failSoft(apkUpdateInfo, ErrorCategories.RETRY_NO_ID, "Update retried but has no extra with a retried update id", InstallerResultError.UNKNOWN_ERROR, null);
        } else {
            continueUpdate(retriedUpdate);
        }
    }

    /* access modifiers changed from: package-private */
    @VisibleForTesting
    public boolean canUpdateContinue(ApkUpdateInfo apkUpdateInfo) {
        return ((InfoUtils) FbInjector.lazyInstance(3, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).searchFirstInDependencyTree(apkUpdateInfo, new Predicate<ApkUpdateInfo>() {
            /* class com.oculus.appmanager.installer.service.InstallerServiceManager.AnonymousClass1 */

            public boolean apply(@Nullable ApkUpdateInfo apkUpdateInfo) {
                if (apkUpdateInfo == null) {
                    return false;
                }
                ApkUpdateInfoContract.UpdateState state = apkUpdateInfo.getState();
                if (state == ApkUpdateInfoContract.UpdateState.CANCELED || state == ApkUpdateInfoContract.UpdateState.FAILED) {
                    return true;
                }
                return false;
            }
        }) == null;
    }

    /* access modifiers changed from: package-private */
    @VisibleForTesting
    public boolean validateInstallRequestUpdate(ApkUpdateInfo apkUpdateInfo) {
        if (((MobileConfig) FbInjector.lazyInstance(9, MobileConfigFactoryModule.UL_id._UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getBoolean(MC.oculus_library.shiba_attack_prevention)) {
            long j = ((MobileConfig) FbInjector.lazyInstance(9, MobileConfigFactoryModule.UL_id._UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getLong(MC.oculus_library.shiba_attack_artificial_version_limit);
            String string = ((MobileConfig) FbInjector.lazyInstance(9, MobileConfigFactoryModule.UL_id._UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getString(MC.oculus_library.shiba_whitelisted_pkg);
            if (!string.isEmpty() && !TextUtils.isEmpty(apkUpdateInfo.getPackageName())) {
                String[] split = string.split(",");
                int length = split.length;
                int i = 0;
                while (true) {
                    if (i >= length) {
                        break;
                    }
                    String str = split[i];
                    if (!str.isEmpty() && apkUpdateInfo.getPackageName().equals(str)) {
                        j = ((MobileConfig) FbInjector.lazyInstance(9, MobileConfigFactoryModule.UL_id._UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getLong(MC.oculus_library.shiba_whitelisted_artificial_version_limit);
                        break;
                    }
                    i++;
                }
            }
            if (apkUpdateInfo.targetVersion > j) {
                ((InfoUtils) FbInjector.lazyInstance(3, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).failSoft(apkUpdateInfo, ErrorCategories.INSTALL_SHIBA_MITIGATION, "target version code too high.", InstallerResultError.SHIBA_ATTACK_PREVENTION, null);
                return false;
            }
        }
        if (!TextUtils.isEmpty(apkUpdateInfo.downloadUrl)) {
            return true;
        }
        ((InfoUtils) FbInjector.lazyInstance(3, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).failSoft(apkUpdateInfo, ErrorCategories.DOWNLOAD_URI_MISSING, "no download url received", InstallerResultError.INVALID_INSTALL_REQUEST, null);
        return false;
    }

    private void notifyInstallFuturesComplete(ApkUpdateInfo apkUpdateInfo) {
        ApkUpdateInfo update;
        SettableFuture future;
        SettableFuture future2 = ((InfoUtils) FbInjector.lazyInstance(3, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getFuture(apkUpdateInfo);
        if (future2 != null) {
            future2.set(((InfoUtils) FbInjector.lazyInstance(3, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).resultForFinalUpdate(apkUpdateInfo));
        }
        if (apkUpdateInfo.getExtras().hasKey(ApkUpdateInfoContract.EXTRA_IS_RETRY_OF) && (update = ((InfoUtils) FbInjector.lazyInstance(3, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getUpdate(apkUpdateInfo.getExtras().getRetryOf(), false)) != null && (future = ((InfoUtils) FbInjector.lazyInstance(3, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getFuture(update)) != null) {
            future.set(((InfoUtils) FbInjector.lazyInstance(3, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).resultForFinalUpdate(apkUpdateInfo));
        }
    }

    private void maybeNotifyDownloadCompletion(ApkUpdateInfo apkUpdateInfo) {
        ApkUpdateInfo rootUpdate = ((InfoUtils) FbInjector.lazyInstance(3, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getRootUpdate(apkUpdateInfo);
        if (!rootUpdate.getExtras().getIsDownloadNotificationSent() && ((InfoUtils) FbInjector.lazyInstance(3, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).searchUpdateAndDependencies(rootUpdate, new Predicate<ApkUpdateInfo>() {
            /* class com.oculus.appmanager.installer.service.InstallerServiceManager.AnonymousClass2 */

            public boolean apply(@Nullable ApkUpdateInfo apkUpdateInfo) {
                if (apkUpdateInfo == null) {
                    return false;
                }
                ApkUpdateInfoContract.UpdateState state = apkUpdateInfo.getState();
                if (state == ApkUpdateInfoContract.UpdateState.DOWNLOADING || state == ApkUpdateInfoContract.UpdateState.QUEUED_DOWNLOAD) {
                    return true;
                }
                return false;
            }
        }).isEmpty()) {
            ((InstallerEventEmitter) FbInjector.lazyInstance(8, InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerEventEmitter_ULSEP_BINDING_ID, this._UL_mInjectionContext)).notifyDownloadSucceeded(rootUpdate);
            rootUpdate.edit().putIsDownloadNotificationSent(true).save();
        }
    }

    private InstallFlow getFlow(ApkUpdateInfo apkUpdateInfo) {
        if (apkUpdateInfo.updateType.isInPlace()) {
            return null;
        }
        return (DefaultFlow) FbInjector.lazyInstance(12, InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_DefaultFlow_ULSEP_BINDING_ID, this._UL_mInjectionContext);
    }

    @VisibleForTesting
    public boolean continueUpdate(ApkUpdateInfo apkUpdateInfo) {
        if (!canUpdateContinue(apkUpdateInfo)) {
            BLog.v(TAG, "Not continuing the following update due to failure or cancellation in tree. %s", apkUpdateInfo);
            return false;
        } else if (apkUpdateInfo.updateType == ApkUpdateInfoContract.UpdateType.UNINSTALL) {
            if (apkUpdateInfo.getState().isFinal()) {
                return false;
            }
            BLog.d(TAG, "uninstall(%s)", apkUpdateInfo);
            ((InstallerServiceUninstallHelper) FbInjector.lazyInstance(1, InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceUninstallHelper_ULSEP_BINDING_ID, this._UL_mInjectionContext)).performUninstall(apkUpdateInfo);
            return true;
        } else if (getFlow(apkUpdateInfo).continueUpdate(apkUpdateInfo)) {
            return true;
        } else {
            ApkUpdateInfo parentUpdate = ((InfoUtils) FbInjector.lazyInstance(3, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getParentUpdate(apkUpdateInfo);
            if (parentUpdate == null || !continueUpdate(parentUpdate)) {
                return false;
            }
            return true;
        }
    }

    private void startNextUpdate(ApkUpdateInfo apkUpdateInfo) {
        String str;
        BLog.d(TAG, "startNextUpdate(%s)", apkUpdateInfo);
        ApkUpdateInfo nextQueuedUpdate = ((InstallQueue) FbInjector.lazyInstance(13, InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallQueue_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getNextQueuedUpdate();
        String str2 = TAG;
        String str3 = apkUpdateInfo.identifier;
        if (nextQueuedUpdate == null) {
            str = "none";
        } else {
            str = nextQueuedUpdate.identifier;
        }
        BLog.i(str2, "Install for %s complete. Starting next in queue: %s", str3, str);
        if (nextQueuedUpdate != null) {
            BLog.d(TAG, "Next update found, continue: %s", nextQueuedUpdate);
            continueUpdate(nextQueuedUpdate);
        }
        if (getTransientUpdates().isEmpty()) {
            ((InstallerServiceInstallLock) FbInjector.lazyInstance(11, InstallerServiceModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceInstallLock_ULSEP_BINDING_ID, this._UL_mInjectionContext)).tryReleaseInstallLock();
        }
    }

    private List<ApkUpdateInfo> getTransientUpdates() {
        return ((InfoUtils) FbInjector.lazyInstance(3, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).findUpdates(new Predicate<ApkUpdateInfo>() {
            /* class com.oculus.appmanager.installer.service.InstallerServiceManager.AnonymousClass3 */

            public boolean apply(@Nullable ApkUpdateInfo apkUpdateInfo) {
                return apkUpdateInfo != null && !apkUpdateInfo.getState().isFinal() && !apkUpdateInfo.getState().isInitial();
            }
        });
    }
}
