package com.oculus.appmanager.installer.service;

import com.facebook.common.android.AndroidModule;
import com.facebook.inject.AbstractLibraryModule;
import com.facebook.inject.AddToMultiBind;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.AutoGeneratedBinder;
import com.facebook.inject.Binder;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.InjectorModule;
import com.facebook.mobileconfig.factory.module.MobileConfigFactoryModule;
import com.facebook.mobileconfig.interfaces.MobileConfigInterfacesModule;
import com.facebook.ultralight.AutoGeneratedSwitchIdClass;
import com.facebook.ultralight.UL;
import com.google.inject.Key;
import com.oculus.appmanager.assets.AssetsModule;
import com.oculus.appmanager.info.ApkUpdateInfoListener;
import com.oculus.appmanager.info.InfoModule;
import com.oculus.appmanager.installer.analytics.AnalyticsModule;
import com.oculus.appmanager.installer.boot.BootModule;
import com.oculus.appmanager.installer.broadcast.BroadcastModule;
import com.oculus.appmanager.installer.common.CommonModule;
import com.oculus.appmanager.installer.contract.ContractModule;
import com.oculus.appmanager.installer.events.EventsModule;
import com.oculus.appmanager.patcher.PatcherModule;
import com.oculus.appmanager.uninstaller.tasks.TasksModule;
import com.oculus.appmanager.vrsign.VrsignModule;
import com.oculus.common.init.AppInitModule;
import com.oculus.common.packagescache.PackagesCacheModule;
import com.oculus.common.packagescache.PackagesListener;
import com.oculus.debug.DebugModule;
import com.oculus.downloader.DownloaderModule;
import com.oculus.downloader.OculusDownloadListener;
import com.oculus.downloader.dispatcher.DispatcherModule;
import com.oculus.errorreporting.interfaces.InterfacesModule;
import com.oculus.libraryapi.OVRLibraryModule;
import com.oculus.logging.utils.UtilsModule;
import com.oculus.time.TimeModule;
import com.oculus.util.device.DeviceModule;
import com.oculus.util.inject.UtilModule;
import com.oculus.util.service.ServiceModule;
import com.oculus.util.thread.ThreadModule;

@InjectorModule
public abstract class InstallerServiceModule extends AbstractLibraryModule {

    @AutoGeneratedSwitchIdClass
    public static final class UL_id {
        public static final int _UL__ULSEP_com_oculus_appmanager_installer_service_AnalyticsUpdateStateListener_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_appmanager_installer_service_AnalyticsUpdateStateListener_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(AnalyticsUpdateStateListener.class)));
        public static final int _UL__ULSEP_com_oculus_appmanager_installer_service_DefaultFlow_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_appmanager_installer_service_DefaultFlow_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(DefaultFlow.class)));
        public static final int _UL__ULSEP_com_oculus_appmanager_installer_service_DozeDelayHelper_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_appmanager_installer_service_DozeDelayHelper_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(DozeDelayHelper.class)));
        public static final int _UL__ULSEP_com_oculus_appmanager_installer_service_InstallQueue_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallQueue_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(InstallQueue.class)));
        public static final int _UL__ULSEP_com_oculus_appmanager_installer_service_InstallerCancelHelper_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerCancelHelper_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(InstallerCancelHelper.class)));
        public static final int _UL__ULSEP_com_oculus_appmanager_installer_service_InstallerCleanUpHelper_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerCleanUpHelper_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(InstallerCleanUpHelper.class)));
        public static final int _UL__ULSEP_com_oculus_appmanager_installer_service_InstallerConsistencyHelper_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerConsistencyHelper_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(InstallerConsistencyHelper.class)));
        public static final int _UL__ULSEP_com_oculus_appmanager_installer_service_InstallerDownloadListener_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerDownloadListener_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(InstallerDownloadListener.class)));
        public static final int _UL__ULSEP_com_oculus_appmanager_installer_service_InstallerEventEmitter_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerEventEmitter_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(InstallerEventEmitter.class)));
        public static final int _UL__ULSEP_com_oculus_appmanager_installer_service_InstallerFailureHelper_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerFailureHelper_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(InstallerFailureHelper.class)));
        public static final int _UL__ULSEP_com_oculus_appmanager_installer_service_InstallerRetryHelper_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerRetryHelper_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(InstallerRetryHelper.class)));
        public static final int _UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceDownloadHelper_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceDownloadHelper_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(InstallerServiceDownloadHelper.class)));
        public static final int _UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceInstallHelper_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceInstallHelper_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(InstallerServiceInstallHelper.class)));
        public static final int _UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceInstallLock_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceInstallLock_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(InstallerServiceInstallLock.class)));
        public static final int _UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceManager_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceManager_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(InstallerServiceManager.class)));
        public static final int _UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceUninstallHelper_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceUninstallHelper_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(InstallerServiceUninstallHelper.class)));
        public static final int _UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceVerificationHelper_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_appmanager_installer_service_InstallerServiceVerificationHelper_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(InstallerServiceVerificationHelper.class)));
        public static final int _UL__ULSEP_com_oculus_appmanager_installer_service_PackageBroadcastListener_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_appmanager_installer_service_PackageBroadcastListener_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(PackageBroadcastListener.class)));
        public static final int _UL__ULSEP_com_oculus_appmanager_installer_service_SDKVersionCheck_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_appmanager_installer_service_SDKVersionCheck_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(SDKVersionCheck.class)));
        public static final int _UL__ULSEP_com_oculus_appmanager_installer_service_UpdateStateListener_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_appmanager_installer_service_UpdateStateListener_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(UpdateStateListener.class)));
    }

    /* access modifiers changed from: package-private */
    @AddToMultiBind
    public abstract OculusDownloadListener addInstallerDownloadListener(InstallerDownloadListener installerDownloadListener);

    /* access modifiers changed from: package-private */
    @AddToMultiBind
    public abstract PackagesListener addPackageBroadcastListener(PackageBroadcastListener packageBroadcastListener);

    /* access modifiers changed from: package-private */
    @AddToMultiBind
    public abstract ApkUpdateInfoListener addUpdateInfoListener(UpdateStateListener updateStateListener, AnalyticsUpdateStateListener analyticsUpdateStateListener);

    @AutoGeneratedBinder
    static class AutoGeneratedBindingsForInstallerServiceModule {
        AutoGeneratedBindingsForInstallerServiceModule() {
        }

        static void bind(Binder binder) {
            if (!UL.USE_STATIC_DI) {
                binder.require(AndroidModule.class);
                binder.require(BundledAndroidModule.class);
                binder.require(MobileConfigFactoryModule.class);
                binder.require(MobileConfigInterfacesModule.class);
                binder.require(com.oculus.android.AndroidModule.class);
                binder.require(AssetsModule.class);
                binder.require(InfoModule.class);
                binder.require(AnalyticsModule.class);
                binder.require(BootModule.class);
                binder.require(BroadcastModule.class);
                binder.require(CommonModule.class);
                binder.require(ContractModule.class);
                binder.require(EventsModule.class);
                binder.require(com.oculus.appmanager.installer.notification.contract.ContractModule.class);
                binder.require(PatcherModule.class);
                binder.require(com.oculus.appmanager.uninstaller.events.EventsModule.class);
                binder.require(TasksModule.class);
                binder.require(VrsignModule.class);
                binder.require(AppInitModule.class);
                binder.require(PackagesCacheModule.class);
                binder.require(DebugModule.class);
                binder.require(DownloaderModule.class);
                binder.require(com.oculus.downloader.contract.ContractModule.class);
                binder.require(DispatcherModule.class);
                binder.require(InterfacesModule.class);
                binder.require(OVRLibraryModule.class);
                binder.require(UtilsModule.class);
                binder.require(TimeModule.class);
                binder.require(DeviceModule.class);
                binder.require(UtilModule.class);
                binder.require(ServiceModule.class);
                binder.require(ThreadModule.class);
                binder.bindMulti(PackagesListener.class).add(PackageBroadcastListener.class);
                binder.bindMulti(ApkUpdateInfoListener.class).add(UpdateStateListener.class);
                binder.bindMulti(ApkUpdateInfoListener.class).add(AnalyticsUpdateStateListener.class);
                binder.bindMulti(OculusDownloadListener.class).add(InstallerDownloadListener.class);
                binder.bind(AnalyticsUpdateStateListener.class).toProvider(new AnalyticsUpdateStateListenerAutoProvider());
                binder.bind(DefaultFlow.class).toProvider(new DefaultFlowAutoProvider());
                binder.bind(DozeDelayHelper.class).toProvider(new DozeDelayHelperAutoProvider());
                binder.bind(InstallQueue.class).toProvider(new InstallQueueAutoProvider());
                binder.bind(InstallerCancelHelper.class).toProvider(new InstallerCancelHelperAutoProvider());
                binder.bind(InstallerCleanUpHelper.class).toProvider(new InstallerCleanUpHelperAutoProvider());
                binder.bind(InstallerConsistencyHelper.class).toProvider(new InstallerConsistencyHelperAutoProvider());
                binder.bind(InstallerDownloadListener.class).toProvider(new InstallerDownloadListenerAutoProvider()).in(ApplicationScoped.class);
                binder.bind(InstallerEventEmitter.class).toProvider(new InstallerEventEmitterAutoProvider());
                binder.bind(InstallerFailureHelper.class).toProvider(new InstallerFailureHelperAutoProvider());
                binder.bind(InstallerRetryHelper.class).toProvider(new InstallerRetryHelperAutoProvider());
                binder.bind(InstallerServiceDownloadHelper.class).toProvider(new InstallerServiceDownloadHelperAutoProvider()).in(ApplicationScoped.class);
                binder.bind(InstallerServiceInstallHelper.class).toProvider(new InstallerServiceInstallHelperAutoProvider()).in(ApplicationScoped.class);
                binder.bind(InstallerServiceInstallLock.class).toProvider(new InstallerServiceInstallLockAutoProvider()).in(ApplicationScoped.class);
                binder.bind(InstallerServiceManager.class).toProvider(new InstallerServiceManagerAutoProvider());
                binder.bind(InstallerServiceUninstallHelper.class).toProvider(new InstallerServiceUninstallHelperAutoProvider());
                binder.bind(InstallerServiceVerificationHelper.class).toProvider(new InstallerServiceVerificationHelperAutoProvider());
                binder.bind(PackageBroadcastListener.class).toProvider(new PackageBroadcastListenerAutoProvider());
                binder.bind(SDKVersionCheck.class).toProvider(new SDKVersionCheckAutoProvider());
                binder.bind(UpdateStateListener.class).toProvider(new UpdateStateListenerAutoProvider());
                binder.bindComponent(ConsistencyJobService.class).toProvider(new ConsistencyJobServiceAutoProvider());
                binder.bindComponent(DozeDelayService.class).toProvider(new DozeDelayServiceAutoProvider());
                binder.bindComponent(InstallerService.class).toProvider(new InstallerServiceAutoProvider());
            }
        }
    }
}
