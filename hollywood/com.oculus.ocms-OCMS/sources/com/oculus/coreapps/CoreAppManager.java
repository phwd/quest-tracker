package com.oculus.coreapps;

import android.content.Context;
import androidx.annotation.RequiresPermission;
import androidx.annotation.VisibleForTesting;
import androidx.core.content.ContextCompat;
import bolts.Task;
import bolts.TaskCompletionSource;
import com.facebook.common.identifiers.SafeUUIDGenerator;
import com.facebook.common.internal.Preconditions;
import com.facebook.debug.log.BLog;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightSingletonProvider;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Eager;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.UnmodifiableIterator;
import com.oculus.appmanager.info.ApkUpdateInfoContract;
import com.oculus.appmanager.info.model.InstallerResult;
import com.oculus.appmanager.info.model.RequestOrigin;
import com.oculus.appmanager.model.UpdateConfig;
import com.oculus.auth.credentials.Credentials;
import com.oculus.auth.credentials.CredentialsModule;
import com.oculus.auth.device.DeviceAuthTokenStore;
import com.oculus.auth.device.noop_subscriber.NoOpDeviceAuthTokenSubscriberModule;
import com.oculus.auth.util.AccessTokenUtils;
import com.oculus.base.app.AppInfo;
import com.oculus.base.app.AppInfoModule;
import com.oculus.common.build.BuildConstants;
import com.oculus.common.packagescache.PackageManagerUtils;
import com.oculus.common.packagescache.PackagesCacheModule;
import com.oculus.coreapps.CoreApp;
import com.oculus.coreapps.CoreappsModule;
import com.oculus.debug.DebugMode;
import com.oculus.horizon.api.ApiRequestManager;
import com.oculus.horizon.api.common.MinimumAppVersion;
import com.oculus.horizon.api.store.CheckMinimumRequiredAppVersionsRequest;
import com.oculus.horizon.api.store.CheckSetupRequiredAppVersionsRequest;
import com.oculus.horizon.logging.OculusLogger;
import com.oculus.http.core.base.ApiCallback;
import com.oculus.http.core.base.ApiError;
import com.oculus.libraryapi.OVRLibrary;
import com.oculus.libraryapi.OVRLibraryModule;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.UUID;
import javax.annotation.Nullable;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_common_packagescache_PackageManagerUtils_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_horizon_api_ApiRequestManager_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_horizon_logging_OculusLogger_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_debug_DebugMode_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_auth_credentials_Credentials_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_auth_device_DeviceAuthTokenStore_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_base_app_AppInfo_ULSEP_BINDING_ID"})
@ApplicationScoped
public class CoreAppManager {
    private static final String TAG = "CoreAppManager";
    private static volatile CoreAppManager _UL__ULSEP_com_oculus_coreapps_CoreAppManager_ULSEP_INSTANCE;
    private InjectionContext _UL_mInjectionContext;
    @Inject
    @Eager
    private final ApiRequestManager mApiRequestManager;
    private final LinkedHashMap<String, CoreApp> mCoreApps = new LinkedHashMap<>();
    private final List<CoreAppsListener> mCoreAppsListeners = new ArrayList();
    @Inject
    private final Provider<Credentials> mCredentialsProvider;
    @Inject
    @Eager
    private final DebugMode mDebugMode;
    private final OVRLibrary.DownloadListener mDownloadListener = new OVRLibrary.DownloadListener() {
        /* class com.oculus.coreapps.CoreAppManager.AnonymousClass1 */

        /* JADX WARNING: Code restructure failed: missing block: B:10:0x0033, code lost:
            if (r4.error != null) goto L_0x003b;
         */
        /* JADX WARNING: Code restructure failed: missing block: B:11:0x0035, code lost:
            r3.this$0.onCoreAppDownloadSuccess(r1);
         */
        /* JADX WARNING: Code restructure failed: missing block: B:12:0x003b, code lost:
            r3.this$0.onCoreAppDownloadFailure(r4, r1);
         */
        /* JADX WARNING: Code restructure failed: missing block: B:16:?, code lost:
            return;
         */
        /* JADX WARNING: Code restructure failed: missing block: B:17:?, code lost:
            return;
         */
        @Override // com.oculus.libraryapi.OVRLibrary.DownloadListener
        /* Code decompiled incorrectly, please refer to instructions dump. */
        public void onDownloadComplete(com.oculus.appmanager.info.model.InstallerResult r4) {
            /*
                r3 = this;
                java.lang.String r0 = com.oculus.coreapps.CoreAppManager.access$000()
                java.lang.String r1 = r4.installIdentifier
                java.lang.String r2 = "CoreApp download response from %s"
                com.facebook.debug.log.BLog.i(r0, r2, r1)
                com.oculus.coreapps.CoreAppManager r0 = com.oculus.coreapps.CoreAppManager.this
                java.util.LinkedHashMap r0 = com.oculus.coreapps.CoreAppManager.access$100(r0)
                monitor-enter(r0)
                com.oculus.coreapps.CoreAppManager r1 = com.oculus.coreapps.CoreAppManager.this     // Catch:{ all -> 0x0041 }
                java.util.LinkedHashMap r1 = com.oculus.coreapps.CoreAppManager.access$100(r1)     // Catch:{ all -> 0x0041 }
                java.lang.String r2 = r4.installIdentifier     // Catch:{ all -> 0x0041 }
                boolean r1 = r1.containsKey(r2)     // Catch:{ all -> 0x0041 }
                if (r1 != 0) goto L_0x0022
                monitor-exit(r0)     // Catch:{ all -> 0x0041 }
                return
            L_0x0022:
                com.oculus.coreapps.CoreAppManager r1 = com.oculus.coreapps.CoreAppManager.this     // Catch:{ all -> 0x0041 }
                java.util.LinkedHashMap r1 = com.oculus.coreapps.CoreAppManager.access$100(r1)     // Catch:{ all -> 0x0041 }
                java.lang.String r2 = r4.installIdentifier     // Catch:{ all -> 0x0041 }
                java.lang.Object r1 = r1.get(r2)     // Catch:{ all -> 0x0041 }
                com.oculus.coreapps.CoreApp r1 = (com.oculus.coreapps.CoreApp) r1     // Catch:{ all -> 0x0041 }
                monitor-exit(r0)     // Catch:{ all -> 0x0041 }
                com.oculus.appmanager.info.model.InstallerResultError r0 = r4.error
                if (r0 != 0) goto L_0x003b
                com.oculus.coreapps.CoreAppManager r4 = com.oculus.coreapps.CoreAppManager.this
                com.oculus.coreapps.CoreAppManager.access$200(r4, r1)
                goto L_0x0040
            L_0x003b:
                com.oculus.coreapps.CoreAppManager r0 = com.oculus.coreapps.CoreAppManager.this
                com.oculus.coreapps.CoreAppManager.access$300(r0, r4, r1)
            L_0x0040:
                return
            L_0x0041:
                r4 = move-exception
                monitor-exit(r0)
                throw r4
            */
            throw new UnsupportedOperationException("Method not decompiled: com.oculus.coreapps.CoreAppManager.AnonymousClass1.onDownloadComplete(com.oculus.appmanager.info.model.InstallerResult):void");
        }
    };
    private UUID mInstallId;
    private final OVRLibrary.InstallListener mInstallListener = new OVRLibrary.InstallListener() {
        /* class com.oculus.coreapps.CoreAppManager.AnonymousClass2 */

        /* JADX WARNING: Code restructure failed: missing block: B:10:0x0033, code lost:
            if (r4.error != null) goto L_0x003b;
         */
        /* JADX WARNING: Code restructure failed: missing block: B:11:0x0035, code lost:
            r3.this$0.onCoreAppInstallSuccess(r1);
         */
        /* JADX WARNING: Code restructure failed: missing block: B:12:0x003b, code lost:
            r3.this$0.onCoreAppInstallFailure(r4, r1);
         */
        /* JADX WARNING: Code restructure failed: missing block: B:13:0x0040, code lost:
            r3.this$0.checkIfCompleted();
         */
        /* JADX WARNING: Code restructure failed: missing block: B:14:0x0045, code lost:
            return;
         */
        @Override // com.oculus.libraryapi.OVRLibrary.InstallListener
        /* Code decompiled incorrectly, please refer to instructions dump. */
        public void onInstall(com.oculus.appmanager.info.model.InstallerResult r4) {
            /*
                r3 = this;
                java.lang.String r0 = com.oculus.coreapps.CoreAppManager.access$000()
                java.lang.String r1 = r4.installIdentifier
                java.lang.String r2 = "CoreApp install response from %s"
                com.facebook.debug.log.BLog.i(r0, r2, r1)
                com.oculus.coreapps.CoreAppManager r0 = com.oculus.coreapps.CoreAppManager.this
                java.util.LinkedHashMap r0 = com.oculus.coreapps.CoreAppManager.access$100(r0)
                monitor-enter(r0)
                com.oculus.coreapps.CoreAppManager r1 = com.oculus.coreapps.CoreAppManager.this     // Catch:{ all -> 0x0046 }
                java.util.LinkedHashMap r1 = com.oculus.coreapps.CoreAppManager.access$100(r1)     // Catch:{ all -> 0x0046 }
                java.lang.String r2 = r4.installIdentifier     // Catch:{ all -> 0x0046 }
                boolean r1 = r1.containsKey(r2)     // Catch:{ all -> 0x0046 }
                if (r1 != 0) goto L_0x0022
                monitor-exit(r0)     // Catch:{ all -> 0x0046 }
                return
            L_0x0022:
                com.oculus.coreapps.CoreAppManager r1 = com.oculus.coreapps.CoreAppManager.this     // Catch:{ all -> 0x0046 }
                java.util.LinkedHashMap r1 = com.oculus.coreapps.CoreAppManager.access$100(r1)     // Catch:{ all -> 0x0046 }
                java.lang.String r2 = r4.installIdentifier     // Catch:{ all -> 0x0046 }
                java.lang.Object r1 = r1.get(r2)     // Catch:{ all -> 0x0046 }
                com.oculus.coreapps.CoreApp r1 = (com.oculus.coreapps.CoreApp) r1     // Catch:{ all -> 0x0046 }
                monitor-exit(r0)     // Catch:{ all -> 0x0046 }
                com.oculus.appmanager.info.model.InstallerResultError r0 = r4.error
                if (r0 != 0) goto L_0x003b
                com.oculus.coreapps.CoreAppManager r4 = com.oculus.coreapps.CoreAppManager.this
                com.oculus.coreapps.CoreAppManager.access$400(r4, r1)
                goto L_0x0040
            L_0x003b:
                com.oculus.coreapps.CoreAppManager r0 = com.oculus.coreapps.CoreAppManager.this
                com.oculus.coreapps.CoreAppManager.access$500(r0, r4, r1)
            L_0x0040:
                com.oculus.coreapps.CoreAppManager r4 = com.oculus.coreapps.CoreAppManager.this
                com.oculus.coreapps.CoreAppManager.access$600(r4)
                return
            L_0x0046:
                r4 = move-exception
                monitor-exit(r0)
                throw r4
            */
            throw new UnsupportedOperationException("Method not decompiled: com.oculus.coreapps.CoreAppManager.AnonymousClass2.onInstall(com.oculus.appmanager.info.model.InstallerResult):void");
        }
    };
    private InstallOrder mInstallOrder = InstallOrder.PARALLEL;
    private String mInstallRequestSource;
    @Inject
    @Eager
    private final OVRLibrary mOVRLibrary;
    @Inject
    @Eager
    private final OculusLogger mOculusLogger;
    private RequestOrigin mRequestOrigin = RequestOrigin.ROADBLOCK;
    private TaskCompletionSource<CoreApp[]> mRunningTaskCompletionSource;

    public interface CoreAppsListener {
        void onAppProgress(CoreApp coreApp);

        void onCompletedInstalls(CoreApp[] coreAppArr);

        void onFetchError(ApiError apiError);
    }

    public enum InstallOrder {
        SEQUENTIAL,
        PARALLEL
    }

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_coreapps_CoreAppManager_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(CoreappsModule.UL_id._UL__ULSEP_com_oculus_coreapps_CoreAppManager_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final CoreAppManager _UL__ULSEP_com_oculus_coreapps_CoreAppManager_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (CoreAppManager) UL.factorymap.get(CoreappsModule.UL_id._UL__ULSEP_com_oculus_coreapps_CoreAppManager_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final CoreAppManager _UL__ULSEP_com_oculus_coreapps_CoreAppManager_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_coreapps_CoreAppManager_ULSEP_INSTANCE == null) {
            synchronized (CoreAppManager.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_coreapps_CoreAppManager_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        _UL__ULSEP_com_oculus_coreapps_CoreAppManager_ULSEP_INSTANCE = new CoreAppManager(injectorLike.getApplicationInjector());
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_coreapps_CoreAppManager_ULSEP_INSTANCE;
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_coreapps_CoreAppManager_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(CoreappsModule.UL_id._UL__ULSEP_com_oculus_coreapps_CoreAppManager_ULSEP_BINDING_ID, injectorLike);
    }

    @Inject
    public CoreAppManager(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(4, injectorLike);
        this.mApiRequestManager = ApiRequestManager._UL__ULSEP_com_oculus_horizon_api_ApiRequestManager_ULSEP_ACCESS_METHOD(injectorLike);
        this.mOculusLogger = OculusLogger._UL__ULSEP_com_oculus_horizon_logging_OculusLogger_ULSEP_ACCESS_METHOD(injectorLike);
        this.mDebugMode = DebugMode._UL__ULSEP_com_oculus_debug_DebugMode_ULSEP_ACCESS_METHOD(injectorLike);
        this.mCredentialsProvider = CredentialsModule._UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_auth_credentials_Credentials_ULGT__ULSEP_ACCESS_METHOD(injectorLike);
        this.mOVRLibrary = OVRLibraryModule._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_ACCESS_METHOD(injectorLike);
    }

    public synchronized boolean isInstallInProgress() {
        return this.mRunningTaskCompletionSource != null;
    }

    @Nullable
    public synchronized Task<CoreApp[]> getRunningTask() {
        return this.mRunningTaskCompletionSource == null ? null : this.mRunningTaskCompletionSource.getTask();
    }

    public synchronized void setInstallOrder(InstallOrder installOrder) {
        this.mInstallOrder = installOrder;
    }

    public synchronized void setInstallRequestOrigin(RequestOrigin requestOrigin) {
        this.mRequestOrigin = requestOrigin;
    }

    public synchronized List<CoreApp> getCoreAppsCopy() {
        ArrayList arrayList;
        synchronized (this.mCoreApps) {
            arrayList = new ArrayList(this.mCoreApps.values());
        }
        return arrayList;
    }

    public synchronized CoreApp[] getCoreAppsCopyArray() {
        List<CoreApp> coreAppsCopy;
        coreAppsCopy = getCoreAppsCopy();
        return (CoreApp[]) coreAppsCopy.toArray(new CoreApp[coreAppsCopy.size()]);
    }

    public synchronized boolean requiresUpdate(CoreApp coreApp) {
        if (this.mDebugMode.isUpdateRoadblockForced()) {
            return true;
        }
        return ((PackageManagerUtils) FbInjector.lazyInstance(1, PackagesCacheModule.UL_id._UL__ULSEP_com_oculus_common_packagescache_PackageManagerUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).requiresUpgrade(coreApp.entry.package_name, coreApp.entry.minimum_version);
    }

    private void updateMap(CoreApp coreApp) {
        synchronized (this.mCoreApps) {
            this.mCoreApps.put(coreApp.entry.package_name, coreApp);
        }
        synchronized (this.mCoreAppsListeners) {
            UnmodifiableIterator it = ImmutableList.copyOf((Collection) this.mCoreAppsListeners).iterator();
            while (it.hasNext()) {
                ((CoreAppsListener) it.next()).onAppProgress(coreApp);
            }
        }
    }

    public synchronized void addCoreAppsListener(CoreAppsListener coreAppsListener) {
        synchronized (this.mCoreAppsListeners) {
            this.mCoreAppsListeners.add(coreAppsListener);
        }
    }

    public synchronized void removeCoreAppsListener(CoreAppsListener coreAppsListener) {
        synchronized (this.mCoreAppsListeners) {
            this.mCoreAppsListeners.remove(coreAppsListener);
        }
    }

    private void notifyListenersOnCompleted(CoreApp[] coreAppArr) {
        synchronized (this.mCoreAppsListeners) {
            UnmodifiableIterator it = ImmutableList.copyOf((Collection) this.mCoreAppsListeners).iterator();
            while (it.hasNext()) {
                ((CoreAppsListener) it.next()).onCompletedInstalls(coreAppArr);
            }
        }
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private void notifyListenersOnFetchError(ApiError apiError) {
        synchronized (this.mCoreAppsListeners) {
            UnmodifiableIterator it = ImmutableList.copyOf((Collection) this.mCoreAppsListeners).iterator();
            while (it.hasNext()) {
                ((CoreAppsListener) it.next()).onFetchError(apiError);
            }
        }
    }

    public void fetchRequiredCoreAppsForSetup(ApiCallback<MinimumAppVersion> apiCallback) {
        Preconditions.checkNotNull(apiCallback);
        this.mApiRequestManager.post(new CheckSetupRequiredAppVersionsRequest(), apiCallback);
    }

    public void fetchRequiredCoreAppsForUpdate(ApiCallback<MinimumAppVersion> apiCallback) {
        Preconditions.checkNotNull(apiCallback);
        this.mApiRequestManager.post(new CheckMinimumRequiredAppVersionsRequest(), apiCallback);
    }

    public synchronized void fetchAndInstallOrUpdateRequiredApps(final boolean z, boolean z2, final String str) {
        BLog.i(TAG, "Starting fetch of required apps...");
        AnonymousClass3 r0 = new ApiCallback<MinimumAppVersion>() {
            /* class com.oculus.coreapps.CoreAppManager.AnonymousClass3 */

            public void onResponse(MinimumAppVersion minimumAppVersion) {
                CoreAppManager.this.setCoreApps(minimumAppVersion.required_versions, z);
                CoreAppManager.this.installOrUpdateRequiredApps(str);
            }

            @Override // com.oculus.http.core.base.ApiCallback
            public void onError(ApiError apiError) {
                BLog.e(CoreAppManager.TAG, "Failed to fetch MinimumAppVersion: %s", apiError.getMessage());
                CoreAppManager.this.notifyListenersOnFetchError(apiError);
            }
        };
        if (z2) {
            fetchRequiredCoreAppsForSetup(r0);
        } else {
            fetchRequiredCoreAppsForUpdate(r0);
        }
    }

    public synchronized void setCoreApps(List<MinimumAppVersion.MinimumAppVersionEntry> list, boolean z) {
        if (isInstallInProgress()) {
            BLog.w(TAG, "Install already in progress, ignoring duplicate request.");
            return;
        }
        synchronized (this.mCoreApps) {
            this.mCoreApps.clear();
            for (MinimumAppVersion.MinimumAppVersionEntry minimumAppVersionEntry : list) {
                BLog.i(TAG, "Core app from server: %s (%d)", minimumAppVersionEntry.package_name, Integer.valueOf(minimumAppVersionEntry.minimum_version));
                if (!BuildConstants.PACKAGE_NAME_HORIZON.equals(minimumAppVersionEntry.package_name) || !z) {
                    this.mCoreApps.put(minimumAppVersionEntry.package_name, new CoreApp(minimumAppVersionEntry));
                }
            }
        }
    }

    public synchronized Task<CoreApp[]> installOrUpdateRequiredApps(String str) {
        if (this.mRunningTaskCompletionSource != null) {
            BLog.w(TAG, "Install already in progress, ignoring duplicate request.");
            return this.mRunningTaskCompletionSource.getTask();
        }
        this.mRunningTaskCompletionSource = new TaskCompletionSource<>();
        Task<CoreApp[]> task = this.mRunningTaskCompletionSource.getTask();
        this.mInstallId = SafeUUIDGenerator.randomUUID();
        this.mOVRLibrary.registerInstallListener(this.mInstallListener);
        this.mOVRLibrary.registerDownloadListener(this.mDownloadListener);
        this.mInstallRequestSource = str;
        setInitialState();
        reportCoreAppsEvent(getCoreAppsCopyArray(), true);
        downloadAndInstall(true);
        return task;
    }

    public synchronized boolean areAllAppsDone() {
        synchronized (this.mCoreApps) {
            for (CoreApp coreApp : this.mCoreApps.values()) {
                if (!coreApp.isDone()) {
                    return false;
                }
            }
            return true;
        }
    }

    /* access modifiers changed from: package-private */
    @VisibleForTesting
    public synchronized void setInitialState() {
        synchronized (this.mCoreApps) {
            for (CoreApp coreApp : this.mCoreApps.values()) {
                if (coreApp.status != CoreApp.Status.UNKNOWN) {
                    BLog.e(TAG, "Set initial state called for %s with status %s", coreApp.entry.package_name, coreApp.getStatusString());
                } else if (requiresUpdate(coreApp)) {
                    updateMap(coreApp.onNeedsInstall());
                } else {
                    updateMap(coreApp.onUpToDate());
                }
            }
        }
    }

    private void downloadAndInstall(boolean z) {
        synchronized (this.mCoreApps) {
            Iterator<CoreApp> it = this.mCoreApps.values().iterator();
            while (true) {
                if (!it.hasNext()) {
                    break;
                }
                CoreApp next = it.next();
                if (!next.isDone()) {
                    if (!BuildConstants.PACKAGE_NAME_HORIZON.equals(next.entry.package_name) || !z) {
                        if (ContextCompat.checkSelfPermission((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext), "android.permission.WRITE_EXTERNAL_STORAGE") == 0) {
                            startDownloadAndInstall(next);
                            if (this.mInstallOrder == InstallOrder.SEQUENTIAL) {
                                break;
                            }
                        } else {
                            String str = TAG;
                            BLog.e(str, "Unable to download " + next.entry.package_name + ", do not have external storage permission");
                            updateMap(next.onDownloadFail());
                        }
                    }
                }
            }
        }
        checkIfCompleted();
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private void checkIfCompleted() {
        if (isComplete()) {
            onComplete();
        } else if (justHorizonWaiting()) {
            downloadAndInstall(false);
        }
    }

    private boolean justHorizonWaiting() {
        Preconditions.checkArgument(Boolean.valueOf(isInstallInProgress()));
        synchronized (this.mCoreApps) {
            for (CoreApp coreApp : this.mCoreApps.values()) {
                if (BuildConstants.PACKAGE_NAME_HORIZON.equals(coreApp.entry.package_name) && coreApp.isStarted()) {
                    return false;
                }
                if (!(BuildConstants.PACKAGE_NAME_HORIZON.equals(coreApp.entry.package_name) || coreApp.isDone())) {
                    return false;
                }
            }
            return true;
        }
    }

    /* access modifiers changed from: package-private */
    @VisibleForTesting
    public synchronized boolean isComplete() {
        if (!isInstallInProgress()) {
            return true;
        }
        return areAllAppsDone();
    }

    private void onComplete() {
        if (isInstallInProgress()) {
            TaskCompletionSource<CoreApp[]> taskCompletionSource = this.mRunningTaskCompletionSource;
            this.mRunningTaskCompletionSource = null;
            this.mOVRLibrary.unregisterDownloadListener(this.mDownloadListener);
            this.mOVRLibrary.unregisterInstallListener(this.mInstallListener);
            CoreApp[] coreAppsCopyArray = getCoreAppsCopyArray();
            for (CoreApp coreApp : coreAppsCopyArray) {
                BLog.i(TAG, "Core app completed: %s (%d) [%s]", coreApp.entry.package_name, Integer.valueOf(coreApp.entry.minimum_version), coreApp.getStatusString());
            }
            reportCoreAppsEvent(coreAppsCopyArray, false);
            notifyListenersOnCompleted(coreAppsCopyArray);
            taskCompletionSource.setResult(coreAppsCopyArray);
        }
    }

    public synchronized void reportCoreAppsEvent(CoreApp[] coreAppArr, boolean z) {
        String[] strArr = new String[coreAppArr.length];
        String[] strArr2 = new String[coreAppArr.length];
        for (int i = 0; i < coreAppArr.length; i++) {
            strArr[i] = coreAppArr[i].entry.package_name;
            strArr2[i] = coreAppArr[i].getStatusString();
        }
        if (z) {
            this.mOculusLogger.reportCoreAppsStart(this.mInstallId.toString(), strArr, strArr2, this.mInstallRequestSource);
        } else {
            this.mOculusLogger.reportCoreAppsEnd(this.mInstallId.toString(), strArr, strArr2, this.mInstallRequestSource);
        }
    }

    @RequiresPermission("android.permission.WRITE_EXTERNAL_STORAGE")
    private void startDownloadAndInstall(CoreApp coreApp) {
        String str;
        UpdateConfig updateConfig;
        updateMap(coreApp.onDownloadStart());
        BLog.i(TAG, "Starting download/install/update of %s (%d)", coreApp.entry.package_name, Integer.valueOf(coreApp.entry.minimum_version));
        Credentials credentials = this.mCredentialsProvider.get();
        if (credentials == null) {
            str = AccessTokenUtils.createLoggedOutToken((AppInfo) FbInjector.lazyInstance(3, AppInfoModule.UL_id._UL__ULSEP_com_oculus_base_app_AppInfo_ULSEP_BINDING_ID, this._UL_mInjectionContext), ((DeviceAuthTokenStore) FbInjector.lazyInstance(2, NoOpDeviceAuthTokenSubscriberModule.UL_id._UL__ULSEP_com_oculus_auth_device_DeviceAuthTokenStore_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getAuthToken());
        } else {
            str = credentials.getAccessToken();
        }
        UpdateConfig updateConfig2 = new UpdateConfig(coreApp.entry.package_name, (long) coreApp.entry.download_version, ApkUpdateInfoContract.UpdateType.STORE_FULL_APK, coreApp.entry.download_uri, coreApp.entry.size.isPresent() ? coreApp.entry.size.get().longValue() : -1, null, str, coreApp.entry.display_name, null, null, null, coreApp.entry.external_signature.isPresent() ? coreApp.entry.external_signature.get() : "", null, null);
        if (coreApp.entry.obbUri.isPresent()) {
            updateConfig = new UpdateConfig(coreApp.entry.package_name, (long) coreApp.entry.download_version, ApkUpdateInfoContract.UpdateType.STORE_FULL_OBB, coreApp.entry.obbUri.get(), coreApp.entry.obbSize.isPresent() ? coreApp.entry.obbSize.get().longValue() : -1, null, str, coreApp.entry.display_name, null, null, null, null, null, null);
        } else {
            updateConfig = null;
        }
        this.mOVRLibrary.customDownloadAndInstallAsync(updateConfig2, updateConfig, null, this.mRequestOrigin, null);
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private void onCoreAppDownloadSuccess(CoreApp coreApp) {
        updateMap(coreApp.onDownloadSuccess());
        BLog.i(TAG, "Downloaded core package %s (%d) from %s", coreApp.entry.package_name, Integer.valueOf(coreApp.entry.minimum_version), coreApp.entry.download_uri);
        this.mOculusLogger.reportCoreAppDownloadSuccess(this.mInstallId.toString(), coreApp.entry.package_name, coreApp.entry.minimum_version, this.mInstallRequestSource);
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private void onCoreAppDownloadFailure(InstallerResult installerResult, CoreApp coreApp) {
        updateMap(coreApp.onDownloadFail());
        if (installerResult.error != null) {
            BLog.e(TAG, "Failed to download core package %s (%d) reason: %s", coreApp.entry.package_name, Integer.valueOf(coreApp.entry.minimum_version), installerResult.error.name());
            this.mOculusLogger.reportCoreAppDownloadFailure(this.mInstallId.toString(), coreApp.entry.package_name, coreApp.entry.minimum_version, this.mInstallRequestSource, installerResult.error.code);
            onCoreAppFinalized();
            return;
        }
        throw new IllegalStateException("not actually an failure");
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private void onCoreAppInstallSuccess(CoreApp coreApp) {
        updateMap(coreApp.onInstallSuccess());
        BLog.i(TAG, "installed core package %s with version (%d)", coreApp.entry.package_name, Integer.valueOf(coreApp.entry.minimum_version));
        this.mOculusLogger.reportCoreAppInstallSuccess(this.mInstallId.toString(), coreApp.entry.package_name, coreApp.entry.minimum_version, this.mInstallRequestSource);
        onCoreAppFinalized();
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private void onCoreAppInstallFailure(InstallerResult installerResult, CoreApp coreApp) {
        updateMap(coreApp.onInstallFail());
        if (installerResult.error != null) {
            BLog.e(TAG, "Failed to install core package %s to version (%d) reason: %s", coreApp.entry.package_name, Integer.valueOf(coreApp.entry.minimum_version), installerResult.error.name());
            this.mOculusLogger.reportCoreAppInstallFailure(this.mInstallId.toString(), coreApp.entry.package_name, coreApp.entry.minimum_version, this.mInstallRequestSource, installerResult.error.name());
            onCoreAppFinalized();
            return;
        }
        throw new IllegalStateException("not actually an failure");
    }

    private void onCoreAppFinalized() {
        if (this.mInstallOrder == InstallOrder.SEQUENTIAL) {
            downloadAndInstall(true);
        }
    }
}
