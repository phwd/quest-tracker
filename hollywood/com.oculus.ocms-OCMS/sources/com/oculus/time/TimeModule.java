package com.oculus.time;

import com.facebook.inject.AbstractLibraryModule;
import com.facebook.inject.AutoGeneratedBinder;
import com.facebook.inject.Binder;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.InjectorModule;
import com.facebook.inject.Lazy;
import com.facebook.inject.ProviderMethod;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.AutoGeneratedSwitchIdClass;
import com.facebook.ultralight.UL;
import com.google.inject.Key;
import java.lang.annotation.Annotation;
import java.util.TimeZone;
import javax.inject.Provider;

@InjectorModule
public class TimeModule extends AbstractLibraryModule {
    public static final long MILLISECONDS_PER_HOUR = 3600000;

    @AutoGeneratedSwitchIdClass
    public static final class UL_id {
        public static final int _UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(Clock.class)));
        public static final int _UL__ULSEP_java_util_TimeZone_ULSEP_com_oculus_time_ForOculusTimeZone_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_java_util_TimeZone_ULSEP_com_oculus_time_ForOculusTimeZone_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(TimeZone.class, (Class<? extends Annotation>) ForOculusTimeZone.class)));
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_java_util_TimeZone_ULGT__ULSEP_com_oculus_time_ForOculusTimeZone_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(UL_id._UL__ULSEP_java_util_TimeZone_ULSEP_com_oculus_time_ForOculusTimeZone_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedBinder
    static class AutoGeneratedBindingsForTimeModule {
        AutoGeneratedBindingsForTimeModule() {
        }

        static void bind(Binder binder) {
            if (!UL.USE_STATIC_DI) {
                binder.require(BundledAndroidModule.class);
                binder.bind(Clock.class).toProvider(new ClockAutoProvider());
                binder.bind(TimeZone.class).annotatedWith(ForOculusTimeZone.class).toProvider(new TimeZone_com_oculus_time_ForOculusTimeZoneMethodAutoProvider());
            }
        }
    }

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_java_util_TimeZone_ULGT__ULSEP_com_oculus_time_ForOculusTimeZone_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(UL_id._UL__ULSEP_java_util_TimeZone_ULSEP_com_oculus_time_ForOculusTimeZone_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final TimeZone _UL__ULSEP_java_util_TimeZone_ULSEP_com_oculus_time_ForOculusTimeZone_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (TimeZone) UL.factorymap.get(UL_id._UL__ULSEP_java_util_TimeZone_ULSEP_com_oculus_time_ForOculusTimeZone_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final TimeZone _UL__ULSEP_java_util_TimeZone_ULSEP_com_oculus_time_ForOculusTimeZone_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return provideTimeZone();
    }

    @ForOculusTimeZone
    @ProviderMethod
    static TimeZone provideTimeZone() {
        return TimeZone.getDefault();
    }
}
