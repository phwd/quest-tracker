package com.oculus.dumpsysledger;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import com.facebook.common.stringformat.StringFormatUtil;
import com.facebook.common.util.exception.ExceptionUtil;
import com.facebook.debug.log.BLog;
import com.facebook.inject.Assisted;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.oculus.dumpsysledger.DumpsysLedgerModule;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Timestamp;
import java.util.Date;
import java.util.Locale;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

@Dependencies({"_UL__ULSEP_com_oculus_dumpsysledger_DumpsysLedgerMapper_ULSEP_BINDING_ID", "_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_BINDING_ID"})
public class DumpsysLedger {
    private static final String TAG = "DumpsysLedger";
    private final int FAILED_WRITES_LIMIT = 8;
    private final String FILE_DIR = "dumpsys_ledger";
    private final String FILE_PREFIX = "dumpsys_ledger_logs_";
    private final double FILE_SIZE_LIMIT = 104857.6d;
    private InjectionContext _UL_mInjectionContext;
    private final File file;
    private final BlockingQueue<String> mQueue = new LinkedBlockingQueue();
    private final String name;

    @AutoGeneratedAccessMethod
    public static final DumpsysLedgerProvider _UL__ULSEP_com_oculus_dumpsysledger_DumpsysLedgerProvider_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (DumpsysLedgerProvider) UL.factorymap.get(DumpsysLedgerModule.UL_id._UL__ULSEP_com_oculus_dumpsysledger_DumpsysLedgerProvider_ULSEP_BINDING_ID, injectorLike);
    }

    @Inject
    public DumpsysLedger(InjectorLike injectorLike, @Assisted String str, DumpsysLedgerMapper dumpsysLedgerMapper) {
        this._UL_mInjectionContext = new InjectionContext(2, injectorLike);
        this.name = str;
        this.file = new File(((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getFilesDir() + "/" + "dumpsys_ledger", "dumpsys_ledger_logs_" + getAppName() + this.name);
        this.file.getParentFile().mkdir();
        dumpsysLedgerMapper.addLedger(this);
        startWriterThread();
    }

    public String getName() {
        return this.name;
    }

    private void logToLedger(String str, String str2, String str3, Object... objArr) {
        this.mQueue.add(StringFormatUtil.formatStrLocaleSafe("%s %s %s: %s", new Timestamp(new Date().getTime()), str2, str, StringFormatUtil.formatStrLocaleSafe(str3, objArr)));
    }

    public String getLogs() {
        StringBuilder sb = new StringBuilder();
        sb.append(String.format(Locale.US, "---------- %s ----------\n", this.name));
        try {
            BufferedReader bufferedReader = new BufferedReader(new FileReader(this.file));
            while (true) {
                String readLine = bufferedReader.readLine();
                if (readLine == null) {
                    break;
                }
                sb.append(readLine);
                sb.append("\n");
            }
        } catch (IOException e) {
            sb.append(String.format(Locale.US, "Error making print stream: %s", ExceptionUtil.getStackTraceString(e)));
        }
        return sb.toString();
    }

    public String getAppName() {
        ApplicationInfo applicationInfo = ((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getApplicationInfo();
        int i = applicationInfo.labelRes;
        return i == 0 ? applicationInfo.nonLocalizedLabel.toString() : ((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getString(i);
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    /* JADX WARNING: Code restructure failed: missing block: B:10:0x0029, code lost:
        r2.close();
        r2 = new java.io.PrintWriter(new java.io.FileOutputStream(r11.file, true));
     */
    /* JADX WARNING: Code restructure failed: missing block: B:9:0x0027, code lost:
        if (((double) r11.file.length()) <= 104857.6d) goto L_0x0039;
     */
    /* JADX WARNING: Removed duplicated region for block: B:22:0x0071 A[SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void writerThreadCallback() {
        /*
        // Method dump skipped, instructions count: 164
        */
        throw new UnsupportedOperationException("Method not decompiled: com.oculus.dumpsysledger.DumpsysLedger.writerThreadCallback():void");
    }

    private void startWriterThread() {
        new Thread(new Runnable() {
            /* class com.oculus.dumpsysledger.DumpsysLedger.AnonymousClass1 */

            public void run() {
                DumpsysLedger.this.writerThreadCallback();
            }
        }).start();
    }

    public void d(String str, String str2, Object... objArr) {
        BLog.d(str, str2, objArr);
        logToLedger(str, "D", str2, objArr);
    }

    public void i(String str, String str2, Object... objArr) {
        BLog.i(str, str2, objArr);
        logToLedger(str, "I", str2, objArr);
    }

    public void w(String str, String str2, Object... objArr) {
        BLog.w(str, str2, objArr);
        logToLedger(str, "W", str2, objArr);
    }

    public void e(String str, String str2, Object... objArr) {
        BLog.e(str, str2, objArr);
        logToLedger(str, "E", str2, objArr);
    }
}
