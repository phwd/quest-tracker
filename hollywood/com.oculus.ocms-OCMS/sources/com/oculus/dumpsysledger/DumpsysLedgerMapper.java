package com.oculus.dumpsysledger;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightSingletonProvider;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.oculus.dumpsysledger.DumpsysLedgerModule;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID"})
@ApplicationScoped
public class DumpsysLedgerMapper {
    private static volatile DumpsysLedgerMapper _UL__ULSEP_com_oculus_dumpsysledger_DumpsysLedgerMapper_ULSEP_INSTANCE;
    private static DumpsysLedgerMapper sDumpsysLedgerMapper;
    private final int MAX_LEDGERS = 5;
    private InjectionContext _UL_mInjectionContext;
    private final Map<String, DumpsysLedger> ledgerMap = Collections.synchronizedMap(new HashMap());

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_dumpsysledger_DumpsysLedgerMapper_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(DumpsysLedgerModule.UL_id._UL__ULSEP_com_oculus_dumpsysledger_DumpsysLedgerMapper_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final DumpsysLedgerMapper _UL__ULSEP_com_oculus_dumpsysledger_DumpsysLedgerMapper_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (DumpsysLedgerMapper) UL.factorymap.get(DumpsysLedgerModule.UL_id._UL__ULSEP_com_oculus_dumpsysledger_DumpsysLedgerMapper_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final DumpsysLedgerMapper _UL__ULSEP_com_oculus_dumpsysledger_DumpsysLedgerMapper_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_dumpsysledger_DumpsysLedgerMapper_ULSEP_INSTANCE == null) {
            synchronized (DumpsysLedgerMapper.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_dumpsysledger_DumpsysLedgerMapper_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        _UL__ULSEP_com_oculus_dumpsysledger_DumpsysLedgerMapper_ULSEP_INSTANCE = new DumpsysLedgerMapper(injectorLike.getApplicationInjector());
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_dumpsysledger_DumpsysLedgerMapper_ULSEP_INSTANCE;
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_dumpsysledger_DumpsysLedgerMapper_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(DumpsysLedgerModule.UL_id._UL__ULSEP_com_oculus_dumpsysledger_DumpsysLedgerMapper_ULSEP_BINDING_ID, injectorLike);
    }

    @Inject
    public DumpsysLedgerMapper(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(1, injectorLike);
    }

    public void addLedger(DumpsysLedger dumpsysLedger) {
        if (this.ledgerMap.size() >= 5) {
            throw new IllegalStateException("Maximum number of logging ledgers exceeded");
        } else if (this.ledgerMap.putIfAbsent(dumpsysLedger.getName(), dumpsysLedger) != null) {
            throw new IllegalStateException("Ledger already exists in hashmap");
        } else if (this.ledgerMap.size() > 5) {
            throw new IllegalStateException("Maximum number of logging ledgers exceeded");
        }
    }

    public String getAllLedgerLogs() {
        StringBuilder sb = new StringBuilder();
        synchronized (this.ledgerMap) {
            for (DumpsysLedger dumpsysLedger : this.ledgerMap.values()) {
                sb.append(dumpsysLedger.getLogs());
            }
        }
        return sb.toString();
    }

    public String getAppName() {
        ApplicationInfo applicationInfo = ((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getApplicationInfo();
        int i = applicationInfo.labelRes;
        return i == 0 ? applicationInfo.nonLocalizedLabel.toString() : ((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getString(i);
    }

    public static void setSingletonMapper(DumpsysLedgerMapper dumpsysLedgerMapper) {
        if (sDumpsysLedgerMapper == null) {
            sDumpsysLedgerMapper = dumpsysLedgerMapper;
            return;
        }
        throw new IllegalStateException("setSingletonMapper already called");
    }

    public static DumpsysLedgerMapper getSingletonMapper() {
        DumpsysLedgerMapper dumpsysLedgerMapper = sDumpsysLedgerMapper;
        if (dumpsysLedgerMapper != null) {
            return dumpsysLedgerMapper;
        }
        throw new IllegalStateException("setSingletonMapper never called");
    }
}
