package com.oculus.downloader.dispatcher;

import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightSingletonProvider;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.UL;
import com.oculus.dispatcher.ListenerDispatcher;
import com.oculus.downloader.OculusDownloadListener;
import com.oculus.downloader.dispatcher.DispatcherModule;
import com.oculus.downloader.model.DownloadInfo;
import java.util.Set;
import javax.inject.Inject;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_java_util_Set_ULLT_com_oculus_downloader_OculusDownloadListener_ULGT__ULSEP_BINDING_ID"})
@ApplicationScoped
public class OculusDownloadListenerDispatcher extends ListenerDispatcher<OculusDownloadListener> {
    private static volatile OculusDownloadListenerDispatcher _UL__ULSEP_com_oculus_downloader_dispatcher_OculusDownloadListenerDispatcher_ULSEP_INSTANCE;

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_downloader_dispatcher_OculusDownloadListenerDispatcher_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(DispatcherModule.UL_id._UL__ULSEP_com_oculus_downloader_dispatcher_OculusDownloadListenerDispatcher_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final OculusDownloadListenerDispatcher _UL__ULSEP_com_oculus_downloader_dispatcher_OculusDownloadListenerDispatcher_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (OculusDownloadListenerDispatcher) UL.factorymap.get(DispatcherModule.UL_id._UL__ULSEP_com_oculus_downloader_dispatcher_OculusDownloadListenerDispatcher_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final OculusDownloadListenerDispatcher _UL__ULSEP_com_oculus_downloader_dispatcher_OculusDownloadListenerDispatcher_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_downloader_dispatcher_OculusDownloadListenerDispatcher_ULSEP_INSTANCE == null) {
            synchronized (OculusDownloadListenerDispatcher.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_downloader_dispatcher_OculusDownloadListenerDispatcher_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        _UL__ULSEP_com_oculus_downloader_dispatcher_OculusDownloadListenerDispatcher_ULSEP_INSTANCE = new OculusDownloadListenerDispatcher(DispatcherModule._UL__ULSEP_java_util_Set_ULLT_com_oculus_downloader_OculusDownloadListener_ULGT__ULSEP_ACCESS_METHOD(injectorLike.getApplicationInjector()));
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_downloader_dispatcher_OculusDownloadListenerDispatcher_ULSEP_INSTANCE;
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_downloader_dispatcher_OculusDownloadListenerDispatcher_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(DispatcherModule.UL_id._UL__ULSEP_com_oculus_downloader_dispatcher_OculusDownloadListenerDispatcher_ULSEP_BINDING_ID, injectorLike);
    }

    @Inject
    public OculusDownloadListenerDispatcher(Set<OculusDownloadListener> set) {
        super(set);
    }

    public void dispatchDownloadComplete(DownloadInfo downloadInfo) {
        for (OculusDownloadListener oculusDownloadListener : getListeners()) {
            oculusDownloadListener.onDownloadComplete(downloadInfo);
        }
    }
}
