package com.oculus.downloader.extras;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightSingletonProvider;
import com.facebook.inject.UnsafeContextInjection;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Eager;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.google.common.collect.Maps;
import com.oculus.downloader.extras.ExtrasModule;
import com.oculus.downloader.extras.contract.ExtrasDatabase;
import com.oculus.extras.Extras;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_UnsafeContextInjection_ULSEP_BINDING_ID"})
@ApplicationScoped
public class DownloadExtras {
    private static volatile DownloadExtras _UL__ULSEP_com_oculus_downloader_extras_DownloadExtras_ULSEP_INSTANCE;
    @UnsafeContextInjection
    @Inject
    @Eager
    private final Context mContext;
    private final DownloadExtrasSQLHelper mDownloadExtrasSQLHelper = new DownloadExtrasSQLHelper(this.mContext);
    private final String mIdColumnName = ExtrasDatabase.Columns.DOWNLOAD_ID;
    private final String mKeyColumnName = ExtrasDatabase.Columns.EXTRA_KEY;
    private final String mTableName = ExtrasDatabase.TABLE_DOWNLOAD_EXTRA;
    private final String mValueColumnName = ExtrasDatabase.Columns.EXTRA_VALUE;

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_downloader_extras_DownloadExtras_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(ExtrasModule.UL_id._UL__ULSEP_com_oculus_downloader_extras_DownloadExtras_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final DownloadExtras _UL__ULSEP_com_oculus_downloader_extras_DownloadExtras_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (DownloadExtras) UL.factorymap.get(ExtrasModule.UL_id._UL__ULSEP_com_oculus_downloader_extras_DownloadExtras_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final DownloadExtras _UL__ULSEP_com_oculus_downloader_extras_DownloadExtras_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_downloader_extras_DownloadExtras_ULSEP_INSTANCE == null) {
            synchronized (DownloadExtras.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_downloader_extras_DownloadExtras_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        _UL__ULSEP_com_oculus_downloader_extras_DownloadExtras_ULSEP_INSTANCE = new DownloadExtras(injectorLike.getApplicationInjector());
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_downloader_extras_DownloadExtras_ULSEP_INSTANCE;
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_downloader_extras_DownloadExtras_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(ExtrasModule.UL_id._UL__ULSEP_com_oculus_downloader_extras_DownloadExtras_ULSEP_BINDING_ID, injectorLike);
    }

    @Inject
    public DownloadExtras(InjectorLike injectorLike) {
        this.mContext = BundledAndroidModule._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_UnsafeContextInjection_ULSEP_ACCESS_METHOD(injectorLike);
    }

    public synchronized Extras getExtras(long j) {
        SQLiteDatabase writableDatabase = this.mDownloadExtrasSQLHelper.getWritableDatabase();
        String[] strArr = {this.mKeyColumnName, this.mValueColumnName};
        Cursor query = writableDatabase.query(this.mTableName, strArr, this.mIdColumnName + " = ?", new String[]{Long.toString(j)}, null, null, null);
        if (query == null) {
            return Extras.builder().build();
        } else if (!query.moveToFirst()) {
            query.close();
            return Extras.builder().build();
        } else {
            HashMap newHashMap = Maps.newHashMap();
            int columnIndex = query.getColumnIndex(this.mKeyColumnName);
            int columnIndex2 = query.getColumnIndex(this.mValueColumnName);
            while (!query.isAfterLast()) {
                String string = query.getString(columnIndex);
                String string2 = query.getString(columnIndex2);
                if (!(string == null || string2 == null)) {
                    newHashMap.put(string, string2);
                }
                query.moveToNext();
            }
            query.close();
            return new Extras(newHashMap);
        }
    }

    public synchronized void setExtras(long j, Extras extras) {
        setExtras(j, extras.getData());
    }

    public synchronized void setExtras(long j, Map<String, String> map) {
        SQLiteDatabase writableDatabase = this.mDownloadExtrasSQLHelper.getWritableDatabase();
        writableDatabase.beginTransaction();
        try {
            Iterator<String> it = map.keySet().iterator();
            while (it.hasNext()) {
                writableDatabase.delete(this.mTableName, this.mIdColumnName + " = ? AND " + this.mKeyColumnName + " = ?", new String[]{Long.toString(j), it.next()});
            }
            for (Map.Entry<String, String> entry : map.entrySet()) {
                String key = entry.getKey();
                String value = entry.getValue();
                if (value != null) {
                    ContentValues contentValues = new ContentValues();
                    contentValues.put(this.mIdColumnName, Long.valueOf(j));
                    contentValues.put(this.mKeyColumnName, key);
                    contentValues.put(this.mValueColumnName, value);
                    writableDatabase.insert(this.mTableName, null, contentValues);
                }
            }
            writableDatabase.setTransactionSuccessful();
        } finally {
            writableDatabase.endTransaction();
        }
    }

    public synchronized void removeExtras(long j, Set<String> set) {
        HashMap newHashMap = Maps.newHashMap();
        for (String str : set) {
            newHashMap.put(str, null);
        }
        setExtras(j, newHashMap);
    }

    public synchronized void removeAllExtras(long j) {
        SQLiteDatabase writableDatabase = this.mDownloadExtrasSQLHelper.getWritableDatabase();
        writableDatabase.delete(this.mTableName, this.mIdColumnName + " = ?", new String[]{Long.toString(j)});
    }
}
