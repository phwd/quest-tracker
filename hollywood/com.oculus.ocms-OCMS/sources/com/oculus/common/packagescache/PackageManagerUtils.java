package com.oculus.common.packagescache;

import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.os.DeadObjectException;
import com.facebook.common.android.AndroidModule;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightSingletonProvider;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.UL;
import com.oculus.common.packagescache.PackagesCacheModule;
import javax.annotation.Nullable;
import javax.inject.Inject;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_android_content_pm_PackageManager_ULSEP_BINDING_ID"})
@ApplicationScoped
public class PackageManagerUtils {
    private static volatile PackageManagerUtils _UL__ULSEP_com_oculus_common_packagescache_PackageManagerUtils_ULSEP_INSTANCE;
    private InjectionContext _UL_mInjectionContext;

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_common_packagescache_PackageManagerUtils_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(PackagesCacheModule.UL_id._UL__ULSEP_com_oculus_common_packagescache_PackageManagerUtils_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_common_packagescache_PackageManagerUtils_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(PackagesCacheModule.UL_id._UL__ULSEP_com_oculus_common_packagescache_PackageManagerUtils_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final PackageManagerUtils _UL__ULSEP_com_oculus_common_packagescache_PackageManagerUtils_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (PackageManagerUtils) UL.factorymap.get(PackagesCacheModule.UL_id._UL__ULSEP_com_oculus_common_packagescache_PackageManagerUtils_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final PackageManagerUtils _UL__ULSEP_com_oculus_common_packagescache_PackageManagerUtils_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_common_packagescache_PackageManagerUtils_ULSEP_INSTANCE == null) {
            synchronized (PackageManagerUtils.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_common_packagescache_PackageManagerUtils_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        _UL__ULSEP_com_oculus_common_packagescache_PackageManagerUtils_ULSEP_INSTANCE = new PackageManagerUtils(injectorLike.getApplicationInjector());
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_common_packagescache_PackageManagerUtils_ULSEP_INSTANCE;
    }

    @Inject
    public PackageManagerUtils(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(1, injectorLike);
    }

    public synchronized boolean isPackageInstalled(String str) {
        return getPackage(str) != null;
    }

    public synchronized long getInstalledVersionCode(String str) {
        return getInstalledVersionCode(str, -1);
    }

    public synchronized long getInstalledVersionCode(String str, long j) {
        PackageInfo packageInfo = getPackageInfo(str);
        if (packageInfo != null) {
            j = (long) packageInfo.versionCode;
        }
        return j;
    }

    @Nullable
    public synchronized PackageInfo getPackageInfo(String str) {
        return getPackage(str);
    }

    /* JADX WARNING: Code restructure failed: missing block: B:12:0x0017, code lost:
        return null;
     */
    /* JADX WARNING: Exception block dominator not found, dom blocks: [] */
    @javax.annotation.Nullable
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public synchronized android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String r4, int r5) {
        /*
            r3 = this;
            monitor-enter(r3)
            r0 = 0
            int r1 = com.facebook.common.android.AndroidModule.UL_id._UL__ULSEP_android_content_pm_PackageManager_ULSEP_BINDING_ID     // Catch:{ NameNotFoundException -> 0x0015, all -> 0x0012 }
            com.facebook.inject.InjectionContext r2 = r3._UL_mInjectionContext     // Catch:{ NameNotFoundException -> 0x0015, all -> 0x0012 }
            java.lang.Object r0 = com.facebook.inject.FbInjector.lazyInstance(r0, r1, r2)     // Catch:{ NameNotFoundException -> 0x0015, all -> 0x0012 }
            android.content.pm.PackageManager r0 = (android.content.pm.PackageManager) r0     // Catch:{ NameNotFoundException -> 0x0015, all -> 0x0012 }
            android.content.pm.ApplicationInfo r4 = r0.getApplicationInfo(r4, r5)     // Catch:{ NameNotFoundException -> 0x0015, all -> 0x0012 }
            monitor-exit(r3)
            return r4
        L_0x0012:
            r4 = move-exception
            monitor-exit(r3)
            throw r4
        L_0x0015:
            r4 = 0
            monitor-exit(r3)
            return r4
        */
        throw new UnsupportedOperationException("Method not decompiled: com.oculus.common.packagescache.PackageManagerUtils.getApplicationInfo(java.lang.String, int):android.content.pm.ApplicationInfo");
    }

    public synchronized boolean requiresUpgrade(String str, int i) {
        PackageInfo packageInfo;
        packageInfo = getPackage(str);
        return packageInfo == null || packageInfo.versionCode < i;
    }

    @Nullable
    private PackageInfo getPackage(String str) {
        return findPackageInfo(str);
    }

    @Nullable
    private PackageInfo findPackageInfo(String str) {
        try {
            return ((PackageManager) FbInjector.lazyInstance(0, AndroidModule.UL_id._UL__ULSEP_android_content_pm_PackageManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getPackageInfo(str, 0);
        } catch (PackageManager.NameNotFoundException unused) {
            return null;
        } catch (RuntimeException e) {
            if (e.getCause() instanceof DeadObjectException) {
                return null;
            }
            throw e;
        }
    }
}
