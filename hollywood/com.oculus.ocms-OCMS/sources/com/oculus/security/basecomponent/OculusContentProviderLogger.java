package com.oculus.security.basecomponent;

import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.mobileconfig.factory.MobileConfig;
import com.facebook.mobileconfig.factory.module.MobileConfigFactoryModule;
import com.facebook.secure.logger.ContentProviderLogger;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.oculus.logging.utils.EventManager;
import com.oculus.logging.utils.UtilsModule;
import com.oculus.security.basecomponent.BasecomponentModule;
import com.oculus.security.basecomponent.MC;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID"})
public class OculusContentProviderLogger implements ContentProviderLogger {
    private static final String EVENT_NAME = "oculus_security_content_provider";
    private static final String KEY_CALLER_IDENTITY = "caller_identity";
    private static final String KEY_ENDPOINT_NAME = "endpoint_name";
    private static final String KEY_METHOD = "method";
    private InjectionContext _UL_mInjectionContext;

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_security_basecomponent_OculusContentProviderLogger_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(BasecomponentModule.UL_id._UL__ULSEP_com_oculus_security_basecomponent_OculusContentProviderLogger_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final OculusContentProviderLogger _UL__ULSEP_com_oculus_security_basecomponent_OculusContentProviderLogger_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (OculusContentProviderLogger) UL.factorymap.get(BasecomponentModule.UL_id._UL__ULSEP_com_oculus_security_basecomponent_OculusContentProviderLogger_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final OculusContentProviderLogger _UL__ULSEP_com_oculus_security_basecomponent_OculusContentProviderLogger_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new OculusContentProviderLogger(injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_security_basecomponent_OculusContentProviderLogger_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(BasecomponentModule.UL_id._UL__ULSEP_com_oculus_security_basecomponent_OculusContentProviderLogger_ULSEP_BINDING_ID, injectorLike);
    }

    @Inject
    public OculusContentProviderLogger(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(2, injectorLike);
    }

    @Override // com.facebook.secure.logger.ContentProviderLogger
    public void logUsage(String str, String str2, String str3) {
        if (((MobileConfig) FbInjector.lazyInstance(0, MobileConfigFactoryModule.UL_id._UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getBoolean(MC.oculus_security_content_provider_logging.enabled)) {
            ((EventManager) FbInjector.lazyInstance(1, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent(EVENT_NAME).addExtra(KEY_ENDPOINT_NAME, str).addExtra(KEY_CALLER_IDENTITY, str3).addExtra("method", str2).logAndRelease();
        }
    }

    @Override // com.facebook.secure.logger.ContentProviderLogger
    public void logUsage(String str, String str2) {
        if (((MobileConfig) FbInjector.lazyInstance(0, MobileConfigFactoryModule.UL_id._UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getBoolean(MC.oculus_security_content_provider_logging.enabled)) {
            ((EventManager) FbInjector.lazyInstance(1, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent(EVENT_NAME).addExtra(KEY_ENDPOINT_NAME, str).addExtra("method", str2).logAndRelease();
        }
    }
}
