package com.oculus.library.sync;

import android.bluetooth.BluetoothAdapter;
import android.content.Context;
import androidx.core.content.ContextCompat;
import com.facebook.debug.log.BLog;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.inject.UnsafeContextInjection;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Eager;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.google.common.base.MoreObjects;
import com.google.common.collect.ImmutableList;
import com.oculus.android.AndroidModule;
import com.oculus.common.serial.BuildSerialUtil;
import com.oculus.http.core.base.ApiCallback;
import com.oculus.http.core.base.ApiError;
import com.oculus.http.useragent.UserAgentModule;
import com.oculus.http.useragent.UserAgentString;
import com.oculus.library.model.App;
import com.oculus.library.sync.SyncModule;
import com.oculus.logging.utils.EventManager;
import com.oculus.logging.utils.UtilsModule;
import com.oculus.util.device.DeviceUtils;
import javax.annotation.Nullable;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_UnsafeContextInjection_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_library_sync_LibrarySyncMethods_ULSEP_BINDING_ID", "_UL__ULSEP_java_lang_String_ULSEP_com_oculus_http_useragent_UserAgentString_ULSEP_BINDING_ID", "_UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID", "_UL__ULSEP_android_bluetooth_BluetoothAdapter_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID", "_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_UnsafeContextInjection_ULSEP_BINDING_ID"})
public class LibrarySyncHelper {
    public static final String LOGGING_LIBRARY_APP_STATUSES_UPLOADED = "library_app_statuses_uploaded";
    public static final String LOGGING_LIBRARY_APP_STATUS_UPLOAD = "library_app_status_upload";
    private static final String TAG = "com.oculus.library.sync.LibrarySyncHelper";
    private InjectionContext _UL_mInjectionContext;
    @UnsafeContextInjection
    @Inject
    @Eager
    private final Context mContext;
    private final String mDeviceId;
    @Inject
    @Eager
    private final LibrarySyncMethods mLibrarySyncMethods;
    @Inject
    @Eager
    @UserAgentString
    private final String mUserAgent;

    public interface Callback {
        void onSuccess();
    }

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_library_sync_LibrarySyncHelper_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(SyncModule.UL_id._UL__ULSEP_com_oculus_library_sync_LibrarySyncHelper_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_library_sync_LibrarySyncHelper_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(SyncModule.UL_id._UL__ULSEP_com_oculus_library_sync_LibrarySyncHelper_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final LibrarySyncHelper _UL__ULSEP_com_oculus_library_sync_LibrarySyncHelper_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (LibrarySyncHelper) UL.factorymap.get(SyncModule.UL_id._UL__ULSEP_com_oculus_library_sync_LibrarySyncHelper_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final LibrarySyncHelper _UL__ULSEP_com_oculus_library_sync_LibrarySyncHelper_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new LibrarySyncHelper(injectorLike, BundledAndroidModule._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_UnsafeContextInjection_ULSEP_ACCESS_METHOD(injectorLike));
    }

    @Inject
    public LibrarySyncHelper(InjectorLike injectorLike, @UnsafeContextInjection Context context) {
        this._UL_mInjectionContext = new InjectionContext(3, injectorLike);
        this.mLibrarySyncMethods = LibrarySyncMethods._UL__ULSEP_com_oculus_library_sync_LibrarySyncMethods_ULSEP_ACCESS_METHOD(injectorLike);
        this.mUserAgent = UserAgentModule._UL__ULSEP_java_lang_String_ULSEP_com_oculus_http_useragent_UserAgentString_ULSEP_ACCESS_METHOD(injectorLike);
        this.mContext = BundledAndroidModule._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_UnsafeContextInjection_ULSEP_ACCESS_METHOD(injectorLike);
        this.mDeviceId = DeviceUtils.getDeviceId(context);
    }

    public void syncLibrary(final ImmutableList<App> immutableList, @Nullable final Callback callback) {
        String str = "";
        if (ContextCompat.checkSelfPermission(this.mContext, "android.permission.BLUETOOTH") == 0 && ((BluetoothAdapter) FbInjector.lazyInstance(1, AndroidModule.UL_id._UL__ULSEP_android_bluetooth_BluetoothAdapter_ULSEP_BINDING_ID, this._UL_mInjectionContext)) != null) {
            str = (String) MoreObjects.firstNonNull(((BluetoothAdapter) FbInjector.lazyInstance(1, AndroidModule.UL_id._UL__ULSEP_android_bluetooth_BluetoothAdapter_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getName(), str);
        }
        this.mLibrarySyncMethods.syncLibrary(this.mDeviceId, BuildSerialUtil.getSerial(), str, this.mUserAgent, immutableList, new ApiCallback<LibrarySyncMutationResponse>() {
            /* class com.oculus.library.sync.LibrarySyncHelper.AnonymousClass1 */

            public void onResponse(LibrarySyncMutationResponse librarySyncMutationResponse) {
                Callback callback = callback;
                if (callback != null) {
                    callback.onSuccess();
                }
                ((EventManager) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, LibrarySyncHelper.this._UL_mInjectionContext)).createEvent(LibrarySyncHelper.LOGGING_LIBRARY_APP_STATUS_UPLOAD).addExtra(LibrarySyncHelper.LOGGING_LIBRARY_APP_STATUSES_UPLOADED, immutableList.size()).logAndRelease();
            }

            @Override // com.oculus.http.core.base.ApiCallback
            public void onError(ApiError apiError) {
                BLog.w(LibrarySyncHelper.TAG, "Failed to upload library app statuses: %s", apiError.getMessage());
            }
        });
    }

    public boolean shouldSyncAppWithServer(@Nullable App app, @Nullable App app2) {
        if (app == null || app2 == null) {
            return true;
        }
        if (!app.packageName.equals(app2.packageName)) {
            return false;
        }
        if (app.status == app2.status && app.versionCode == app2.versionCode && app.recentActivityMs == app2.recentActivityMs) {
            return false;
        }
        return true;
    }
}
