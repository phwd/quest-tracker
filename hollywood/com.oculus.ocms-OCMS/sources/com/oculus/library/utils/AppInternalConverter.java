package com.oculus.library.utils;

import android.content.pm.PackageInfo;
import androidx.annotation.VisibleForTesting;
import com.facebook.debug.log.BLog;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.mobileconfig.factory.MobileConfig;
import com.facebook.mobileconfig.factory.module.MobileConfigFactoryModule;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.google.common.base.Predicate;
import com.oculus.appmanager.info.ApkUpdateInfo;
import com.oculus.appmanager.info.ApkUpdateInfoContract;
import com.oculus.appmanager.info.InfoModule;
import com.oculus.appmanager.info.InfoUtils;
import com.oculus.common.packagescache.PackageManagerUtils;
import com.oculus.common.packagescache.PackagesCacheModule;
import com.oculus.library.model.App;
import com.oculus.library.model.AppMediaCapability;
import com.oculus.library.model.AppStatus;
import com.oculus.library.model.Category;
import com.oculus.library.model.CloudStorageStatus;
import com.oculus.library.model.ComfortRating;
import com.oculus.library.model.GrantReason;
import com.oculus.library.model.HeadTracking;
import com.oculus.library.model.InputDevice;
import com.oculus.library.model.MicrophoneUsage;
import com.oculus.library.model.PlayMode;
import com.oculus.library.model.SupportedPlatform;
import com.oculus.library.net.Entitlement;
import com.oculus.library.utils.MC;
import com.oculus.library.utils.UtilsModule;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import javax.annotation.Nullable;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_common_packagescache_PackageManagerUtils_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID", "_UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_library_utils_AppSharingUtils_ULSEP_BINDING_ID"})
public class AppInternalConverter {
    @VisibleForTesting
    public static final int PRIMARY_USER_ID = 0;
    private static final String TAG = "AppInternalConverter";
    private InjectionContext _UL_mInjectionContext;

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_library_utils_AppInternalConverter_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(UtilsModule.UL_id._UL__ULSEP_com_oculus_library_utils_AppInternalConverter_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final AppInternalConverter _UL__ULSEP_com_oculus_library_utils_AppInternalConverter_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (AppInternalConverter) UL.factorymap.get(UtilsModule.UL_id._UL__ULSEP_com_oculus_library_utils_AppInternalConverter_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final AppInternalConverter _UL__ULSEP_com_oculus_library_utils_AppInternalConverter_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new AppInternalConverter(injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_library_utils_AppInternalConverter_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(UtilsModule.UL_id._UL__ULSEP_com_oculus_library_utils_AppInternalConverter_ULSEP_BINDING_ID, injectorLike);
    }

    @Inject
    public AppInternalConverter(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(4, injectorLike);
    }

    public App toApp(Entitlement entitlement, String str, long j, @Nullable App app, GrantReason grantReason, long j2, long j3) {
        return toApp(entitlement, str, j, (!entitlement.isAppSupportedOnCurrentDevice() || app == null) ? null : new App.Builder.LocalData(app), grantReason, j2, j3);
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX DEBUG: Type inference failed for r5v10. Raw type applied. Possible types: java.util.List<java.lang.String> */
    private App toApp(Entitlement entitlement, String str, long j, @Nullable App.Builder.LocalData localData, GrantReason grantReason, long j2, long j3) {
        long j4;
        HeadTracking headTracking;
        boolean z;
        List list;
        int i;
        String str2;
        int i2;
        int i3;
        String str3;
        long j5;
        String str4;
        String str5;
        List list2;
        String str6 = entitlement.id;
        List arrayList = new ArrayList();
        HeadTracking headTracking2 = HeadTracking.UNKNOWN;
        long j6 = localData != null ? localData.downloadedBytes : 0;
        String squareImageUri = entitlement.getSquareImageUri();
        String str7 = entitlement.cover_landscape_image.uri;
        String str8 = entitlement.thumbnail.uri;
        String str9 = entitlement.small_landscape_image == null ? "" : entitlement.small_landscape_image.uri;
        String str10 = entitlement.hero_image.uri;
        List<InputDevice> list3 = entitlement.supported_input_devices_list;
        if (entitlement.isAppSupportedOnCurrentDevice()) {
            String packageName = entitlement.getPackageName();
            String str11 = entitlement.latest_supported_binary.version;
            List list4 = entitlement.latest_supported_binary.permissions;
            i3 = entitlement.latest_supported_binary.version_code;
            int i4 = entitlement.latest_supported_binary.target_android_sdk_version;
            boolean z2 = entitlement.latest_supported_binary.can_use_external_storage;
            HeadTracking headTracking3 = entitlement.latest_supported_binary.head_tracking;
            j4 = entitlement.latest_supported_binary.size;
            list = list4;
            headTracking = headTracking3;
            i = i4;
            z = z2;
            str6 = packageName;
            str2 = str11;
            i2 = 0;
        } else {
            i2 = 0;
            BLog.e(TAG, "Item %s is not supported, latest_supported_binary is %s.", entitlement.display_name, entitlement.latest_supported_binary);
            list = arrayList;
            headTracking = headTracking2;
            str2 = "placeholder_version_name";
            i3 = 0;
            i = 0;
            z = false;
            j4 = 0;
        }
        PackageInfo packageInfo = ((PackageManagerUtils) FbInjector.lazyInstance(i2, PackagesCacheModule.UL_id._UL__ULSEP_com_oculus_common_packagescache_PackageManagerUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getPackageInfo(str6);
        if (packageInfo != null) {
            j5 = (long) packageInfo.versionCode;
            str3 = packageInfo.versionName;
        } else {
            j5 = -2147483648L;
            str3 = null;
        }
        AppStatus updatedStatus = getUpdatedStatus(str6, entitlement.id, localData != null ? localData.status : null);
        CloudStorageStatus fromData = CloudStorageStatus.fromData(localData == null ? CloudStorageStatus.DISABLED : localData.cloudStorageStatus, entitlement.grouping.cloud_file_is_enabled);
        ComfortRating fromString = ComfortRating.fromString(entitlement.comfort_rating);
        if (fromString == null) {
            fromString = ComfortRating.UNKNOWN;
        }
        String str12 = entitlement.is_demo_of == null ? null : entitlement.is_demo_of.id;
        SupportedPlatform fromString2 = SupportedPlatform.fromString(entitlement.platform);
        ArrayList arrayList2 = new ArrayList();
        if (entitlement.share_capabilities != null) {
            for (String str13 : entitlement.share_capabilities) {
                arrayList2.add(AppMediaCapability.fromString(str13));
            }
        }
        ArrayList arrayList3 = new ArrayList();
        for (String str14 : entitlement.supported_player_modes) {
            arrayList3.add(PlayMode.valueOf(str14));
            arrayList2 = arrayList2;
        }
        Category fromString3 = Category.fromString(entitlement.category);
        if (localData == null) {
            str4 = null;
        } else {
            str4 = localData.currentLanguagePack;
        }
        String str15 = entitlement.internet_connection;
        if (localData == null) {
            str5 = null;
        } else {
            str5 = localData.trustedBinaryStatus;
        }
        boolean z3 = entitlement.is_concept;
        boolean z4 = entitlement.is_tv_app;
        boolean z5 = entitlement.is_test;
        String str16 = entitlement.system_ui_as_overlay_mode;
        boolean z6 = AppAutoUpdateConverter.toBoolean(entitlement.auto_update_mode);
        boolean z7 = entitlement.is_duc_non_compliant;
        if (entitlement.can_access_feature_keys == null) {
            list2 = new ArrayList();
        } else {
            list2 = entitlement.can_access_feature_keys;
        }
        return new App(entitlement.id, str6, updatedStatus, fromData, entitlement.display_name, fromString, ImagesBuilder.createImages(squareImageUri, str7, str8, str9, str10), 0, j6, j5, str3, (long) i3, str2, i, list, list3, z, str, entitlement.app_viewer_id, entitlement.grouping.id, entitlement.organization.id, MicrophoneUsage.valueOf(entitlement.microphone_usage), localData != null && localData.isUnseen, j, localData != null ? localData.totalActivityMs : 0, (long) entitlement.min_recommended_version_code, (long) entitlement.min_required_version_code, str12, fromString2, arrayList2, arrayList3, fromString3, headTracking, grantReason, j2, j3, j4, str4, str15, str5, z3, z4, z5, str16, z6, z7, list2, entitlement.environment_source == null ? null : entitlement.environment_source.id, entitlement.environment_source == null ? null : entitlement.environment_source.display_name);
    }

    public AppStatus getUpdatedStatus(String str, String str2, @Nullable AppStatus appStatus) {
        if (AppStatusConverter.isIncompatible(str, str2)) {
            return AppStatus.INCOMPATIBLE;
        }
        if (((MobileConfig) FbInjector.lazyInstance(2, MobileConfigFactoryModule.UL_id._UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getBoolean(MC.oculus_library.queue_uninstall_requests_enabled) || appStatus != AppStatus.UNINSTALLING) {
            return findEntitlementStatus(str);
        }
        BLog.i(TAG, "cannot query installer for uninstall status of %s", str);
        return AppStatus.UNINSTALLING;
    }

    @VisibleForTesting
    public AppStatus findEntitlementStatus(final String str) {
        AppStatus appStatus;
        List<ApkUpdateInfo> findUpdates = ((InfoUtils) FbInjector.lazyInstance(1, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).findUpdates(new Predicate<ApkUpdateInfo>() {
            /* class com.oculus.library.utils.AppInternalConverter.AnonymousClass1 */

            public boolean apply(@Nullable ApkUpdateInfo apkUpdateInfo) {
                if (apkUpdateInfo == null) {
                    return false;
                }
                ApkUpdateInfoContract.UpdateState state = apkUpdateInfo.getState();
                if (!apkUpdateInfo.identifier.equals(str) || !state.isTransient()) {
                    return false;
                }
                return true;
            }
        });
        if (!findUpdates.isEmpty()) {
            Collections.sort(findUpdates, new Comparator<ApkUpdateInfo>() {
                /* class com.oculus.library.utils.AppInternalConverter.AnonymousClass2 */

                public int compare(ApkUpdateInfo apkUpdateInfo, ApkUpdateInfo apkUpdateInfo2) {
                    return apkUpdateInfo.getState().compareTo((Enum) apkUpdateInfo2.getState());
                }
            });
            ApkUpdateInfo apkUpdateInfo = findUpdates.get(0);
            ApkUpdateInfo apkUpdateInfo2 = findUpdates.get(findUpdates.size() - 1);
            BLog.d(TAG, "Need to determine state for %s due to refresh during installer work", str);
            BLog.d(TAG, "highest transient state: %s", apkUpdateInfo2.getState().name());
            BLog.d(TAG, "lowest transient state: %s", apkUpdateInfo.getState().name());
            AppStatus appStatus2 = AppStatus.UNKNOWN;
            switch (apkUpdateInfo2.getState()) {
                case QUEUED_DOWNLOAD:
                    appStatus = AppStatus.DOWNLOAD_QUEUED;
                    break;
                case DOWNLOADING:
                case DOWNLOADED:
                    appStatus = AppStatus.DOWNLOADING;
                    break;
                case VERIFYING:
                case VERIFIED:
                    int i = AnonymousClass3.$SwitchMap$com$oculus$appmanager$info$ApkUpdateInfoContract$UpdateState[apkUpdateInfo.getState().ordinal()];
                    if (i != 1 && i != 2 && i != 3) {
                        if (i != 4 && i != 5) {
                            BLog.w(TAG, "unhandled/unknown transient state: %s. Defaulting to Installing.", apkUpdateInfo.getState());
                            appStatus = AppStatus.INSTALLING;
                            break;
                        } else {
                            appStatus = AppStatus.INSTALLING;
                            break;
                        }
                    } else {
                        appStatus = AppStatus.DOWNLOADING;
                        break;
                    }
                    break;
                case INSTALLING:
                    appStatus = AppStatus.INSTALLING;
                    break;
                case UNINSTALLING:
                    appStatus = AppStatus.UNINSTALLING;
                    break;
                default:
                    BLog.w(TAG, "unhandled/unknown transient state: %s. Defaulting to Unknown.", apkUpdateInfo2.getState());
                    appStatus = AppStatus.UNKNOWN;
                    break;
            }
            BLog.d(TAG, "resulting state: %s", appStatus.name());
            return appStatus;
        } else if (((PackageManagerUtils) FbInjector.lazyInstance(0, PackagesCacheModule.UL_id._UL__ULSEP_com_oculus_common_packagescache_PackageManagerUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).isPackageInstalled(str)) {
            return AppStatus.INSTALLED;
        } else {
            if (isInstantInstallAvailable(str)) {
                return AppStatus.INSTALL_AVAILABLE;
            }
            return AppStatus.ENTITLED;
        }
    }

    private boolean isInstantInstallAvailable(String str) {
        if (!((AppSharingUtils) FbInjector.lazyInstance(3, UtilsModule.UL_id._UL__ULSEP_com_oculus_library_utils_AppSharingUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).isInstallSharingEnabled() || !((AppSharingUtils) FbInjector.lazyInstance(3, UtilsModule.UL_id._UL__ULSEP_com_oculus_library_utils_AppSharingUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).isPackageInstalledAsUser(str, 0)) {
            return false;
        }
        return true;
    }
}
