package com.oculus.library.refresher;

import android.content.pm.PackageInfo;
import androidx.annotation.VisibleForTesting;
import bolts.Capture;
import bolts.Continuation;
import bolts.Task;
import bolts.TaskCompletionSource;
import com.facebook.debug.log.BLog;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.mobileconfig.factory.MobileConfig;
import com.facebook.mobileconfig.factory.module.MobileConfigFactoryModule;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Eager;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.google.common.collect.HashMultimap;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.Multimap;
import com.google.common.collect.UnmodifiableIterator;
import com.oculus.appmanager.assets.AssetStorage;
import com.oculus.appmanager.assets.AssetsModule;
import com.oculus.appmanager.assets.GenerateAssetListAndBinIdResponse;
import com.oculus.appmanager.assets.InstallWatcher;
import com.oculus.appmanager.assets.model.IapStatus;
import com.oculus.auth.credentials.CredentialsManager;
import com.oculus.auth.credentials.CredentialsModule;
import com.oculus.common.packagescache.PackageManagerUtils;
import com.oculus.common.packagescache.PackagesCacheModule;
import com.oculus.device.DeviceType;
import com.oculus.errorreporting.interfaces.IErrorReporter;
import com.oculus.errorreporting.interfaces.InterfacesModule;
import com.oculus.http.core.base.ApiException;
import com.oculus.library.database.LibraryStorage;
import com.oculus.library.model.App;
import com.oculus.library.model.AppStatus;
import com.oculus.library.model.AssetInfo;
import com.oculus.library.model.CloudStorageStatus;
import com.oculus.library.model.SupportedPlatform;
import com.oculus.library.net.ActiveEntitlementsResponse;
import com.oculus.library.net.Entitlement;
import com.oculus.library.net.GenerateUpdateInfoRequest;
import com.oculus.library.net.GenerateUpdateInfoResponse;
import com.oculus.library.net.LibraryMethods;
import com.oculus.library.net.NetModule;
import com.oculus.library.refresher.MC;
import com.oculus.library.refresher.RefresherModule;
import com.oculus.library.utils.AppInternalConverter;
import com.oculus.library.utils.UtilsModule;
import com.oculus.managed.ManagedMode;
import com.oculus.managed.ManagedModule;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.TimeUnit;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_auth_credentials_CredentialsManager_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_assets_AssetStorage_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_assets_InstallWatcher_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_common_packagescache_PackageManagerUtils_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_library_utils_AppInternalConverter_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_library_net_LibraryMethods_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_library_database_LibraryStorage_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_managed_ManagedMode_ULSEP_BINDING_ID", "_UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID"})
public class LibraryCacheRefresher {
    private static final String SOFT_ERROR_REFRESH_UNAUTHORIZED = "ocms_library_unauthorized";
    private static final String TAG = "LibraryCacheRefresher";
    private InjectionContext _UL_mInjectionContext;
    @Inject
    @Eager
    private final CredentialsManager mCredentialsManager;
    @Inject
    @Eager
    private final InstallWatcher mInstallWatcher;
    @Inject
    @Eager
    private final LibraryStorage mLibraryStorage;

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_library_refresher_LibraryCacheRefresher_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(RefresherModule.UL_id._UL__ULSEP_com_oculus_library_refresher_LibraryCacheRefresher_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final LibraryCacheRefresher _UL__ULSEP_com_oculus_library_refresher_LibraryCacheRefresher_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (LibraryCacheRefresher) UL.factorymap.get(RefresherModule.UL_id._UL__ULSEP_com_oculus_library_refresher_LibraryCacheRefresher_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final LibraryCacheRefresher _UL__ULSEP_com_oculus_library_refresher_LibraryCacheRefresher_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new LibraryCacheRefresher(injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_library_refresher_LibraryCacheRefresher_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(RefresherModule.UL_id._UL__ULSEP_com_oculus_library_refresher_LibraryCacheRefresher_ULSEP_BINDING_ID, injectorLike);
    }

    @Inject
    public LibraryCacheRefresher(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(7, injectorLike);
        this.mCredentialsManager = CredentialsModule._UL__ULSEP_com_oculus_auth_credentials_CredentialsManager_ULSEP_ACCESS_METHOD(injectorLike);
        this.mInstallWatcher = InstallWatcher._UL__ULSEP_com_oculus_appmanager_assets_InstallWatcher_ULSEP_ACCESS_METHOD(injectorLike);
        this.mLibraryStorage = LibraryStorage._UL__ULSEP_com_oculus_library_database_LibraryStorage_ULSEP_ACCESS_METHOD(injectorLike);
    }

    public Task<ImmutableList<App>> refreshCache() {
        BLog.d(TAG, "refreshCache");
        if (this.mCredentialsManager.getCredentials() != null || ((ManagedMode) FbInjector.lazyInstance(5, ManagedModule.UL_id._UL__ULSEP_com_oculus_managed_ManagedMode_ULSEP_BINDING_ID, this._UL_mInjectionContext)).isEnterpriseModeEnabled()) {
            final Capture capture = new Capture();
            final Capture capture2 = new Capture();
            return fetchEntitlements().onSuccessTask(new Continuation<ImmutableList<App>, Task<GenerateUpdateInfoResponse>>() {
                /* class com.oculus.library.refresher.LibraryCacheRefresher.AnonymousClass4 */

                @Override // bolts.Continuation
                public Task<GenerateUpdateInfoResponse> then(Task<ImmutableList<App>> task) throws Exception {
                    ImmutableList<App> result = task.getResult();
                    capture.set(result);
                    return LibraryCacheRefresher.this.fetchUpdates(result);
                }
            }).onSuccessTask(new Continuation<GenerateUpdateInfoResponse, Task<GenerateAssetListAndBinIdResponse>>() {
                /* class com.oculus.library.refresher.LibraryCacheRefresher.AnonymousClass3 */

                @Override // bolts.Continuation
                public Task<GenerateAssetListAndBinIdResponse> then(Task<GenerateUpdateInfoResponse> task) throws Exception {
                    capture2.set(task.getResult());
                    return LibraryCacheRefresher.this.fetchAssets((ImmutableList) capture.get());
                }
            }).onSuccess(new Continuation<GenerateAssetListAndBinIdResponse, ImmutableList<App>>() {
                /* class com.oculus.library.refresher.LibraryCacheRefresher.AnonymousClass2 */

                @Override // bolts.Continuation
                public ImmutableList<App> then(Task<GenerateAssetListAndBinIdResponse> task) throws Exception {
                    GenerateAssetListAndBinIdResponse result = task.getResult();
                    ImmutableList immutableList = (ImmutableList) capture.get();
                    BLog.d(LibraryCacheRefresher.TAG, "updating cache from server response. apps=%d updates=%d assets=%d", Integer.valueOf(immutableList.size()), Integer.valueOf(((GenerateUpdateInfoResponse) capture2.get()).app_binary_updates.updates.length), Integer.valueOf(result.appBinaryInfo.info.length));
                    ImmutableList<App> filterDuplicates = LibraryCacheRefresher.this.filterDuplicates(LibraryCacheRefresher.this.syncLocalData(LibraryCacheRefresher.this.addAssetDownloadSizeToApps(immutableList, LibraryCacheRefresher.this.populateAssetCache(immutableList, result))));
                    LibraryCacheRefresher.this.resetCache(filterDuplicates);
                    return filterDuplicates;
                }
            }).continueWith(new Continuation<ImmutableList<App>, ImmutableList<App>>() {
                /* class com.oculus.library.refresher.LibraryCacheRefresher.AnonymousClass1 */

                @Override // bolts.Continuation
                public ImmutableList<App> then(Task<ImmutableList<App>> task) throws Exception {
                    if (!task.isFaulted()) {
                        return task.getResult();
                    }
                    BLog.e(LibraryCacheRefresher.TAG, task.getError(), "Failed to fetch library updates");
                    LibraryCacheRefresher.this.refreshCacheFromStorage();
                    throw task.getError();
                }
            });
        }
        BLog.w(TAG, "Unable to refresh library due to being logged out");
        TaskCompletionSource taskCompletionSource = new TaskCompletionSource();
        taskCompletionSource.setError(new IllegalStateException("Not logged in"));
        return taskCompletionSource.getTask();
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private ImmutableList<App> addAssetDownloadSizeToApps(List<App> list, Multimap<String, AssetInfo> multimap) {
        ImmutableList.Builder builder = new ImmutableList.Builder();
        for (App app : list) {
            if (!multimap.containsKey(app.packageName)) {
                builder.add((Object) app);
            } else {
                long j = app.downloadSizeBytes;
                for (AssetInfo assetInfo : multimap.get(app.packageName)) {
                    if (assetInfo.isRequired) {
                        j += assetInfo.size;
                    }
                }
                builder.add((Object) new App.Builder(app).withDownloadSizeBytes(j).build());
            }
        }
        return builder.build();
    }

    @VisibleForTesting
    public ImmutableList<App> syncLocalData(List<App> list) {
        ImmutableList.Builder builder = new ImmutableList.Builder();
        for (App app : list) {
            App app2 = this.mLibraryStorage.get(app.packageName, false);
            CloudStorageStatus fromData = CloudStorageStatus.fromData(app2 == null ? CloudStorageStatus.DISABLED : app2.cloudStorageStatus, CloudStorageStatus.isEnabled(app.cloudStorageStatus));
            if (app2 != null) {
                app = new App.Builder(app).withLocalData(new App.Builder.LocalData(app2)).withStatus(app.status).withCloudStorageStatus(fromData).build();
            }
            builder.add((Object) app);
        }
        return builder.build();
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private Multimap<String, AssetInfo> populateAssetCache(List<App> list, GenerateAssetListAndBinIdResponse generateAssetListAndBinIdResponse) {
        String name;
        HashMultimap create = HashMultimap.create();
        GenerateAssetListAndBinIdResponse.AppInfo[] appInfoArr = generateAssetListAndBinIdResponse.appBinaryInfo.info;
        int length = appInfoArr.length;
        int i = 0;
        while (i < length) {
            GenerateAssetListAndBinIdResponse.AppInfo appInfo = appInfoArr[i];
            if (!(appInfo == null || appInfo.binary == null)) {
                for (GenerateAssetListAndBinIdResponse.AssetFileNode assetFileNode : appInfo.binary.getAssets()) {
                    String str = appInfo.binary.id;
                    String str2 = appInfo.binary.packageName;
                    if (assetFileNode.iapItem == null) {
                        name = IapStatus.FREE.name();
                    } else if (assetFileNode.iapItem.isViewerEntitled) {
                        name = IapStatus.ENTITLED.name();
                    } else {
                        name = IapStatus.NOT_ENTITLED.name();
                    }
                    create.put(str2, new AssetInfo(str, str2, assetFileNode.id, assetFileNode.fileName, assetFileNode.fileType, assetFileNode.metadata, assetFileNode.uri, assetFileNode.size, name, assetFileNode.isRequired, assetFileNode.language == null ? null : assetFileNode.language.languageCode, assetFileNode.language == null ? null : assetFileNode.language.languageEnglishName, assetFileNode.language == null ? null : assetFileNode.language.languageNativeName));
                    appInfoArr = appInfoArr;
                    length = length;
                    appInfo = appInfo;
                }
            }
            i++;
            appInfoArr = appInfoArr;
            length = length;
        }
        for (App app : list) {
            if (create.containsKey(app.packageName)) {
                ((AssetStorage) FbInjector.lazyInstance(0, AssetsModule.UL_id._UL__ULSEP_com_oculus_appmanager_assets_AssetStorage_ULSEP_BINDING_ID, this._UL_mInjectionContext)).replaceAssets(create.get((Object) app.packageName), app.packageName, ((PackageManagerUtils) FbInjector.lazyInstance(1, PackagesCacheModule.UL_id._UL__ULSEP_com_oculus_common_packagescache_PackageManagerUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getInstalledVersionCode(app.packageName, app.latestVersionCode));
            }
        }
        return create;
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private Task<GenerateUpdateInfoResponse> fetchUpdates(final ImmutableList<App> immutableList) {
        return Task.callInBackground(new Callable<GenerateUpdateInfoResponse>() {
            /* class com.oculus.library.refresher.LibraryCacheRefresher.AnonymousClass5 */

            @Override // java.util.concurrent.Callable
            public GenerateUpdateInfoResponse call() throws Exception {
                BLog.d(LibraryCacheRefresher.TAG, "fetchUpdates");
                ArrayList arrayList = new ArrayList();
                UnmodifiableIterator it = immutableList.iterator();
                while (it.hasNext()) {
                    App app = (App) it.next();
                    if (app.isInstalled()) {
                        PackageInfo packageInfo = ((PackageManagerUtils) FbInjector.lazyInstance(1, PackagesCacheModule.UL_id._UL__ULSEP_com_oculus_common_packagescache_PackageManagerUtils_ULSEP_BINDING_ID, LibraryCacheRefresher.this._UL_mInjectionContext)).getPackageInfo(app.packageName);
                        if (packageInfo != null) {
                            int i = packageInfo.versionCode;
                        }
                        arrayList.add(new GenerateUpdateInfoRequest.EntitlementIdentifier(app.id, ((PackageManagerUtils) FbInjector.lazyInstance(1, PackagesCacheModule.UL_id._UL__ULSEP_com_oculus_common_packagescache_PackageManagerUtils_ULSEP_BINDING_ID, LibraryCacheRefresher.this._UL_mInjectionContext)).getInstalledVersionCode(app.packageName)));
                    }
                }
                try {
                    GenerateUpdateInfoResponse generateUpdateInfo = ((LibraryMethods) FbInjector.lazyInstance(4, NetModule.UL_id._UL__ULSEP_com_oculus_library_net_LibraryMethods_ULSEP_BINDING_ID, LibraryCacheRefresher.this._UL_mInjectionContext)).generateUpdateInfo(new GenerateUpdateInfoRequest(arrayList));
                    if (generateUpdateInfo != null) {
                        return generateUpdateInfo;
                    }
                    BLog.d(LibraryCacheRefresher.TAG, "server response is null while updating app updates");
                    throw new IllegalStateException("server response is null while updating app updates");
                } catch (ApiException e) {
                    BLog.e(LibraryCacheRefresher.TAG, e, "Failed to refresh library due to patch check query");
                    throw e;
                }
            }
        });
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private Task<GenerateAssetListAndBinIdResponse> fetchAssets(final ImmutableList<App> immutableList) {
        return Task.callInBackground(new Callable<GenerateAssetListAndBinIdResponse>() {
            /* class com.oculus.library.refresher.LibraryCacheRefresher.AnonymousClass6 */

            @Override // java.util.concurrent.Callable
            public GenerateAssetListAndBinIdResponse call() throws Exception {
                BLog.d(LibraryCacheRefresher.TAG, "fetchAssets");
                return LibraryCacheRefresher.this.mInstallWatcher.fetchAssetList(immutableList);
            }
        });
    }

    private Task<ImmutableList<App>> fetchEntitlements() {
        return Task.callInBackground(new Callable<ImmutableList<App>>() {
            /* class com.oculus.library.refresher.LibraryCacheRefresher.AnonymousClass7 */

            @Override // java.util.concurrent.Callable
            public ImmutableList<App> call() throws Exception {
                ActiveEntitlementsResponse activeEntitlementsResponse;
                BLog.d(LibraryCacheRefresher.TAG, "fetchEntitlements");
                boolean z = false;
                boolean z2 = ((ManagedMode) FbInjector.lazyInstance(5, ManagedModule.UL_id._UL__ULSEP_com_oculus_managed_ManagedMode_ULSEP_BINDING_ID, LibraryCacheRefresher.this._UL_mInjectionContext)).isEnterpriseModeEnabled() || ((MobileConfig) FbInjector.lazyInstance(6, MobileConfigFactoryModule.UL_id._UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID, LibraryCacheRefresher.this._UL_mInjectionContext)).getBoolean(MC.oculus_library.entitlements_v2_enabled);
                BLog.i(LibraryCacheRefresher.TAG, "Fetch Entitlements. Using %s", z2 ? "Entitlements v2" : "Entitlements v1");
                if (z2) {
                    try {
                        activeEntitlementsResponse = ((LibraryMethods) FbInjector.lazyInstance(4, NetModule.UL_id._UL__ULSEP_com_oculus_library_net_LibraryMethods_ULSEP_BINDING_ID, LibraryCacheRefresher.this._UL_mInjectionContext)).getActiveEntitlementsV2();
                    } catch (ApiException e) {
                        if (!(e.getApiError() == null || e.getApiError().httpStatus == null || e.getApiError().httpStatus.intValue() != 401)) {
                            if (LibraryCacheRefresher.this.mCredentialsManager.getCredentials() != null) {
                                z = true;
                            }
                            ((IErrorReporter) FbInjector.lazyInstance(3, InterfacesModule.UL_id._UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_BINDING_ID, LibraryCacheRefresher.this._UL_mInjectionContext)).softError(LibraryCacheRefresher.SOFT_ERROR_REFRESH_UNAUTHORIZED, "Hit 401 when trying to refresh the library. hasCreds=" + z, e);
                        }
                        BLog.e(LibraryCacheRefresher.TAG, e, "Failed to refresh library in LibraryCacheRefresher.");
                        throw e;
                    }
                } else {
                    activeEntitlementsResponse = ((LibraryMethods) FbInjector.lazyInstance(4, NetModule.UL_id._UL__ULSEP_com_oculus_library_net_LibraryMethods_ULSEP_BINDING_ID, LibraryCacheRefresher.this._UL_mInjectionContext)).getActiveEntitlements();
                }
                if (activeEntitlementsResponse != null) {
                    return LibraryCacheRefresher.this.createModels(activeEntitlementsResponse);
                }
                BLog.d(LibraryCacheRefresher.TAG, "server response is null while updating entitlements");
                LibraryCacheRefresher.this.refreshCacheFromStorage();
                throw new IllegalStateException("server response is null while updating entitlements");
            }
        });
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private ImmutableList<App> createModels(ActiveEntitlementsResponse activeEntitlementsResponse) {
        long j;
        boolean z = ((ManagedMode) FbInjector.lazyInstance(5, ManagedModule.UL_id._UL__ULSEP_com_oculus_managed_ManagedMode_ULSEP_BINDING_ID, this._UL_mInjectionContext)).isEnterpriseModeEnabled() || ((MobileConfig) FbInjector.lazyInstance(6, MobileConfigFactoryModule.UL_id._UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getBoolean(MC.oculus_library.entitlements_v2_enabled);
        List<ActiveEntitlementsResponse.ActiveAndroidEntitlement> arrayList = new ArrayList();
        if (!z) {
            arrayList = activeEntitlementsResponse.entitlements.active_android_entitlements.nodes;
        } else if (activeEntitlementsResponse.entitlements.entitlements != null) {
            arrayList = activeEntitlementsResponse.entitlements.entitlements.nodes;
        }
        ImmutableList.Builder builder = new ImmutableList.Builder();
        for (ActiveEntitlementsResponse.ActiveAndroidEntitlement activeAndroidEntitlement : arrayList) {
            Entitlement entitlement = activeAndroidEntitlement.item;
            String str = activeAndroidEntitlement.signed_token;
            if (activeAndroidEntitlement.last_used > 999999999999L) {
                j = activeAndroidEntitlement.last_used;
            } else {
                j = TimeUnit.SECONDS.toMillis(activeAndroidEntitlement.last_used);
            }
            if (str == null) {
                String str2 = TAG;
                ((IErrorReporter) FbInjector.lazyInstance(3, InterfacesModule.UL_id._UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_BINDING_ID, this._UL_mInjectionContext)).softError(str2, "Null entitlementHash for package: " + entitlement.getPackageName());
            } else {
                builder.add((Object) ((AppInternalConverter) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_library_utils_AppInternalConverter_ULSEP_BINDING_ID, this._UL_mInjectionContext)).toApp(entitlement, str, j, entitlement.isAppSupportedOnCurrentDevice() ? this.mLibraryStorage.get(entitlement.getPackageName(), false) : null, activeAndroidEntitlement.grantReason, activeAndroidEntitlement.grantTime, activeAndroidEntitlement.grantExpiration == null ? -1 : activeAndroidEntitlement.grantExpiration.longValue()));
            }
        }
        return builder.build();
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private void refreshCacheFromStorage() {
        UnmodifiableIterator<App> it = this.mLibraryStorage.getAll().iterator();
        while (it.hasNext()) {
            App next = it.next();
            AppStatus updatedStatus = ((AppInternalConverter) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_library_utils_AppInternalConverter_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getUpdatedStatus(next.packageName, next.id, next.status);
            if (updatedStatus != next.status) {
                this.mLibraryStorage.save(new App.Editor(next.packageName).withStatus(updatedStatus));
            }
        }
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private ImmutableList<App> filterDuplicates(ImmutableList<App> immutableList) {
        HashMap hashMap = new HashMap();
        UnmodifiableIterator<App> it = immutableList.iterator();
        while (it.hasNext()) {
            App next = it.next();
            App app = (App) hashMap.get(next.packageName);
            if (app != null) {
                if (DeviceType.is6DOF()) {
                    if (app.platform == SupportedPlatform.ANDROID && next.platform == SupportedPlatform.ANDROID_6DOF) {
                        BLog.d(TAG, "Choosing to keep 6dof entitlement over 3dof for %s", next.packageName);
                        hashMap.put(next.packageName, next);
                    } else if (app.platform == SupportedPlatform.ANDROID_6DOF && next.platform == SupportedPlatform.ANDROID) {
                        BLog.d(TAG, "Choosing to keep 6dof entitlement over 3dof for %s", next.packageName);
                    }
                }
                BLog.w(TAG, "Duplicate entitlement found for %s. Duplicate will be lost.", next.packageName);
            } else {
                hashMap.put(next.packageName, next);
            }
        }
        return ImmutableList.copyOf(hashMap.values());
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private void resetCache(ImmutableList<App> immutableList) {
        this.mLibraryStorage.set(immutableList);
    }
}
