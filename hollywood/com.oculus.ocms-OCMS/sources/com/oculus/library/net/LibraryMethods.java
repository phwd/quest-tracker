package com.oculus.library.net;

import android.content.Context;
import androidx.annotation.VisibleForTesting;
import com.facebook.androidinternals.android.os.SystemPropertiesInternal;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.mobileconfig.factory.MobileConfig;
import com.facebook.mobileconfig.factory.module.MobileConfigFactoryModule;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.oculus.http.common.graphql.GraphQLParamsHelper;
import com.oculus.http.core.ApiModule;
import com.oculus.http.core.annotations.OculusRestAdapter;
import com.oculus.http.core.base.ApiError;
import com.oculus.http.core.base.ApiException;
import com.oculus.http.core.common.DsatAuthorization;
import com.oculus.library.net.MC;
import com.oculus.library.net.NetModule;
import com.oculus.managed.ManagedMode;
import com.oculus.managed.ManagedModule;
import com.oculus.multiuser.MultiuserModule;
import com.oculus.multiuser.UserClassifier;
import javax.inject.Provider;
import retrofit.RestAdapter;
import retrofit.RetrofitError;
import retrofit.http.GET;
import retrofit.http.Headers;
import retrofit.http.Query;

@Dependencies({"_UL__ULSEP_retrofit_RestAdapter_ULSEP_com_oculus_http_core_annotations_OculusRestAdapter_ULSEP_BINDING_ID", "_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_multiuser_UserClassifier_ULSEP_BINDING_ID", "_UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_managed_ManagedMode_ULSEP_BINDING_ID"})
public class LibraryMethods {
    private InjectionContext _UL_mInjectionContext;
    private final Float mLayoutScale = Float.valueOf(Float.parseFloat(SystemPropertiesInternal.get("ro.ovr.layoutscale", "1.f")));
    private final Methods mMethods;

    @VisibleForTesting
    public interface Methods {
        @GET("/graphql")
        GenerateUpdateInfoResponse generateEntitlementUpdateData(@Query("doc") String str, @Query("variables") String str2);

        @GET("/graphql")
        @Headers({DsatAuthorization.ENABLE})
        GenerateUpdateInfoResponse generateEntitlementUpdateDataDsat(@Query("doc") String str, @Query("variables") String str2);

        @GET("/graphql")
        GenerateBinaryInfoResponse genereateEntitlementBinaryData(@Query("doc") String str, @Query("variables") String str2);

        @GET("/graphql")
        ActiveEntitlementsResponse getActiveEntitlements(@Query("doc") String str, @Query("variables") String str2);

        @GET("/graphql")
        @Headers({DsatAuthorization.ENABLE})
        ActiveEntitlementsResponse getActiveEntitlementsDsat(@Query("doc") String str, @Query("variables") String str2);
    }

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_library_net_LibraryMethods_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(NetModule.UL_id._UL__ULSEP_com_oculus_library_net_LibraryMethods_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final LibraryMethods _UL__ULSEP_com_oculus_library_net_LibraryMethods_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (LibraryMethods) UL.factorymap.get(NetModule.UL_id._UL__ULSEP_com_oculus_library_net_LibraryMethods_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final LibraryMethods _UL__ULSEP_com_oculus_library_net_LibraryMethods_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new LibraryMethods(injectorLike, ApiModule._UL__ULSEP_retrofit_RestAdapter_ULSEP_com_oculus_http_core_annotations_OculusRestAdapter_ULSEP_ACCESS_METHOD(injectorLike));
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_library_net_LibraryMethods_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(NetModule.UL_id._UL__ULSEP_com_oculus_library_net_LibraryMethods_ULSEP_BINDING_ID, injectorLike);
    }

    @Inject
    public LibraryMethods(InjectorLike injectorLike, @OculusRestAdapter RestAdapter restAdapter) {
        this._UL_mInjectionContext = new InjectionContext(4, injectorLike);
        this.mMethods = (Methods) restAdapter.create(Methods.class);
    }

    private GenerateUpdateInfoResponse generateUpdateInfoAccessToken(GenerateUpdateInfoRequest generateUpdateInfoRequest) throws ApiException {
        try {
            return this.mMethods.generateEntitlementUpdateData(LibraryQueries.UPDATE_INFO_OSS_QUERY, GraphQLParamsHelper.encodeParams(generateUpdateInfoRequest.getParams()));
        } catch (RetrofitError e) {
            throw new ApiException(e, new ApiError(e));
        }
    }

    private GenerateUpdateInfoResponse generateUpdateInfoDsat(GenerateUpdateInfoRequest generateUpdateInfoRequest) throws ApiException {
        try {
            return this.mMethods.generateEntitlementUpdateDataDsat(LibraryQueries.UPDATE_INFO_OSS_QUERY, GraphQLParamsHelper.encodeParams(generateUpdateInfoRequest.getParams()));
        } catch (RetrofitError e) {
            throw new ApiException(e, new ApiError(e));
        }
    }

    private ActiveEntitlementsResponse getActiveEntitlementsAccessToken(String str) throws ApiException {
        try {
            return this.mMethods.getActiveEntitlements(str, GraphQLParamsHelper.encodeParams(ActiveEntitlementRequest.getParams((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext), this.mLayoutScale)));
        } catch (RetrofitError e) {
            throw new ApiException(e, new ApiError(e));
        }
    }

    private ActiveEntitlementsResponse getActiveEntitlementsDsat(String str) throws ApiException {
        try {
            return this.mMethods.getActiveEntitlementsDsat(str, GraphQLParamsHelper.encodeParams(ActiveEntitlementRequest.getParams((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext), this.mLayoutScale)));
        } catch (RetrofitError e) {
            throw new ApiException(e, new ApiError(e));
        }
    }

    public ActiveEntitlementsResponse getActiveEntitlements() throws ApiException {
        if (useDsat()) {
            return getActiveEntitlementsDsat(LibraryQueries.ACTIVE_ENTITLEMENT_OSS_QUERY);
        }
        return getActiveEntitlementsAccessToken(LibraryQueries.ACTIVE_ENTITLEMENT_OSS_QUERY);
    }

    public ActiveEntitlementsResponse getActiveEntitlementsV2() throws ApiException {
        if (useDsat()) {
            return getActiveEntitlementsDsat(LibraryQueries.ACTIVE_ENTITLEMENT_V2_OSS_QUERY);
        }
        return getActiveEntitlementsAccessToken(LibraryQueries.ACTIVE_ENTITLEMENT_V2_OSS_QUERY);
    }

    public boolean useDsat() {
        if (((ManagedMode) FbInjector.lazyInstance(3, ManagedModule.UL_id._UL__ULSEP_com_oculus_managed_ManagedMode_ULSEP_BINDING_ID, this._UL_mInjectionContext)).isEnterpriseModeEnabled()) {
            return true;
        }
        if (((UserClassifier) FbInjector.lazyInstance(1, MultiuserModule.UL_id._UL__ULSEP_com_oculus_multiuser_UserClassifier_ULSEP_BINDING_ID, this._UL_mInjectionContext)).isPrimary() || !((MobileConfig) FbInjector.lazyInstance(2, MobileConfigFactoryModule.UL_id._UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getBoolean(MC.oculus_library.oculus_ocms_ds_library_cache_refresh)) {
            return false;
        }
        return true;
    }

    public GenerateUpdateInfoResponse generateUpdateInfo(GenerateUpdateInfoRequest generateUpdateInfoRequest) throws ApiException {
        if (useDsat()) {
            return generateUpdateInfoDsat(generateUpdateInfoRequest);
        }
        return generateUpdateInfoAccessToken(generateUpdateInfoRequest);
    }

    public GenerateBinaryInfoResponse generateBinaryInfo(GenerateAppInfoRequest generateAppInfoRequest) throws ApiException {
        try {
            return this.mMethods.genereateEntitlementBinaryData(LibraryQueries.APP_INFO_OSS_QUERY, GraphQLParamsHelper.encodeParams(generateAppInfoRequest.getParams()));
        } catch (RetrofitError e) {
            throw new ApiException(e, new ApiError(e));
        }
    }
}
