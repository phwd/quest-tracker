package com.oculus.library.net;

import com.facebook.inject.AbstractLibraryModule;
import com.facebook.inject.AutoGeneratedBinder;
import com.facebook.inject.Binder;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.InjectorModule;
import com.facebook.mobileconfig.factory.module.MobileConfigFactoryModule;
import com.facebook.mobileconfig.interfaces.MobileConfigInterfacesModule;
import com.facebook.ultralight.AutoGeneratedSwitchIdClass;
import com.facebook.ultralight.UL;
import com.google.inject.Key;
import com.oculus.dsatauth.DsatauthModule;
import com.oculus.http.common.HttpModule;
import com.oculus.http.core.ApiModule;
import com.oculus.http.core.endpoint.EndpointModule;
import com.oculus.http.core.interceptor.InterceptorModule;
import com.oculus.http.useragent.UserAgentModule;
import com.oculus.managed.ManagedModule;
import com.oculus.multiuser.MultiuserModule;
import com.oculus.util.device.DeviceModule;

@InjectorModule
public class NetModule extends AbstractLibraryModule {

    @AutoGeneratedSwitchIdClass
    public static final class UL_id {
        public static final int _UL__ULSEP_com_oculus_library_net_LibraryMethods_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_library_net_LibraryMethods_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(LibraryMethods.class)));
    }

    @AutoGeneratedBinder
    static class AutoGeneratedBindingsForNetModule {
        AutoGeneratedBindingsForNetModule() {
        }

        static void bind(Binder binder) {
            if (!UL.USE_STATIC_DI) {
                binder.require(BundledAndroidModule.class);
                binder.require(MobileConfigFactoryModule.class);
                binder.require(MobileConfigInterfacesModule.class);
                binder.require(DsatauthModule.class);
                binder.require(HttpModule.class);
                binder.require(ApiModule.class);
                binder.require(EndpointModule.class);
                binder.require(InterceptorModule.class);
                binder.require(UserAgentModule.class);
                binder.require(ManagedModule.class);
                binder.require(MultiuserModule.class);
                binder.require(DeviceModule.class);
                binder.bind(LibraryMethods.class).toProvider(new LibraryMethodsAutoProvider());
            }
        }
    }
}
