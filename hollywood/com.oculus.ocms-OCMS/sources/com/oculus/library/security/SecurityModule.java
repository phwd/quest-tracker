package com.oculus.library.security;

import com.facebook.inject.AbstractLibraryModule;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.AutoGeneratedBinder;
import com.facebook.inject.Binder;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.InjectorModule;
import com.facebook.ultralight.AutoGeneratedSwitchIdClass;
import com.facebook.ultralight.UL;
import com.google.inject.Key;
import com.oculus.android.os.internal.inject.InternalModule;
import com.oculus.errorreporting.ErrorReportingModule;
import com.oculus.errorreporting.interfaces.InterfacesModule;
import com.oculus.unlockulus_helper.inject.UnlockulusModule;
import com.oculus.util.device.DeviceModule;
import com.oculus.util.thread.ThreadModule;

@InjectorModule
public class SecurityModule extends AbstractLibraryModule {

    @AutoGeneratedSwitchIdClass
    public static final class UL_id {
        public static final int _UL__ULSEP_com_oculus_library_security_AccessControl_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_library_security_AccessControl_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(AccessControl.class)));
        public static final int _UL__ULSEP_com_oculus_library_security_TrustedApplications_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_library_security_TrustedApplications_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(TrustedApplications.class)));
    }

    @AutoGeneratedBinder
    static class AutoGeneratedBindingsForSecurityModule {
        AutoGeneratedBindingsForSecurityModule() {
        }

        static void bind(Binder binder) {
            if (!UL.USE_STATIC_DI) {
                binder.require(BundledAndroidModule.class);
                binder.require(InternalModule.class);
                binder.require(ErrorReportingModule.class);
                binder.require(InterfacesModule.class);
                binder.require(UnlockulusModule.class);
                binder.require(DeviceModule.class);
                binder.require(ThreadModule.class);
                binder.bind(AccessControl.class).toProvider(new AccessControlAutoProvider()).in(ApplicationScoped.class);
                binder.bind(TrustedApplications.class).toProvider(new TrustedApplicationsAutoProvider());
            }
        }
    }
}
