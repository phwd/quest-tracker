package com.oculus.library.job;

import android.app.job.JobInfo;
import android.app.job.JobScheduler;
import android.content.ComponentName;
import android.content.Context;
import androidx.annotation.RequiresApi;
import com.facebook.debug.log.BLog;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightSingletonProvider;
import com.facebook.mobileconfig.factory.MobileConfig;
import com.facebook.mobileconfig.factory.module.MobileConfigFactoryModule;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.oculus.errorreporting.interfaces.IErrorReporter;
import com.oculus.errorreporting.interfaces.InterfacesModule;
import com.oculus.library.job.LibraryJobModule;
import com.oculus.library.job.MC;
import java.util.Locale;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID", "_UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_BINDING_ID"})
@RequiresApi(api = 21)
@ApplicationScoped
public class LibraryJobScheduler {
    private static final String TAG = "LibraryJobScheduler";
    private static volatile LibraryJobScheduler _UL__ULSEP_com_oculus_library_job_LibraryJobScheduler_ULSEP_INSTANCE;
    private InjectionContext _UL_mInjectionContext;

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_library_job_LibraryJobScheduler_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(LibraryJobModule.UL_id._UL__ULSEP_com_oculus_library_job_LibraryJobScheduler_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final LibraryJobScheduler _UL__ULSEP_com_oculus_library_job_LibraryJobScheduler_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (LibraryJobScheduler) UL.factorymap.get(LibraryJobModule.UL_id._UL__ULSEP_com_oculus_library_job_LibraryJobScheduler_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final LibraryJobScheduler _UL__ULSEP_com_oculus_library_job_LibraryJobScheduler_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_library_job_LibraryJobScheduler_ULSEP_INSTANCE == null) {
            synchronized (LibraryJobScheduler.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_library_job_LibraryJobScheduler_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        _UL__ULSEP_com_oculus_library_job_LibraryJobScheduler_ULSEP_INSTANCE = new LibraryJobScheduler(injectorLike.getApplicationInjector());
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_library_job_LibraryJobScheduler_ULSEP_INSTANCE;
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_library_job_LibraryJobScheduler_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(LibraryJobModule.UL_id._UL__ULSEP_com_oculus_library_job_LibraryJobScheduler_ULSEP_BINDING_ID, injectorLike);
    }

    @Inject
    public LibraryJobScheduler(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(3, injectorLike);
    }

    public boolean scheduleUpdateJob() {
        if (isLibraryUpdateJobScheduled()) {
            return false;
        }
        int schedule = getJobScheduler().schedule(new JobInfo.Builder(1828726832, new ComponentName((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext), LibraryJobService.class)).setPeriodic(((MobileConfig) FbInjector.lazyInstance(1, MobileConfigFactoryModule.UL_id._UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getLong(MC.oculus_library.library_update_period_ms)).setRequiredNetworkType(1).setPersisted(true).build());
        if (schedule == 1) {
            BLog.d(TAG, "job schedule succeeded for %s", ((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getPackageName());
        } else {
            ((IErrorReporter) FbInjector.lazyInstance(2, InterfacesModule.UL_id._UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_BINDING_ID, this._UL_mInjectionContext)).softError(TAG, String.format(Locale.US, "Library update job schedule failed (error code: %d)", Integer.valueOf(schedule)));
        }
        return true;
    }

    private boolean isLibraryUpdateJobScheduled() {
        for (JobInfo jobInfo : getJobScheduler().getAllPendingJobs()) {
            if (jobInfo.getId() == 1828726832 && jobInfo.getService().getClassName().equals(LibraryJobService.class.getName())) {
                return true;
            }
        }
        return false;
    }

    private JobScheduler getJobScheduler() {
        return (JobScheduler) ((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getSystemService("jobscheduler");
    }
}
