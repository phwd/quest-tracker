package com.oculus.library.auth;

import bolts.Task;
import com.facebook.debug.log.BLog;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Eager;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.oculus.auth.handler.LoginHandler;
import com.oculus.auth.handler.LogoutHandler;
import com.oculus.library.auth.LibraryAuthModule;
import com.oculus.library.database.LibraryStorage;
import com.oculus.libraryapi.OVRLibrary;
import com.oculus.libraryapi.OVRLibraryModule;
import java.util.concurrent.Callable;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_library_database_LibraryStorage_ULSEP_BINDING_ID"})
public class LibraryAuthListener implements LoginHandler, LogoutHandler {
    private static final String TAG = "LibraryAuthListener";
    @Inject
    @Eager
    private final LibraryStorage mLibraryStorage;
    @Inject
    @Eager
    private final OVRLibrary mOVRLibrary;

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_library_auth_LibraryAuthListener_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(LibraryAuthModule.UL_id._UL__ULSEP_com_oculus_library_auth_LibraryAuthListener_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final LibraryAuthListener _UL__ULSEP_com_oculus_library_auth_LibraryAuthListener_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (LibraryAuthListener) UL.factorymap.get(LibraryAuthModule.UL_id._UL__ULSEP_com_oculus_library_auth_LibraryAuthListener_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final LibraryAuthListener _UL__ULSEP_com_oculus_library_auth_LibraryAuthListener_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new LibraryAuthListener(injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_library_auth_LibraryAuthListener_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(LibraryAuthModule.UL_id._UL__ULSEP_com_oculus_library_auth_LibraryAuthListener_ULSEP_BINDING_ID, injectorLike);
    }

    @Inject
    public LibraryAuthListener(InjectorLike injectorLike) {
        this.mOVRLibrary = OVRLibraryModule._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_ACCESS_METHOD(injectorLike);
        this.mLibraryStorage = LibraryStorage._UL__ULSEP_com_oculus_library_database_LibraryStorage_ULSEP_ACCESS_METHOD(injectorLike);
    }

    @Override // com.oculus.auth.handler.LoginHandler
    public Task<Void> afterLoginAsync() {
        BLog.i(TAG, "Refetching on login");
        this.mOVRLibrary.refetch();
        return Task.forResult(null);
    }

    @Override // com.oculus.auth.handler.LogoutHandler
    public void beforeLogout() {
        try {
            Task.callInBackground(new Callable<Void>() {
                /* class com.oculus.library.auth.LibraryAuthListener.AnonymousClass1 */

                @Override // java.util.concurrent.Callable
                public Void call() throws Exception {
                    LibraryAuthListener.this.mLibraryStorage.clear();
                    return null;
                }
            }).waitForCompletion();
        } catch (InterruptedException e) {
            BLog.w(TAG, "Interrupted waiting for library clear", e);
        }
    }
}
