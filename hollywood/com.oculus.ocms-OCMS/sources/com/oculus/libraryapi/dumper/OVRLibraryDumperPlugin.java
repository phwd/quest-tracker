package com.oculus.libraryapi.dumper;

import android.content.Context;
import android.os.Bundle;
import android.os.ResultReceiver;
import android.os.SystemClock;
import android.text.TextUtils;
import com.facebook.debug.log.BLog;
import com.facebook.debug.log.LoggingUtil;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.inject.UnsafeContextInjection;
import com.facebook.quicklog.identifiers.PerformanceEventFields;
import com.facebook.stetho.dumpapp.DumperPlugin;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Eager;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.google.common.base.MoreObjects;
import com.google.common.collect.Lists;
import com.oculus.appmanager.assets.database.assetcontract.AssetContract;
import com.oculus.appmanager.info.ApkUpdateInfo;
import com.oculus.appmanager.info.ApkUpdateInfoContract;
import com.oculus.appmanager.info.model.InstallerResult;
import com.oculus.appmanager.info.model.RequestOrigin;
import com.oculus.appmanager.installer.common.CommonModule;
import com.oculus.appmanager.installer.common.InstallerFileUtils;
import com.oculus.appmanager.model.UpdateConfig;
import com.oculus.horizon.logging.LoggingKeys;
import com.oculus.library.database.contract.LibraryDBContract;
import com.oculus.library.model.App;
import com.oculus.library.model.AssetInfo;
import com.oculus.library.model.Image;
import com.oculus.libraryapi.OVRLibrary;
import com.oculus.libraryapi.OVRLibraryModule;
import com.oculus.libraryapi.dumper.OVRLibraryDumperModule;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.CountDownLatch;
import javax.inject.Provider;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;

@Dependencies({"_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_UnsafeContextInjection_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_installer_common_InstallerFileUtils_ULSEP_BINDING_ID"})
public class OVRLibraryDumperPlugin implements DumperPlugin {
    private static final String CMD_ASSETS = "assets";
    private static final String CMD_CANCEL = "cancel";
    private static final String CMD_DETAIL = "detail";
    private static final String CMD_INSTALL = "install";
    private static final String CMD_INSTALLER_PKG = "installer_pkg";
    private static final String CMD_INSTALL_URI = "install-uri";
    private static final String CMD_PRINT = "print";
    private static final String CMD_REFETCH = "refetch";
    private static final String CMD_UNINSTALL = "uninstall";
    private static final String NAME = "ovrlibrary";
    private static final String OPT_APK = "apk";
    private static final String OPT_ASSET = "asset";
    private static final String OPT_HEADER = "H";
    private static final String OPT_IDENTIFIER = "id";
    private static final String OPT_OBB = "obb";
    private static final String TAG = "OVRLibraryDumperPlugin";
    private InjectionContext _UL_mInjectionContext;
    @UnsafeContextInjection
    @Inject
    @Eager
    private final Context mContext;

    @Override // com.facebook.stetho.dumpapp.DumperPlugin
    public String getName() {
        return NAME;
    }

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_libraryapi_dumper_OVRLibraryDumperPlugin_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(OVRLibraryDumperModule.UL_id._UL__ULSEP_com_oculus_libraryapi_dumper_OVRLibraryDumperPlugin_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final OVRLibraryDumperPlugin _UL__ULSEP_com_oculus_libraryapi_dumper_OVRLibraryDumperPlugin_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (OVRLibraryDumperPlugin) UL.factorymap.get(OVRLibraryDumperModule.UL_id._UL__ULSEP_com_oculus_libraryapi_dumper_OVRLibraryDumperPlugin_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final OVRLibraryDumperPlugin _UL__ULSEP_com_oculus_libraryapi_dumper_OVRLibraryDumperPlugin_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new OVRLibraryDumperPlugin(injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_libraryapi_dumper_OVRLibraryDumperPlugin_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(OVRLibraryDumperModule.UL_id._UL__ULSEP_com_oculus_libraryapi_dumper_OVRLibraryDumperPlugin_ULSEP_BINDING_ID, injectorLike);
    }

    @Inject
    public OVRLibraryDumperPlugin(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(2, injectorLike);
        this.mContext = BundledAndroidModule._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_UnsafeContextInjection_ULSEP_ACCESS_METHOD(injectorLike);
    }

    /* JADX INFO: Can't fix incorrect switch cases order, some code will duplicate */
    /* JADX WARNING: Code restructure failed: missing block: B:16:0x004e, code lost:
        if (r3.equals("print") != false) goto L_0x0086;
     */
    @Override // com.facebook.stetho.dumpapp.DumperPlugin
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void dump(com.facebook.stetho.dumpapp.DumperContext r7) throws com.facebook.stetho.dumpapp.DumpException {
        /*
        // Method dump skipped, instructions count: 322
        */
        throw new UnsupportedOperationException("Method not decompiled: com.oculus.libraryapi.dumper.OVRLibraryDumperPlugin.dump(com.facebook.stetho.dumpapp.DumperContext):void");
    }

    /* JADX INFO: Can't fix incorrect switch cases order, some code will duplicate */
    /* JADX WARNING: Code restructure failed: missing block: B:10:0x0034, code lost:
        if (r1.equals("print") != false) goto L_0x0057;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void doAssetsSubquery(java.util.List<java.lang.String> r9, java.io.PrintStream r10) {
        /*
        // Method dump skipped, instructions count: 200
        */
        throw new UnsupportedOperationException("Method not decompiled: com.oculus.libraryapi.dumper.OVRLibraryDumperPlugin.doAssetsSubquery(java.util.List, java.io.PrintStream):void");
    }

    private void doAssetPrint(List<String> list, PrintStream printStream) {
        List<String> list2 = list;
        ArrayList<AssetInfo> arrayList = new ArrayList();
        int i = 1;
        char c = 0;
        boolean z = !list.isEmpty() && list2.get(0).equalsIgnoreCase("logcat");
        if (z) {
            list2 = list2.subList(1, list.size());
        }
        int size = list2.size();
        if (size == 0) {
            for (App app : ((OVRLibrary) FbInjector.lazyInstance(0, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getAllApps()) {
                arrayList.addAll(Arrays.asList(((OVRLibrary) FbInjector.lazyInstance(0, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, this._UL_mInjectionContext)).assetList(app.packageName)));
            }
        } else if (size == 1) {
            arrayList.addAll(Arrays.asList(((OVRLibrary) FbInjector.lazyInstance(0, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, this._UL_mInjectionContext)).assetList(list2.get(0))));
        } else if (size != 2) {
            printStream.println("Invalid arguments");
            return;
        } else {
            String str = list2.get(0);
            String str2 = list2.get(1);
            try {
                arrayList.add(((OVRLibrary) FbInjector.lazyInstance(0, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, this._UL_mInjectionContext)).assetStatus(str, Long.parseLong(str2)));
            } catch (NumberFormatException unused) {
                arrayList.add(((OVRLibrary) FbInjector.lazyInstance(0, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, this._UL_mInjectionContext)).assetStatus(str, str2));
            }
        }
        Collections.sort(arrayList, new Comparator<AssetInfo>() {
            /* class com.oculus.libraryapi.dumper.OVRLibraryDumperPlugin.AnonymousClass1 */

            public int compare(AssetInfo assetInfo, AssetInfo assetInfo2) {
                int compareTo = assetInfo.packageName.compareTo(assetInfo2.packageName);
                return compareTo == 0 ? assetInfo.name.compareTo(assetInfo2.name) : compareTo;
            }
        });
        int i2 = 10;
        String format = String.format(Locale.US, "%-50s %-16s %-40s %-14s %-14s %-9s %12s %10s %10s %s", "pkg", "id", "name", "type", "entitlement", AssetContract.AssetTableColumns.REQUIRED, "installed", "size", "bcp47", "language");
        if (z) {
            BLog.i(TAG, format);
        } else {
            printStream.println(format);
        }
        for (AssetInfo assetInfo : arrayList) {
            Locale locale = Locale.US;
            Object[] objArr = new Object[i2];
            objArr[c] = assetInfo.packageName;
            objArr[i] = assetInfo.id;
            objArr[2] = assetInfo.name;
            objArr[3] = assetInfo.type;
            objArr[4] = assetInfo.entitlement;
            objArr[5] = Boolean.valueOf(assetInfo.isRequired);
            objArr[6] = Boolean.valueOf(((InstallerFileUtils) FbInjector.lazyInstance(i, CommonModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_common_InstallerFileUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).isAssetInstalled(assetInfo.packageName, assetInfo.name));
            objArr[7] = Long.valueOf(assetInfo.size);
            objArr[8] = assetInfo.languageCode;
            objArr[9] = assetInfo.languageEnglishName;
            String format2 = String.format(locale, "%-50s %-16s %-40s %-14s %-14s %-9s %12s %10s %10s %s", objArr);
            if (z) {
                BLog.i(TAG, format2);
            } else {
                printStream.println(format2);
            }
            i = 1;
            c = 0;
            i2 = 10;
        }
    }

    private void doAssetDetail(List<String> list, PrintStream printStream) {
        AssetInfo assetInfo;
        if (list.size() != 2) {
            printStream.println("Invalid arguments");
            return;
        }
        String str = list.get(0);
        String str2 = list.get(1);
        try {
            assetInfo = ((OVRLibrary) FbInjector.lazyInstance(0, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, this._UL_mInjectionContext)).assetStatus(str, Long.parseLong(str2));
        } catch (NumberFormatException unused) {
            assetInfo = ((OVRLibrary) FbInjector.lazyInstance(0, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, this._UL_mInjectionContext)).assetStatus(str, str2);
        }
        if (assetInfo == null) {
            printStream.println("Asset not found");
            printStream.flush();
            return;
        }
        MoreObjects.ToStringHelper stringHelper = MoreObjects.toStringHelper((Class<?>) App.class);
        stringHelper.add("id", assetInfo.id);
        stringHelper.add("packageName", assetInfo.packageName);
        stringHelper.add("name", assetInfo.name);
        stringHelper.add("type", assetInfo.type);
        stringHelper.add("uri", assetInfo.uri);
        stringHelper.add("size", assetInfo.size);
        stringHelper.add("entitlement", assetInfo.entitlement);
        stringHelper.add(PerformanceEventFields.METADATA, assetInfo.metadata);
        stringHelper.add("isRequired", assetInfo.isRequired);
        stringHelper.add("languageCode", assetInfo.languageCode);
        stringHelper.add("languageEnglishName", assetInfo.languageEnglishName);
        stringHelper.add("languageNativeName", assetInfo.languageNativeName);
        printStream.print(stringHelper.toString());
        printStream.println();
    }

    private void doAssetInstall(List<String> list, PrintStream printStream) {
        InstallerResult installerResult;
        if (list.size() != 2) {
            printStream.println("Invalid arguments");
            return;
        }
        String str = list.get(0);
        String str2 = list.get(1);
        printStream.format("Installing asset %s for %s", str2, str);
        long uptimeMillis = SystemClock.uptimeMillis();
        printStream.println();
        printStream.flush();
        try {
            installerResult = ((OVRLibrary) FbInjector.lazyInstance(0, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, this._UL_mInjectionContext)).assetDownloadAndInstallAwait(str, Long.parseLong(str2), RequestOrigin.DUMPER);
        } catch (NumberFormatException unused) {
            installerResult = ((OVRLibrary) FbInjector.lazyInstance(0, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, this._UL_mInjectionContext)).assetDownloadAndInstallAwait(str, str2, RequestOrigin.DUMPER);
        }
        Object[] objArr = new Object[2];
        objArr[0] = Long.valueOf(SystemClock.uptimeMillis() - uptimeMillis);
        objArr[1] = installerResult.isSuccess() ? LoggingKeys.SUCCESS : "failure";
        printStream.format("asset install complete [%d ms]. Result: %s", objArr);
        printStream.println();
        if (!installerResult.isSuccess()) {
            printStream.format("Error: %s", installerResult.error.name());
        }
        printStream.println();
    }

    private void doAssetCancel(List<String> list, PrintStream printStream) {
        InstallerResult installerResult;
        if (list.size() != 2) {
            printStream.println("Invalid arguments");
            return;
        }
        String str = list.get(0);
        String str2 = list.get(1);
        printStream.format("Cancelling asset %s for %s", str2, str);
        long uptimeMillis = SystemClock.uptimeMillis();
        printStream.println();
        printStream.flush();
        try {
            installerResult = ((OVRLibrary) FbInjector.lazyInstance(0, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, this._UL_mInjectionContext)).assetCancelDownloadAwait(str, Long.parseLong(str2));
        } catch (NumberFormatException unused) {
            installerResult = ((OVRLibrary) FbInjector.lazyInstance(0, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, this._UL_mInjectionContext)).assetCancelDownloadAwait(str, str2);
        }
        Object[] objArr = new Object[2];
        objArr[0] = Long.valueOf(SystemClock.uptimeMillis() - uptimeMillis);
        objArr[1] = installerResult.isSuccess() ? LoggingKeys.SUCCESS : "failure";
        printStream.format("asset cancellation complete [%d ms]. Result: %s", objArr);
        printStream.println();
        if (!installerResult.isSuccess()) {
            printStream.format("Error: %s", installerResult.error.name());
        }
        printStream.println();
    }

    private void doAssetUninstall(List<String> list, PrintStream printStream) {
        boolean z;
        if (list.size() != 2) {
            printStream.println("Invalid arguments");
            return;
        }
        String str = list.get(0);
        String str2 = list.get(1);
        try {
            z = ((OVRLibrary) FbInjector.lazyInstance(0, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, this._UL_mInjectionContext)).assetDelete(str, Long.parseLong(str2));
        } catch (NumberFormatException unused) {
            z = ((OVRLibrary) FbInjector.lazyInstance(0, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, this._UL_mInjectionContext)).assetDelete(str, str2);
        }
        if (!z) {
            printStream.println(String.format(Locale.US, "Failed to uninstall asset %s", str2));
            return;
        }
        printStream.println(String.format(Locale.US, "Successfully uninstalled asset %s", str2));
    }

    private void doUninstall(List<String> list, PrintStream printStream) {
        String str = list.get(list.size() - 1);
        printStream.format("Uninstalling %s", str);
        printStream.println();
        printStream.flush();
        if (list.size() != 2 || !list.get(0).equalsIgnoreCase("async")) {
            InstallerResult uninstallAwait = ((OVRLibrary) FbInjector.lazyInstance(0, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, this._UL_mInjectionContext)).uninstallAwait(str, RequestOrigin.DUMPER);
            Object[] objArr = new Object[1];
            objArr[0] = uninstallAwait.isSuccess() ? LoggingKeys.SUCCESS : "failure";
            printStream.format("Uninstall complete. Result: %s", objArr);
            printStream.println();
            if (!uninstallAwait.isSuccess()) {
                printStream.format("Error: %s", uninstallAwait.error.name());
            }
            printStream.println();
            return;
        }
        ((OVRLibrary) FbInjector.lazyInstance(0, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, this._UL_mInjectionContext)).uninstall(str, RequestOrigin.DUMPER, null);
    }

    private void doPrint(List<String> list, PrintStream printStream) {
        boolean z = !list.isEmpty() && list.get(0).equalsIgnoreCase("logcat");
        App[] allApps = ((OVRLibrary) FbInjector.lazyInstance(0, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getAllApps();
        int i = 0;
        for (App app : allApps) {
            if (i == 0) {
                String format = String.format(Locale.US, "%-50s %-18s %-16s %-17s", "package name", "status", "totalActivityMs", "recentActivityMs");
                String format2 = String.format(Locale.US, "%-50s %-18s %-16s %-17s", "------------", "------", "---------------", "----------------");
                if (z) {
                    BLog.i(TAG, format);
                    BLog.i(TAG, format2);
                } else {
                    printStream.println(format);
                    printStream.println(format2);
                }
            }
            i = (i + 1) % 20;
            String format3 = String.format(Locale.US, "%-50s %-18s %-16s %-17s", app.packageName, app.status, Long.toString(app.totalActivityMs), Long.toString(app.recentActivityMs));
            if (z) {
                BLog.i(TAG, format3);
            } else {
                printStream.println(format3);
            }
        }
    }

    private void doRefetch(PrintStream printStream) {
        printStream.println("Refetching entitlements...");
        printStream.flush();
        long uptimeMillis = SystemClock.uptimeMillis();
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        ((OVRLibrary) FbInjector.lazyInstance(0, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, this._UL_mInjectionContext)).refetch(new ResultReceiver(null) {
            /* class com.oculus.libraryapi.dumper.OVRLibraryDumperPlugin.AnonymousClass2 */

            /* access modifiers changed from: protected */
            public void onReceiveResult(int i, Bundle bundle) {
                countDownLatch.countDown();
            }
        });
        try {
            countDownLatch.await();
            long uptimeMillis2 = SystemClock.uptimeMillis() - uptimeMillis;
            printStream.println(String.format(Locale.US, "Refetch complete [%d ms]", Long.valueOf(uptimeMillis2)));
        } catch (InterruptedException unused) {
        }
    }

    private void doInstall(List<String> list, PrintStream printStream) {
        String str = list.get(list.size() - 1);
        printStream.format("Installing %s", str);
        printStream.println();
        printStream.flush();
        if (list.size() != 2 || !list.get(0).equalsIgnoreCase("async")) {
            long uptimeMillis = SystemClock.uptimeMillis();
            InstallerResult downloadAndInstallAwait = ((OVRLibrary) FbInjector.lazyInstance(0, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, this._UL_mInjectionContext)).downloadAndInstallAwait(str, RequestOrigin.DUMPER);
            Object[] objArr = new Object[2];
            objArr[0] = Long.valueOf(SystemClock.uptimeMillis() - uptimeMillis);
            objArr[1] = downloadAndInstallAwait.isSuccess() ? LoggingKeys.SUCCESS : "failure";
            printStream.format("install complete [%d ms]. Result: %s", objArr);
            printStream.println();
            if (!downloadAndInstallAwait.isSuccess()) {
                printStream.format("Error: %s", downloadAndInstallAwait.error.name());
            }
            printStream.println();
            return;
        }
        ((OVRLibrary) FbInjector.lazyInstance(0, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, this._UL_mInjectionContext)).downloadAndInstall(str, RequestOrigin.DUMPER, null);
    }

    private void doInstallUri(List<String> list, PrintStream printStream) {
        int i;
        UpdateConfig updateConfig;
        printStream.format("Installing...", new Object[0]);
        printStream.println();
        printStream.flush();
        Options options = new Options();
        options.addOption(Option.builder("id").desc("identifier for this install").hasArg().required().build());
        options.addOption(Option.builder("apk").desc("apk file uri").hasArg().required().build());
        options.addOption(Option.builder("obb").desc("obb file uri").hasArg().build());
        options.addOption(Option.builder("asset").desc("asset file uri").hasArg().numberOfArgs(2).build());
        options.addOption(Option.builder(OPT_HEADER).numberOfArgs(2).valueSeparator('=').desc("http request header").build());
        try {
            CommandLine parse = new DefaultParser().parse(options, (String[]) list.toArray(new String[0]));
            HashMap hashMap = new HashMap();
            Properties optionProperties = parse.getOptionProperties(OPT_HEADER);
            for (String str : optionProperties.keySet()) {
                hashMap.put(str, optionProperties.getProperty(str));
            }
            String optionValue = parse.getOptionValue("id");
            UpdateConfig updateConfig2 = new UpdateConfig(optionValue, LibraryDBContract.VERSION_NOT_INSTALLED, ApkUpdateInfoContract.UpdateType.DIRECT_APK, parse.getOptionValue("apk"), -1, null, null, null, null, null, null, null, null, hashMap);
            UpdateConfig updateConfig3 = parse.hasOption("obb") ? new UpdateConfig(optionValue, LibraryDBContract.VERSION_NOT_INSTALLED, ApkUpdateInfoContract.UpdateType.DIRECT_OBB, parse.getOptionValue("obb"), -1, null, null, null, null, null, null, null, null, hashMap) : null;
            if (parse.hasOption("asset")) {
                String[] optionValues = parse.getOptionValues("asset");
                String str2 = optionValues[0];
                String str3 = optionValues[1];
                ApkUpdateInfo.ApkUpdateExtrasBuilder apkUpdateExtrasBuilder = new ApkUpdateInfo.ApkUpdateExtrasBuilder();
                apkUpdateExtrasBuilder.putAssetRequiredFilename(str3);
                ApkUpdateInfoContract.UpdateType updateType = ApkUpdateInfoContract.UpdateType.DIRECT_ASSET;
                Map<String, String> data = apkUpdateExtrasBuilder.getData();
                i = 1;
                updateConfig = new UpdateConfig(optionValue, LibraryDBContract.VERSION_NOT_INSTALLED, updateType, str2, -1, null, null, null, null, null, null, null, data, hashMap);
            } else {
                i = 1;
                updateConfig = null;
            }
            long uptimeMillis = SystemClock.uptimeMillis();
            UpdateConfig[] updateConfigArr = new UpdateConfig[i];
            updateConfigArr[0] = updateConfig;
            InstallerResult customDownloadAndInstall = ((OVRLibrary) FbInjector.lazyInstance(0, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, this._UL_mInjectionContext)).customDownloadAndInstall(updateConfig2, updateConfig3, Lists.newArrayList(updateConfigArr), RequestOrigin.DUMPER);
            long uptimeMillis2 = SystemClock.uptimeMillis() - uptimeMillis;
            Object[] objArr = new Object[2];
            objArr[0] = Long.valueOf(uptimeMillis2);
            objArr[i] = customDownloadAndInstall.isSuccess() ? LoggingKeys.SUCCESS : "failure";
            printStream.format("install complete [%d ms]. Result: %s", objArr);
            printStream.println();
            if (!customDownloadAndInstall.isSuccess()) {
                Object[] objArr2 = new Object[i];
                objArr2[0] = customDownloadAndInstall.error.name();
                printStream.format("Error: %s", objArr2);
            }
            printStream.println();
        } catch (ParseException e) {
            throw new RuntimeException(e);
        }
    }

    private void doCancel(List<String> list, PrintStream printStream) {
        String str = list.get(0);
        printStream.format("Cancelling %s", str);
        printStream.println();
        printStream.flush();
        long uptimeMillis = SystemClock.uptimeMillis();
        InstallerResult cancelDownloadAwait = ((OVRLibrary) FbInjector.lazyInstance(0, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, this._UL_mInjectionContext)).cancelDownloadAwait(str);
        long uptimeMillis2 = SystemClock.uptimeMillis() - uptimeMillis;
        Object[] objArr = new Object[2];
        objArr[0] = Long.valueOf(uptimeMillis2);
        objArr[1] = cancelDownloadAwait.isSuccess() ? LoggingKeys.SUCCESS : "failure";
        printStream.format("cancel download complete [%d ms]. Result: %s", objArr);
        printStream.println();
        if (!cancelDownloadAwait.isSuccess()) {
            printStream.format("Error: %s", cancelDownloadAwait.error.name());
        }
        printStream.println();
    }

    private void doDetail(List<String> list, PrintStream printStream) {
        if (list.size() != 1) {
            printStream.println("Invalid arguments");
            return;
        }
        String str = list.get(0);
        App app = ((OVRLibrary) FbInjector.lazyInstance(0, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getApp(str);
        if (app == null) {
            printStream.format("No entitlement found for %s", str);
            printStream.println();
            return;
        }
        printStream.format("Details for %s:\n", str);
        MoreObjects.ToStringHelper stringHelper = MoreObjects.toStringHelper((Class<?>) App.class);
        stringHelper.add("id", app.id);
        stringHelper.add("packageName", app.packageName);
        stringHelper.add("status", app.status);
        stringHelper.add("cloudStorageStatus", app.cloudStorageStatus);
        stringHelper.add("displayName", app.displayName);
        stringHelper.add("comfortRating", app.comfortRating);
        for (Map.Entry<Image.ImageName, Image> entry : app.images.entrySet()) {
            stringHelper.add("image." + entry.getKey(), entry.getValue().uri);
        }
        stringHelper.add("downloadSizeBytes", app.downloadSizeBytes);
        stringHelper.add("downloadedSizeBytes", app.downloadedSizeBytes);
        stringHelper.add("versionCode", app.versionCode);
        stringHelper.add("versionName", app.versionName);
        stringHelper.add("latestVersionCode", app.latestVersionCode);
        stringHelper.add("latestVersionName", app.latestVersionName);
        stringHelper.add("latestTargetSdkVersion", app.latestTargetSdkVersion);
        stringHelper.add("latestPermissions", csv(app.latestPermissions));
        stringHelper.add("supportedInputDevices", csv(app.supportedInputDevices));
        stringHelper.add("installableOnExternalStorage", app.installableOnExternalStorage);
        stringHelper.add("entitlementHash", app.entitlementHash);
        stringHelper.add("appScopedUserId", app.appScopedUserId);
        stringHelper.add("applicationGroupingId", app.applicationGroupingId);
        stringHelper.add("microphoneUsage", app.microphoneUsage);
        stringHelper.add("minRecommendedVersionCode", app.minRecommendedVersionCode);
        stringHelper.add("minRequiredVersionCode", app.minRequiredVersionCode);
        stringHelper.add("isUnseen", app.isUnseen);
        stringHelper.add("recentActivityMs", app.recentActivityMs);
        stringHelper.add("totalActivityMs", app.totalActivityMs);
        stringHelper.add("isDemoOf", app.isDemoOf);
        stringHelper.add("capabilities", csv(app.appMediaCapabilities));
        stringHelper.add("playModes", csv(app.playModes));
        stringHelper.add("category", app.category.name());
        stringHelper.add("platform", app.platform);
        stringHelper.add("head_tracking", app.headTracking.name());
        stringHelper.add("grant_reason", app.grantReason.name());
        stringHelper.add("grant_time", app.grantTimeMs);
        stringHelper.add("grant_expiration", app.grantExpirationMs);
        stringHelper.add("apkFullSizeBytes", app.apkFullSizeBytes);
        stringHelper.add("currentLanguagePack", app.currentLanguagePack);
        stringHelper.add("internetConnection", app.internetConnection);
        stringHelper.add("trustedBinaryStatus", app.trustedBinaryStatus);
        stringHelper.add("is_concept", app.isConcept);
        stringHelper.add("is_tv_app", app.isTVApp);
        stringHelper.add("is_test", app.isTest);
        stringHelper.add("system_ui_as_overlay_mode", app.systemUiAsOverlayMode);
        stringHelper.add("autoUpdateEnabled", app.autoUpdateEnabled);
        stringHelper.add("ducNonCompliant", app.ducNonCompliant);
        stringHelper.add("accessFeatureKeys", csv(app.accessFeatureKeys));
        stringHelper.add("environmentSourceId", app.environmentSourceId);
        stringHelper.add("environmentSourceDisplayName", app.environmentSourceDisplayName);
        printStream.print(stringHelper.toString());
        printStream.println();
    }

    private static <T> String csv(List<T> list) {
        if (list == null) {
            return LoggingUtil.NO_HASHCODE;
        }
        return list.isEmpty() ? "empty" : TextUtils.join(",", list);
    }

    private void doQueryInstallerPkg(List<String> list, PrintStream printStream) {
        if (list.size() != 1) {
            printStream.println("Invalid arguments");
            return;
        }
        String str = list.get(0);
        if (((OVRLibrary) FbInjector.lazyInstance(0, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getApp(str) == null) {
            printStream.format("No entitlement found for %s", str);
            printStream.println();
            return;
        }
        printStream.format("Installer package for %s is: %s. OVRLibrary can uninstall this app", str, this.mContext.getPackageManager().getInstallerPackageName(str));
        printStream.println();
    }

    private static void printUsage(PrintStream printStream) {
        String str = "       " + "dumpapp ovrlibrary";
        printStream.format("%s <command>\n", "Usage: " + "dumpapp ovrlibrary");
        printStream.format("%s %s [logcat]\n", str, "print");
        printStream.format("%s %s\n", str, "refetch");
        printStream.format("%s %s [async] <package_name>\n", str, "install");
        printStream.format("%s %s -id <id> -apk <uri> [-obb <uri>][-asset <uri> <filename>][-H<request header>=<value>]\n", str, CMD_INSTALL_URI);
        printStream.format("%s %s <package_name>\n", str, CMD_CANCEL);
        printStream.format("%s %s <package_name>\n", str, CMD_DETAIL);
        printStream.format("%s %s [async] <package_name>\n", str, "uninstall");
        printStream.format("%s %s <package_name>\n", str, CMD_INSTALLER_PKG);
        printStream.println();
        printStream.format("%s %s: Print core info for all entitlements\n", "dumpapp ovrlibrary", "print");
        printStream.println();
        printStream.format("%s %s: Triggers an refetch for all entitlements\n", "dumpapp ovrlibrary", "refetch");
        printStream.println();
        printStream.format("%s %s: Triggers a store install for a given package name\n", "dumpapp ovrlibrary", "install");
        printStream.println();
        printStream.format("%s %s: Triggers a direct install for a given set of uris\n", "dumpapp ovrlibrary", CMD_INSTALL_URI);
        printStream.println();
        printStream.format("%s %s: Cancel all running installs for a given package name\n", "dumpapp ovrlibrary", CMD_CANCEL);
        printStream.println();
        printStream.format("%s %s: Prints the entitlement details for the given package name\n", "dumpapp ovrlibrary", CMD_DETAIL);
        printStream.println();
        printStream.format("%s %s: Uninstall all content for a given package\n", "dumpapp ovrlibrary", "uninstall");
        printStream.println();
        printStream.format("%s %s: Print recorded installer for a given package\n", "dumpapp ovrlibrary", CMD_INSTALLER_PKG);
        printStream.println();
    }

    private static void printAssetUsage(PrintStream printStream) {
        String str = "       " + "dumpapp ovrlibrary assets";
        printStream.format("%s <command>\n", "Usage: " + "dumpapp ovrlibrary assets");
        printStream.format("%s %s [logcat] [pkg] [identifier]\n", str, "print");
        printStream.format("%s %s <identifier>\n", str, "install");
        printStream.format("%s %s <identifier>\n", str, CMD_CANCEL);
        printStream.println();
        printStream.format("%s %s: Prints details for all assets, or only for the asset given by the identifier (filename or id)\n", "dumpapp ovrlibrary assets", "print");
        printStream.format("%s %s: Installs the given asset\n", "dumpapp ovrlibrary assets", "install");
        printStream.format("%s %s: Cancels the running download for the given asset\n", "dumpapp ovrlibrary assets", CMD_CANCEL);
        printStream.println();
    }
}
