package com.oculus.horizon.api.graphql;

public class GraphQLSocialQuery {
    public static final String ACCEPT_FRIEND_REQUEST = "Mutation FriendRequestAccept : FriendRequestAcceptResponsePayload {  friend_request_accept(<input>) {    accepted_friend_requester {id,name,alias,friend_status,online_platforms,presence,presence_status,is_facebook_friend,profile_photo.size(720x720) {  name,  uri,  width,  height,},avatar_image.size(720x720) {  name,  uri,  width,  height,},profile_photo.size(360x360) as avatar {  name,  uri,  width,  height,},current_room {  nodes {    app {      id,      display_name,      livestreaming_status,      platform,      screenshots          .size(360x203) {        name,        uri,      },    },  },},mutual_friends {  count,}    }  }}";
    public static final String ACHIEVEMENTS_QUERY = "node(<application_id>) {  display_name,  cover_landscape_image {    uri  },  grouping {    unearned_secret_achievement_count.user(<user_id>),    secret_achievement_count_earned_by_user_but_not_viewer.user(<user_id>),    achievement_definitions        .displayable()        .orderby_unlock_time(<user_id>)        .hide_unearned_secret_achievements(<user_id>) {      nodes {        title,        description,        achievement_type,        unlocked_description_override,        target,        locked_image {          uri,        },        unlocked_image {          uri,        },        progress_for_user.user(<user_id>) {          is_unlocked,          count_progress,          bitfield_progress,        },      },    },  },}";
    public static final String APPS_SCOREBOARDS_QUERY = "query AppsScoreboardsQuery($application_ids: [ID!]!) {  nodes(node_id: $application_ids) {    id,    ... on Application {      grouping {        achievement_definitions(displayable: true) {          is_empty        }        leaderboards(is_public: true) {          is_empty        }      }    }  }}";
    public static final String APP_ENTITLEMENTS_GROUP_LAUNCH_FRAGMENT = "app_entitlements(supports_group_launch_of_num_users: 2, order_by: LAST_TIME_USED) {  nodes {    item {      ... on Application {        id        display_short_description        max_group_launch_capacity      }    }  }}";
    public static final String APP_SCOREBOARDS_QUERY = "query AppScoreboardsQuery($application_id: ID!) {  node(node_id: $application_id) {    ... on Application {      grouping {        achievement_definitions(displayable: true) {          is_empty        }        leaderboards(is_public: true) {          is_empty        }      }    }  }}";
    public static final String AUI_VIEWER_PROFILE = "viewer() {  user {    name,    alias,    biography,    profile_photo.size(240x240) {      uri,    },    avatar_image.size(360x360) {      uri,    },    friends {      count,    },    presence,    most_recent_presence {      is_current,    },  }, }";
    public static final String BLOCK = "Mutation UserBlock : UserBlockResponsePayload {  user_block(<input>) {    blocked_user {id,alias,possibly_blocked_real_user_id    }  }}";
    private static final String BLOCKED_USER = "id,alias,possibly_blocked_real_user_id";
    public static final String BLOCKED_USERS_QUERY = "me() {  blocked_users {    count,    nodes {id,alias,possibly_blocked_real_user_id    },  },}";
    public static final String CANCEL_FRIEND_REQUEST = "Mutation FriendRequestCancel : FriendRequestCancelResponsePayload {  friend_request_cancel(<input>) {    canceled_friend_requestee {id,name,alias,friend_status,online_platforms,presence,presence_status,is_facebook_friend,profile_photo.size(720x720) {  name,  uri,  width,  height,},avatar_image.size(720x720) {  name,  uri,  width,  height,},profile_photo.size(360x360) as avatar {  name,  uri,  width,  height,},current_room {  nodes {    app {      id,      display_name,      livestreaming_status,      platform,      screenshots          .size(360x203) {        name,        uri,      },    },  },},mutual_friends {  count,}    }  }}";
    public static final String CANCEL_PARTY_CALL = "Mutation PartyCallCancel : PartyCallCancelResponsePayload {  party_call_cancel(<input>) {    cancelled_user {id,name,alias,friend_status,online_platforms,presence,presence_status,is_facebook_friend,profile_photo.size(720x720) {  name,  uri,  width,  height,},avatar_image.size(720x720) {  name,  uri,  width,  height,},profile_photo.size(360x360) as avatar {  name,  uri,  width,  height,},current_room {  nodes {    app {      id,      display_name,      livestreaming_status,      platform,      screenshots          .size(360x203) {        name,        uri,      },    },  },},mutual_friends {  count,}    },  }}";
    public static final String CANCEL_PARTY_INVITE = "Mutation CancelPartyInvite : PartyCancelInviteResponsePayload {  party_cancel_invite(<input>) {    party {      id    }  }}";
    public static final String CORE_PRIVACY_ATTRIBUTES = "identity_in_search_state,edges {  is_currently_selected,  is_default_option,  node {base_state,included_users {  count,  nodes {    id,  },},  }},";
    public static final String ENTITLEMENTS_WITH_ACHIEVEMENTS_QUERY = "node(<user_id>) {  active_android_entitlements.has_displayable_achievements(true) {    nodes {      item {        id,        display_name,        cover_square_image {          uri,        },      },    },  },}";
    public static final String FRIENDS_QUERY = "node(<user_id>) {  friends.orderby(self_last, are_friends, status, name_or_alias) {    count,    nodes {id,name,alias,friend_status,online_platforms,presence,presence_status,is_facebook_friend,profile_photo.size(720x720) {  name,  uri,  width,  height,},avatar_image.size(720x720) {  name,  uri,  width,  height,},profile_photo.size(360x360) as avatar {  name,  uri,  width,  height,},current_room {  nodes {    app {      id,      display_name,      livestreaming_status,      platform,      screenshots          .size(360x203) {        name,        uri,      },    },  },},mutual_friends {  count,}    }  }}";
    private static final String FRIEND_DATA = "id,name,alias,friend_status,online_platforms,presence,presence_status,is_facebook_friend,profile_photo.size(720x720) {  name,  uri,  width,  height,},avatar_image.size(720x720) {  name,  uri,  width,  height,},profile_photo.size(360x360) as avatar {  name,  uri,  width,  height,},current_room {  nodes {    app {      id,      display_name,      livestreaming_status,      platform,      screenshots          .size(360x203) {        name,        uri,      },    },  },},mutual_friends {  count,}";
    public static final String FRIEND_REQUESTS_QUERY = "me() {  friend_requests_received_2 {    count,    edges {      via_source,      node {        user_id,id,name,alias,presence,presence_status,profile_photo.size(240x240) {  name,  uri,  width,  height,},friend_status,is_blocked_by_viewer,can_viewer_message,current_party {  id,},most_recent_presence {  last_active_description,  destination_api_name,  scoped_user_id,  deeplink_message_for_deeplink_target,  vr_apps_for_deeplink_target {    id,     vr_platform,    package_name, },},      },    },  },}";
    public static final String GET_ALL_GAME_INVITES = "me() {  notifications      .notification_type(room_invite)      .application_platform(android)      .notification_is_read(false)      .sent_seconds_ago(<sent_seconds_ago>) {    nodes {id,is_read,notification_type,rendered_notification {  extra_data,}    },  },}";
    public static final String GET_ALL_PARTY_INVITES = "me() {  notifications      .notification_type(party_invite)      .application_platform(android) {    nodes {id,is_read,notification_type,rendered_notification {  extra_data,}    },  },}";
    public static final String GET_CURRENT_PARTY = "me() {  current_party {    id,    only_quest_users,    join_policy,    party_type,    has_active_link_sharing,    max_size,    party_leader {id,name,alias,presence,presence_status,profile_photo.size(240x240) {  name,  uri,  width,  height,},friend_status,is_blocked_by_viewer,can_viewer_message,current_party {  id,},most_recent_presence {  last_active_description,  destination_api_name,  scoped_user_id,  deeplink_message_for_deeplink_target,  vr_apps_for_deeplink_target {    id,     vr_platform,    package_name, },},    },    invited_users {      count,      edges {        sender,        node {id,name,alias,presence,presence_status,profile_photo.size(240x240) {  name,  uri,  width,  height,},friend_status,is_blocked_by_viewer,can_viewer_message,current_party {  id,},most_recent_presence {  last_active_description,  destination_api_name,  scoped_user_id,  deeplink_message_for_deeplink_target,  vr_apps_for_deeplink_target {    id,     vr_platform,    package_name, },},        },      },    },    party_users {      count,      nodes {id,name,alias,presence,presence_status,profile_photo.size(240x240) {  name,  uri,  width,  height,},friend_status,is_blocked_by_viewer,can_viewer_message,current_party {  id,},most_recent_presence {  last_active_description,  destination_api_name,  scoped_user_id,  deeplink_message_for_deeplink_target,  vr_apps_for_deeplink_target {    id,     vr_platform,    package_name, },},      },    },    party_blocked_users {      nodes {          id,          alias,      },    },    party_blocked_invited_users {      nodes {          id,          alias,      },    },    party_invite_activity {      id,      does_activity_support_group_launch,      application {        id,        display_name,        package_name,        max_group_launch_capacity,        icon_image {          uri,        },      },      deeplink,      title,    },    party_group_launch {      id,      state,      only_quest_users,      destination {        application {          icon_image {            uri,          },          id,          display_name,          is_viewer_entitled,        },        deeplink_message_for_deeplink_target,        description,        display_name,        id,        is_external_deeplinkable,        max_capacity,      },      room {        id,      },      users {        edges {          proposal_response,          node {id,name,alias,presence,presence_status,profile_photo.size(240x240) {  name,  uri,  width,  height,},friend_status,is_blocked_by_viewer,can_viewer_message,current_party {  id,},most_recent_presence {  last_active_description,  destination_api_name,  scoped_user_id,  deeplink_message_for_deeplink_target,  vr_apps_for_deeplink_target {    id,     vr_platform,    package_name, },},          },        },      },    },  },}";
    public static final String GET_FB_FRIEND_PRIMARY_PROFILE = "query GetFbFriendPrimaryProfileQuery($friend_id: ID!) {  fb_friend_primary_profile(friend_id: $friend_id) {    name    profile_picture_uri(width:360, height:360)    bio    is_currently_active    last_active_time    oc_user {      id      friend_status      presence_status      most_recent_presence {        is_current        presence        vr_last_active_time      }      current_party {        id        join_policy      },    }  }  viewer {    viewer_fb_id    user {      fb_presence_sharing      current_party {        id,        invited_users {          nodes {            id          }        }      },      invited_parties {        nodes {          id        }      },    },  }}";
    public static final String GET_FB_LINKED_STATUS = "viewer() { fb_linked_status }";
    public static final String GET_FRIENDS = "query GetFriendsQuery($orderby: [UserToFriendsOrdering]!, $first: Int) {  viewer {    user {      friends(orderby: $orderby, first: $first) {        count        nodes {id,name,alias,presence,presence_status,profile_photo(size: \"240x240\") {  name,  uri,  width,  height,},friend_status,is_blocked_by_viewer,can_viewer_message,current_party {  id,  join_policy,  max_size,  party_users {    count,  },},most_recent_presence {  last_active_description,  destination_api_name,  scoped_user_id,  deeplink_message_for_deeplink_target,  vr_apps_for_deeplink_target {    id,     vr_platform,    package_name, },},        }      }    }  }}";
    public static final String GET_FRIENDS_NO_RICH_PRESENCE = "query GetFriendsNoRichPresenceQuery($orderby: [UserToFriendsOrdering]!, $first: Int) {  viewer {    user {      friends(orderby: $orderby, first: $first) {        count        nodes {id,name,alias,presence,presence_status,profile_photo(size: \"240x240\") {  name,  uri,  width,  height,},friend_status,is_blocked_by_viewer,can_viewer_message,current_party {  id,  join_policy,  max_size,  party_users {    count,  },},        }      }    }  }}";
    public static final String GET_PARTY_INFO_WITH_ACTIVITY = "node(<party_id>) {  id,  party_invite_activity {    id,    application {     id,     package_name,    },    deeplink,    subtitle,    title,    image.size_tag(372x209) {      uri,    },  },  party_blocked_invited_users {    count,  },  party_invited_users {    count,  },  party_blocked_users {    count,  },  party_users {    count,  },}";
    public static final String GET_PARTY_INFO_WITH_MEMBERS = "node(<party_id>) {  id,  max_size,  party_leader {id,name,alias,presence,presence_status,profile_photo.size(240x240) {  name,  uri,  width,  height,},friend_status,is_blocked_by_viewer,can_viewer_message,current_party {  id,},most_recent_presence {  last_active_description,  destination_api_name,  scoped_user_id,  deeplink_message_for_deeplink_target,  vr_apps_for_deeplink_target {    id,     vr_platform,    package_name, },},  },  party_users {    count,    nodes {id,name,alias,presence,presence_status,profile_photo.size(240x240) {  name,  uri,  width,  height,},friend_status,is_blocked_by_viewer,can_viewer_message,current_party {  id,},most_recent_presence {  last_active_description,  destination_api_name,  scoped_user_id,  deeplink_message_for_deeplink_target,  vr_apps_for_deeplink_target {    id,     vr_platform,    package_name, },},    },  },  party_blocked_users {    count,  },  party_invite_activity {    id,    application {     id,     package_name,    },    deeplink,    subtitle,    title,    image.size_tag(512x512) {      uri,    },  },}";
    public static final String GET_PARTY_INVITES = "me() {  invited_parties {    nodes {      party_blocked_users {         count,      },      join_policy,      max_size,      invited_by {id,name,alias,presence,presence_status,profile_photo.size(240x240) {  name,  uri,  width,  height,},friend_status,is_blocked_by_viewer,can_viewer_message,current_party {  id,},most_recent_presence {  last_active_description,  destination_api_name,  scoped_user_id,  deeplink_message_for_deeplink_target,  vr_apps_for_deeplink_target {    id,     vr_platform,    package_name, },},      },      id,      party_users {        nodes {id,name,alias,presence,presence_status,profile_photo.size(240x240) {  name,  uri,  width,  height,},friend_status,is_blocked_by_viewer,can_viewer_message,current_party {  id,},most_recent_presence {  last_active_description,  destination_api_name,  scoped_user_id,  deeplink_message_for_deeplink_target,  vr_apps_for_deeplink_target {    id,     vr_platform,    package_name, },},        },      },    },  },}";
    public static final String GET_PARTY_INVITE_INFO = "query GetPartyInviteInfoQuery($party_id: ID!) {  viewer {    user {      current_party {        id      }    }  }  node(node_id: $party_id) {    ... on Party {      id      party_type      party_leader { id alias profile_photo(size:\"80x80\") { uri }      }      invited_by { id alias profile_photo(size:\"80x80\") { uri }      }      invited_users {          nodes { id alias profile_photo(size:\"80x80\") { uri }          }      }      party_users {        nodes { id alias profile_photo(size:\"80x80\") { uri }          }      }      party_blocked_users {        nodes {             id             alias          }      }      party_blocked_invited_users {        nodes {             id             alias          }      }      party_group_launch {        id        destination {          id          application {            id            display_name            icon_image(size: \"80x80\") {              uri            }          }          display_name          image(size_tag: \"80x80\")        }      }    }  }}";
    public static final String GET_PARTY_INVITE_INFO_WITH_NONCE = "query GetPartyInviteInfoWithNonceQuery($deeplink_target_id: ID!, $link_nonce: String!) {  viewer {    user {      current_party {        id      }    }  }  deeplink_target_node(node_id: $deeplink_target_id, nonce: $link_nonce) {    ... on Party {      id      party_type      party_leader { id alias profile_photo(size:\"80x80\") { uri }      }      invited_by { id alias profile_photo(size:\"80x80\") { uri }      }      invited_users {          nodes { id alias profile_photo(size:\"80x80\") { uri }          }      }      party_users {        nodes { id alias profile_photo(size:\"80x80\") { uri }          }      }      party_blocked_users {        nodes {             id             alias          }      }      party_blocked_invited_users {        nodes {             id             alias          }      }      party_group_launch {        id        destination {          id          application {            id            display_name            icon_image(size: \"80x80\") {              uri            }          }          display_name          image(size_tag: \"80x80\")        }      }    }  }}";
    public static final String GET_PARTY_PRIVACY_INFO = "query GetPartyPrivacyInfoQuery($party_id: ID!) {  node(node_id: $party_id) {    ... on Party {      id      party_type      has_active_link_sharing      url_for_deeplink_target_web_page    }  }}";
    public static final String GET_QUEUED_REMOTE_LAUNCHES = "query GetQueuedRemoteLaunchesQuery($device_serial: String!) {  viewer {    user {      id,      latest_queued_remote_launch(device_serial: $device_serial) {        id,        deeplink_target {          id,          vr_apps_for_deeplink_target {            id,            display_name,            package_name          },          deeplink_message_for_deeplink_target,          launch_params_as_json_string          ... on VRDeeplinkTargetWithParty {            party_for_deeplink_target {              id            }          },          ... on VRDeeplinkTargetWithSystemRoute {            system_route_params_mobile          }        }      }    }  }}";
    public static final String GET_SHARE_PARTY_INFO = "me() {  current_party {    fb_shareable_ent_id  }}";
    public static final String GET_SOCIAL_ACTIVITY = "query GetSocialActivityQuery($input:SocialActivityArgs!) {  social_activity(args:$input) {   title   subtitle   image(size_tag:\"512x512\"){     uri   }   application {     package_name   }   deeplink  }}";
    public static final String GET_SOCIAL_VIEWER = "viewer() {  user {    alias,    profile_photo.size(40x40) {      uri,    },    avatar_image.size(240x240) {      uri,    },    user_nux_flags {      has_seen_vr_invite_profile_nux,    },  }, }";
    public static final String GROUP_LAUNCH_APP_DESTINATIONS_QUERY = "query GroupLaunchAppDestinationsQuery($application_id: ID!, $after: ID, $first: Int) {node(node_id: $application_id) {  ... on Application {    grouping {      destinations(        after: $after,        first: $first,        must_support_go_to: true,        rank_destinations_for_parties: true,        supports_group_launch_of_num_users: 2      ) {        page_info {          end_cursor          has_next_page          start_cursor        }        edges {          cursor          node {           deeplink_message_for_deeplink_target           display_name           id           is_external_deeplinkable           image           max_group_launch_capacity          },        },      },    }  }}}";
    public static final String GROUP_LAUNCH_HANDLE_LAUNCH = "Mutation GroupLaunchLaunchHandle : GroupLaunchLaunchHandleResponsePayload {  group_launch_launch_handle(<input>) {    client_mutation_id,  }}";
    public static final String GROUP_LAUNCH_HANDLE_SOLO_LAUNCH = "Mutation GroupLaunchSoloLaunchHandle : GroupLaunchSoloLaunchHandleResponsePayload {  group_launch_solo_launch_handle(<input>) {    client_mutation_id,  }}";
    public static final String GROUP_LAUNCH_SET_STATE = "Mutation GroupLaunchSetState : GroupLaunchStateResponsePayload {  group_launch_state(<input>) {    client_mutation_id,    group_launch {       id     }  }}";
    public static final String GROUP_LAUNCH_SET_USER_RESPONSE = "Mutation GroupLaunchSetUserResponse : GroupLaunchUserResponseResponsePayload {  group_launch_user_response(<input>) {    client_mutation_id,    group_launch {       id     }  }}";
    public static final String GROUP_LAUNCH_SUPPORTED_APPLICATIONS_QUERY = "query GroupLaunchSupportedApplicationsQuery {  viewer {    user {app_entitlements(supports_group_launch_of_num_users: 2, order_by: LAST_TIME_USED) {  nodes {    item {      ... on Application {        id        display_short_description        max_group_launch_capacity      }    }  }}      current_party {        party_users {          nodes {            id            ... on User {app_entitlements(supports_group_launch_of_num_users: 2, order_by: LAST_TIME_USED) {  nodes {    item {      ... on Application {        id        display_short_description        max_group_launch_capacity      }    }  }}            }          }        }      }    }  }}";
    public static final String HAS_SEEN_ACTIVITY_PRIVACY_UPDATE_ROADBLOCK = "viewer() {  social_settings_info {    has_seen_nux_on_android,    has_seen_activity_roadblock,  },}";
    public static final String HAS_SEEN_SOCIAL_NUX = "viewer() {  social_settings_info {    has_seen_nux_on_android,  },}";
    public static final String JOINABLE_PARTIES_QUERY = "me() {  joinable_parties_from_friends {    count,    nodes {      id,      party_blocked_users {         count,      },      max_size,      party_users {        count,        nodes {id,name,alias,presence,presence_status,profile_photo.size(240x240) {  name,  uri,  width,  height,},friend_status,is_blocked_by_viewer,can_viewer_message,current_party {  id,},most_recent_presence {  last_active_description,  destination_api_name,  scoped_user_id,  deeplink_message_for_deeplink_target,  vr_apps_for_deeplink_target {    id,     vr_platform,    package_name, },},        }      }    }  }}";
    public static final String MARK_NOTIFICATION_AS_READ = "Mutation GameInviteReject : NotificationPayload {  notification_update(<input>) {    notification {id,is_read,notification_type,rendered_notification {  extra_data,}    }  }}";
    public static final String MARK_PARTY_NOTIFICATION_AS_READ = "Mutation PartyInviteReject : NotificationPayload {  notification_update(<input>) {    notification {id,is_read,notification_type,rendered_notification {  extra_data,}    }  }}";
    public static final String MESSAGE_SEND_TO_THREAD = "Mutation MessageSendToThreadMutation : OcMessageSendToThreadResponsePayload {  oc_message_send_to_thread(<input>) {    message {       id    }  }}";
    public static final String MY_USER_PROFILE_QUERY = "viewer() {  user {    id,    email,    name,    account_creation_time,    notifications        .notification_type(room_invite)        .application_platform(android)        .notification_is_read(false)        .sent_after(<sent_after>) {      nodes {        id,      },    },    profile_photo.size(<pic_dimension>) {      name,      uri,      width,      height,    },    avatar_image.size(<pic_dimension>) {      name,      uri,      width,      height,    },    friend_requests_received_2 {      count,    },    friends {      count,    },    alias,    is_pin_set,    current_room {      nodes {        app {          display_name,        },      },    },    payment_methods {      nodes {        id,        last4,        card_type,      },    },    all_payment_methods {      nodes {        id,        last4,        card_type,        display_name,        paypal_context,      },    },    client_preference_data {      type,      value,    },    reachability_data {      type,      value,    },  },  privacy_audience_options      .privacy_concept(REAL_WORLD_IDENTITY) as privacy_real_world_identity {identity_in_search_state,edges {  is_currently_selected,  is_default_option,  node {base_state,included_users {  count,  nodes {    id,  },},  }},  },  privacy_audience_options      .privacy_concept(CURRENT_ACTIVITY) as privacy_current_activity {identity_in_search_state,edges {  is_currently_selected,  is_default_option,  node {base_state,included_users {  count,  nodes {    id,  },},  }},  },  privacy_audience_options      .privacy_concept(FRIENDS) as privacy_friends {identity_in_search_state,edges {  is_currently_selected,  is_default_option,  node {base_state,included_users {  count,  nodes {    id,  },},  }},  },  linked_accounts_info {    facebook_account {      friend_policy,      facebook_id,      facebook_email,      needs_password_to_unlink,    }  }}";
    private static final String NOTIFICATION_DATA = "id,is_read,notification_type,rendered_notification {  extra_data,}";
    public static final String PARTY_ACTIVATE_LINK_INVITE = "Mutation ActivateLinkSharingParty : ActivateLinkSharingPartyResponsePayload {  activate_link_sharing_party(<input>) {    client_mutation_id,    party {       id     }  }}";
    public static final String PARTY_CREATE = "Mutation PartyCreate : PartyCreateResponsePayload {  party_create(<input>) {    client_mutation_id,    did_create_party,    party {       id     }  }}";
    public static final String PARTY_DEACTIVATE_LINK_INVITE = "Mutation DeactivateLinkSharingParty : DeactivateLinkSharingPartyResponsePayload {  deactivate_link_sharing_party(<input>) {    client_mutation_id,    party {       id     }  }}";
    public static final String PARTY_INVITABLE_USERS = "node(<user_id>) {  friends.orderby(self_last, are_friends, status, name_or_alias) {    count,    nodes {id,name,alias,friend_status,online_platforms,presence,presence_status,is_facebook_friend,profile_photo.size(720x720) {  name,  uri,  width,  height,},avatar_image.size(720x720) {  name,  uri,  width,  height,},profile_photo.size(360x360) as avatar {  name,  uri,  width,  height,},current_room {  nodes {    app {      id,      display_name,      livestreaming_status,      platform,      screenshots          .size(360x203) {        name,        uri,      },    },  },},mutual_friends {  count,}    }  },  current_party {     id,     party_invited_users {      count,      nodes {        id      }    },    party_users {      count,      nodes {        id      }    }  }}";
    public static final String PARTY_INVITE_INFO = "    ... on Party {      id      party_type      party_leader { id alias profile_photo(size:\"80x80\") { uri }      }      invited_by { id alias profile_photo(size:\"80x80\") { uri }      }      invited_users {          nodes { id alias profile_photo(size:\"80x80\") { uri }          }      }      party_users {        nodes { id alias profile_photo(size:\"80x80\") { uri }          }      }      party_blocked_users {        nodes {             id             alias          }      }      party_blocked_invited_users {        nodes {             id             alias          }      }      party_group_launch {        id        destination {          id          application {            id            display_name            icon_image(size: \"80x80\") {              uri            }          }          display_name          image(size_tag: \"80x80\")        }      }    }";
    public static final String PARTY_INVITE_USERS = "Mutation PartyInviteUsers : PartyInviteMultipleResponsePayload {  party_invite_multiple(<input>) {    client_mutation_id  }}";
    public static final String PARTY_JOIN = "Mutation PartyJoin : PartyJoinResponsePayload {  party_join(<input>) {    client_mutation_id,    party {       id     }  }}";
    public static final String PARTY_KICK = "Mutation PartyKick : PartyKickResponsePayload {  party_kick(<input>) {    client_mutation_id,    party {       id     }  }}";
    public static final String PARTY_LEAVE = "Mutation PartyLeave : PartyLeaveResponsePayload {  party_leave(<input>) {    client_mutation_id,  }}";
    public static final String PARTY_PROPOSED_GROUP_LAUNCH_DESTINATION_CREATE = "Mutation PartyProposedGroupLaunchDestinationCreate : PartyProposedGroupLaunchDestinationCreateResponsePayload {  party_proposed_group_launch_destination_create(<input>) {    client_mutation_id,    party {       id,       party_group_launch {        id,      }    }  }}";
    public static final String PARTY_PROPOSED_GROUP_LAUNCH_DESTINATION_REMOVE = "Mutation PartyProposedGroupLaunchDestinationRemove : PartyProposedGroupLaunchDestinationRemoveResponsePayload {  party_proposed_group_launch_destination_remove(<input>) {    client_mutation_id,    party {       id     }  }}";
    public static final String PARTY_SET_TYPE = "Mutation PartySetType : PartySetTypeResponsePayload {  party_set_type(<input>) {    client_mutation_id,    party {       id     }  }}";
    private static final String PARTY_SOCIAL_USER = " id alias profile_photo(size:\"80x80\") { uri }";
    public static final String PEOPLE_NEARBY_QUERY = "viewer() {   user {    is_in_room,id,name,alias,presence,presence_status,profile_photo.size(240x240) {  name,  uri,  width,  height,},friend_status,is_blocked_by_viewer,can_viewer_message,current_party {  id,},most_recent_presence {  last_active_description,  destination_api_name,  scoped_user_id,  deeplink_message_for_deeplink_target,  vr_apps_for_deeplink_target {    id,     vr_platform,    package_name, },},    people_nearby.first(<first>) {      mutual_context_string,id,name,alias,presence,presence_status,profile_photo.size(240x240) {  name,  uri,  width,  height,},friend_status,is_blocked_by_viewer,can_viewer_message,current_party {  id,},most_recent_presence {  last_active_description,  destination_api_name,  scoped_user_id,  deeplink_message_for_deeplink_target,  vr_apps_for_deeplink_target {    id,     vr_platform,    package_name, },},    }  }}";
    public static final String PRIVACY_AUDIENCE_ATTRIBUTES = "base_state,included_users {  count,  nodes {    id,  },},";
    public static final String PROFILE_QUERY = "node(<user_id>) {id,name,alias,friend_status,online_platforms,presence,presence_status,is_facebook_friend,profile_photo.size(720x720) {  name,  uri,  width,  height,},avatar_image.size(720x720) {  name,  uri,  width,  height,},profile_photo.size(360x360) as avatar {  name,  uri,  width,  height,},current_room {  nodes {    app {      id,      display_name,      livestreaming_status,      platform,      screenshots          .size(360x203) {        name,        uri,      },    },  },},mutual_friends {  count,}}";
    public static final String PROFILE_SET_BIO = "Mutation SetBiographyUser: SetBiographyUserResponsePayload { set_biography_user(<input>) {    user {      user_id,    }, }}";
    public static final String PYMK_HIDE_USER = "Mutation PYMKHideUser : PeopleYouMayKnowHideUserResponse {  people_you_may_know_hide_user(<input>) {    hidden_user {       id    }  }}";
    public static final String PYMK_QUERY = "viewer() {  people_you_may_know.first(10) {    nodes {       mutual_context_string,id,name,alias,presence,presence_status,profile_photo.size(240x240) {  name,  uri,  width,  height,},friend_status,is_blocked_by_viewer,can_viewer_message,current_party {  id,},most_recent_presence {  last_active_description,  destination_api_name,  scoped_user_id,  deeplink_message_for_deeplink_target,  vr_apps_for_deeplink_target {    id,     vr_platform,    package_name, },},    },  },}";
    public static final String REJECT_FRIEND_REQUEST = "Mutation FriendRequestReject : FriendRequestRejectResponsePayload {  friend_request_reject(<input>) {    rejected_friend_requester {id,name,alias,friend_status,online_platforms,presence,presence_status,is_facebook_friend,profile_photo.size(720x720) {  name,  uri,  width,  height,},avatar_image.size(720x720) {  name,  uri,  width,  height,},profile_photo.size(360x360) as avatar {  name,  uri,  width,  height,},current_room {  nodes {    app {      id,      display_name,      livestreaming_status,      platform,      screenshots          .size(360x203) {        name,        uri,      },    },  },},mutual_friends {  count,}    }  }}";
    private static final String SEARCH_RESULT_FRIEND_DATA = "id,user_id,real_name as name,alias,friend_status,profile_photo.size(360x360) as avatar {  uri,},mutual_friends {  count,},can_viewer_message,";
    public static final String SEND_FRIEND_REQUEST = "Mutation FriendRequestSend : FriendRequestSendResponsePayload {  friend_request_send(<input>) {    sent_friend_requestee {id,name,alias,friend_status,online_platforms,presence,presence_status,is_facebook_friend,profile_photo.size(720x720) {  name,  uri,  width,  height,},avatar_image.size(720x720) {  name,  uri,  width,  height,},profile_photo.size(360x360) as avatar {  name,  uri,  width,  height,},current_room {  nodes {    app {      id,      display_name,      livestreaming_status,      platform,      screenshots          .size(360x203) {        name,        uri,      },    },  },},mutual_friends {  count,}    },    sent_friend_requestee_search_result {id,user_id,search_name as name,friend_status,profile_photo.size(360x360) as avatar {  uri,},mutual_friends {  count,},    },  }}";
    public static final String SEND_PARTY_CALL = "Mutation PartyCallSend : PartyCallSendResponsePayload {  party_call_send(<input>) {    request_id,    requested_user {id,name,alias,friend_status,online_platforms,presence,presence_status,is_facebook_friend,profile_photo.size(720x720) {  name,  uri,  width,  height,},avatar_image.size(720x720) {  name,  uri,  width,  height,},profile_photo.size(360x360) as avatar {  name,  uri,  width,  height,},current_room {  nodes {    app {      id,      display_name,      livestreaming_status,      platform,      screenshots          .size(360x203) {        name,        uri,      },    },  },},mutual_friends {  count,}    },  }}";
    private static final String SENT_FRIEND_REQUESTEE_SEARCH_RESULT_DATA = "id,user_id,search_name as name,friend_status,profile_photo.size(360x360) as avatar {  uri,},mutual_friends {  count,},";
    public static final String SET_NUX_FLAG_FOR_USER = "Mutation SetNuxFlagForUser : SetNuxFlagForUserResponsePayload {  set_nux_flag_for_user(<input>) {    client_mutation_id,     nux_value  }}";
    public static final String SET_PRIVACY_MUTATION = "Mutation PrivacyConceptSetPrivacy : PrivacyConceptSetPrivacyResponsePayload {  privacy_concept_set_privacy(<input>) {    privacy_audience { base_state,included_users {  count,  nodes {    id,  },},    },  }}";
    public static final String SET_SEEN_ACTIVITY_PRIVACY_UPDATE_ROADBLOCK = "Mutation ViewerSetSeenActivityRoadblock : ViewerSetSeenActivityRoadblockResponsePayload {  viewer_set_seen_activity_roadblock(<input>) {    client_mutation_id  }}";
    public static final String SET_SEEN_SOCIAL_NUX = "Mutation ViewerSetSeenSocialNux : ViewerSetSeenSocialNuxResponsePayload {  viewer_set_seen_social_nux(<input>) {    client_mutation_id  }}";
    private static final String SOCIAL_USER_DATA = "id,name,alias,presence,presence_status,profile_photo.size(240x240) {  name,  uri,  width,  height,},friend_status,is_blocked_by_viewer,can_viewer_message,current_party {  id,},most_recent_presence {  last_active_description,  destination_api_name,  scoped_user_id,  deeplink_message_for_deeplink_target,  vr_apps_for_deeplink_target {    id,     vr_platform,    package_name, },},";
    private static final String SOCIAL_USER_DATA_NO_RICH_PRESENCE_OSS_VERSION = "id,name,alias,presence,presence_status,profile_photo(size: \"240x240\") {  name,  uri,  width,  height,},friend_status,is_blocked_by_viewer,can_viewer_message,current_party {  id,  join_policy,  max_size,  party_users {    count,  },},";
    private static final String SOCIAL_USER_DATA_OSS_VERSION = "id,name,alias,presence,presence_status,profile_photo(size: \"240x240\") {  name,  uri,  width,  height,},friend_status,is_blocked_by_viewer,can_viewer_message,current_party {  id,  join_policy,  max_size,  party_users {    count,  },},most_recent_presence {  last_active_description,  destination_api_name,  scoped_user_id,  deeplink_message_for_deeplink_target,  vr_apps_for_deeplink_target {    id,     vr_platform,    package_name, },},";
    public static final String UNBLOCK = "Mutation UserUnblock : UserUnblockResponsePayload {  user_unblock(<input>) {    previously_blocked_user_id  }}";
    public static final String UNFRIEND = "Mutation FriendRemove : FriendRemoveResponsePayload {  friend_remove(<input>) {    removed_friend {id,name,alias,friend_status,online_platforms,presence,presence_status,is_facebook_friend,profile_photo.size(720x720) {  name,  uri,  width,  height,},avatar_image.size(720x720) {  name,  uri,  width,  height,},profile_photo.size(360x360) as avatar {  name,  uri,  width,  height,},current_room {  nodes {    app {      id,      display_name,      livestreaming_status,      platform,      screenshots          .size(360x203) {        name,        uri,      },    },  },},mutual_friends {  count,}    }  }}";
    public static final String USER_GET_CURRENT_PARTY = "me() {  current_party {     id,    }}";
    public static final String USER_SEARCH = "user_search(<input>) {  results      .after(<cursor>)      .first(<count>) {    nodes {id,user_id,real_name as name,alias,friend_status,profile_photo.size(360x360) as avatar {  uri,},mutual_friends {  count,},can_viewer_message,    },    page_info {      start_cursor,      end_cursor,      has_next_page,    },    result_mode,  },}";
    public static final String VR_PROFILE_CONTENT = "query VrProfileContentQuery($id: ID!) {  viewer {    fb_linked_status,    user {      current_party {        id,        invited_users {          nodes {            id          }        }      },      invited_parties {        nodes {          id        }      },    },    user_or_blocked_user(id: $id) {      alias,      is_blocked_by_viewer,      ... on User{         name,        friend_status,        biography,        presence,        presence_status,        most_recent_presence {          is_current,          presence,          vr_last_active_time        },        profile_photo(size:\"240x240\") {          uri        },        avatar_image(size:\"360x360\") {          uri        },        current_party {          id,          join_policy        },      },    }  }}";
}
