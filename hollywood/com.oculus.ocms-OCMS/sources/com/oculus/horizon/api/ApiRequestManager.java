package com.oculus.horizon.api;

import androidx.annotation.VisibleForTesting;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.UL;
import com.google.common.base.Preconditions;
import com.google.common.collect.Lists;
import com.oculus.horizon.api.ApiModule;
import com.oculus.http.core.base.ApiCallback;
import com.oculus.http.core.base.ApiRequest;
import com.oculus.util.thread.ThreadUtils;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import javax.inject.Inject;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_horizon_api_ApiDispatcher_ULSEP_BINDING_ID"})
public class ApiRequestManager {
    private final ApiDispatcher mApiDispatcher;
    private boolean mIsPaused;
    @VisibleForTesting
    final List<ApiRequest> mRequests = Lists.newArrayList();

    @AutoGeneratedAccessMethod
    public static final ApiRequestManager _UL__ULSEP_com_oculus_horizon_api_ApiRequestManager_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (ApiRequestManager) UL.factorymap.get(ApiModule.UL_id._UL__ULSEP_com_oculus_horizon_api_ApiRequestManager_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final ApiRequestManager _UL__ULSEP_com_oculus_horizon_api_ApiRequestManager_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new ApiRequestManager(ApiDispatcher._UL__ULSEP_com_oculus_horizon_api_ApiDispatcher_ULSEP_ACCESS_METHOD(injectorLike));
    }

    @Inject
    ApiRequestManager(ApiDispatcher apiDispatcher) {
        this.mApiDispatcher = apiDispatcher;
    }

    public void post(ApiRequest apiRequest, ApiCallback apiCallback) {
        postInternal(apiRequest, apiCallback, false);
    }

    public void postUnique(ApiRequest apiRequest, ApiCallback apiCallback) {
        postInternal(apiRequest, apiCallback, true);
    }

    private <T> void postInternal(ApiRequest<T> apiRequest, ApiCallback<T> apiCallback, boolean z) {
        apiRequest.setCallback(apiCallback);
        synchronized (this.mRequests) {
            removeCompletedRequests();
            if (z) {
                for (ApiRequest apiRequest2 : this.mRequests) {
                    if (apiRequest2.getClass().equals(apiRequest.getClass())) {
                        return;
                    }
                }
            }
            if (this.mIsPaused) {
                apiCallback.pause();
            }
            this.mRequests.add(apiRequest);
            this.mApiDispatcher.post(apiRequest);
        }
    }

    public void resume() {
        ThreadUtils.assertOnUiThread();
        if (this.mIsPaused) {
            this.mIsPaused = false;
            LinkedList<ApiRequest> newLinkedList = Lists.newLinkedList();
            synchronized (this.mRequests) {
                newLinkedList.addAll(this.mRequests);
                for (ApiRequest apiRequest : newLinkedList) {
                    apiRequest.getCallback().resume();
                }
                removeCompletedRequests();
            }
        }
    }

    public void pause() {
        ThreadUtils.assertOnUiThread();
        Preconditions.checkArgument(!this.mIsPaused);
        this.mIsPaused = true;
        synchronized (this.mRequests) {
            removeCompletedRequests();
            for (ApiRequest apiRequest : this.mRequests) {
                apiRequest.getCallback().pause();
            }
        }
    }

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_horizon_api_ApiRequestManager_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(ApiModule.UL_id._UL__ULSEP_com_oculus_horizon_api_ApiRequestManager_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_horizon_api_ApiRequestManager_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(ApiModule.UL_id._UL__ULSEP_com_oculus_horizon_api_ApiRequestManager_ULSEP_BINDING_ID, injectorLike);
    }

    public void destroy() {
        synchronized (this.mRequests) {
            Iterator<ApiRequest> it = this.mRequests.iterator();
            while (it.hasNext()) {
                it.next().getCallback().pause();
                it.remove();
            }
        }
    }

    private void removeCompletedRequests() {
        Iterator<ApiRequest> it = this.mRequests.iterator();
        while (it.hasNext()) {
            if (it.next().getCallback().isComplete()) {
                it.remove();
            }
        }
    }
}
