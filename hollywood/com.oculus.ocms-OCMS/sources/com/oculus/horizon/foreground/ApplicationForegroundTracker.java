package com.oculus.horizon.foreground;

import android.app.Activity;
import android.app.Application;
import android.os.Bundle;
import bolts.CancellationTokenSource;
import bolts.Continuation;
import bolts.Task;
import com.facebook.common.util.TriState;
import com.facebook.debug.log.BLog;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightSingletonProvider;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Eager;
import com.facebook.ultralight.UL;
import com.oculus.horizon.foreground.ForegroundModule;
import com.oculus.time.Clock;
import com.oculus.time.TimeModule;
import com.oculus.util.task.TaskDelayFactory;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import javax.inject.Inject;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_util_task_TaskDelayFactory_ULSEP_BINDING_ID"})
@ApplicationScoped
public class ApplicationForegroundTracker implements Application.ActivityLifecycleCallbacks {
    private static final long APP_LAUNCH_TO_BACKGROUNDED_THRESHOLD_MS = TimeUnit.SECONDS.toMillis(4);
    private static final int DELAY_MS = 1000;
    private static final String TAG = ApplicationForegroundTracker.class.getSimpleName();
    private static volatile ApplicationForegroundTracker _UL__ULSEP_com_oculus_horizon_foreground_ApplicationForegroundTracker_ULSEP_INSTANCE;
    private InjectionContext _UL_mInjectionContext;
    private CancellationTokenSource mCancellationTokenSource;
    private int mCountOfResumedActivities = 0;
    private final List<ApplicationForegroundListener> mListeners = new ArrayList();
    @Inject
    @Eager
    private final TaskDelayFactory mTaskDelayFactory;
    private long mUptimeMillisOfAppInit = 0;
    private long mUptimeMillisOfFirstResume = 0;
    private long mUptimeMillisOfLastResume = 0;

    public void onActivityCreated(Activity activity, Bundle bundle) {
    }

    public void onActivityDestroyed(Activity activity) {
    }

    public void onActivitySaveInstanceState(Activity activity, Bundle bundle) {
    }

    public void onActivityStarted(Activity activity) {
    }

    public void onActivityStopped(Activity activity) {
    }

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_horizon_foreground_ApplicationForegroundTracker_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(ForegroundModule.UL_id._UL__ULSEP_com_oculus_horizon_foreground_ApplicationForegroundTracker_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final ApplicationForegroundTracker _UL__ULSEP_com_oculus_horizon_foreground_ApplicationForegroundTracker_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (ApplicationForegroundTracker) UL.factorymap.get(ForegroundModule.UL_id._UL__ULSEP_com_oculus_horizon_foreground_ApplicationForegroundTracker_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final ApplicationForegroundTracker _UL__ULSEP_com_oculus_horizon_foreground_ApplicationForegroundTracker_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_horizon_foreground_ApplicationForegroundTracker_ULSEP_INSTANCE == null) {
            synchronized (ApplicationForegroundTracker.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_horizon_foreground_ApplicationForegroundTracker_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        _UL__ULSEP_com_oculus_horizon_foreground_ApplicationForegroundTracker_ULSEP_INSTANCE = new ApplicationForegroundTracker(injectorLike.getApplicationInjector());
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_horizon_foreground_ApplicationForegroundTracker_ULSEP_INSTANCE;
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_horizon_foreground_ApplicationForegroundTracker_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(ForegroundModule.UL_id._UL__ULSEP_com_oculus_horizon_foreground_ApplicationForegroundTracker_ULSEP_BINDING_ID, injectorLike);
    }

    @Inject
    public ApplicationForegroundTracker(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(1, injectorLike);
        this.mTaskDelayFactory = TaskDelayFactory._UL__ULSEP_com_oculus_util_task_TaskDelayFactory_ULSEP_ACCESS_METHOD(injectorLike);
        this.mUptimeMillisOfAppInit = ((Clock) FbInjector.lazyInstance(0, TimeModule.UL_id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID, this._UL_mInjectionContext)).uptime();
    }

    public void onActivityResumed() {
        this.mCountOfResumedActivities++;
        if (this.mUptimeMillisOfFirstResume == 0) {
            this.mUptimeMillisOfFirstResume = ((Clock) FbInjector.lazyInstance(0, TimeModule.UL_id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID, this._UL_mInjectionContext)).uptime();
        }
        CancellationTokenSource cancellationTokenSource = this.mCancellationTokenSource;
        if (cancellationTokenSource != null) {
            cancellationTokenSource.cancel();
        }
        this.mCancellationTokenSource = new CancellationTokenSource();
        if (this.mUptimeMillisOfLastResume <= 0) {
            this.mUptimeMillisOfLastResume = ((Clock) FbInjector.lazyInstance(0, TimeModule.UL_id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID, this._UL_mInjectionContext)).uptime();
            onApplicationForeground();
        }
    }

    public void onActivityPaused() {
        this.mCountOfResumedActivities--;
        if (this.mCountOfResumedActivities <= 0) {
            final long j = this.mUptimeMillisOfLastResume;
            this.mTaskDelayFactory.delay(1000, this.mCancellationTokenSource.getToken()).continueWithTask(new Continuation<Void, Task<Void>>() {
                /* class com.oculus.horizon.foreground.ApplicationForegroundTracker.AnonymousClass1 */

                @Override // bolts.Continuation
                public Task<Void> then(Task<Void> task) throws Exception {
                    if (task.isCancelled()) {
                        return null;
                    }
                    ApplicationForegroundTracker.this.mUptimeMillisOfLastResume = 0;
                    ApplicationForegroundTracker.this.onApplicationBackground(((Clock) FbInjector.lazyInstance(0, TimeModule.UL_id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID, ApplicationForegroundTracker.this._UL_mInjectionContext)).uptime() - j);
                    return null;
                }
            });
        }
    }

    public void addListener(ApplicationForegroundListener applicationForegroundListener) {
        this.mListeners.add(applicationForegroundListener);
    }

    public void removeListener(ApplicationForegroundListener applicationForegroundListener) {
        this.mListeners.remove(applicationForegroundListener);
    }

    private void onApplicationForeground() {
        BLog.d(TAG, "onApplicationForeground()");
        for (ApplicationForegroundListener applicationForegroundListener : this.mListeners) {
            applicationForegroundListener.onApplicationForeground();
        }
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private void onApplicationBackground(long j) {
        BLog.d(TAG, "onApplicationBackground() [%d]", Long.valueOf(j));
        for (ApplicationForegroundListener applicationForegroundListener : this.mListeners) {
            applicationForegroundListener.onApplicationBackground(j);
        }
    }

    public TriState isAppStartedInBackground() {
        long j = this.mUptimeMillisOfFirstResume;
        if (j == 0) {
            if (((Clock) FbInjector.lazyInstance(0, TimeModule.UL_id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID, this._UL_mInjectionContext)).uptime() - this.mUptimeMillisOfAppInit > APP_LAUNCH_TO_BACKGROUNDED_THRESHOLD_MS) {
                return TriState.YES;
            }
            return TriState.UNSET;
        } else if (j - this.mUptimeMillisOfAppInit < APP_LAUNCH_TO_BACKGROUNDED_THRESHOLD_MS) {
            return TriState.NO;
        } else {
            return TriState.YES;
        }
    }

    public void onActivityResumed(Activity activity) {
        onActivityResumed();
    }

    public void onActivityPaused(Activity activity) {
        onActivityPaused();
    }
}
