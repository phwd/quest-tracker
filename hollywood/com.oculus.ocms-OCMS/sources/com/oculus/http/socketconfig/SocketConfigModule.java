package com.oculus.http.socketconfig;

import com.facebook.http.config.SocketConfig;
import com.facebook.inject.AbstractLibraryModule;
import com.facebook.inject.AutoGeneratedBinder;
import com.facebook.inject.Binder;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.InjectorModule;
import com.facebook.inject.Lazy;
import com.facebook.inject.ProviderMethod;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.AutoGeneratedSwitchIdClass;
import com.facebook.ultralight.UL;
import com.google.inject.Key;
import javax.inject.Provider;

@InjectorModule
public class SocketConfigModule extends AbstractLibraryModule {

    @AutoGeneratedSwitchIdClass
    public static final class UL_id {
        public static final int _UL__ULSEP_com_facebook_http_config_SocketConfig_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_facebook_http_config_SocketConfig_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(SocketConfig.class)));
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_facebook_http_config_SocketConfig_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(UL_id._UL__ULSEP_com_facebook_http_config_SocketConfig_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedBinder
    static class AutoGeneratedBindingsForSocketConfigModule {
        AutoGeneratedBindingsForSocketConfigModule() {
        }

        static void bind(Binder binder) {
            if (!UL.USE_STATIC_DI) {
                binder.require(BundledAndroidModule.class);
                binder.bindDefault(SocketConfig.class).toProvider(new SocketConfigMethodAutoProvider());
            }
        }
    }

    @AutoGeneratedAccessMethod
    public static final SocketConfig _UL__ULSEP_com_facebook_http_config_SocketConfig_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (SocketConfig) UL.factorymap.get(UL_id._UL__ULSEP_com_facebook_http_config_SocketConfig_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final SocketConfig _UL__ULSEP_com_facebook_http_config_SocketConfig_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return provideSocketConfig();
    }

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_facebook_http_config_SocketConfig_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(UL_id._UL__ULSEP_com_facebook_http_config_SocketConfig_ULSEP_BINDING_ID, injectorLike);
    }

    @ProviderMethod(asDefault = true)
    static SocketConfig provideSocketConfig() {
        return new OculusSocketConfig();
    }
}
