package com.oculus.http.core;

import com.facebook.common.string.StringUtil;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Eager;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.oculus.http.core.ApiModule;
import com.oculus.http.core.base.ApiError;
import javax.inject.Provider;
import retrofit.ErrorHandler;
import retrofit.RetrofitError;

@Dependencies({"_UL__ULSEP_com_oculus_http_core_HttpCoreLogger_ULSEP_BINDING_ID"})
public class LoggingErrorHandler implements ErrorHandler {
    @Inject
    @Eager
    private final HttpCoreLogger mHttpCoreLogger;

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_http_core_LoggingErrorHandler_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(ApiModule.UL_id._UL__ULSEP_com_oculus_http_core_LoggingErrorHandler_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_http_core_LoggingErrorHandler_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(ApiModule.UL_id._UL__ULSEP_com_oculus_http_core_LoggingErrorHandler_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final LoggingErrorHandler _UL__ULSEP_com_oculus_http_core_LoggingErrorHandler_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (LoggingErrorHandler) UL.factorymap.get(ApiModule.UL_id._UL__ULSEP_com_oculus_http_core_LoggingErrorHandler_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final LoggingErrorHandler _UL__ULSEP_com_oculus_http_core_LoggingErrorHandler_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new LoggingErrorHandler(injectorLike);
    }

    @Inject
    public LoggingErrorHandler(InjectorLike injectorLike) {
        this.mHttpCoreLogger = HttpCoreLogger._UL__ULSEP_com_oculus_http_core_HttpCoreLogger_ULSEP_ACCESS_METHOD(injectorLike);
    }

    @Override // retrofit.ErrorHandler
    public Throwable handleError(RetrofitError retrofitError) {
        report(new ApiError(retrofitError));
        return retrofitError;
    }

    private void report(ApiError apiError) {
        String responseHeadersForDebug = apiError.getResponseHeadersForDebug();
        if (apiError.type == ApiError.Type.NETWORK_ERROR) {
            if (apiError.isNetworkTimeout.booleanValue()) {
                this.mHttpCoreLogger.reportApiError("network_error_timeout", apiError.path, null, apiError.uuid, responseHeadersForDebug);
            }
        } else if (apiError.type == ApiError.Type.HTTP_ERROR) {
            this.mHttpCoreLogger.reportApiError("http_error", apiError.path, StringUtil.formatStrLocaleSafe("[message=%s]", apiError.getMessage()), apiError.uuid, responseHeadersForDebug);
        } else if (apiError.type == ApiError.Type.CONVERSION_ERROR) {
            this.mHttpCoreLogger.reportApiError("conversion_error", apiError.path, apiError.conversionMessage, apiError.uuid, responseHeadersForDebug);
        } else {
            this.mHttpCoreLogger.reportApiError("unexpected_error", apiError.path, null, apiError.uuid, responseHeadersForDebug);
        }
    }
}
