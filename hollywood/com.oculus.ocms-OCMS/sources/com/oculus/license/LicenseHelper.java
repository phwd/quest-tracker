package com.oculus.license;

import android.text.TextUtils;
import android.util.Base64;
import bolts.Continuation;
import bolts.Task;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.oculus.horizon.api.ApiTaskCallback;
import com.oculus.http.core.base.ApiException;
import com.oculus.library.model.App;
import com.oculus.license.LicenseModule;
import com.oculus.os.LicenseManager;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_license_LicenseMethods_ULSEP_BINDING_ID"})
public class LicenseHelper {
    private InjectionContext _UL_mInjectionContext;

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_license_LicenseHelper_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(LicenseModule.UL_id._UL__ULSEP_com_oculus_license_LicenseHelper_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final LicenseHelper _UL__ULSEP_com_oculus_license_LicenseHelper_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (LicenseHelper) UL.factorymap.get(LicenseModule.UL_id._UL__ULSEP_com_oculus_license_LicenseHelper_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final LicenseHelper _UL__ULSEP_com_oculus_license_LicenseHelper_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new LicenseHelper(injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_license_LicenseHelper_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(LicenseModule.UL_id._UL__ULSEP_com_oculus_license_LicenseHelper_ULSEP_BINDING_ID, injectorLike);
    }

    @Inject
    public LicenseHelper(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(1, injectorLike);
    }

    public Task<App> fetchAndInstallEntitlementLicense(final App app) throws LicenseCheckException, ApiException {
        ApiTaskCallback apiTaskCallback = new ApiTaskCallback();
        ((LicenseMethods) FbInjector.lazyInstance(0, LicenseModule.UL_id._UL__ULSEP_com_oculus_license_LicenseMethods_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getLicenseInfo(new LicenseInfoRequest(app.id), apiTaskCallback);
        return apiTaskCallback.getTask().onSuccess(new Continuation<LicenseInfoResponse, App>() {
            /* class com.oculus.license.LicenseHelper.AnonymousClass1 */

            @Override // bolts.Continuation
            public App then(Task<LicenseInfoResponse> task) throws LicenseCheckException {
                LicenseInfoResponse result = task.getResult();
                String str = (result == null || result.appStoreItem == null || result.appStoreItem.entitlement == null || result.appStoreItem.entitlement.license == null) ? null : result.appStoreItem.entitlement.license.encodedLicenseBlob;
                if (TextUtils.isEmpty(str)) {
                    throw new LicenseCheckException("Invalid license for " + app.packageName);
                } else if (LicenseManager.getInstance().install(Base64.decode(str, 0)) != null) {
                    return app;
                } else {
                    throw new LicenseCheckException("Unable to install license for " + app.packageName);
                }
            }
        }, Task.BACKGROUND_EXECUTOR);
    }

    public static class LicenseCheckException extends Exception {
        public LicenseCheckException(String str) {
            super(str);
        }
    }
}
