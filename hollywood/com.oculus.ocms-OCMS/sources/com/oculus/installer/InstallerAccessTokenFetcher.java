package com.oculus.installer;

import android.text.TextUtils;
import bolts.Continuation;
import bolts.Task;
import com.facebook.debug.log.BLog;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.oculus.auth.credentials.Credentials;
import com.oculus.auth.credentials.CredentialsModule;
import com.oculus.auth.util.AccessTokenUtils;
import com.oculus.base.app.AppInfo;
import com.oculus.base.app.AppInfoModule;
import com.oculus.dsatauth.DsatFetcher;
import com.oculus.dsatauth.DsatauthModule;
import com.oculus.installer.InstallerModule;
import com.oculus.library.net.LibraryMethods;
import com.oculus.library.net.NetModule;
import com.oculus.managed.ManagedMode;
import com.oculus.managed.ManagedModule;
import com.oculus.os.DeviceAuth;
import com.oculus.ossdk.inject.OsSdkModule;
import com.oculus.util.constants.OculusConstants;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_dsatauth_DsatFetcher_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_library_net_LibraryMethods_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_auth_credentials_Credentials_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_os_DeviceAuth_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_base_app_AppInfo_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_managed_ManagedMode_ULSEP_BINDING_ID"})
public class InstallerAccessTokenFetcher {
    public static final String TAG = "InstallerAccessTokenFetcher";
    private InjectionContext _UL_mInjectionContext;
    @Inject
    private final Provider<Credentials> mCredentialsProvider;

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_installer_InstallerAccessTokenFetcher_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(InstallerModule.UL_id._UL__ULSEP_com_oculus_installer_InstallerAccessTokenFetcher_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final InstallerAccessTokenFetcher _UL__ULSEP_com_oculus_installer_InstallerAccessTokenFetcher_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (InstallerAccessTokenFetcher) UL.factorymap.get(InstallerModule.UL_id._UL__ULSEP_com_oculus_installer_InstallerAccessTokenFetcher_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final InstallerAccessTokenFetcher _UL__ULSEP_com_oculus_installer_InstallerAccessTokenFetcher_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new InstallerAccessTokenFetcher(injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_installer_InstallerAccessTokenFetcher_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(InstallerModule.UL_id._UL__ULSEP_com_oculus_installer_InstallerAccessTokenFetcher_ULSEP_BINDING_ID, injectorLike);
    }

    @Inject
    public InstallerAccessTokenFetcher(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(5, injectorLike);
        this.mCredentialsProvider = CredentialsModule._UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_auth_credentials_Credentials_ULGT__ULSEP_ACCESS_METHOD(injectorLike);
    }

    public Task<String> getAccessTokenAsync() {
        if (!((LibraryMethods) FbInjector.lazyInstance(1, NetModule.UL_id._UL__ULSEP_com_oculus_library_net_LibraryMethods_ULSEP_BINDING_ID, this._UL_mInjectionContext)).useDsat()) {
            return getUserAccessTokenAsync();
        }
        return ((DsatFetcher) FbInjector.lazyInstance(0, DsatauthModule.UL_id._UL__ULSEP_com_oculus_dsatauth_DsatFetcher_ULSEP_BINDING_ID, this._UL_mInjectionContext)).fetchDsatElseRegularTokenAsync().continueWithTask(new Continuation<String, Task<String>>() {
            /* class com.oculus.installer.InstallerAccessTokenFetcher.AnonymousClass1 */

            @Override // bolts.Continuation
            public Task<String> then(Task<String> task) throws Exception {
                String result = task.getResult();
                if (!TextUtils.isEmpty(result) || !((ManagedMode) FbInjector.lazyInstance(4, ManagedModule.UL_id._UL__ULSEP_com_oculus_managed_ManagedMode_ULSEP_BINDING_ID, InstallerAccessTokenFetcher.this._UL_mInjectionContext)).isEnterpriseModeEnabled()) {
                    return Task.forResult(result);
                }
                return InstallerAccessTokenFetcher.this.getUserAccessTokenAsync();
            }
        });
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private Task<String> getUserAccessTokenAsync() {
        Credentials credentials = this.mCredentialsProvider.get();
        if (credentials != null) {
            return Task.forResult(credentials.getAccessToken());
        }
        String str = null;
        try {
            str = ((DeviceAuth) FbInjector.lazyInstance(2, OsSdkModule.UL_id._UL__ULSEP_com_oculus_os_DeviceAuth_ULSEP_BINDING_ID, this._UL_mInjectionContext)).fetchToken(OculusConstants.ALPENGLOW_HW_LOGINTOKEN).value();
        } catch (DeviceAuth.BackendException | DeviceAuth.DeviceIdentityException | DeviceAuth.NetworkException | InterruptedException e) {
            BLog.e(TAG, (Throwable) e, "Error fetching device auth token");
            if (e instanceof InterruptedException) {
                Thread.currentThread().interrupt();
            }
        }
        if (TextUtils.isEmpty(str)) {
            return Task.forResult(AccessTokenUtils.createLoggedOutToken((AppInfo) FbInjector.lazyInstance(3, AppInfoModule.UL_id._UL__ULSEP_com_oculus_base_app_AppInfo_ULSEP_BINDING_ID, this._UL_mInjectionContext)));
        }
        return Task.forResult(AccessTokenUtils.createLoggedOutToken((AppInfo) FbInjector.lazyInstance(3, AppInfoModule.UL_id._UL__ULSEP_com_oculus_base_app_AppInfo_ULSEP_BINDING_ID, this._UL_mInjectionContext), str));
    }
}
