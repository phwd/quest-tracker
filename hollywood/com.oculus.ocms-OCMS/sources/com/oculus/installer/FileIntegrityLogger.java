package com.oculus.installer;

import android.text.TextUtils;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightSingletonProvider;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.oculus.installer.InstallerModule;
import com.oculus.library.model.App;
import com.oculus.logging.utils.Event;
import com.oculus.logging.utils.EventManager;
import com.oculus.logging.utils.UtilsModule;
import com.oculus.time.Clock;
import com.oculus.time.TimeModule;
import javax.annotation.Nullable;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID"})
@ApplicationScoped
public class FileIntegrityLogger {
    private static final String EVENT_INTEGRITY_CHECK_FAILURE = "oculus_mobile_installer_file_integrity_fail";
    private static final String EVENT_INTEGRITY_CHECK_SUMMARY = "oculus_mobile_installer_install_integrity";
    private static final String EXTRA_APP_ID = "app_id";
    private static final String EXTRA_ASSETS_CHECKED = "assets_checked";
    private static final String EXTRA_ASSETS_MISMATCHED_CHECKSUM = "assets_mismatched_checksum";
    private static final String EXTRA_ASSETS_MISSING = "assets_missing";
    private static final String EXTRA_CHECKSUM = "checksum";
    private static final String EXTRA_DURATION_MS = "duration_ms";
    private static final String EXTRA_ERROR_MESSAGE = "error_message";
    private static final String EXTRA_EXPECTED_CHECKSUM = "expected_checksum";
    private static final String EXTRA_FILE_NAME = "file_name";
    private static final String EXTRA_FILE_STATE = "file_state";
    private static final String EXTRA_IS_OBB = "is_obb";
    private static final String EXTRA_OBB_EXIST = "obb_exist";
    private static final String EXTRA_OBB_STATE = "obb_state";
    private static final String EXTRA_PACKAGE_NAME = "package_name";
    private static final String EXTRA_REQUIRED_ASSETS_MISSING = "required_assets_missing";
    private static final String EXTRA_VERSION_CODE = "version_code";
    private static volatile FileIntegrityLogger _UL__ULSEP_com_oculus_installer_FileIntegrityLogger_ULSEP_INSTANCE;
    private InjectionContext _UL_mInjectionContext;

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_installer_FileIntegrityLogger_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(InstallerModule.UL_id._UL__ULSEP_com_oculus_installer_FileIntegrityLogger_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final FileIntegrityLogger _UL__ULSEP_com_oculus_installer_FileIntegrityLogger_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (FileIntegrityLogger) UL.factorymap.get(InstallerModule.UL_id._UL__ULSEP_com_oculus_installer_FileIntegrityLogger_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final FileIntegrityLogger _UL__ULSEP_com_oculus_installer_FileIntegrityLogger_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_installer_FileIntegrityLogger_ULSEP_INSTANCE == null) {
            synchronized (FileIntegrityLogger.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_installer_FileIntegrityLogger_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        _UL__ULSEP_com_oculus_installer_FileIntegrityLogger_ULSEP_INSTANCE = new FileIntegrityLogger(injectorLike.getApplicationInjector());
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_installer_FileIntegrityLogger_ULSEP_INSTANCE;
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_installer_FileIntegrityLogger_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(InstallerModule.UL_id._UL__ULSEP_com_oculus_installer_FileIntegrityLogger_ULSEP_BINDING_ID, injectorLike);
    }

    @Inject
    FileIntegrityLogger(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(2, injectorLike);
    }

    public void logInstallIntegrity(App app, InstallIntegrityResult installIntegrityResult) {
        Event addExtra = ((EventManager) FbInjector.lazyInstance(0, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent(EVENT_INTEGRITY_CHECK_SUMMARY).addExtra(EXTRA_APP_ID, app.id).addExtra("package_name", app.packageName).addExtra("version_code", app.versionCode).addExtra("duration_ms", ((Clock) FbInjector.lazyInstance(1, TimeModule.UL_id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID, this._UL_mInjectionContext)).now() - installIntegrityResult.startTime).addExtra(EXTRA_ASSETS_CHECKED, installIntegrityResult.assetFileIntegrityResults.size()).addExtra(EXTRA_ASSETS_MISMATCHED_CHECKSUM, installIntegrityResult.assetsMismatchedChecksum).addExtra(EXTRA_ASSETS_MISSING, installIntegrityResult.assetsMissing).addExtra(EXTRA_REQUIRED_ASSETS_MISSING, installIntegrityResult.requiredAssetsMissing).addExtra(EXTRA_OBB_EXIST, installIntegrityResult.hasObb);
        if (installIntegrityResult.hasObb) {
            addExtra.addExtra(EXTRA_OBB_STATE, installIntegrityResult.obbIntegrityResult.fileState.name());
        }
        addExtra.logAndRelease();
    }

    public void logError(App app, Exception exc) {
        logError(app, null, false, exc);
    }

    public void logError(App app, @Nullable String str, boolean z, Exception exc) {
        Event addExtra = ((EventManager) FbInjector.lazyInstance(0, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent(EVENT_INTEGRITY_CHECK_SUMMARY).addExtra(EXTRA_APP_ID, app.id).addExtra("package_name", app.packageName).addExtra("version_code", app.versionCode);
        if (!TextUtils.isEmpty(exc.getMessage())) {
            addExtra.addExtra("error_message", exc.getMessage());
        } else {
            addExtra.addExtra("error_message", exc.toString());
        }
        if (TextUtils.isEmpty(str)) {
            addExtra.logAndRelease();
        } else {
            addExtra.addExtra(EXTRA_FILE_NAME, str).addExtra(EXTRA_IS_OBB, z).logAndRelease();
        }
    }

    public void logFileIntegrityFail(App app, String str, String str2, String str3, boolean z) {
        logFileIntegrityFail(app, str, str2, str3, FileState.CHECKSUM_MISMATCH, z);
    }

    public void logFileIntegrityFail(App app, String str, FileState fileState, boolean z) {
        logFileIntegrityFail(app, str, null, null, fileState, z);
    }

    private void logFileIntegrityFail(App app, String str, @Nullable String str2, @Nullable String str3, FileState fileState, boolean z) {
        Event addExtra = ((EventManager) FbInjector.lazyInstance(0, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent(EVENT_INTEGRITY_CHECK_FAILURE).addExtra(EXTRA_APP_ID, app.id).addExtra("package_name", app.packageName).addExtra(EXTRA_FILE_NAME, str).addExtra(EXTRA_FILE_STATE, fileState.name()).addExtra(EXTRA_IS_OBB, z);
        if (fileState != FileState.CHECKSUM_MISMATCH) {
            addExtra.logAndRelease();
            return;
        }
        if (!TextUtils.isEmpty(str2)) {
            addExtra.addExtra(EXTRA_CHECKSUM, str2);
        }
        if (!TextUtils.isEmpty(str3)) {
            addExtra.addExtra(EXTRA_EXPECTED_CHECKSUM, str3);
        }
        addExtra.logAndRelease();
    }
}
