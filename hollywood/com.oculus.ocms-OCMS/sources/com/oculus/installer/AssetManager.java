package com.oculus.installer;

import android.text.TextUtils;
import bolts.Continuation;
import bolts.Task;
import bolts.TaskCompletionSource;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Eager;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.google.common.util.concurrent.FutureCallback;
import com.google.common.util.concurrent.Futures;
import com.google.common.util.concurrent.MoreExecutors;
import com.google.common.util.concurrent.SettableFuture;
import com.oculus.appmanager.assets.AssetStorage;
import com.oculus.appmanager.assets.AssetsModule;
import com.oculus.appmanager.info.ApkUpdateInfo;
import com.oculus.appmanager.info.ApkUpdateInfoContract;
import com.oculus.appmanager.info.model.InstallerResult;
import com.oculus.appmanager.info.model.InstallerResultError;
import com.oculus.appmanager.info.model.RequestOrigin;
import com.oculus.appmanager.installer.service.util.InstallerServiceUtil;
import com.oculus.appmanager.model.UpdateConfig;
import com.oculus.installer.DownloadAndInstallApi;
import com.oculus.installer.InstallerModule;
import com.oculus.library.model.App;
import com.oculus.library.model.AssetInfo;
import com.oculus.time.Clock;
import com.oculus.time.TimeModule;
import com.oculus.util.thread.ThreadUtils;
import java.util.List;
import javax.annotation.Nullable;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_appmanager_installer_service_util_InstallerServiceUtil_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_installer_InstallerAccessTokenFetcher_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_util_thread_ThreadUtils_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_assets_AssetStorage_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID"})
public class AssetManager {
    private static final String TAG = "com.oculus.installer.AssetManager";
    private InjectionContext _UL_mInjectionContext;
    @Inject
    @Eager
    private final InstallerServiceUtil mInstallerServiceUtil;
    @Inject
    @Eager
    private final ThreadUtils mThreadUtils;

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_installer_AssetManager_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(InstallerModule.UL_id._UL__ULSEP_com_oculus_installer_AssetManager_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final AssetManager _UL__ULSEP_com_oculus_installer_AssetManager_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (AssetManager) UL.factorymap.get(InstallerModule.UL_id._UL__ULSEP_com_oculus_installer_AssetManager_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final AssetManager _UL__ULSEP_com_oculus_installer_AssetManager_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new AssetManager(injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_installer_AssetManager_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(InstallerModule.UL_id._UL__ULSEP_com_oculus_installer_AssetManager_ULSEP_BINDING_ID, injectorLike);
    }

    @Inject
    public AssetManager(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(3, injectorLike);
        this.mInstallerServiceUtil = InstallerServiceUtil._UL__ULSEP_com_oculus_appmanager_installer_service_util_InstallerServiceUtil_ULSEP_ACCESS_METHOD(injectorLike);
        this.mThreadUtils = ThreadUtils._UL__ULSEP_com_oculus_util_thread_ThreadUtils_ULSEP_ACCESS_METHOD(injectorLike);
    }

    @Nullable
    public AssetInfo getAssetById(App app, long j) {
        for (AssetInfo assetInfo : getAssets(app)) {
            if (assetInfo.id.equals(Long.toString(j))) {
                return assetInfo;
            }
        }
        return null;
    }

    @Nullable
    public AssetInfo getAssetByName(App app, String str) {
        if (!TextUtils.isEmpty(str)) {
            for (AssetInfo assetInfo : getAssets(app)) {
                if (str.equals(assetInfo.name)) {
                    return assetInfo;
                }
            }
            return null;
        }
        throw new IllegalArgumentException("filename cannot be empty/null");
    }

    public List<AssetInfo> getAssets(App app) {
        this.mThreadUtils.assertIsNonUiThread();
        return ((AssetStorage) FbInjector.lazyInstance(1, AssetsModule.UL_id._UL__ULSEP_com_oculus_appmanager_assets_AssetStorage_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getAssetList(app);
    }

    private Task<InstallerResult> installAsset(final App app, final AssetInfo assetInfo, final String str, final RequestOrigin requestOrigin) {
        return ((InstallerAccessTokenFetcher) FbInjector.lazyInstance(0, InstallerModule.UL_id._UL__ULSEP_com_oculus_installer_InstallerAccessTokenFetcher_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getAccessTokenAsync().onSuccessTask(new Continuation<String, Task<InstallerResult>>() {
            /* class com.oculus.installer.AssetManager.AnonymousClass1 */

            @Override // bolts.Continuation
            public Task<InstallerResult> then(Task<String> task) {
                return AssetManager.this.doInstallAsset(app, assetInfo, str, requestOrigin, task.getResult());
            }
        });
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private Task<InstallerResult> doInstallAsset(App app, AssetInfo assetInfo, String str, RequestOrigin requestOrigin, String str2) {
        UpdateConfig updateConfig = new UpdateConfig(app.packageName, app.versionCode, ApkUpdateInfoContract.UpdateType.STORE_FULL_ASSET, assetInfo.uri, assetInfo.size, assetInfo.id, str2, this.mInstallerServiceUtil.getObbDisplayTitle(app.displayName), null, null, null, null, new ApkUpdateInfo.ApkUpdateExtrasBuilder().putPackageName(app.packageName).putAssetRequiredFilename(assetInfo.name).getData(), null);
        final TaskCompletionSource taskCompletionSource = new TaskCompletionSource();
        Futures.addCallback(this.mInstallerServiceUtil.startServiceForStartAssetDownloadAction(updateConfig, app.packageName, str2, str, requestOrigin), new FutureCallback<InstallerResult>() {
            /* class com.oculus.installer.AssetManager.AnonymousClass2 */

            public void onSuccess(@Nullable InstallerResult installerResult) {
                taskCompletionSource.setResult(installerResult);
            }

            @Override // com.google.common.util.concurrent.FutureCallback
            public void onFailure(Throwable th) {
                taskCompletionSource.setError(new RuntimeException(th));
            }
        }, MoreExecutors.directExecutor());
        return taskCompletionSource.getTask();
    }

    public Task<InstallerResult> installAssetById(App app, long j, String str, RequestOrigin requestOrigin) {
        AssetInfo assetById = getAssetById(app, j);
        if (assetById == null) {
            return Task.forError(new DownloadAndInstallApi.ExceptionWithInstallerResult(InstallerResult.createForError(app.packageName, ((Clock) FbInjector.lazyInstance(2, TimeModule.UL_id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID, this._UL_mInjectionContext)).now(), InstallerResultError.ASSET_NOT_FOUND), null, null));
        }
        return installAsset(app, assetById, str, requestOrigin);
    }

    public Task<InstallerResult> installAssetByName(App app, String str, String str2, RequestOrigin requestOrigin) {
        AssetInfo assetByName = getAssetByName(app, str);
        if (assetByName == null) {
            return Task.forError(new DownloadAndInstallApi.ExceptionWithInstallerResult(InstallerResult.createForError(app.packageName, ((Clock) FbInjector.lazyInstance(2, TimeModule.UL_id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID, this._UL_mInjectionContext)).now(), InstallerResultError.ASSET_NOT_FOUND), null, null));
        }
        return installAsset(app, assetByName, str2, requestOrigin);
    }

    public SettableFuture<InstallerResult> cancelAssetDownload(String str, String str2) {
        return this.mInstallerServiceUtil.cancelAssetDownload(str, str2);
    }

    public SettableFuture<InstallerResult> cancelAssetDownload(String str, long j) {
        return this.mInstallerServiceUtil.cancelAssetDownload(str, j);
    }
}
