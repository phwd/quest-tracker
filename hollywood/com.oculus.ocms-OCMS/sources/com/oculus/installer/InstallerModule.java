package com.oculus.installer;

import com.facebook.inject.AbstractLibraryModule;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.AutoGeneratedBinder;
import com.facebook.inject.Binder;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.InjectorModule;
import com.facebook.mobileconfig.factory.module.MobileConfigFactoryModule;
import com.facebook.mobileconfig.interfaces.MobileConfigInterfacesModule;
import com.facebook.ultralight.AutoGeneratedSwitchIdClass;
import com.facebook.ultralight.UL;
import com.google.inject.Key;
import com.oculus.appmanager.assets.AssetsModule;
import com.oculus.appmanager.info.InfoModule;
import com.oculus.appmanager.installer.common.CommonModule;
import com.oculus.appmanager.installer.contract.ContractModule;
import com.oculus.appmanager.installer.events.EventsModule;
import com.oculus.appmanager.installer.service.util.UtilModule;
import com.oculus.auth.credentials.CredentialsModule;
import com.oculus.authapi.inject.OVRAuthModule;
import com.oculus.base.app.AppInfoModule;
import com.oculus.common.init.AppInitModule;
import com.oculus.common.packagescache.PackagesCacheModule;
import com.oculus.debug.DebugModule;
import com.oculus.dsatauth.DsatauthModule;
import com.oculus.dumpsysledger.DumpsysLedgerModule;
import com.oculus.errorreporting.interfaces.InterfacesModule;
import com.oculus.horizon.api.ApiModule;
import com.oculus.http.common.HttpModule;
import com.oculus.http.core.endpoint.EndpointModule;
import com.oculus.http.core.interceptor.InterceptorModule;
import com.oculus.http.useragent.UserAgentModule;
import com.oculus.library.net.NetModule;
import com.oculus.libraryapi.OVRLibraryModule;
import com.oculus.license.LicenseModule;
import com.oculus.logging.utils.UtilsModule;
import com.oculus.managed.ManagedModule;
import com.oculus.ossdk.inject.OsSdkModule;
import com.oculus.time.TimeModule;
import com.oculus.util.device.DeviceModule;
import com.oculus.util.service.ServiceModule;
import com.oculus.util.thread.ThreadModule;

@InjectorModule
public class InstallerModule extends AbstractLibraryModule {

    @AutoGeneratedSwitchIdClass
    public static final class UL_id {
        public static final int _UL__ULSEP_com_oculus_installer_AssetManager_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_installer_AssetManager_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(AssetManager.class)));
        public static final int _UL__ULSEP_com_oculus_installer_DownloadAndInstallApi_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_installer_DownloadAndInstallApi_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(DownloadAndInstallApi.class)));
        public static final int _UL__ULSEP_com_oculus_installer_FileIntegrityLogger_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_installer_FileIntegrityLogger_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(FileIntegrityLogger.class)));
        public static final int _UL__ULSEP_com_oculus_installer_InstallerAccessTokenFetcher_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_installer_InstallerAccessTokenFetcher_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(InstallerAccessTokenFetcher.class)));
    }

    @AutoGeneratedBinder
    static class AutoGeneratedBindingsForInstallerModule {
        AutoGeneratedBindingsForInstallerModule() {
        }

        static void bind(Binder binder) {
            if (!UL.USE_STATIC_DI) {
                binder.require(BundledAndroidModule.class);
                binder.require(MobileConfigFactoryModule.class);
                binder.require(MobileConfigInterfacesModule.class);
                binder.require(AssetsModule.class);
                binder.require(InfoModule.class);
                binder.require(CommonModule.class);
                binder.require(ContractModule.class);
                binder.require(EventsModule.class);
                binder.require(UtilModule.class);
                binder.require(com.oculus.appmanager.util.UtilModule.class);
                binder.require(CredentialsModule.class);
                binder.require(com.oculus.auth.util.UtilModule.class);
                binder.require(OVRAuthModule.class);
                binder.require(AppInfoModule.class);
                binder.require(AppInitModule.class);
                binder.require(PackagesCacheModule.class);
                binder.require(DebugModule.class);
                binder.require(DsatauthModule.class);
                binder.require(DumpsysLedgerModule.class);
                binder.require(InterfacesModule.class);
                binder.require(ApiModule.class);
                binder.require(HttpModule.class);
                binder.require(com.oculus.http.core.ApiModule.class);
                binder.require(EndpointModule.class);
                binder.require(InterceptorModule.class);
                binder.require(UserAgentModule.class);
                binder.require(NetModule.class);
                binder.require(OVRLibraryModule.class);
                binder.require(LicenseModule.class);
                binder.require(UtilsModule.class);
                binder.require(ManagedModule.class);
                binder.require(OsSdkModule.class);
                binder.require(TimeModule.class);
                binder.require(DeviceModule.class);
                binder.require(ServiceModule.class);
                binder.require(ThreadModule.class);
                binder.bind(AssetManager.class).toProvider(new AssetManagerAutoProvider());
                binder.bind(DownloadAndInstallApi.class).toProvider(new DownloadAndInstallApiAutoProvider());
                binder.bind(FileIntegrityLogger.class).toProvider(new FileIntegrityLoggerAutoProvider()).in(ApplicationScoped.class);
                binder.bind(InstallerAccessTokenFetcher.class).toProvider(new InstallerAccessTokenFetcherAutoProvider());
            }
        }
    }
}
