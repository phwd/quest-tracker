package com.oculus.installer;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.text.TextUtils;
import androidx.annotation.RequiresPermission;
import androidx.annotation.VisibleForTesting;
import androidx.core.content.ContextCompat;
import bolts.Continuation;
import bolts.Task;
import bolts.TaskCompletionSource;
import com.facebook.debug.log.BLog;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.mobileconfig.factory.MobileConfig;
import com.facebook.mobileconfig.factory.module.MobileConfigFactoryModule;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.google.common.base.Strings;
import com.google.common.util.concurrent.FutureCallback;
import com.google.common.util.concurrent.Futures;
import com.google.common.util.concurrent.MoreExecutors;
import com.google.common.util.concurrent.SettableFuture;
import com.oculus.appmanager.info.model.InstallerResult;
import com.oculus.appmanager.info.model.InstallerResultError;
import com.oculus.appmanager.info.model.RequestOrigin;
import com.oculus.appmanager.installer.common.CommonModule;
import com.oculus.appmanager.installer.common.CryptoMethods;
import com.oculus.appmanager.installer.common.InstallerFileUtils;
import com.oculus.appmanager.installer.service.util.InstallerServiceUtil;
import com.oculus.appmanager.installer.service.util.UtilModule;
import com.oculus.appmanager.model.UpdateConfig;
import com.oculus.appmanager.model.UrlFetchResult;
import com.oculus.appmanager.util.InstallationDiskSpaceUtil;
import com.oculus.appmanager.util.UtilModule;
import com.oculus.auth.credentials.Credentials;
import com.oculus.auth.credentials.CredentialsModule;
import com.oculus.common.build.BuildConstants;
import com.oculus.device.DeviceType;
import com.oculus.errorreporting.interfaces.IErrorReporter;
import com.oculus.errorreporting.interfaces.InterfacesModule;
import com.oculus.http.core.base.ApiException;
import com.oculus.installer.InstallerModule;
import com.oculus.installer.MC;
import com.oculus.library.model.App;
import com.oculus.library.net.GenerateAppInfoRequest;
import com.oculus.library.net.GenerateBinaryInfoResponse;
import com.oculus.library.net.LibraryMethods;
import com.oculus.library.net.NetModule;
import com.oculus.libraryapi.OVRLibrary;
import com.oculus.libraryapi.OVRLibraryModule;
import com.oculus.license.LicenseHelper;
import com.oculus.license.LicenseModule;
import com.oculus.managed.ManagedMode;
import com.oculus.managed.ManagedModule;
import com.oculus.time.Clock;
import com.oculus.time.TimeModule;
import java.io.File;
import java.util.List;
import java.util.concurrent.Callable;
import javax.annotation.Nullable;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_UnsafeContextInjection_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_auth_credentials_Credentials_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_installer_InstallerAccessTokenFetcher_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_library_net_LibraryMethods_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_license_LicenseHelper_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_common_packagescache_PackageManagerUtils_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_installer_service_util_InstallerServiceUtil_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_installer_common_InstallerFileUtils_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_util_InstallationDiskSpaceUtil_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID", "_UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_installer_common_CryptoMethods_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_installer_FileIntegrityLogger_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_managed_ManagedMode_ULSEP_BINDING_ID"})
public class DownloadAndInstallApi {
    private static final String ASSETS = "assets";
    private static final String EVENT_ENTITLEMENT_INSTALL_APP_REQUESTED = "oculus_install_entitlement_app_requested";
    private static final String NEW_VERSION = "new_version";
    private static final String PACKAGE_NAME = "package_name";
    private static final String PERSISTENT_ASSETS = "persistent_assets";
    private static final String PREVIOUS_VERSION = "previous_version";
    private static final String REQUIRED_ASSETS = "required_assets";
    private static final String STORE_FILE_CHECKSUM_ALGORITHM = "MD5";
    private static final String TAG = "DownloadAndInstallApi";
    private InjectionContext _UL_mInjectionContext;
    @Inject
    private final Provider<Credentials> mCredentialsProvider;

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_installer_DownloadAndInstallApi_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(InstallerModule.UL_id._UL__ULSEP_com_oculus_installer_DownloadAndInstallApi_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_installer_DownloadAndInstallApi_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(InstallerModule.UL_id._UL__ULSEP_com_oculus_installer_DownloadAndInstallApi_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final DownloadAndInstallApi _UL__ULSEP_com_oculus_installer_DownloadAndInstallApi_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (DownloadAndInstallApi) UL.factorymap.get(InstallerModule.UL_id._UL__ULSEP_com_oculus_installer_DownloadAndInstallApi_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final DownloadAndInstallApi _UL__ULSEP_com_oculus_installer_DownloadAndInstallApi_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new DownloadAndInstallApi(injectorLike);
    }

    @Inject
    public DownloadAndInstallApi(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(16, injectorLike);
        this.mCredentialsProvider = CredentialsModule._UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_auth_credentials_Credentials_ULGT__ULSEP_ACCESS_METHOD(injectorLike);
    }

    private Task<Void> checkBasicPreconditions(final String str) {
        return Task.call(new Callable<Void>() {
            /* class com.oculus.installer.DownloadAndInstallApi.AnonymousClass1 */

            @Override // java.util.concurrent.Callable
            public Void call() throws ExceptionWithInstallerResult {
                if (DownloadAndInstallApi.this.isStoragePermissionGranted()) {
                    return null;
                }
                throw ExceptionWithInstallerResult.createException(InstallerResultError.NO_STORAGE_PERMISSION, str, ((Clock) FbInjector.lazyInstance(10, TimeModule.UL_id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID, DownloadAndInstallApi.this._UL_mInjectionContext)).now());
            }
        });
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private boolean isStoragePermissionGranted() {
        if (ContextCompat.checkSelfPermission((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_UnsafeContextInjection_ULSEP_BINDING_ID, this._UL_mInjectionContext), "android.permission.WRITE_EXTERNAL_STORAGE") == 0) {
            return true;
        }
        ((IErrorReporter) FbInjector.lazyInstance(7, InterfacesModule.UL_id._UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_BINDING_ID, this._UL_mInjectionContext)).softError(TAG, "Missing WRITE_EXTERNAL_STORAGE permission when trying to download a package.");
        return false;
    }

    private Task<App> checkEntitlementPreconditions(final String str) {
        return checkBasicPreconditions(str).onSuccess(new Continuation<Void, App>() {
            /* class com.oculus.installer.DownloadAndInstallApi.AnonymousClass2 */

            @Override // bolts.Continuation
            public App then(Task<Void> task) throws ExceptionWithInstallerResult {
                Credentials credentials;
                if (((ManagedMode) FbInjector.lazyInstance(15, ManagedModule.UL_id._UL__ULSEP_com_oculus_managed_ManagedMode_ULSEP_BINDING_ID, DownloadAndInstallApi.this._UL_mInjectionContext)).isEnterpriseModeEnabled() || ((credentials = (Credentials) DownloadAndInstallApi.this.mCredentialsProvider.get()) != null && !Strings.isNullOrEmpty(credentials.getAccessToken()))) {
                    App app = ((OVRLibrary) FbInjector.lazyInstance(5, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, DownloadAndInstallApi.this._UL_mInjectionContext)).getApp(str);
                    if (app != null) {
                        return app;
                    }
                    throw ExceptionWithInstallerResult.createException(InstallerResultError.NO_ENTITLEMENT, str, ((Clock) FbInjector.lazyInstance(10, TimeModule.UL_id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID, DownloadAndInstallApi.this._UL_mInjectionContext)).now());
                }
                throw ExceptionWithInstallerResult.createException(InstallerResultError.NOT_LOGGED_IN, str, ((Clock) FbInjector.lazyInstance(10, TimeModule.UL_id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID, DownloadAndInstallApi.this._UL_mInjectionContext)).now());
            }
        });
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private Task<UrlFetchResult> fetchDownloadUrlAsync(final App app) {
        return ((InstallerAccessTokenFetcher) FbInjector.lazyInstance(1, InstallerModule.UL_id._UL__ULSEP_com_oculus_installer_InstallerAccessTokenFetcher_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getAccessTokenAsync().onSuccessTask(new Continuation<String, Task<UrlFetchResult>>() {
            /* class com.oculus.installer.DownloadAndInstallApi.AnonymousClass3 */

            @Override // bolts.Continuation
            public Task<UrlFetchResult> then(Task<String> task) {
                return DownloadAndInstallApi.this.doFetchDownloadUrlAsync(task.getResult(), app);
            }
        });
    }

    @VisibleForTesting
    public Task<UrlFetchResult> doFetchDownloadUrlAsync(final String str, final App app) {
        return Task.callInBackground(new Callable<UrlFetchResult>() {
            /* class com.oculus.installer.DownloadAndInstallApi.AnonymousClass4 */

            /* JADX WARNING: Code restructure failed: missing block: B:65:0x0208, code lost:
                if (r4.assetFileIntegrityResults.get(r11.file_name) == com.oculus.installer.FileState.OK) goto L_0x0211;
             */
            /* JADX WARNING: Removed duplicated region for block: B:101:0x02af  */
            /* JADX WARNING: Removed duplicated region for block: B:102:0x02b2  */
            /* JADX WARNING: Removed duplicated region for block: B:105:0x02d5  */
            /* JADX WARNING: Removed duplicated region for block: B:106:0x02d8  */
            /* JADX WARNING: Removed duplicated region for block: B:63:0x01fa  */
            /* JADX WARNING: Removed duplicated region for block: B:68:0x020f  */
            /* JADX WARNING: Removed duplicated region for block: B:72:0x0216 A[ADDED_TO_REGION] */
            /* JADX WARNING: Removed duplicated region for block: B:77:0x0231  */
            /* JADX WARNING: Removed duplicated region for block: B:79:0x0235 A[ADDED_TO_REGION] */
            /* JADX WARNING: Removed duplicated region for block: B:84:0x0254 A[ADDED_TO_REGION] */
            /* JADX WARNING: Removed duplicated region for block: B:89:0x0290  */
            /* JADX WARNING: Removed duplicated region for block: B:90:0x0293  */
            /* JADX WARNING: Removed duplicated region for block: B:93:0x029b  */
            /* JADX WARNING: Removed duplicated region for block: B:94:0x029e  */
            /* JADX WARNING: Removed duplicated region for block: B:97:0x02a6  */
            /* JADX WARNING: Removed duplicated region for block: B:98:0x02a9  */
            @Override // java.util.concurrent.Callable
            @androidx.annotation.RequiresPermission("android.permission.READ_EXTERNAL_STORAGE")
            /* Code decompiled incorrectly, please refer to instructions dump. */
            public com.oculus.appmanager.model.UrlFetchResult call() throws com.oculus.installer.DownloadAndInstallApi.ExceptionWithInstallerResult {
                /*
                // Method dump skipped, instructions count: 1629
                */
                throw new UnsupportedOperationException("Method not decompiled: com.oculus.installer.DownloadAndInstallApi.AnonymousClass4.call():com.oculus.appmanager.model.UrlFetchResult");
            }
        });
    }

    private FileState checkAssetIntegrity(App app, String str, String str2, boolean z) {
        if (!((InstallerFileUtils) FbInjector.lazyInstance(8, CommonModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_common_InstallerFileUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).isAssetInstalled(app.packageName, str)) {
            FileState fileState = z ? FileState.MISSING_REQUIRED : FileState.MISSING;
            ((FileIntegrityLogger) FbInjector.lazyInstance(13, InstallerModule.UL_id._UL__ULSEP_com_oculus_installer_FileIntegrityLogger_ULSEP_BINDING_ID, this._UL_mInjectionContext)).logFileIntegrityFail(app, str, fileState, false);
            return fileState;
        } else if (TextUtils.isEmpty(str2)) {
            BLog.d(TAG, "Received null or empty checksum, skipping asset file: %s", str);
            return FileState.CHECKSUM_NULL;
        } else {
            try {
                String fileHash = ((CryptoMethods) FbInjector.lazyInstance(12, CommonModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_common_CryptoMethods_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getFileHash(((InstallerFileUtils) FbInjector.lazyInstance(8, CommonModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_common_InstallerFileUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getFile(InstallerFileUtils.getFinalAssetPath(app.packageName, str)), STORE_FILE_CHECKSUM_ALGORITHM);
                if (str2.equalsIgnoreCase(fileHash)) {
                    return FileState.OK;
                }
                ((FileIntegrityLogger) FbInjector.lazyInstance(13, InstallerModule.UL_id._UL__ULSEP_com_oculus_installer_FileIntegrityLogger_ULSEP_BINDING_ID, this._UL_mInjectionContext)).logFileIntegrityFail(app, str, fileHash, str2, false);
                return FileState.CHECKSUM_MISMATCH;
            } catch (Exception e) {
                ((FileIntegrityLogger) FbInjector.lazyInstance(13, InstallerModule.UL_id._UL__ULSEP_com_oculus_installer_FileIntegrityLogger_ULSEP_BINDING_ID, this._UL_mInjectionContext)).logError(app, str, false, e);
                return FileState.ERROR;
            }
        }
    }

    private FileState checkObbIntegrity(App app, String str, String str2) {
        if (TextUtils.isEmpty(str2)) {
            BLog.d(TAG, "Received null or empty checksum, skipping asset file: %s", str);
            return FileState.CHECKSUM_NULL;
        }
        File file = ((InstallerFileUtils) FbInjector.lazyInstance(8, CommonModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_common_InstallerFileUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getFile(((InstallerFileUtils) FbInjector.lazyInstance(8, CommonModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_common_InstallerFileUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getFinalObbPath(app.packageName, app.versionCode));
        if (file == null || !file.exists()) {
            ((FileIntegrityLogger) FbInjector.lazyInstance(13, InstallerModule.UL_id._UL__ULSEP_com_oculus_installer_FileIntegrityLogger_ULSEP_BINDING_ID, this._UL_mInjectionContext)).logFileIntegrityFail(app, str, FileState.MISSING, true);
            return FileState.MISSING;
        }
        try {
            String fileHash = ((CryptoMethods) FbInjector.lazyInstance(12, CommonModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_common_CryptoMethods_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getFileHash(file, STORE_FILE_CHECKSUM_ALGORITHM);
            if (str2.equalsIgnoreCase(fileHash)) {
                return FileState.OK;
            }
            ((FileIntegrityLogger) FbInjector.lazyInstance(13, InstallerModule.UL_id._UL__ULSEP_com_oculus_installer_FileIntegrityLogger_ULSEP_BINDING_ID, this._UL_mInjectionContext)).logFileIntegrityFail(app, str, fileHash, str2, true);
            return FileState.CHECKSUM_MISMATCH;
        } catch (Exception e) {
            ((FileIntegrityLogger) FbInjector.lazyInstance(13, InstallerModule.UL_id._UL__ULSEP_com_oculus_installer_FileIntegrityLogger_ULSEP_BINDING_ID, this._UL_mInjectionContext)).logError(app, str, true, e);
            return FileState.ERROR;
        }
    }

    @RequiresPermission("android.permission.READ_EXTERNAL_STORAGE")
    @Nullable
    @VisibleForTesting
    public InstallIntegrityResult checkInstallIntegrity(App app) {
        if (!app.isInstalled()) {
            BLog.i(TAG, "skipping integrity checks for %s since it is not installed", app.packageName);
            return null;
        }
        String str = app.id;
        String str2 = app.packageName;
        long j = app.versionCode;
        InstallIntegrityResult installIntegrityResult = new InstallIntegrityResult(str, str2, j, ((Clock) FbInjector.lazyInstance(10, TimeModule.UL_id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID, this._UL_mInjectionContext)).now());
        try {
            GenerateBinaryInfoResponse generateBinaryInfo = ((LibraryMethods) FbInjector.lazyInstance(2, NetModule.UL_id._UL__ULSEP_com_oculus_library_net_LibraryMethods_ULSEP_BINDING_ID, this._UL_mInjectionContext)).generateBinaryInfo(new GenerateAppInfoRequest(str, j));
            if (generateBinaryInfo.app_binary_info == null || generateBinaryInfo.app_binary_info.info == null || generateBinaryInfo.app_binary_info.info[0] == null) {
                BLog.w(TAG, "unexpected null binary info for integrity checks on %s", app.packageName);
                ((FileIntegrityLogger) FbInjector.lazyInstance(13, InstallerModule.UL_id._UL__ULSEP_com_oculus_installer_FileIntegrityLogger_ULSEP_BINDING_ID, this._UL_mInjectionContext)).logError(app, new IllegalArgumentException("Binary info response is null"));
                return installIntegrityResult;
            }
            if (generateBinaryInfo.hasAssets()) {
                installIntegrityResult.hasAssets = true;
                for (GenerateBinaryInfoResponse.AssetFileNode assetFileNode : generateBinaryInfo.getAssets()) {
                    String str3 = assetFileNode.file_name;
                    FileState checkAssetIntegrity = checkAssetIntegrity(app, str3, assetFileNode.checksum_hash, assetFileNode.is_required);
                    BLog.d(TAG, "Integrity for %s's asset %s: %s", app.packageName, str3, checkAssetIntegrity.name());
                    installIntegrityResult.addAssetIntegrityResult(str3, checkAssetIntegrity);
                }
            } else {
                BLog.d(TAG, "No assets found for integrity checks");
                installIntegrityResult.hasAssets = false;
            }
            if (generateBinaryInfo.hasObb()) {
                GenerateBinaryInfoResponse.ObbBinary obb = generateBinaryInfo.getObb();
                String str4 = obb.file_name;
                FileState checkObbIntegrity = checkObbIntegrity(app, str4, obb.checksum_hash);
                BLog.d(TAG, "Integrity for %s's obb: %s", app.packageName, checkObbIntegrity.name());
                installIntegrityResult.addOBBIntegrityResult(str4, checkObbIntegrity);
                installIntegrityResult.hasObb = true;
            } else {
                BLog.d(TAG, "No obb found for integrity check");
                installIntegrityResult.hasObb = false;
            }
            return installIntegrityResult;
        } catch (ApiException e) {
            BLog.e(TAG, e, "error fetching integrity metadata");
            ((FileIntegrityLogger) FbInjector.lazyInstance(13, InstallerModule.UL_id._UL__ULSEP_com_oculus_installer_FileIntegrityLogger_ULSEP_BINDING_ID, this._UL_mInjectionContext)).logError(app, e);
            return installIntegrityResult;
        }
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private Task<UrlFetchResult> checkEntitlementPostFetchPreconditions(UrlFetchResult urlFetchResult) {
        String str;
        App app = ((OVRLibrary) FbInjector.lazyInstance(5, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getApp(urlFetchResult.installIdentifier);
        if (!((InstallationDiskSpaceUtil) FbInjector.lazyInstance(9, UtilModule.UL_id._UL__ULSEP_com_oculus_appmanager_util_InstallationDiskSpaceUtil_ULSEP_BINDING_ID, this._UL_mInjectionContext)).canInstallApp(app, urlFetchResult)) {
            throw ExceptionWithInstallerResult.createException(InstallerResultError.LOW_STORAGE, app.id, urlFetchResult.installIdentifier, app.displayName, ((Clock) FbInjector.lazyInstance(10, TimeModule.UL_id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID, this._UL_mInjectionContext)).now());
        } else if (!TextUtils.isEmpty(urlFetchResult.apkConfig.downloadUrl)) {
            if (!TextUtils.isEmpty(urlFetchResult.apkConfig.signature)) {
                try {
                    PackageInfo packageInfo = ((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_UnsafeContextInjection_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getPackageManager().getPackageInfo(urlFetchResult.installIdentifier, 64);
                    if (packageInfo.signatures == null || packageInfo.signatures.length != 1) {
                        BLog.w(TAG, "Unable to query installed signatures for %s", urlFetchResult.installIdentifier);
                        throw ExceptionWithInstallerResult.createException(InstallerResultError.INSTALLED_APP_NO_SIGNATURES, urlFetchResult.installIdentifier, ((Clock) FbInjector.lazyInstance(10, TimeModule.UL_id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID, this._UL_mInjectionContext)).now());
                    }
                    str = ((CryptoMethods) FbInjector.lazyInstance(12, CommonModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_common_CryptoMethods_ULSEP_BINDING_ID, this._UL_mInjectionContext)).makeSHA1HashBase64(packageInfo.signatures[0].toByteArray());
                    if (!TextUtils.isEmpty(str) && !TextUtils.equals(str, urlFetchResult.apkConfig.signature)) {
                        BLog.w(TAG, "Cannot install over %s, signature does not match expected value (expected=%s, actual=%s)", urlFetchResult.installIdentifier, urlFetchResult.apkConfig.signature, str);
                        throw ExceptionWithInstallerResult.createException(InstallerResultError.INSTALLED_APP_SIGNATURE_MISMATCH, urlFetchResult.installIdentifier, ((Clock) FbInjector.lazyInstance(10, TimeModule.UL_id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID, this._UL_mInjectionContext)).now());
                    }
                } catch (PackageManager.NameNotFoundException unused) {
                    str = null;
                }
            }
            return Task.forResult(urlFetchResult);
        } else {
            BLog.w(TAG, "Download path is empty, no new binaries are available for %s", urlFetchResult.installIdentifier);
            throw ExceptionWithInstallerResult.createException(InstallerResultError.NO_NEW_BINARIES_AVAILABLE, urlFetchResult.installIdentifier, ((Clock) FbInjector.lazyInstance(10, TimeModule.UL_id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID, this._UL_mInjectionContext)).now());
        }
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    @RequiresPermission("android.permission.WRITE_EXTERNAL_STORAGE")
    private Task<InstallerResult> uninstallPackage(String str, @Nullable String str2, RequestOrigin requestOrigin) {
        SettableFuture<InstallerResult> settableFuture;
        App app = ((OVRLibrary) FbInjector.lazyInstance(5, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getApp(str);
        if (app != null) {
            settableFuture = ((InstallerServiceUtil) FbInjector.lazyInstance(6, UtilModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_util_InstallerServiceUtil_ULSEP_BINDING_ID, this._UL_mInjectionContext)).startServiceForEntitlementUninstall(app, str2, requestOrigin);
        } else {
            settableFuture = ((InstallerServiceUtil) FbInjector.lazyInstance(6, UtilModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_util_InstallerServiceUtil_ULSEP_BINDING_ID, this._UL_mInjectionContext)).startServiceForUninstall(str, str2, requestOrigin);
        }
        final TaskCompletionSource taskCompletionSource = new TaskCompletionSource();
        Futures.addCallback(settableFuture, new FutureCallback<InstallerResult>() {
            /* class com.oculus.installer.DownloadAndInstallApi.AnonymousClass5 */

            public void onSuccess(@Nullable InstallerResult installerResult) {
                taskCompletionSource.setResult(installerResult);
            }

            @Override // com.google.common.util.concurrent.FutureCallback
            public void onFailure(Throwable th) {
                taskCompletionSource.setError(new RuntimeException(th));
            }
        }, MoreExecutors.directExecutor());
        return taskCompletionSource.getTask();
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    @RequiresPermission("android.permission.WRITE_EXTERNAL_STORAGE")
    private Task<InstallerResult> installPackage(String str, UrlFetchResult urlFetchResult, @Nullable String str2, @Nullable String str3, RequestOrigin requestOrigin) {
        final TaskCompletionSource taskCompletionSource = new TaskCompletionSource();
        Futures.addCallback(((InstallerServiceUtil) FbInjector.lazyInstance(6, UtilModule.UL_id._UL__ULSEP_com_oculus_appmanager_installer_service_util_InstallerServiceUtil_ULSEP_BINDING_ID, this._UL_mInjectionContext)).startServiceForInstallAction(str, urlFetchResult.apkConfig, urlFetchResult.obbConfig, urlFetchResult.assetConfigs, str2, urlFetchResult.oculusAppStoreId, urlFetchResult.versionCode, str3, requestOrigin), new FutureCallback<InstallerResult>() {
            /* class com.oculus.installer.DownloadAndInstallApi.AnonymousClass6 */

            public void onSuccess(@Nullable InstallerResult installerResult) {
                taskCompletionSource.setResult(installerResult);
            }

            @Override // com.google.common.util.concurrent.FutureCallback
            public void onFailure(Throwable th) {
                taskCompletionSource.setError(new RuntimeException(th));
            }
        }, MoreExecutors.directExecutor());
        return taskCompletionSource.getTask();
    }

    @RequiresPermission("android.permission.WRITE_EXTERNAL_STORAGE")
    public Task<InstallerResult> downloadAndInstallNonEntitlementAsync(final String str, UpdateConfig updateConfig, @Nullable UpdateConfig updateConfig2, @Nullable List<UpdateConfig> list, @Nullable final String str2, final RequestOrigin requestOrigin) {
        final UrlFetchResult urlFetchResult = new UrlFetchResult(updateConfig, updateConfig2, list, str, null, updateConfig.versionCode);
        return checkBasicPreconditions(str).onSuccessTask(new Continuation<Void, Task<InstallerResult>>() {
            /* class com.oculus.installer.DownloadAndInstallApi.AnonymousClass8 */

            @Override // bolts.Continuation
            @RequiresPermission("android.permission.WRITE_EXTERNAL_STORAGE")
            public Task<InstallerResult> then(Task<Void> task) throws Exception {
                return DownloadAndInstallApi.this.installPackage(str, urlFetchResult, null, str2, requestOrigin);
            }
        }, Task.BACKGROUND_EXECUTOR).continueWith(new Continuation<InstallerResult, InstallerResult>() {
            /* class com.oculus.installer.DownloadAndInstallApi.AnonymousClass7 */

            @Override // bolts.Continuation
            @RequiresPermission("android.permission.WRITE_EXTERNAL_STORAGE")
            public InstallerResult then(Task<InstallerResult> task) throws Exception {
                return DownloadAndInstallApi.this.handleInstallerResult(task, str);
            }
        });
    }

    @RequiresPermission("android.permission.WRITE_EXTERNAL_STORAGE")
    public Task<InstallerResult> downloadAndInstallEntitlementAsync(final String str, @Nullable final String str2, final RequestOrigin requestOrigin) {
        return checkEntitlementPreconditions(str).onSuccessTask(new Continuation<App, Task<App>>() {
            /* class com.oculus.installer.DownloadAndInstallApi.AnonymousClass13 */

            @Override // bolts.Continuation
            @RequiresPermission("android.permission.WRITE_EXTERNAL_STORAGE")
            public Task<App> then(Task<App> task) throws Exception {
                if (!((MobileConfig) FbInjector.lazyInstance(11, MobileConfigFactoryModule.UL_id._UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID, DownloadAndInstallApi.this._UL_mInjectionContext)).getBoolean(MC.oculus_library.enable_licensemanager) || !DeviceType.is6DOF()) {
                    return task;
                }
                App result = task.getResult();
                try {
                    ((LicenseHelper) FbInjector.lazyInstance(3, LicenseModule.UL_id._UL__ULSEP_com_oculus_license_LicenseHelper_ULSEP_BINDING_ID, DownloadAndInstallApi.this._UL_mInjectionContext)).fetchAndInstallEntitlementLicense(result);
                    return task;
                } catch (LicenseHelper.LicenseCheckException unused) {
                    throw ExceptionWithInstallerResult.createException(InstallerResultError.LICENSE_INSTALL_ERROR, result.id, result.packageName, result.displayName, ((Clock) FbInjector.lazyInstance(10, TimeModule.UL_id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID, DownloadAndInstallApi.this._UL_mInjectionContext)).now());
                }
            }
        }).onSuccessTask(new Continuation<App, Task<UrlFetchResult>>() {
            /* class com.oculus.installer.DownloadAndInstallApi.AnonymousClass12 */

            @Override // bolts.Continuation
            @RequiresPermission("android.permission.WRITE_EXTERNAL_STORAGE")
            public Task<UrlFetchResult> then(Task<App> task) {
                return DownloadAndInstallApi.this.fetchDownloadUrlAsync(task.getResult());
            }
        }).onSuccessTask(new Continuation<UrlFetchResult, Task<UrlFetchResult>>() {
            /* class com.oculus.installer.DownloadAndInstallApi.AnonymousClass11 */

            @Override // bolts.Continuation
            @RequiresPermission("android.permission.WRITE_EXTERNAL_STORAGE")
            public Task<UrlFetchResult> then(Task<UrlFetchResult> task) throws Exception {
                return DownloadAndInstallApi.this.checkEntitlementPostFetchPreconditions(task.getResult());
            }
        }).onSuccessTask(new Continuation<UrlFetchResult, Task<InstallerResult>>() {
            /* class com.oculus.installer.DownloadAndInstallApi.AnonymousClass10 */

            @Override // bolts.Continuation
            @RequiresPermission("android.permission.WRITE_EXTERNAL_STORAGE")
            public Task<InstallerResult> then(Task<UrlFetchResult> task) {
                return DownloadAndInstallApi.this.installPackage(str, task.getResult(), str, str2, requestOrigin);
            }
        }).continueWith(new Continuation<InstallerResult, InstallerResult>() {
            /* class com.oculus.installer.DownloadAndInstallApi.AnonymousClass9 */

            @Override // bolts.Continuation
            @RequiresPermission("android.permission.WRITE_EXTERNAL_STORAGE")
            public InstallerResult then(Task<InstallerResult> task) throws Exception {
                return DownloadAndInstallApi.this.handleInstallerResult(task, str);
            }
        });
    }

    @RequiresPermission("android.permission.WRITE_EXTERNAL_STORAGE")
    public Task<InstallerResult> uninstallAsync(final String str, @Nullable final String str2, final RequestOrigin requestOrigin) {
        return checkBasicPreconditions(str).onSuccessTask(new Continuation<Void, Task<InstallerResult>>() {
            /* class com.oculus.installer.DownloadAndInstallApi.AnonymousClass15 */

            @Override // bolts.Continuation
            @RequiresPermission("android.permission.WRITE_EXTERNAL_STORAGE")
            public Task<InstallerResult> then(Task<Void> task) throws Exception {
                return DownloadAndInstallApi.this.uninstallPackage(str, str2, requestOrigin);
            }
        }).continueWith(new Continuation<InstallerResult, InstallerResult>() {
            /* class com.oculus.installer.DownloadAndInstallApi.AnonymousClass14 */

            @Override // bolts.Continuation
            @RequiresPermission("android.permission.WRITE_EXTERNAL_STORAGE")
            public InstallerResult then(Task<InstallerResult> task) throws Exception {
                return DownloadAndInstallApi.this.handleInstallerResult(task, str);
            }
        });
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private InstallerResult handleInstallerResult(Task<InstallerResult> task, String str) {
        if (!task.isFaulted()) {
            return task.getResult();
        }
        Exception error = task.getError();
        InstallerResultError installerResultError = InstallerResultError.UNKNOWN_ERROR;
        boolean z = true;
        if (error instanceof ExceptionWithInstallerResult) {
            ExceptionWithInstallerResult exceptionWithInstallerResult = (ExceptionWithInstallerResult) error;
            if (!(exceptionWithInstallerResult.mInstallerResult == null || exceptionWithInstallerResult.mInstallerResult.error == null)) {
                installerResultError = exceptionWithInstallerResult.mInstallerResult.error;
            }
            int i = AnonymousClass16.$SwitchMap$com$oculus$appmanager$info$model$InstallerResultError[installerResultError.ordinal()];
            if (i == 1 || i == 2 || (i == 3 && BuildConstants.DEBUG)) {
                z = false;
            }
        } else {
            BLog.e(TAG, "Encountered exception without an installer result", error);
        }
        if (z) {
            ((IErrorReporter) FbInjector.lazyInstance(7, InterfacesModule.UL_id._UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_BINDING_ID, this._UL_mInjectionContext)).softError(TAG, error.getMessage(), error);
        }
        BLog.i(TAG, "Handled error %s", installerResultError.name());
        throw ExceptionWithInstallerResult.createException(installerResultError, str, ((Clock) FbInjector.lazyInstance(10, TimeModule.UL_id._UL__ULSEP_com_oculus_time_Clock_ULSEP_BINDING_ID, this._UL_mInjectionContext)).now());
    }

    /* access modifiers changed from: package-private */
    /* renamed from: com.oculus.installer.DownloadAndInstallApi$16  reason: invalid class name */
    public static /* synthetic */ class AnonymousClass16 {
        static final /* synthetic */ int[] $SwitchMap$com$oculus$appmanager$info$model$InstallerResultError = new int[InstallerResultError.values().length];

        /* JADX WARNING: Can't wrap try/catch for region: R(8:0|1|2|3|4|5|6|8) */
        /* JADX WARNING: Failed to process nested try/catch */
        /* JADX WARNING: Missing exception handler attribute for start block: B:3:0x0014 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:5:0x001f */
        static {
            /*
                com.oculus.appmanager.info.model.InstallerResultError[] r0 = com.oculus.appmanager.info.model.InstallerResultError.values()
                int r0 = r0.length
                int[] r0 = new int[r0]
                com.oculus.installer.DownloadAndInstallApi.AnonymousClass16.$SwitchMap$com$oculus$appmanager$info$model$InstallerResultError = r0
                int[] r0 = com.oculus.installer.DownloadAndInstallApi.AnonymousClass16.$SwitchMap$com$oculus$appmanager$info$model$InstallerResultError     // Catch:{ NoSuchFieldError -> 0x0014 }
                com.oculus.appmanager.info.model.InstallerResultError r1 = com.oculus.appmanager.info.model.InstallerResultError.LOW_STORAGE     // Catch:{ NoSuchFieldError -> 0x0014 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0014 }
                r2 = 1
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0014 }
            L_0x0014:
                int[] r0 = com.oculus.installer.DownloadAndInstallApi.AnonymousClass16.$SwitchMap$com$oculus$appmanager$info$model$InstallerResultError     // Catch:{ NoSuchFieldError -> 0x001f }
                com.oculus.appmanager.info.model.InstallerResultError r1 = com.oculus.appmanager.info.model.InstallerResultError.NETWORK_ERROR     // Catch:{ NoSuchFieldError -> 0x001f }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x001f }
                r2 = 2
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x001f }
            L_0x001f:
                int[] r0 = com.oculus.installer.DownloadAndInstallApi.AnonymousClass16.$SwitchMap$com$oculus$appmanager$info$model$InstallerResultError     // Catch:{ NoSuchFieldError -> 0x002a }
                com.oculus.appmanager.info.model.InstallerResultError r1 = com.oculus.appmanager.info.model.InstallerResultError.INSTALLED_APP_SIGNATURE_MISMATCH     // Catch:{ NoSuchFieldError -> 0x002a }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x002a }
                r2 = 3
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x002a }
            L_0x002a:
                return
            */
            throw new UnsupportedOperationException("Method not decompiled: com.oculus.installer.DownloadAndInstallApi.AnonymousClass16.<clinit>():void");
        }
    }

    @VisibleForTesting
    public boolean isApkEligibleForPatching(String str) {
        try {
            ApplicationInfo applicationInfo = ((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_UnsafeContextInjection_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getPackageManager().getApplicationInfo(str, 0);
            if (((applicationInfo.flags & 1) != 0) == ((applicationInfo.flags & 128) != 0)) {
                return true;
            }
            return false;
        } catch (PackageManager.NameNotFoundException unused) {
            return false;
        }
    }

    public static class ExceptionWithInstallerResult extends RuntimeException {
        @Nullable
        public final String mAppId;
        @Nullable
        public final String mDisplayName;
        public final InstallerResult mInstallerResult;

        public ExceptionWithInstallerResult(InstallerResult installerResult, @Nullable String str, @Nullable String str2) {
            super("Exception while preparing install: " + installerResult.error.name());
            this.mInstallerResult = installerResult;
            this.mAppId = str;
            this.mDisplayName = str2;
        }

        public static ExceptionWithInstallerResult createException(InstallerResultError installerResultError, String str, String str2, String str3, long j) {
            return new ExceptionWithInstallerResult(InstallerResult.createForError(str2, j, installerResultError), str, str3);
        }

        public static ExceptionWithInstallerResult createException(InstallerResultError installerResultError, String str, long j) {
            return createException(installerResultError, null, str, null, j);
        }
    }
}
