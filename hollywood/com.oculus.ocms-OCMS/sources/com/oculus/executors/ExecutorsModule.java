package com.oculus.executors;

import android.os.Handler;
import android.os.Looper;
import com.facebook.inject.AbstractLibraryModule;
import com.facebook.inject.AutoGeneratedBinder;
import com.facebook.inject.Binder;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.InjectorModule;
import com.facebook.inject.Lazy;
import com.facebook.inject.ProviderMethod;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.AutoGeneratedSwitchIdClass;
import com.facebook.ultralight.UL;
import com.google.inject.Key;
import java.lang.annotation.Annotation;
import javax.inject.Provider;

@InjectorModule
public class ExecutorsModule extends AbstractLibraryModule {

    @AutoGeneratedSwitchIdClass
    public static final class UL_id {
        public static final int _UL__ULSEP_android_os_Handler_ULSEP_com_oculus_executors_ForUiThread_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_android_os_Handler_ULSEP_com_oculus_executors_ForUiThread_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(Handler.class, (Class<? extends Annotation>) ForUiThread.class)));
        public static final int _UL__ULSEP_android_os_Looper_ULSEP_com_oculus_executors_ForUiThread_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_android_os_Looper_ULSEP_com_oculus_executors_ForUiThread_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(Looper.class, (Class<? extends Annotation>) ForUiThread.class)));
        public static final int _UL__ULSEP_com_oculus_executors_OculusThreadExecutor_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_executors_OculusThreadExecutor_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(OculusThreadExecutor.class)));
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_android_os_Handler_ULGT__ULSEP_com_oculus_executors_ForUiThread_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(UL_id._UL__ULSEP_android_os_Handler_ULSEP_com_oculus_executors_ForUiThread_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_android_os_Looper_ULGT__ULSEP_com_oculus_executors_ForUiThread_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(UL_id._UL__ULSEP_android_os_Looper_ULSEP_com_oculus_executors_ForUiThread_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_executors_OculusThreadExecutor_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(UL_id._UL__ULSEP_com_oculus_executors_OculusThreadExecutor_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedBinder
    static class AutoGeneratedBindingsForExecutorsModule {
        AutoGeneratedBindingsForExecutorsModule() {
        }

        static void bind(Binder binder) {
            if (!UL.USE_STATIC_DI) {
                binder.require(BundledAndroidModule.class);
                binder.bind(Handler.class).annotatedWith(ForUiThread.class).toProvider(new Handler_com_oculus_executors_ForUiThreadMethodAutoProvider());
                binder.bind(Looper.class).annotatedWith(ForUiThread.class).toProvider(new Looper_com_oculus_executors_ForUiThreadMethodAutoProvider());
                binder.bind(OculusThreadExecutor.class).toProvider(new OculusThreadExecutorMethodAutoProvider());
            }
        }
    }

    @AutoGeneratedAccessMethod
    public static final Handler _UL__ULSEP_android_os_Handler_ULSEP_com_oculus_executors_ForUiThread_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (Handler) UL.factorymap.get(UL_id._UL__ULSEP_android_os_Handler_ULSEP_com_oculus_executors_ForUiThread_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final Handler _UL__ULSEP_android_os_Handler_ULSEP_com_oculus_executors_ForUiThread_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return provideUiThreadHandler(_UL__ULSEP_android_os_Looper_ULSEP_com_oculus_executors_ForUiThread_ULSEP_ACCESS_METHOD(injectorLike));
    }

    @AutoGeneratedAccessMethod
    public static final Looper _UL__ULSEP_android_os_Looper_ULSEP_com_oculus_executors_ForUiThread_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (Looper) UL.factorymap.get(UL_id._UL__ULSEP_android_os_Looper_ULSEP_com_oculus_executors_ForUiThread_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final Looper _UL__ULSEP_android_os_Looper_ULSEP_com_oculus_executors_ForUiThread_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return provideUiThreadLooper();
    }

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_android_os_Handler_ULGT__ULSEP_com_oculus_executors_ForUiThread_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(UL_id._UL__ULSEP_android_os_Handler_ULSEP_com_oculus_executors_ForUiThread_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_android_os_Looper_ULGT__ULSEP_com_oculus_executors_ForUiThread_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(UL_id._UL__ULSEP_android_os_Looper_ULSEP_com_oculus_executors_ForUiThread_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_executors_OculusThreadExecutor_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(UL_id._UL__ULSEP_com_oculus_executors_OculusThreadExecutor_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final OculusThreadExecutor _UL__ULSEP_com_oculus_executors_OculusThreadExecutor_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (OculusThreadExecutor) UL.factorymap.get(UL_id._UL__ULSEP_com_oculus_executors_OculusThreadExecutor_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final OculusThreadExecutor _UL__ULSEP_com_oculus_executors_OculusThreadExecutor_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return provideOculusThreadExecutor();
    }

    @ForUiThread
    @ProviderMethod
    static Looper provideUiThreadLooper() {
        return Looper.getMainLooper();
    }

    @ForUiThread
    @ProviderMethod
    static Handler provideUiThreadHandler(@ForUiThread Looper looper) {
        return new Handler(looper);
    }

    @ProviderMethod
    static OculusThreadExecutor provideOculusThreadExecutor() {
        return OculusThreadExecutor.getInstance();
    }
}
