package com.oculus.ocms.app;

import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.Bundle;
import android.os.IBinder;
import android.os.PowerManager;
import android.os.RemoteException;
import android.text.TextUtils;
import com.facebook.common.android.AndroidModule;
import com.facebook.debug.log.BLog;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightSingletonProvider;
import com.facebook.inject.UnsafeContextInjection;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Eager;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.oculus.aidl.IAuthService2;
import com.oculus.auth.credentials.Credentials;
import com.oculus.auth.credentials.CredentialsManager;
import com.oculus.auth.handler.AuthHandlerModule;
import com.oculus.auth.handler.LoginHandler;
import com.oculus.auth.handler.LogoutHandler;
import com.oculus.auth.receiver.BaseLoginHandler;
import com.oculus.auth.service.contract.ServiceContract;
import com.oculus.common.build.BuildConstants;
import com.oculus.executors.OculusThreadExecutor;
import com.oculus.ocms.app.OCMSAppModule;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import javax.annotation.Nullable;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_UnsafeContextInjection_ULSEP_BINDING_ID", "_UL__ULSEP_java_util_Set_ULLT_com_oculus_auth_handler_LoginHandler_ULGT__ULSEP_BINDING_ID", "_UL__ULSEP_java_util_Set_ULLT_com_oculus_auth_handler_LogoutHandler_ULGT__ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_ocms_app_OCMSConfigurationPrefs_ULSEP_BINDING_ID", "_UL__ULSEP_android_os_PowerManager_ULSEP_BINDING_ID"})
@ApplicationScoped
public class OCMSCredentialsManager implements CredentialsManager, BaseLoginHandler {
    private static final int REBOOT_COUNT_SECONDS = 3;
    private static final String TAG = "OCMSCredentialsManager";
    private static volatile OCMSCredentialsManager _UL__ULSEP_com_oculus_ocms_app_OCMSCredentialsManager_ULSEP_INSTANCE;
    private InjectionContext _UL_mInjectionContext;
    @UnsafeContextInjection
    @Inject
    @Eager
    private final Context mContext;
    @Nullable
    private Credentials mCredentials;
    @Inject
    @Eager
    private final Set<LoginHandler> mLoginHandlers;
    @Inject
    @Eager
    private final Set<LogoutHandler> mLogoutHandlers;
    @Inject
    @Eager
    private final OCMSConfigurationPrefs mOCMSConfigurationPrefs;
    private final ServiceConnection mServiceConnection = new ServiceConnection() {
        /* class com.oculus.ocms.app.OCMSCredentialsManager.AnonymousClass1 */

        public void onServiceDisconnected(ComponentName componentName) {
        }

        public void onServiceConnected(ComponentName componentName, IBinder iBinder) {
            try {
                OCMSCredentialsManager.this.handleAuthQueryCallback(IAuthService2.Stub.asInterface(iBinder).getCredentials());
            } catch (RemoteException e) {
                BLog.e(OCMSCredentialsManager.TAG, "Exception while bound to auth service", e);
            } catch (Throwable th) {
                OCMSCredentialsManager.this.mContext.unbindService(this);
                throw th;
            }
            OCMSCredentialsManager.this.mContext.unbindService(this);
        }
    };

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_ocms_app_OCMSCredentialsManager_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(OCMSAppModule.UL_id._UL__ULSEP_com_oculus_ocms_app_OCMSCredentialsManager_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final OCMSCredentialsManager _UL__ULSEP_com_oculus_ocms_app_OCMSCredentialsManager_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (OCMSCredentialsManager) UL.factorymap.get(OCMSAppModule.UL_id._UL__ULSEP_com_oculus_ocms_app_OCMSCredentialsManager_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final OCMSCredentialsManager _UL__ULSEP_com_oculus_ocms_app_OCMSCredentialsManager_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_ocms_app_OCMSCredentialsManager_ULSEP_INSTANCE == null) {
            synchronized (OCMSCredentialsManager.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_ocms_app_OCMSCredentialsManager_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        _UL__ULSEP_com_oculus_ocms_app_OCMSCredentialsManager_ULSEP_INSTANCE = new OCMSCredentialsManager(injectorLike.getApplicationInjector());
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_ocms_app_OCMSCredentialsManager_ULSEP_INSTANCE;
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_ocms_app_OCMSCredentialsManager_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(OCMSAppModule.UL_id._UL__ULSEP_com_oculus_ocms_app_OCMSCredentialsManager_ULSEP_BINDING_ID, injectorLike);
    }

    @Inject
    public OCMSCredentialsManager(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(1, injectorLike);
        this.mContext = BundledAndroidModule._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_UnsafeContextInjection_ULSEP_ACCESS_METHOD(injectorLike);
        this.mLoginHandlers = AuthHandlerModule._UL__ULSEP_java_util_Set_ULLT_com_oculus_auth_handler_LoginHandler_ULGT__ULSEP_ACCESS_METHOD(injectorLike);
        this.mLogoutHandlers = AuthHandlerModule._UL__ULSEP_java_util_Set_ULLT_com_oculus_auth_handler_LogoutHandler_ULGT__ULSEP_ACCESS_METHOD(injectorLike);
        this.mOCMSConfigurationPrefs = OCMSConfigurationPrefs._UL__ULSEP_com_oculus_ocms_app_OCMSConfigurationPrefs_ULSEP_ACCESS_METHOD(injectorLike);
        String userId = this.mOCMSConfigurationPrefs.getUserId();
        String accessToken = this.mOCMSConfigurationPrefs.getAccessToken();
        synchronized (this) {
            if (!TextUtils.isEmpty(userId)) {
                if (!TextUtils.isEmpty(accessToken)) {
                    this.mCredentials = new Credentials(userId, accessToken);
                }
            }
            this.mCredentials = null;
        }
        refreshCredentials(this.mContext);
    }

    private void refreshCredentials(Context context) {
        BLog.i(TAG, "Attempting to fetch credentials from horizon auth service");
        Intent intent = new Intent();
        intent.setComponent(new ComponentName(BuildConstants.PACKAGE_NAME_HORIZON, ServiceContract.BOUND_SERVICE));
        if (!context.bindService(intent, this.mServiceConnection, 1)) {
            BLog.e(TAG, "Unable to bind to the auth service");
        }
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private void handleAuthQueryCallback(Bundle bundle) {
        if (bundle == null) {
            BLog.w(TAG, "null bundle received from OVRAuth");
            onLogout();
            return;
        }
        String string = bundle.getString("user_id", null);
        String string2 = bundle.getString("access_token", null);
        if (TextUtils.isEmpty(string) || TextUtils.isEmpty(string2)) {
            BLog.w(TAG, "Received invalid uid or access token from OVRAuth");
            onLogout();
            return;
        }
        synchronized (this) {
            if (this.mCredentials == null || !string.equals(this.mCredentials.getUserId()) || !string2.equals(this.mCredentials.getAccessToken())) {
                BLog.i(TAG, "Found new credentials, now saving and propagating");
                this.mCredentials = new Credentials(string, string2);
                this.mOCMSConfigurationPrefs.setCredentials(string, string2);
                for (LoginHandler loginHandler : this.mLoginHandlers) {
                    loginHandler.afterLoginAsync();
                }
                return;
            }
            BLog.i(TAG, "Credentials have not changed");
        }
    }

    @Override // com.oculus.auth.receiver.BaseLoginHandler
    public void onLogin() {
        refreshCredentials(this.mContext);
    }

    @Override // com.oculus.auth.receiver.BaseLoginHandler
    public void onRelogin() {
        BLog.i(TAG, "Relogging in and rebooting in %d seconds", (Object) 3);
        OculusThreadExecutor.getInstance().executeAfterDelay(new Runnable() {
            /* class com.oculus.ocms.app.OCMSCredentialsManager.AnonymousClass2 */

            public void run() {
                BLog.i(OCMSCredentialsManager.TAG, "Rebooting now");
                ((PowerManager) FbInjector.lazyInstance(0, AndroidModule.UL_id._UL__ULSEP_android_os_PowerManager_ULSEP_BINDING_ID, OCMSCredentialsManager.this._UL_mInjectionContext)).reboot(null);
            }
        }, (int) TimeUnit.SECONDS.toMillis(3));
    }

    @Override // com.oculus.auth.receiver.BaseLoginHandler
    public void onLogout() {
        if (this.mCredentials == null) {
            BLog.i(TAG, "Already logged out. Aborting logout.");
            return;
        }
        BLog.i(TAG, "Logging out");
        for (LogoutHandler logoutHandler : this.mLogoutHandlers) {
            logoutHandler.beforeLogout();
        }
        this.mCredentials = null;
        this.mOCMSConfigurationPrefs.setCredentials(null, null);
    }

    @Override // com.oculus.auth.credentials.CredentialsManager
    @Nullable
    public synchronized Credentials getCredentials() {
        return this.mCredentials;
    }
}
