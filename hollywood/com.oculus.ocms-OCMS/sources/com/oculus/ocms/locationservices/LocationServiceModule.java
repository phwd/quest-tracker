package com.oculus.ocms.locationservices;

import android.content.Context;
import android.os.SystemClock;
import androidx.annotation.RequiresApi;
import com.facebook.common.time.Clock;
import com.facebook.common.time.MonotonicClock;
import com.facebook.inject.AbstractLibraryModule;
import com.facebook.inject.AutoGeneratedBinder;
import com.facebook.inject.Binder;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.ForAppContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.InjectorModule;
import com.facebook.inject.Lazy;
import com.facebook.inject.ProviderMethod;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.privacy.datacollection.PrivacyDecision;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.AutoGeneratedSwitchIdClass;
import com.facebook.ultralight.UL;
import com.facebook.wifiscan.WifiScan;
import com.facebook.wifiscan.WifiScanConfig;
import com.google.inject.Key;
import com.oculus.debug.DebugModule;
import com.oculus.executors.ExecutorsModule;
import com.oculus.executors.OculusThreadExecutor;
import com.oculus.logging.utils.UtilsModule;
import com.oculus.ocms.locationservices.graphql.GraphqlModule;
import com.oculus.time.TimeModule;
import javax.inject.Provider;

@InjectorModule
public class LocationServiceModule extends AbstractLibraryModule {

    @AutoGeneratedSwitchIdClass
    public static final class UL_id {
        public static final int _UL__ULSEP_com_facebook_common_time_Clock_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_facebook_common_time_Clock_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(Clock.class)));
        public static final int _UL__ULSEP_com_facebook_common_time_MonotonicClock_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_facebook_common_time_MonotonicClock_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(MonotonicClock.class)));
        public static final int _UL__ULSEP_com_facebook_wifiscan_WifiScan_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_facebook_wifiscan_WifiScan_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(WifiScan.class)));
        public static final int _UL__ULSEP_com_oculus_ocms_locationservices_LocationServiceModule_OcmsMonotonicNanoClock_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_ocms_locationservices_LocationServiceModule_OcmsMonotonicNanoClock_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(OcmsMonotonicNanoClock.class)));
    }

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_facebook_common_time_Clock_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(UL_id._UL__ULSEP_com_facebook_common_time_Clock_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedBinder
    static class AutoGeneratedBindingsForLocationServiceModule {
        AutoGeneratedBindingsForLocationServiceModule() {
        }

        static void bind(Binder binder) {
            if (!UL.USE_STATIC_DI) {
                binder.require(BundledAndroidModule.class);
                binder.require(DebugModule.class);
                binder.require(ExecutorsModule.class);
                binder.require(UtilsModule.class);
                binder.require(GraphqlModule.class);
                binder.require(TimeModule.class);
                binder.bind(Clock.class).toProvider(new ClockMethodAutoProvider());
                binder.bind(MonotonicClock.class).toProvider(new MonotonicClockMethodAutoProvider());
                binder.bind(WifiScan.class).toProvider(new WifiScanMethodAutoProvider());
                binder.bind(OcmsMonotonicNanoClock.class).toProvider(new OcmsMonotonicNanoClockMethodAutoProvider());
                binder.bindComponent(LocationService.class).toProvider(new LocationServiceAutoProvider());
            }
        }
    }

    @AutoGeneratedAccessMethod
    public static final Clock _UL__ULSEP_com_facebook_common_time_Clock_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (Clock) UL.factorymap.get(UL_id._UL__ULSEP_com_facebook_common_time_Clock_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final Clock _UL__ULSEP_com_facebook_common_time_Clock_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return provideClock();
    }

    @AutoGeneratedAccessMethod
    public static final MonotonicClock _UL__ULSEP_com_facebook_common_time_MonotonicClock_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (MonotonicClock) UL.factorymap.get(UL_id._UL__ULSEP_com_facebook_common_time_MonotonicClock_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final MonotonicClock _UL__ULSEP_com_facebook_common_time_MonotonicClock_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return provideMonotonicClock();
    }

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_facebook_common_time_MonotonicClock_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(UL_id._UL__ULSEP_com_facebook_common_time_MonotonicClock_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_facebook_wifiscan_WifiScan_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(UL_id._UL__ULSEP_com_facebook_wifiscan_WifiScan_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_ocms_locationservices_LocationServiceModule_OcmsMonotonicNanoClock_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(UL_id._UL__ULSEP_com_oculus_ocms_locationservices_LocationServiceModule_OcmsMonotonicNanoClock_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final WifiScan _UL__ULSEP_com_facebook_wifiscan_WifiScan_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (WifiScan) UL.factorymap.get(UL_id._UL__ULSEP_com_facebook_wifiscan_WifiScan_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final WifiScan _UL__ULSEP_com_facebook_wifiscan_WifiScan_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return provideWifiScan(BundledAndroidModule._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_ACCESS_METHOD(injectorLike), ExecutorsModule._UL__ULSEP_com_oculus_executors_OculusThreadExecutor_ULSEP_ACCESS_METHOD(injectorLike), _UL__ULSEP_com_facebook_common_time_MonotonicClock_ULSEP_ACCESS_METHOD(injectorLike), _UL__ULSEP_com_facebook_common_time_Clock_ULSEP_ACCESS_METHOD(injectorLike));
    }

    @AutoGeneratedAccessMethod
    public static final OcmsMonotonicNanoClock _UL__ULSEP_com_oculus_ocms_locationservices_LocationServiceModule_OcmsMonotonicNanoClock_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (OcmsMonotonicNanoClock) UL.factorymap.get(UL_id._UL__ULSEP_com_oculus_ocms_locationservices_LocationServiceModule_OcmsMonotonicNanoClock_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final OcmsMonotonicNanoClock _UL__ULSEP_com_oculus_ocms_locationservices_LocationServiceModule_OcmsMonotonicNanoClock_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return provideMonotonicNanoClock();
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_facebook_common_time_Clock_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(UL_id._UL__ULSEP_com_facebook_common_time_Clock_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_facebook_common_time_MonotonicClock_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(UL_id._UL__ULSEP_com_facebook_common_time_MonotonicClock_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_facebook_wifiscan_WifiScan_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(UL_id._UL__ULSEP_com_facebook_wifiscan_WifiScan_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_ocms_locationservices_LocationServiceModule_OcmsMonotonicNanoClock_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(UL_id._UL__ULSEP_com_oculus_ocms_locationservices_LocationServiceModule_OcmsMonotonicNanoClock_ULSEP_BINDING_ID, injectorLike);
    }

    @PrivacyDecision("L18172PRV")
    @ProviderMethod
    public static WifiScan provideWifiScan(@ForAppContext Context context, OculusThreadExecutor oculusThreadExecutor, MonotonicClock monotonicClock, Clock clock) {
        return new WifiScan(context, clock, monotonicClock, oculusThreadExecutor.getExecutorService(), WifiScanConfig.getDefault().getTimestampCorrectionWindowMs(), null, true);
    }

    @ProviderMethod
    public static MonotonicClock provideMonotonicClock() {
        return new OcmsMonotonicClock();
    }

    @ProviderMethod
    public static OcmsMonotonicNanoClock provideMonotonicNanoClock() {
        return new OcmsMonotonicNanoClock();
    }

    @ProviderMethod
    public static Clock provideClock() {
        return new OcmsClock();
    }

    /* access modifiers changed from: private */
    public static class OcmsClock implements Clock {
        private com.oculus.time.Clock mClock;

        private OcmsClock() {
            this.mClock = new com.oculus.time.Clock();
        }

        @Override // com.facebook.common.time.Clock
        public long now() {
            return this.mClock.now();
        }
    }

    /* access modifiers changed from: private */
    public static class OcmsMonotonicClock implements MonotonicClock {
        private com.oculus.time.Clock mClock;

        private OcmsMonotonicClock() {
            this.mClock = new com.oculus.time.Clock();
        }

        @Override // com.facebook.common.time.MonotonicClock
        public long now() {
            return this.mClock.elapsedRealtime();
        }
    }

    public static class OcmsMonotonicNanoClock {
        @RequiresApi(api = 17)
        public long nowNanos() {
            return SystemClock.elapsedRealtimeNanos();
        }
    }
}
