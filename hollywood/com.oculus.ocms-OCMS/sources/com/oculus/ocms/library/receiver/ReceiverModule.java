package com.oculus.ocms.library.receiver;

import com.facebook.inject.AbstractLibraryModule;
import com.facebook.inject.AutoGeneratedBinder;
import com.facebook.inject.Binder;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.InjectorModule;
import com.facebook.mobileconfig.factory.module.MobileConfigFactoryModule;
import com.facebook.mobileconfig.interfaces.MobileConfigInterfacesModule;
import com.facebook.ultralight.AutoGeneratedSwitchIdClass;
import com.facebook.ultralight.UL;
import com.google.inject.Key;
import com.oculus.common.init.AppInitModule;
import com.oculus.http.common.HttpModule;
import com.oculus.library.database.DatabaseModule;
import com.oculus.libraryapi.OVRLibraryModule;
import com.oculus.logging.utils.UtilsModule;
import com.oculus.ocms.library.service.ServiceModule;
import com.oculus.security.basecomponent.BasecomponentModule;
import com.oculus.util.device.DeviceModule;

@InjectorModule
public class ReceiverModule extends AbstractLibraryModule {

    @AutoGeneratedSwitchIdClass
    public static final class UL_id {
        public static final int _UL__ULSEP_com_oculus_ocms_library_receiver_InstallExistingReceiver_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_ocms_library_receiver_InstallExistingReceiver_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(InstallExistingReceiver.class)));
    }

    @AutoGeneratedBinder
    static class AutoGeneratedBindingsForReceiverModule {
        AutoGeneratedBindingsForReceiverModule() {
        }

        static void bind(Binder binder) {
            if (!UL.USE_STATIC_DI) {
                binder.require(BundledAndroidModule.class);
                binder.require(MobileConfigFactoryModule.class);
                binder.require(MobileConfigInterfacesModule.class);
                binder.require(AppInitModule.class);
                binder.require(HttpModule.class);
                binder.require(DatabaseModule.class);
                binder.require(OVRLibraryModule.class);
                binder.require(UtilsModule.class);
                binder.require(ServiceModule.class);
                binder.require(BasecomponentModule.class);
                binder.require(DeviceModule.class);
                binder.bind(InstallExistingReceiver.class).toProvider(new InstallExistingReceiverAutoProvider());
                binder.bindComponent(PackageRemovedReceiver.class).toProvider(new PackageRemovedReceiverAutoProvider());
                binder.bindComponent(ThirdPartyPackageStartedReceiver.class).toProvider(new ThirdPartyPackageStartedReceiverAutoProvider());
            }
        }
    }
}
