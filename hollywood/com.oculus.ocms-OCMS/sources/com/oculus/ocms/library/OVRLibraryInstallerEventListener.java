package com.oculus.ocms.library;

import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import com.facebook.debug.log.BLog;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightSingletonProvider;
import com.facebook.quicklog.identifiers.PerformanceEventFields;
import com.facebook.secure.context.SecureContextHelper;
import com.facebook.secure.trustedapp.AllFamilyPackageNames;
import com.facebook.secure.trustedapp.AllFamilyTrustedSignatures;
import com.facebook.secure.trustedapp.TrustedAppHelper;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.oculus.appmanager.info.ApkUpdateInfo;
import com.oculus.appmanager.info.InfoModule;
import com.oculus.appmanager.info.InfoUtils;
import com.oculus.appmanager.info.model.InstallerResult;
import com.oculus.appmanager.info.model.InstallerUpdateResult;
import com.oculus.appmanager.installer.events.DownloadProgressResponse;
import com.oculus.appmanager.installer.events.DownloadQueuedResponse;
import com.oculus.appmanager.installer.events.DownloadResponse;
import com.oculus.appmanager.installer.events.DownloadingResponse;
import com.oculus.appmanager.installer.events.InstallResponse;
import com.oculus.appmanager.installer.events.InstallerEventBus;
import com.oculus.common.init.INeedInit;
import com.oculus.horizon.logging.LoggingKeys;
import com.oculus.library.model.InstallerCallbackReceiver;
import com.oculus.library.model.InstallerUpdateCallbackReceiver;
import com.oculus.libraryapi.OVRLibrary;
import com.oculus.ocms.library.OCMSLibraryModule;
import com.oculus.ocms.library.provider.contract.OCMSLibraryContract;
import com.squareup.otto.Subscribe;
import javax.annotation.Nullable;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID"})
@ApplicationScoped
public class OVRLibraryInstallerEventListener implements INeedInit {
    private static final String TAG = "OVRLibraryInstallerEventListener";
    private static volatile OVRLibraryInstallerEventListener _UL__ULSEP_com_oculus_ocms_library_OVRLibraryInstallerEventListener_ULSEP_INSTANCE;
    private InjectionContext _UL_mInjectionContext;

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_ocms_library_OVRLibraryInstallerEventListener_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(OCMSLibraryModule.UL_id._UL__ULSEP_com_oculus_ocms_library_OVRLibraryInstallerEventListener_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final OVRLibraryInstallerEventListener _UL__ULSEP_com_oculus_ocms_library_OVRLibraryInstallerEventListener_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (OVRLibraryInstallerEventListener) UL.factorymap.get(OCMSLibraryModule.UL_id._UL__ULSEP_com_oculus_ocms_library_OVRLibraryInstallerEventListener_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final OVRLibraryInstallerEventListener _UL__ULSEP_com_oculus_ocms_library_OVRLibraryInstallerEventListener_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_ocms_library_OVRLibraryInstallerEventListener_ULSEP_INSTANCE == null) {
            synchronized (OVRLibraryInstallerEventListener.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_ocms_library_OVRLibraryInstallerEventListener_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        _UL__ULSEP_com_oculus_ocms_library_OVRLibraryInstallerEventListener_ULSEP_INSTANCE = new OVRLibraryInstallerEventListener(injectorLike.getApplicationInjector());
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_ocms_library_OVRLibraryInstallerEventListener_ULSEP_INSTANCE;
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_ocms_library_OVRLibraryInstallerEventListener_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(OCMSLibraryModule.UL_id._UL__ULSEP_com_oculus_ocms_library_OVRLibraryInstallerEventListener_ULSEP_BINDING_ID, injectorLike);
    }

    @Inject
    public OVRLibraryInstallerEventListener(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(2, injectorLike);
    }

    @Override // com.oculus.common.init.INeedInit
    public void init() {
        InstallerEventBus.getInstance().register(this);
    }

    @Subscribe
    public void onDownloadQueued(DownloadQueuedResponse downloadQueuedResponse) {
        sendBroadcast(InstallerUpdateResult.createForQueuedState(downloadQueuedResponse.installIdentifier));
    }

    @Subscribe
    public void onDownloadingResponse(DownloadingResponse downloadingResponse) {
        sendBroadcast(InstallerUpdateResult.createForDownloadingState(downloadingResponse.installIdentifier));
    }

    @Subscribe
    public void onDownloadProgress(DownloadProgressResponse downloadProgressResponse) {
        BLog.i(TAG, "Download progress for %s: %d/%d", downloadProgressResponse.installIdentifier, Long.valueOf(downloadProgressResponse.downloadingBytes), Long.valueOf(downloadProgressResponse.totalBytes));
        sendBroadcast(InstallerUpdateResult.createForDownloadProgress(downloadProgressResponse.installIdentifier, downloadProgressResponse.totalBytes, downloadProgressResponse.downloadingBytes));
    }

    @Subscribe
    public void onDownloadResponse(DownloadResponse downloadResponse) {
        BLog.i(TAG, "Download completed for %s: %s", downloadResponse.installIdentifier, downloadResponse.isSuccess ? LoggingKeys.SUCCESS : PerformanceEventFields.TerminationStatus.FAILED);
        if (downloadResponse.isSuccess) {
            sendBroadcast(InstallerUpdateResult.createForInstallingState(downloadResponse.installIdentifier));
        } else {
            sendBroadcast(downloadResponse.installerResult, Integer.valueOf(downloadResponse.errorCode));
        }
        ApkUpdateInfo update = ((InfoUtils) FbInjector.lazyInstance(1, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getUpdate(downloadResponse.updateId);
        if (update != null && update.updateType.isApk()) {
            Uri uriForPackageDownload = OCMSLibraryContract.uriForPackageDownload(downloadResponse.installerResult);
            ((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getContentResolver().notifyChange(uriForPackageDownload, null);
            BLog.d(TAG, "notifying: %s", uriForPackageDownload);
        }
    }

    @Subscribe
    public void onInstallResponse(InstallResponse installResponse) {
        ApkUpdateInfo update = ((InfoUtils) FbInjector.lazyInstance(1, InfoModule.UL_id._UL__ULSEP_com_oculus_appmanager_info_InfoUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getUpdate(installResponse.updateId);
        if (update != null && update.updateType.isApk()) {
            sendBroadcast(installResponse.installerResult, null);
            Uri uriForPackageInstall = OCMSLibraryContract.uriForPackageInstall(installResponse.installerResult);
            ((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getContentResolver().notifyChange(uriForPackageInstall, null);
            BLog.d(TAG, "notifying: %s", uriForPackageInstall);
        }
    }

    private void sendBroadcast(InstallerResult installerResult, @Nullable Integer num) {
        Bundle bundle = new Bundle();
        bundle.putParcelable(InstallerCallbackReceiver.EXTRA_RESULT, installerResult);
        if (num != null) {
            bundle.putInt(OVRLibrary.EXTRA_ERROR_CODE, num.intValue());
        }
        sendBroadcast(bundle);
    }

    private void sendBroadcast(InstallerUpdateResult installerUpdateResult) {
        Bundle bundle = new Bundle();
        bundle.putParcelable(InstallerUpdateCallbackReceiver.EXTRA_RESULT, installerUpdateResult);
        sendBroadcast(bundle);
    }

    private void sendBroadcast(Bundle bundle) {
        Intent intent = new Intent();
        intent.setAction(OVRLibrary.ACTION_UPDATE_BROADCAST);
        intent.putExtras(bundle);
        SecureContextHelper.get().trustedApp(TrustedAppHelper.createTrustedApp(AllFamilyTrustedSignatures.ALL_FAMILY_PROD, AllFamilyPackageNames.OCULUS_PACKAGE_NAMES)).sendBroadcast(intent, (Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext));
    }
}
