package com.oculus.ocms.defaultapps;

import android.content.pm.ApplicationInfo;
import android.text.TextUtils;
import bolts.Continuation;
import bolts.Task;
import bolts.TaskCompletionSource;
import com.facebook.debug.log.BLog;
import com.facebook.infer.annotation.Nullsafe;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.google.common.base.Optional;
import com.google.common.base.Preconditions;
import com.oculus.appmanager.info.model.RequestOrigin;
import com.oculus.common.build.BuildConstants;
import com.oculus.common.packagescache.PackageManagerUtils;
import com.oculus.common.packagescache.PackagesCacheModule;
import com.oculus.coreapps.CoreApp;
import com.oculus.coreapps.CoreAppManager;
import com.oculus.coreapps.CoreappsModule;
import com.oculus.errorreporting.interfaces.IErrorReporter;
import com.oculus.errorreporting.interfaces.InterfacesModule;
import com.oculus.executors.OculusThreadExecutor;
import com.oculus.horizon.api.common.Item;
import com.oculus.horizon.api.common.MinimumAppVersion;
import com.oculus.http.core.base.ApiError;
import com.oculus.ocms.defaultapps.DefaultAppsModule;
import com.oculus.ocms.defaultapps.net.DefaultAppsResponse;
import com.oculus.oculustestsettings.OculusTestSettings;
import com.oculus.oculustestsettings.OculusTestSettingsModule;
import com.oculus.util.thread.ThreadModule;
import com.oculus.util.thread.ThreadUtils;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_coreapps_CoreAppManager_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_ocms_defaultapps_DefaultAppsMethods_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_ocms_defaultapps_DefaultAppsPrefs_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_oculustestsettings_OculusTestSettings_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_common_packagescache_PackageManagerUtils_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_util_thread_ThreadUtils_ULSEP_BINDING_ID"})
@Nullsafe(Nullsafe.Mode.LOCAL)
public class DefaultAppsInstaller {
    private static final String TAG = "DefaultAppsInstaller";
    private InjectionContext _UL_mInjectionContext;

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_ocms_defaultapps_DefaultAppsInstaller_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(DefaultAppsModule.UL_id._UL__ULSEP_com_oculus_ocms_defaultapps_DefaultAppsInstaller_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_ocms_defaultapps_DefaultAppsInstaller_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(DefaultAppsModule.UL_id._UL__ULSEP_com_oculus_ocms_defaultapps_DefaultAppsInstaller_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final DefaultAppsInstaller _UL__ULSEP_com_oculus_ocms_defaultapps_DefaultAppsInstaller_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (DefaultAppsInstaller) UL.factorymap.get(DefaultAppsModule.UL_id._UL__ULSEP_com_oculus_ocms_defaultapps_DefaultAppsInstaller_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final DefaultAppsInstaller _UL__ULSEP_com_oculus_ocms_defaultapps_DefaultAppsInstaller_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new DefaultAppsInstaller(injectorLike);
    }

    @Inject
    public DefaultAppsInstaller(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(7, injectorLike);
    }

    public Task<CoreApp[]> installHighPriorityApps() {
        return installAppsAsync(true);
    }

    public Task<CoreApp[]> installSetupApps() {
        return installAppsAsync(false);
    }

    /* JADX DEBUG: Type inference failed for r5v1. Raw type applied. Possible types: bolts.Task<TContinuationResult>, bolts.Task<com.oculus.coreapps.CoreApp[]> */
    public Task<CoreApp[]> installAppsAsync(final boolean z) {
        ((ThreadUtils) FbInjector.lazyInstance(6, ThreadModule.UL_id._UL__ULSEP_com_oculus_util_thread_ThreadUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).assertIsNonUiThread();
        Task<CoreApp[]> runningTask = ((CoreAppManager) FbInjector.lazyInstance(0, CoreappsModule.UL_id._UL__ULSEP_com_oculus_coreapps_CoreAppManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getRunningTask();
        return (!((CoreAppManager) FbInjector.lazyInstance(0, CoreappsModule.UL_id._UL__ULSEP_com_oculus_coreapps_CoreAppManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).isInstallInProgress() || runningTask == null) ? (Task<TContinuationResult>) fetchSetupApps(z).continueWithTask(new Continuation<DefaultAppsResponse, Task<CoreApp[]>>() {
            /* class com.oculus.ocms.defaultapps.DefaultAppsInstaller.AnonymousClass1 */

            @Override // bolts.Continuation
            public Task<CoreApp[]> then(Task<DefaultAppsResponse> task) throws Exception {
                ApplicationInfo applicationInfo;
                final TaskCompletionSource taskCompletionSource = new TaskCompletionSource();
                if (task.isFaulted()) {
                    Exception error = task.getError();
                    ((IErrorReporter) FbInjector.lazyInstance(3, InterfacesModule.UL_id._UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_BINDING_ID, DefaultAppsInstaller.this._UL_mInjectionContext)).softError(DefaultAppsInstaller.TAG, String.format(Locale.US, "Error while fetching %s", z ? "high priority app list" : "default app list"), error);
                    taskCompletionSource.setError(error);
                } else {
                    ((CoreAppManager) FbInjector.lazyInstance(0, CoreappsModule.UL_id._UL__ULSEP_com_oculus_coreapps_CoreAppManager_ULSEP_BINDING_ID, DefaultAppsInstaller.this._UL_mInjectionContext)).addCoreAppsListener(new CoreAppManager.CoreAppsListener() {
                        /* class com.oculus.ocms.defaultapps.DefaultAppsInstaller.AnonymousClass1.AnonymousClass1 */

                        @Override // com.oculus.coreapps.CoreAppManager.CoreAppsListener
                        public void onAppProgress(CoreApp coreApp) {
                        }

                        @Override // com.oculus.coreapps.CoreAppManager.CoreAppsListener
                        public void onCompletedInstalls(CoreApp[] coreAppArr) {
                            ((CoreAppManager) FbInjector.lazyInstance(0, CoreappsModule.UL_id._UL__ULSEP_com_oculus_coreapps_CoreAppManager_ULSEP_BINDING_ID, DefaultAppsInstaller.this._UL_mInjectionContext)).removeCoreAppsListener(this);
                            ((CoreAppManager) FbInjector.lazyInstance(0, CoreappsModule.UL_id._UL__ULSEP_com_oculus_coreapps_CoreAppManager_ULSEP_BINDING_ID, DefaultAppsInstaller.this._UL_mInjectionContext)).setCoreApps(Collections.emptyList(), true);
                            taskCompletionSource.setResult(coreAppArr);
                        }

                        @Override // com.oculus.coreapps.CoreAppManager.CoreAppsListener
                        public void onFetchError(ApiError apiError) {
                            ((IErrorReporter) FbInjector.lazyInstance(3, InterfacesModule.UL_id._UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_BINDING_ID, DefaultAppsInstaller.this._UL_mInjectionContext)).softError(DefaultAppsInstaller.TAG, "Error while fetching app list", apiError);
                            ((CoreAppManager) FbInjector.lazyInstance(0, CoreappsModule.UL_id._UL__ULSEP_com_oculus_coreapps_CoreAppManager_ULSEP_BINDING_ID, DefaultAppsInstaller.this._UL_mInjectionContext)).removeCoreAppsListener(this);
                            taskCompletionSource.setError(apiError);
                        }
                    });
                    List<Item> list = task.getResult().node.default_applications;
                    if (BuildConstants.DEBUG) {
                        Iterator<Item> it = list.iterator();
                        while (it.hasNext()) {
                            Item next = it.next();
                            if (!(next.latest_supported_binary == null || (applicationInfo = ((PackageManagerUtils) FbInjector.lazyInstance(5, PackagesCacheModule.UL_id._UL__ULSEP_com_oculus_common_packagescache_PackageManagerUtils_ULSEP_BINDING_ID, DefaultAppsInstaller.this._UL_mInjectionContext)).getApplicationInfo(next.latest_supported_binary.package_name, 0)) == null)) {
                                if ((applicationInfo.flags & 1) != 0 || (applicationInfo.flags & 128) != 0) {
                                    BLog.i(DefaultAppsInstaller.TAG, "skipping install of debug signed system app: %s", next.latest_supported_binary.package_name);
                                    it.remove();
                                }
                            }
                        }
                    }
                    if (((OculusTestSettings) FbInjector.lazyInstance(4, OculusTestSettingsModule.UL_id._UL__ULSEP_com_oculus_oculustestsettings_OculusTestSettings_ULSEP_BINDING_ID, DefaultAppsInstaller.this._UL_mInjectionContext)).getBooleanTestSetting(OculusTestSettings.SettingsKey.FAIL_MNUX_UPDATE)) {
                        list = DefaultAppsInstaller.modifyItems(list);
                    }
                    DefaultAppsInstaller.this.filterUnsupportedApps(list);
                    DefaultAppsInstaller defaultAppsInstaller = DefaultAppsInstaller.this;
                    ((CoreAppManager) FbInjector.lazyInstance(0, CoreappsModule.UL_id._UL__ULSEP_com_oculus_coreapps_CoreAppManager_ULSEP_BINDING_ID, DefaultAppsInstaller.this._UL_mInjectionContext)).setCoreApps(defaultAppsInstaller.filterPreviouslyCompletedInstalls(defaultAppsInstaller.toMinimumAppVersionEntries(list)), true);
                    ((CoreAppManager) FbInjector.lazyInstance(0, CoreappsModule.UL_id._UL__ULSEP_com_oculus_coreapps_CoreAppManager_ULSEP_BINDING_ID, DefaultAppsInstaller.this._UL_mInjectionContext)).setInstallOrder(CoreAppManager.InstallOrder.SEQUENTIAL);
                    ((CoreAppManager) FbInjector.lazyInstance(0, CoreappsModule.UL_id._UL__ULSEP_com_oculus_coreapps_CoreAppManager_ULSEP_BINDING_ID, DefaultAppsInstaller.this._UL_mInjectionContext)).setInstallRequestOrigin(RequestOrigin.PACIFIC_SETUP);
                    final String str = z ? "high_pri_apps_setup" : "default_apps_setup";
                    OculusThreadExecutor.getInstance().runOnUiThread(new Runnable() {
                        /* class com.oculus.ocms.defaultapps.DefaultAppsInstaller.AnonymousClass1.AnonymousClass2 */

                        public void run() {
                            ((CoreAppManager) FbInjector.lazyInstance(0, CoreappsModule.UL_id._UL__ULSEP_com_oculus_coreapps_CoreAppManager_ULSEP_BINDING_ID, DefaultAppsInstaller.this._UL_mInjectionContext)).installOrUpdateRequiredApps(str);
                        }
                    });
                }
                return taskCompletionSource.getTask();
            }
        }) : runningTask;
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private void filterUnsupportedApps(List<Item> list) {
        Iterator<Item> it = list.iterator();
        while (it.hasNext()) {
            Item next = it.next();
            if (next.latest_supported_binary == null) {
                ((IErrorReporter) FbInjector.lazyInstance(3, InterfacesModule.UL_id._UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_BINDING_ID, this._UL_mInjectionContext)).softError(TAG, String.format(Locale.US, "Application ID %s is unsupported on this device!", next.id));
                it.remove();
            }
        }
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private List<MinimumAppVersion.MinimumAppVersionEntry> filterPreviouslyCompletedInstalls(List<MinimumAppVersion.MinimumAppVersionEntry> list) {
        Set<String> completedSetupInstalls = ((DefaultAppsPrefs) FbInjector.lazyInstance(2, DefaultAppsModule.UL_id._UL__ULSEP_com_oculus_ocms_defaultapps_DefaultAppsPrefs_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getCompletedSetupInstalls();
        ArrayList arrayList = new ArrayList();
        for (MinimumAppVersion.MinimumAppVersionEntry minimumAppVersionEntry : list) {
            if (!completedSetupInstalls.contains(minimumAppVersionEntry.package_name)) {
                arrayList.add(minimumAppVersionEntry);
            }
        }
        return arrayList;
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private List<MinimumAppVersion.MinimumAppVersionEntry> toMinimumAppVersionEntries(List<Item> list) {
        ArrayList arrayList = new ArrayList();
        for (Item item : list) {
            Preconditions.checkNotNull(item.latest_supported_binary);
            MinimumAppVersion.MinimumAppVersionEntry minimumAppVersionEntry = new MinimumAppVersion.MinimumAppVersionEntry();
            minimumAppVersionEntry.package_name = item.getPackageName();
            minimumAppVersionEntry.download_uri = item.latest_supported_binary.uri;
            minimumAppVersionEntry.download_version = item.latest_supported_binary.version_code;
            minimumAppVersionEntry.display_name = item.display_name;
            minimumAppVersionEntry.minimum_version = item.latest_supported_binary.version_code;
            String externalSignaturesAsJson = item.getExternalSignaturesAsJson();
            if (TextUtils.isEmpty(externalSignaturesAsJson)) {
                ((IErrorReporter) FbInjector.lazyInstance(3, InterfacesModule.UL_id._UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_BINDING_ID, this._UL_mInjectionContext)).softError(TAG, String.format("No external signature found for %s", minimumAppVersionEntry.package_name));
            } else {
                minimumAppVersionEntry.external_signature = Optional.of(externalSignaturesAsJson);
                if (item.latest_supported_binary.obb_binary != null && !TextUtils.isEmpty(item.latest_supported_binary.obb_binary.uri)) {
                    minimumAppVersionEntry.obbUri = Optional.of(item.latest_supported_binary.obb_binary.uri);
                    minimumAppVersionEntry.obbSize = Optional.of(Long.valueOf(item.latest_supported_binary.obb_binary.size));
                }
                if (item.latest_supported_binary.size > 0) {
                    minimumAppVersionEntry.size = Optional.of(Long.valueOf(item.latest_supported_binary.size));
                }
                arrayList.add(minimumAppVersionEntry);
            }
        }
        return arrayList;
    }

    /* access modifiers changed from: private */
    public static List<Item> modifyItems(List<Item> list) {
        for (Item item : list) {
            if (item.latest_supported_binary != null) {
                Item.AndroidBinary androidBinary = item.latest_supported_binary;
                androidBinary.uri = item.latest_supported_binary.uri + "?";
            }
        }
        return list;
    }

    private Task<DefaultAppsResponse> fetchSetupApps(boolean z) {
        return Task.forResult(((DefaultAppsMethods) FbInjector.lazyInstance(1, DefaultAppsModule.UL_id._UL__ULSEP_com_oculus_ocms_defaultapps_DefaultAppsMethods_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getDefaultApps(z));
    }
}
