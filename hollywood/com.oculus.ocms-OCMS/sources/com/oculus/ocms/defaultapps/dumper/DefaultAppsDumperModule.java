package com.oculus.ocms.defaultapps.dumper;

import com.facebook.fab.dumper.base.DumperBaseModule;
import com.facebook.infer.annotation.Nullsafe;
import com.facebook.inject.AbstractLibraryModule;
import com.facebook.inject.AutoGeneratedBinder;
import com.facebook.inject.Binder;
import com.facebook.inject.Bindings;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.InjectorModule;
import com.facebook.inject.MultiBind;
import com.facebook.stetho.dumpapp.DumperPlugin;
import com.facebook.ultralight.AutoGeneratedSwitchIdClass;
import com.facebook.ultralight.UL;
import com.google.inject.Key;
import com.oculus.auth.handler.AuthHandlerModule;
import com.oculus.common.init.AppInitModule;
import com.oculus.horizon.api.ApiModule;
import com.oculus.http.common.HttpModule;
import com.oculus.ocms.defaultapps.DefaultAppsModule;

@InjectorModule
@Nullsafe(Nullsafe.Mode.LOCAL)
public class DefaultAppsDumperModule extends AbstractLibraryModule {

    @Bindings
    interface MoreBindings {
        @MultiBind
        DumperPlugin addDefaultAppsDumperPlugin(DefaultAppsDumperPlugin defaultAppsDumperPlugin);
    }

    @AutoGeneratedSwitchIdClass
    public static final class UL_id {
        public static final int _UL__ULSEP_com_oculus_ocms_defaultapps_dumper_DefaultAppsDumperPlugin_ULSEP_BINDING_ID = (UL.USE_STATIC_DI ? UL.id._UL__ULSEP_com_oculus_ocms_defaultapps_dumper_DefaultAppsDumperPlugin_ULSEP_BINDING_ID : UL.id.dynamicId(Key.get(DefaultAppsDumperPlugin.class)));
    }

    @AutoGeneratedBinder
    static class AutoGeneratedBindingsForDefaultAppsDumperModule {
        AutoGeneratedBindingsForDefaultAppsDumperModule() {
        }

        static void bind(Binder binder) {
            if (!UL.USE_STATIC_DI) {
                binder.require(DumperBaseModule.class);
                binder.require(BundledAndroidModule.class);
                binder.require(AuthHandlerModule.class);
                binder.require(AppInitModule.class);
                binder.require(ApiModule.class);
                binder.require(HttpModule.class);
                binder.require(DefaultAppsModule.class);
                binder.bindMulti(DumperPlugin.class).add(DefaultAppsDumperPlugin.class);
                binder.bind(DefaultAppsDumperPlugin.class).toProvider(new DefaultAppsDumperPluginAutoProvider());
            }
        }
    }
}
