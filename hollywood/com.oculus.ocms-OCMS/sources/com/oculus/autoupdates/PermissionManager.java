package com.oculus.autoupdates;

import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PermissionInfo;
import com.facebook.common.android.AndroidModule;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightSingletonProvider;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.UL;
import com.google.common.base.Optional;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Sets;
import com.oculus.autoupdates.AutoUpdatesModule;
import java.util.HashSet;
import java.util.Set;
import javax.inject.Inject;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_android_content_pm_PackageManager_ULSEP_BINDING_ID"})
@ApplicationScoped(enableScopeValidation = false)
public class PermissionManager {
    private static volatile PermissionManager _UL__ULSEP_com_oculus_autoupdates_PermissionManager_ULSEP_INSTANCE;
    private final PackageManager mPackageManager;

    @AutoGeneratedAccessMethod
    public static final PermissionManager _UL__ULSEP_com_oculus_autoupdates_PermissionManager_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (PermissionManager) UL.factorymap.get(AutoUpdatesModule.UL_id._UL__ULSEP_com_oculus_autoupdates_PermissionManager_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final PermissionManager _UL__ULSEP_com_oculus_autoupdates_PermissionManager_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_autoupdates_PermissionManager_ULSEP_INSTANCE == null) {
            synchronized (PermissionManager.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_autoupdates_PermissionManager_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        _UL__ULSEP_com_oculus_autoupdates_PermissionManager_ULSEP_INSTANCE = new PermissionManager(AndroidModule._UL__ULSEP_android_content_pm_PackageManager_ULSEP_ACCESS_METHOD(injectorLike.getApplicationInjector()));
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_autoupdates_PermissionManager_ULSEP_INSTANCE;
    }

    @Inject
    public PermissionManager(PackageManager packageManager) {
        this.mPackageManager = packageManager;
    }

    public Set<String> getPermissionsFromInstalledPackage(String str) {
        Optional<PackageInfo> optional = getPackage(str, 4096);
        if (optional.isPresent()) {
            return getPermissionsFromPackageInfo(optional.get());
        }
        return ImmutableSet.of();
    }

    public Set<String> getPermissionsDifference(String str, ImmutableSet<String> immutableSet) {
        return Sets.difference(immutableSet, getPermissionsFromInstalledPackage(str));
    }

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_autoupdates_PermissionManager_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(AutoUpdatesModule.UL_id._UL__ULSEP_com_oculus_autoupdates_PermissionManager_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_autoupdates_PermissionManager_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(AutoUpdatesModule.UL_id._UL__ULSEP_com_oculus_autoupdates_PermissionManager_ULSEP_BINDING_ID, injectorLike);
    }

    public Set<String> getDangerousPermissions(Set<String> set) {
        HashSet hashSet = new HashSet();
        for (String str : set) {
            if (isDangerous(fetchPermissionInfo(str))) {
                hashSet.add(str);
            }
        }
        return hashSet;
    }

    private static boolean isDangerous(PermissionInfo permissionInfo) {
        return (permissionInfo.protectionLevel & 1) != 0;
    }

    private PermissionInfo fetchPermissionInfo(String str) {
        try {
            return this.mPackageManager.getPermissionInfo(str, 0);
        } catch (PackageManager.NameNotFoundException unused) {
            return null;
        }
    }

    public Set<String> getDangerousPermissionsDifference(String str, ImmutableSet<String> immutableSet) {
        return getDangerousPermissions(getPermissionsDifference(str, immutableSet));
    }

    private Set<String> getPermissionsFromPackageInfo(PackageInfo packageInfo) {
        String[] strArr = packageInfo.requestedPermissions;
        if (strArr == null) {
            return ImmutableSet.of();
        }
        return ImmutableSet.copyOf(strArr);
    }

    public Optional<PackageInfo> getPackage(String str, int i) {
        try {
            return Optional.of(this.mPackageManager.getPackageInfo(str, i));
        } catch (PackageManager.NameNotFoundException unused) {
            return Optional.absent();
        }
    }
}
