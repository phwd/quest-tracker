package com.oculus.autoupdates;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.database.sqlite.SQLiteConstraintException;
import android.os.BatteryManager;
import android.os.Build;
import android.os.Bundle;
import android.os.ResultReceiver;
import androidx.annotation.VisibleForTesting;
import bolts.Task;
import bolts.TaskCompletionSource;
import com.facebook.debug.log.BLog;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.mobileconfig.factory.MobileConfig;
import com.facebook.mobileconfig.factory.module.MobileConfigFactoryModule;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.google.common.base.Function;
import com.google.common.base.Joiner;
import com.google.common.base.Preconditions;
import com.google.common.collect.Collections2;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.UnmodifiableIterator;
import com.google.common.util.concurrent.FutureCallback;
import com.google.common.util.concurrent.Futures;
import com.google.common.util.concurrent.ListenableFuture;
import com.google.common.util.concurrent.MoreExecutors;
import com.oculus.appmanager.info.model.InstallerResult;
import com.oculus.appmanager.info.model.RequestOrigin;
import com.oculus.appmanager.installer.events.InstallResponse;
import com.oculus.autoupdates.AutoUpdatesModule;
import com.oculus.autoupdates.MC;
import com.oculus.autoupdates.database.AutoUpdateRecord;
import com.oculus.autoupdates.database.AutoUpdatesDBManager;
import com.oculus.common.build.BuildConstants;
import com.oculus.common.packagescache.PackageManagerUtils;
import com.oculus.common.packagescache.PackagesCacheModule;
import com.oculus.errorreporting.interfaces.IErrorReporter;
import com.oculus.errorreporting.interfaces.InterfacesModule;
import com.oculus.library.model.App;
import com.oculus.library.model.InstallerCallback;
import com.oculus.libraryapi.OVRLibrary;
import com.oculus.libraryapi.OVRLibraryModule;
import com.oculus.logging.utils.EventManager;
import com.oculus.logging.utils.UtilsModule;
import com.oculus.managed.ManagedMode;
import com.oculus.profileapi.OVRProfile;
import com.oculus.profileapi.ProfileapiModule;
import com.oculus.util.device.DeviceModule;
import com.oculus.util.device.DeviceUtils;
import com.oculus.util.inject.UtilModule;
import com.oculus.util.vr.VRUtils;
import com.squareup.otto.Subscribe;
import java.util.Collection;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_managed_ManagedMode_ULSEP_BINDING_ID", "_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_autoupdates_AutoUpdateScheduler_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_autoupdates_PermissionManager_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_autoupdates_database_AutoUpdatesDBManager_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_autoupdates_AutoUpdateTimeTracker_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_profileapi_OVRProfile_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_util_vr_VRUtils_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID", "_UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_util_device_DeviceUtils_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_common_packagescache_PackageManagerUtils_ULSEP_BINDING_ID"})
public class AutoUpdatesManager {
    public static final String AUTO_UPDATE_CHECK = "moonlight_auto_update_check";
    public static final String AUTO_UPDATE_CHECK_BAIL = "moonlight_auto_update_check_bail";
    public static final String AUTO_UPDATE_ENQUEUE = "moonlight_auto_update_enqueue";
    public static final String BAIL_REASON = "bail_reason";
    public static final String ELIGIBLE = "eligible_for_auto_update";
    public static final String INSTALLED = "installed_entitlements";
    public static final String LAST_CHECK = "last_check_ms";
    public static final String NEW_PERMISSIONS = "new_permissions";
    public static final String NO_UPDATE = "no_updates";
    public static final String PAST_FAILURE = "past_update_failures";
    private static final String TAG = "AutoUpdatesManager";
    private InjectionContext _UL_mInjectionContext;
    private final boolean isEnterpriseModeEnabled;

    public enum AutoUpdateBlocker {
        NOT_LOGGED_IN,
        PERMISSION_OR_SETTINGS,
        BATTERY_TOO_LOW,
        DEVICE_IN_USE
    }

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_autoupdates_AutoUpdatesManager_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(AutoUpdatesModule.UL_id._UL__ULSEP_com_oculus_autoupdates_AutoUpdatesManager_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_autoupdates_AutoUpdatesManager_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(AutoUpdatesModule.UL_id._UL__ULSEP_com_oculus_autoupdates_AutoUpdatesManager_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final AutoUpdatesManager _UL__ULSEP_com_oculus_autoupdates_AutoUpdatesManager_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (AutoUpdatesManager) UL.factorymap.get(AutoUpdatesModule.UL_id._UL__ULSEP_com_oculus_autoupdates_AutoUpdatesManager_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final AutoUpdatesManager _UL__ULSEP_com_oculus_autoupdates_AutoUpdatesManager_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new AutoUpdatesManager(injectorLike, ManagedMode._UL__ULSEP_com_oculus_managed_ManagedMode_ULSEP_ACCESS_METHOD(injectorLike));
    }

    @Inject
    public AutoUpdatesManager(InjectorLike injectorLike, ManagedMode managedMode) {
        this._UL_mInjectionContext = new InjectionContext(13, injectorLike);
        this.isEnterpriseModeEnabled = managedMode.isEnterpriseModeEnabled();
    }

    public void logBailingFromAutoUpdateCheck(AutoUpdateBlocker autoUpdateBlocker) {
        ((EventManager) FbInjector.lazyInstance(8, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent(AUTO_UPDATE_CHECK_BAIL).addExtra(BAIL_REASON, autoUpdateBlocker.name()).addExtra(LAST_CHECK, ((AutoUpdateTimeTracker) FbInjector.lazyInstance(4, AutoUpdatesModule.UL_id._UL__ULSEP_com_oculus_autoupdates_AutoUpdateTimeTracker_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getTimeSinceLastCheckMs()).logAndRelease();
    }

    public Task<Integer> checkForUpdatesAndInstallIfNecessary() {
        boolean z = ((MobileConfig) FbInjector.lazyInstance(9, MobileConfigFactoryModule.UL_id._UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getBoolean(MC.oculus_library.auto_update_allow_while_in_use);
        if (((DeviceUtils) FbInjector.lazyInstance(11, DeviceModule.UL_id._UL__ULSEP_com_oculus_util_device_DeviceUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).isStandAloneDevice()) {
            BatteryManager batteryManager = (BatteryManager) ((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getSystemService("batterymanager");
            if (batteryManager == null) {
                ((IErrorReporter) FbInjector.lazyInstance(10, InterfacesModule.UL_id._UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_BINDING_ID, this._UL_mInjectionContext)).softError(TAG, "battery service not available");
                return Task.forResult(0);
            } else if (batteryManager.getIntProperty(4) < ((int) ((MobileConfig) FbInjector.lazyInstance(9, MobileConfigFactoryModule.UL_id._UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getLong(MC.oculus_library.auto_update_min_battery_percent))) {
                logBailingFromAutoUpdateCheck(AutoUpdateBlocker.BATTERY_TOO_LOW);
                BLog.i(TAG, "Battery level too low to initiate auto-update, bailing now.");
                return Task.forResult(0);
            }
        }
        if (!((OVRProfile) FbInjector.lazyInstance(6, ProfileapiModule.UL_id._UL__ULSEP_com_oculus_profileapi_OVRProfile_ULSEP_BINDING_ID, this._UL_mInjectionContext)).isUserLoggedIn() && !this.isEnterpriseModeEnabled) {
            logBailingFromAutoUpdateCheck(AutoUpdateBlocker.NOT_LOGGED_IN);
            BLog.d(TAG, "no user logged in.");
            return Task.forResult(0);
        } else if (!((VRUtils) FbInjector.lazyInstance(7, UtilModule.UL_id._UL__ULSEP_com_oculus_util_vr_VRUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).isInteractive() || z) {
            final TaskCompletionSource taskCompletionSource = new TaskCompletionSource();
            ((OVRLibrary) FbInjector.lazyInstance(5, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, this._UL_mInjectionContext)).refetch(new ResultReceiver(null) {
                /* class com.oculus.autoupdates.AutoUpdatesManager.AnonymousClass1 */

                /* access modifiers changed from: protected */
                public void onReceiveResult(int i, Bundle bundle) {
                    try {
                        taskCompletionSource.setResult(Integer.valueOf(AutoUpdatesManager.this.autoUpdate()));
                    } catch (Exception e) {
                        taskCompletionSource.setError(e);
                    }
                }
            });
            return taskCompletionSource.getTask();
        } else {
            logBailingFromAutoUpdateCheck(AutoUpdateBlocker.DEVICE_IN_USE);
            BLog.d(TAG, "device in use.");
            return Task.forResult(0);
        }
    }

    /* access modifiers changed from: package-private */
    @VisibleForTesting
    public int autoUpdate() {
        BLog.d(TAG, "autoUpdate");
        ImmutableList.Builder builder = ImmutableList.builder();
        for (App app : ((OVRLibrary) FbInjector.lazyInstance(5, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getAllApps()) {
            builder.add((Object) app);
        }
        AutoUpdateJob build = new AutoUpdateJob.Builder().withAutoUpdatesDBManager((AutoUpdatesDBManager) FbInjector.lazyInstance(3, AutoUpdatesModule.UL_id._UL__ULSEP_com_oculus_autoupdates_database_AutoUpdatesDBManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).withPermissionsManager((PermissionManager) FbInjector.lazyInstance(2, AutoUpdatesModule.UL_id._UL__ULSEP_com_oculus_autoupdates_PermissionManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).withEntitlements(builder.build()).withMaxRetries((int) ((MobileConfig) FbInjector.lazyInstance(9, MobileConfigFactoryModule.UL_id._UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getLong(MC.oculus_library.auto_update_max_retries)).withPackageManagerUtils((PackageManagerUtils) FbInjector.lazyInstance(12, PackagesCacheModule.UL_id._UL__ULSEP_com_oculus_common_packagescache_PackageManagerUtils_ULSEP_BINDING_ID, this._UL_mInjectionContext)).build();
        String loggableEntitlementsString = toLoggableEntitlementsString(build.updateableEntitlements);
        if (!((AutoUpdateScheduler) FbInjector.lazyInstance(1, AutoUpdatesModule.UL_id._UL__ULSEP_com_oculus_autoupdates_AutoUpdateScheduler_ULSEP_BINDING_ID, this._UL_mInjectionContext)).shouldInstallAutoUpdates(this.isEnterpriseModeEnabled)) {
            logBailingFromAutoUpdateCheck(AutoUpdateBlocker.PERMISSION_OR_SETTINGS);
            BLog.d(TAG, "auto-updates disabled");
            return 0;
        }
        ((EventManager) FbInjector.lazyInstance(8, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent(AUTO_UPDATE_CHECK).addExtra(INSTALLED, toLoggableEntitlementsString(build.installedEntitlements)).addExtra(NO_UPDATE, toLoggableEntitlementsString(build.entitlementsWithoutUpdates)).addExtra(NEW_PERMISSIONS, toLoggableEntitlementsString(build.entitlementsWithPermissionChanges)).addExtra(PAST_FAILURE, toLoggableEntitlementsString(build.entitlementsWithPastUpdateFailures)).addExtra(ELIGIBLE, loggableEntitlementsString).addExtra(LAST_CHECK, ((AutoUpdateTimeTracker) FbInjector.lazyInstance(4, AutoUpdatesModule.UL_id._UL__ULSEP_com_oculus_autoupdates_AutoUpdateTimeTracker_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getTimeSinceLastCheckMs()).logAndRelease();
        BLog.d(TAG, "Auto update check completed. installed=%s unupdatable_system=%s no_update=%s new_perms=%s past_fail=%s eligible=%s", Integer.valueOf(build.installedEntitlements.size()), Integer.valueOf(build.unupdateableSystemApps.size()), Integer.valueOf(build.entitlementsWithoutUpdates.size()), Integer.valueOf(build.entitlementsWithPermissionChanges.size()), Integer.valueOf(build.entitlementsWithPastUpdateFailures.size()), Integer.valueOf(build.updateableEntitlements.size()));
        ((AutoUpdateTimeTracker) FbInjector.lazyInstance(4, AutoUpdatesModule.UL_id._UL__ULSEP_com_oculus_autoupdates_AutoUpdateTimeTracker_ULSEP_BINDING_ID, this._UL_mInjectionContext)).onUpdateChecked();
        boolean z = !build.updateableEntitlements.isEmpty();
        if (((AutoUpdateScheduler) FbInjector.lazyInstance(1, AutoUpdatesModule.UL_id._UL__ULSEP_com_oculus_autoupdates_AutoUpdateScheduler_ULSEP_BINDING_ID, this._UL_mInjectionContext)).shouldInstallAutoUpdates(this.isEnterpriseModeEnabled) && z) {
            ((EventManager) FbInjector.lazyInstance(8, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent(AUTO_UPDATE_ENQUEUE).addExtra(ELIGIBLE, loggableEntitlementsString).logAndRelease();
            UnmodifiableIterator<App> it = build.updateableEntitlements.iterator();
            while (it.hasNext()) {
                App next = it.next();
                if (!this.isEnterpriseModeEnabled || next.autoUpdateEnabled) {
                    startUpdate(next.packageName);
                }
            }
        }
        return build.updateableEntitlements.size();
    }

    private void startUpdate(final String str) {
        BLog.i(TAG, "Auto update process started for %s", str);
        ((OVRLibrary) FbInjector.lazyInstance(5, OVRLibraryModule.UL_id._UL__ULSEP_com_oculus_libraryapi_OVRLibrary_ULSEP_BINDING_ID, this._UL_mInjectionContext)).downloadAndInstall(str, RequestOrigin.AUTOUPDATE, new InstallerCallback() {
            /* class com.oculus.autoupdates.AutoUpdatesManager.AnonymousClass2 */

            @Override // com.oculus.library.model.InstallerCallback
            public void onInstallerResult(InstallerResult installerResult) {
                if (installerResult.isSuccess()) {
                    BLog.i(AutoUpdatesManager.TAG, "Auto update successful for %s", str);
                } else {
                    BLog.i(AutoUpdatesManager.TAG, "Auto update failed for %s. Failure: %s", str, installerResult.error.name());
                }
            }
        });
    }

    @Subscribe
    public void onInstallResponse(final InstallResponse installResponse) {
        ListenableFuture listenableFuture;
        if (installResponse.isUpdate && !installResponse.isSuccess) {
            AutoUpdateRecord record = ((AutoUpdatesDBManager) FbInjector.lazyInstance(3, AutoUpdatesModule.UL_id._UL__ULSEP_com_oculus_autoupdates_database_AutoUpdatesDBManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getRecord(installResponse.installIdentifier, installResponse.versionCode);
            if (record == null) {
                listenableFuture = ((AutoUpdatesDBManager) FbInjector.lazyInstance(3, AutoUpdatesModule.UL_id._UL__ULSEP_com_oculus_autoupdates_database_AutoUpdatesDBManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).scheduleInsertRecord(new AutoUpdateRecord(installResponse.installIdentifier, installResponse.versionCode, 1));
            } else {
                record.increaseAttemptCount();
                listenableFuture = ((AutoUpdatesDBManager) FbInjector.lazyInstance(3, AutoUpdatesModule.UL_id._UL__ULSEP_com_oculus_autoupdates_database_AutoUpdatesDBManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).scheduleUpdateRecord(record);
            }
            Futures.addCallback(listenableFuture, new FutureCallback<Object>() {
                /* class com.oculus.autoupdates.AutoUpdatesManager.AnonymousClass3 */

                @Override // com.google.common.util.concurrent.FutureCallback
                public void onSuccess(Object obj) {
                    BLog.d(AutoUpdatesManager.TAG, "recorded auto-update failure in db for %s:%d", installResponse.installIdentifier, Integer.valueOf(installResponse.versionCode));
                }

                @Override // com.google.common.util.concurrent.FutureCallback
                public void onFailure(Throwable th) {
                    if (!(th instanceof SQLiteConstraintException)) {
                        ((IErrorReporter) FbInjector.lazyInstance(10, InterfacesModule.UL_id._UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_BINDING_ID, AutoUpdatesManager.this._UL_mInjectionContext)).softError(AutoUpdatesManager.TAG, "failed to record auto-update failure in db for " + "packageName=" + installResponse.installIdentifier + " versionCode=" + installResponse.versionCode + " throwable" + th);
                    }
                }
            }, MoreExecutors.directExecutor());
        }
    }

    /* access modifiers changed from: private */
    public static class AutoUpdateJob {
        public final ImmutableList<App> entitlementsWithPastUpdateFailures;
        public final ImmutableList<App> entitlementsWithPermissionChanges;
        public final ImmutableList<App> entitlementsWithoutUpdates;
        public final ImmutableList<App> installedEntitlements;
        public final ImmutableList<App> unupdateableSystemApps;
        public final ImmutableList<App> updateableEntitlements;

        public AutoUpdateJob(ImmutableList<App> immutableList, ImmutableList<App> immutableList2, ImmutableList<App> immutableList3, ImmutableList<App> immutableList4, ImmutableList<App> immutableList5, ImmutableList<App> immutableList6) {
            this.installedEntitlements = immutableList;
            this.entitlementsWithoutUpdates = immutableList2;
            this.entitlementsWithPermissionChanges = immutableList3;
            this.entitlementsWithPastUpdateFailures = immutableList4;
            this.updateableEntitlements = immutableList5;
            this.unupdateableSystemApps = immutableList6;
        }

        public static class Builder {
            private AutoUpdatesDBManager mAutoUpdatesDBManager;
            private ImmutableList<App> mEntitlements;
            private Integer mMaxRetries;
            private PackageManagerUtils mPackageManagerUtils;
            private PermissionManager mPermissionManager;

            public Builder withEntitlements(ImmutableList<App> immutableList) {
                this.mEntitlements = immutableList;
                return this;
            }

            public Builder withPermissionsManager(PermissionManager permissionManager) {
                this.mPermissionManager = permissionManager;
                return this;
            }

            public Builder withAutoUpdatesDBManager(AutoUpdatesDBManager autoUpdatesDBManager) {
                this.mAutoUpdatesDBManager = autoUpdatesDBManager;
                return this;
            }

            public Builder withMaxRetries(int i) {
                this.mMaxRetries = Integer.valueOf(i);
                return this;
            }

            public Builder withPackageManagerUtils(PackageManagerUtils packageManagerUtils) {
                this.mPackageManagerUtils = packageManagerUtils;
                return this;
            }

            public AutoUpdateJob build() {
                ApplicationInfo applicationInfo;
                Preconditions.checkNotNull(this.mPermissionManager);
                Preconditions.checkNotNull(this.mAutoUpdatesDBManager);
                Preconditions.checkNotNull(this.mEntitlements);
                Preconditions.checkNotNull(this.mMaxRetries);
                Preconditions.checkNotNull(this.mPackageManagerUtils);
                ImmutableList.Builder builder = new ImmutableList.Builder();
                ImmutableList.Builder builder2 = new ImmutableList.Builder();
                ImmutableList.Builder builder3 = new ImmutableList.Builder();
                ImmutableList.Builder builder4 = new ImmutableList.Builder();
                ImmutableList.Builder builder5 = new ImmutableList.Builder();
                ImmutableList.Builder builder6 = new ImmutableList.Builder();
                UnmodifiableIterator<App> it = this.mEntitlements.iterator();
                while (it.hasNext()) {
                    App next = it.next();
                    if (next.isInstalled()) {
                        builder.add((Object) next);
                        if (BuildConstants.DEBUG && (applicationInfo = this.mPackageManagerUtils.getApplicationInfo(next.packageName, 0)) != null && ((applicationInfo.flags & 1) != 0 || (applicationInfo.flags & 128) != 0)) {
                            BLog.v(AutoUpdatesManager.TAG, "Skipping update for debug signed system app: %s", next.packageName);
                            builder2.add((Object) next);
                        } else if (!next.hasUpdate()) {
                            builder3.add((Object) next);
                        } else if ((Build.VERSION.SDK_INT < 23 || next.latestTargetSdkVersion < 23) && !this.mPermissionManager.getDangerousPermissionsDifference(next.packageName, ImmutableSet.copyOf((Collection) next.latestPermissions)).isEmpty()) {
                            builder4.add((Object) next);
                        } else {
                            AutoUpdateRecord record = this.mAutoUpdatesDBManager.getRecord(next.packageName, (int) next.latestVersionCode);
                            if (record == null || record.getAutoUpdateAttempts() < this.mMaxRetries.intValue()) {
                                builder6.add((Object) next);
                            } else {
                                builder5.add((Object) next);
                            }
                        }
                    }
                }
                return new AutoUpdateJob(builder.build(), builder3.build(), builder4.build(), builder5.build(), builder6.build(), builder2.build());
            }
        }
    }

    public static String toLoggableEntitlementsString(ImmutableList<App> immutableList) {
        return Joiner.on(',').join(Collections2.transform(immutableList, new Function<App, String>() {
            /* class com.oculus.autoupdates.AutoUpdatesManager.AnonymousClass4 */

            public String apply(App app) {
                return app.id + ':' + app.latestVersionCode;
            }
        }));
    }
}
