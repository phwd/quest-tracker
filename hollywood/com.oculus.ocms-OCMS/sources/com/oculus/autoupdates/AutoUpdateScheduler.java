package com.oculus.autoupdates;

import android.app.job.JobInfo;
import android.app.job.JobScheduler;
import android.content.ComponentName;
import android.content.Context;
import androidx.core.content.ContextCompat;
import com.facebook.debug.log.BLog;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.FbInjector;
import com.facebook.inject.InjectionContext;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightSingletonProvider;
import com.facebook.mobileconfig.factory.MobileConfig;
import com.facebook.mobileconfig.factory.module.MobileConfigFactoryModule;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.facebook.ultralight.UL;
import com.oculus.autoupdates.AutoUpdatesModule;
import com.oculus.autoupdates.MC;
import com.oculus.errorreporting.interfaces.IErrorReporter;
import com.oculus.errorreporting.interfaces.InterfacesModule;
import com.oculus.logging.utils.EventManager;
import com.oculus.logging.utils.UtilsModule;
import com.oculus.profileapi.OVRProfile;
import com.oculus.profileapi.ProfileapiModule;
import com.oculus.util.constants.JobSchedulerIds;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_profileapi_OVRProfile_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID", "_UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID", "_UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_BINDING_ID"})
@ApplicationScoped
public class AutoUpdateScheduler {
    public static final String AUTO_UPDATE_SCHEDULED = "moonlight_auto_update_scheduled";
    private static final String TAG = "AutoUpdateScheduler";
    private static volatile AutoUpdateScheduler _UL__ULSEP_com_oculus_autoupdates_AutoUpdateScheduler_ULSEP_INSTANCE;
    private InjectionContext _UL_mInjectionContext;

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_autoupdates_AutoUpdateScheduler_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(AutoUpdatesModule.UL_id._UL__ULSEP_com_oculus_autoupdates_AutoUpdateScheduler_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final AutoUpdateScheduler _UL__ULSEP_com_oculus_autoupdates_AutoUpdateScheduler_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (AutoUpdateScheduler) UL.factorymap.get(AutoUpdatesModule.UL_id._UL__ULSEP_com_oculus_autoupdates_AutoUpdateScheduler_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final AutoUpdateScheduler _UL__ULSEP_com_oculus_autoupdates_AutoUpdateScheduler_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_autoupdates_AutoUpdateScheduler_ULSEP_INSTANCE == null) {
            synchronized (AutoUpdateScheduler.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_autoupdates_AutoUpdateScheduler_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        _UL__ULSEP_com_oculus_autoupdates_AutoUpdateScheduler_ULSEP_INSTANCE = new AutoUpdateScheduler(injectorLike.getApplicationInjector());
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_autoupdates_AutoUpdateScheduler_ULSEP_INSTANCE;
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_autoupdates_AutoUpdateScheduler_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(AutoUpdatesModule.UL_id._UL__ULSEP_com_oculus_autoupdates_AutoUpdateScheduler_ULSEP_BINDING_ID, injectorLike);
    }

    @Inject
    public AutoUpdateScheduler(InjectorLike injectorLike) {
        this._UL_mInjectionContext = new InjectionContext(5, injectorLike);
    }

    public boolean shouldInstallAutoUpdates(boolean z) {
        return isAutoUpdatesSettingEnabled(z);
    }

    public boolean maybeScheduleAutoUpdates() {
        if (isAutoUpdateJobScheduled()) {
            return false;
        }
        scheduleAutoUpdateJob();
        return true;
    }

    public boolean isAutoUpdatesSettingEnabled(boolean z) {
        if (ContextCompat.checkSelfPermission((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext), "android.permission.WRITE_EXTERNAL_STORAGE") != 0) {
            return false;
        }
        if (z) {
            return true;
        }
        return ((OVRProfile) FbInjector.lazyInstance(1, ProfileapiModule.UL_id._UL__ULSEP_com_oculus_profileapi_OVRProfile_ULSEP_BINDING_ID, this._UL_mInjectionContext)).isAutoUpdatesEnabled();
    }

    private boolean isAutoUpdateJobScheduled() {
        for (JobInfo jobInfo : getJobScheduler().getAllPendingJobs()) {
            if (jobInfo.getId() == 1828726819 && jobInfo.getService().getClassName().equals(AutoUpdateJobService.class.getName())) {
                return true;
            }
        }
        return false;
    }

    private void scheduleAutoUpdateJob() {
        int schedule = getJobScheduler().schedule(new JobInfo.Builder(JobSchedulerIds.AUTO_UPDATE, new ComponentName((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext), AutoUpdateJobService.class.getName())).setRequiredNetworkType(2).setBackoffCriteria(((MobileConfig) FbInjector.lazyInstance(3, MobileConfigFactoryModule.UL_id._UL__ULSEP_com_facebook_mobileconfig_factory_MobileConfig_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getLong(MC.oculus_library.auto_update_interval_ms), 0).build());
        if (schedule == 1) {
            BLog.d(TAG, "job schedule succeeded for %s", ((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getPackageName());
            ((EventManager) FbInjector.lazyInstance(2, UtilsModule.UL_id._UL__ULSEP_com_oculus_logging_utils_EventManager_ULSEP_BINDING_ID, this._UL_mInjectionContext)).createEvent(AUTO_UPDATE_SCHEDULED).logAndRelease();
            return;
        }
        String str = TAG;
        ((IErrorReporter) FbInjector.lazyInstance(4, InterfacesModule.UL_id._UL__ULSEP_com_oculus_errorreporting_interfaces_IErrorReporter_ULSEP_BINDING_ID, this._UL_mInjectionContext)).softError(str, "Auto-update job schedule failed (error code: " + schedule + ")");
    }

    private void cancelScheduledAutoUpdateJob() {
        getJobScheduler().cancel(JobSchedulerIds.AUTO_UPDATE);
    }

    private JobScheduler getJobScheduler() {
        return (JobScheduler) ((Context) FbInjector.lazyInstance(0, BundledAndroidModule.UL_id._UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID, this._UL_mInjectionContext)).getSystemService("jobscheduler");
    }
}
