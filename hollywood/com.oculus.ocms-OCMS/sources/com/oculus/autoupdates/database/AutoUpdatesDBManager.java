package com.oculus.autoupdates.database;

import android.content.ContentValues;
import android.database.Cursor;
import android.database.CursorWrapper;
import android.database.SQLException;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightSingletonProvider;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.UL;
import com.google.common.util.concurrent.ListenableFuture;
import com.google.common.util.concurrent.ListeningExecutorService;
import com.oculus.autoupdates.AutoUpdateExecutor;
import com.oculus.autoupdates.AutoUpdatesModule;
import com.oculus.autoupdates.database.AutoUpdatesDBContract;
import java.util.concurrent.Callable;
import javax.inject.Inject;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_autoupdates_database_AutoUpdatesDBHelper_ULSEP_BINDING_ID", "_UL__ULSEP_com_google_common_util_concurrent_ListeningExecutorService_ULSEP_com_oculus_autoupdates_AutoUpdateExecutor_ULSEP_BINDING_ID"})
@ApplicationScoped
public class AutoUpdatesDBManager {
    private static volatile AutoUpdatesDBManager _UL__ULSEP_com_oculus_autoupdates_database_AutoUpdatesDBManager_ULSEP_INSTANCE;
    private final AutoUpdatesDBHelper mAutoUpdatesDBHelper;
    private final ListeningExecutorService mUpdateService;

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_autoupdates_database_AutoUpdatesDBManager_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(AutoUpdatesModule.UL_id._UL__ULSEP_com_oculus_autoupdates_database_AutoUpdatesDBManager_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final AutoUpdatesDBManager _UL__ULSEP_com_oculus_autoupdates_database_AutoUpdatesDBManager_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (AutoUpdatesDBManager) UL.factorymap.get(AutoUpdatesModule.UL_id._UL__ULSEP_com_oculus_autoupdates_database_AutoUpdatesDBManager_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final AutoUpdatesDBManager _UL__ULSEP_com_oculus_autoupdates_database_AutoUpdatesDBManager_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        if (_UL__ULSEP_com_oculus_autoupdates_database_AutoUpdatesDBManager_ULSEP_INSTANCE == null) {
            synchronized (AutoUpdatesDBManager.class) {
                ApplicationScopeClassInit start = ApplicationScopeClassInit.start(_UL__ULSEP_com_oculus_autoupdates_database_AutoUpdatesDBManager_ULSEP_INSTANCE, injectorLike);
                if (start != null) {
                    try {
                        InjectorLike applicationInjector = injectorLike.getApplicationInjector();
                        _UL__ULSEP_com_oculus_autoupdates_database_AutoUpdatesDBManager_ULSEP_INSTANCE = new AutoUpdatesDBManager(AutoUpdatesModule._UL__ULSEP_com_oculus_autoupdates_database_AutoUpdatesDBHelper_ULSEP_ACCESS_METHOD(applicationInjector), AutoUpdatesModule._UL__ULSEP_com_google_common_util_concurrent_ListeningExecutorService_ULSEP_com_oculus_autoupdates_AutoUpdateExecutor_ULSEP_ACCESS_METHOD(applicationInjector));
                    } finally {
                        start.finish();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_autoupdates_database_AutoUpdatesDBManager_ULSEP_INSTANCE;
    }

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_autoupdates_database_AutoUpdatesDBManager_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightSingletonProvider.get(AutoUpdatesModule.UL_id._UL__ULSEP_com_oculus_autoupdates_database_AutoUpdatesDBManager_ULSEP_BINDING_ID, injectorLike);
    }

    @Inject
    public AutoUpdatesDBManager(AutoUpdatesDBHelper autoUpdatesDBHelper, @AutoUpdateExecutor ListeningExecutorService listeningExecutorService) {
        this.mAutoUpdatesDBHelper = autoUpdatesDBHelper;
        this.mUpdateService = listeningExecutorService;
    }

    public long insertRecord(AutoUpdateRecord autoUpdateRecord) throws SQLException {
        return this.mAutoUpdatesDBHelper.getWritableDatabase().insertOrThrow(AutoUpdatesDBContract.AutoUpdatesDBTable.NAME, null, getContentValues(autoUpdateRecord));
    }

    public ListenableFuture<Long> scheduleInsertRecord(final AutoUpdateRecord autoUpdateRecord) {
        return this.mUpdateService.submit((Callable) new Callable<Long>() {
            /* class com.oculus.autoupdates.database.AutoUpdatesDBManager.AnonymousClass1 */

            @Override // java.util.concurrent.Callable
            public Long call() throws Exception {
                return Long.valueOf(AutoUpdatesDBManager.this.insertRecord(autoUpdateRecord));
            }
        });
    }

    public ListenableFuture<Integer> scheduleUpdateRecord(final AutoUpdateRecord autoUpdateRecord) {
        return this.mUpdateService.submit((Callable) new Callable<Integer>() {
            /* class com.oculus.autoupdates.database.AutoUpdatesDBManager.AnonymousClass2 */

            @Override // java.util.concurrent.Callable
            public Integer call() throws Exception {
                return Integer.valueOf(AutoUpdatesDBManager.this.updateRecord(autoUpdateRecord));
            }
        });
    }

    public int updateRecord(AutoUpdateRecord autoUpdateRecord) {
        return this.mAutoUpdatesDBHelper.getWritableDatabase().update(AutoUpdatesDBContract.AutoUpdatesDBTable.NAME, getContentValues(autoUpdateRecord), "package_name = ? AND version_code = ?", new String[]{autoUpdateRecord.getPackageName(), String.valueOf(autoUpdateRecord.getVersionCode())});
    }

    public AutoUpdateRecord getRecord(String str, int i) {
        AutoUpdateRecordCursorWrapper queryRecords = queryRecords("package_name = ? AND version_code = ?", new String[]{str, String.valueOf(i)});
        try {
            if (queryRecords.getCount() == 0) {
                return null;
            }
            queryRecords.moveToFirst();
            AutoUpdateRecord record = queryRecords.getRecord();
            queryRecords.close();
            return record;
        } finally {
            queryRecords.close();
        }
    }

    private AutoUpdateRecordCursorWrapper queryRecords(String str, String[] strArr) {
        return new AutoUpdateRecordCursorWrapper(this.mAutoUpdatesDBHelper.getWritableDatabase().query(AutoUpdatesDBContract.AutoUpdatesDBTable.NAME, null, str, strArr, null, null, null));
    }

    private static final ContentValues getContentValues(AutoUpdateRecord autoUpdateRecord) {
        ContentValues contentValues = new ContentValues();
        contentValues.put("package_name", autoUpdateRecord.getPackageName());
        contentValues.put(AutoUpdatesDBContract.AutoUpdatesDBTable.COLS.VERSION_CODE, Integer.valueOf(autoUpdateRecord.getVersionCode()));
        contentValues.put(AutoUpdatesDBContract.AutoUpdatesDBTable.COLS.ATTEMPTS, Integer.valueOf(autoUpdateRecord.getAutoUpdateAttempts()));
        return contentValues;
    }

    /* access modifiers changed from: private */
    public static class AutoUpdateRecordCursorWrapper extends CursorWrapper {
        public AutoUpdateRecordCursorWrapper(Cursor cursor) {
            super(cursor);
        }

        public AutoUpdateRecord getRecord() {
            return new AutoUpdateRecord(getString(getColumnIndex("package_name")), getInt(getColumnIndex(AutoUpdatesDBContract.AutoUpdatesDBTable.COLS.VERSION_CODE)), getInt(getColumnIndex(AutoUpdatesDBContract.AutoUpdatesDBTable.COLS.ATTEMPTS)));
        }
    }
}
