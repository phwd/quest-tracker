package com.oculus.autoupdates.dumper;

import bolts.Task;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.Lazy;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.stetho.dumpapp.DumpException;
import com.facebook.stetho.dumpapp.DumperContext;
import com.facebook.stetho.dumpapp.DumperPlugin;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.UL;
import com.oculus.autoupdates.AutoUpdatesManager;
import com.oculus.autoupdates.dumper.AutoUpdatesDumperModule;
import java.io.PrintStream;
import java.util.List;
import javax.inject.Inject;
import javax.inject.Provider;

@Dependencies({"_UL__ULSEP_com_oculus_autoupdates_AutoUpdatesManager_ULSEP_BINDING_ID"})
public class AutoUpdatesDumperPlugin implements DumperPlugin {
    private static final String CMD_CHECK_AND_INSTALL = "check_and_install";
    private static final String NAME = "autoupdates";
    private final AutoUpdatesManager mAutoUpdatesManager;

    @AutoGeneratedAccessMethod
    public static final Provider _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_autoupdates_dumper_AutoUpdatesDumperPlugin_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightProvider.get(AutoUpdatesDumperModule.UL_id._UL__ULSEP_com_oculus_autoupdates_dumper_AutoUpdatesDumperPlugin_ULSEP_BINDING_ID, injectorLike);
    }

    @Override // com.facebook.stetho.dumpapp.DumperPlugin
    public String getName() {
        return "autoupdates";
    }

    @AutoGeneratedAccessMethod
    public static final Lazy _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_autoupdates_dumper_AutoUpdatesDumperPlugin_ULGT__ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return UltralightLazy.get(AutoUpdatesDumperModule.UL_id._UL__ULSEP_com_oculus_autoupdates_dumper_AutoUpdatesDumperPlugin_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedAccessMethod
    public static final AutoUpdatesDumperPlugin _UL__ULSEP_com_oculus_autoupdates_dumper_AutoUpdatesDumperPlugin_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (AutoUpdatesDumperPlugin) UL.factorymap.get(AutoUpdatesDumperModule.UL_id._UL__ULSEP_com_oculus_autoupdates_dumper_AutoUpdatesDumperPlugin_ULSEP_BINDING_ID, injectorLike);
    }

    @AutoGeneratedFactoryMethod
    public static final AutoUpdatesDumperPlugin _UL__ULSEP_com_oculus_autoupdates_dumper_AutoUpdatesDumperPlugin_ULSEP_FACTORY_METHOD(InjectorLike injectorLike) {
        return new AutoUpdatesDumperPlugin(AutoUpdatesManager._UL__ULSEP_com_oculus_autoupdates_AutoUpdatesManager_ULSEP_ACCESS_METHOD(injectorLike));
    }

    @Inject
    public AutoUpdatesDumperPlugin(AutoUpdatesManager autoUpdatesManager) {
        this.mAutoUpdatesManager = autoUpdatesManager;
    }

    @Override // com.facebook.stetho.dumpapp.DumperPlugin
    public void dump(DumperContext dumperContext) throws DumpException {
        PrintStream stdout = dumperContext.getStdout();
        List<String> argsAsList = dumperContext.getArgsAsList();
        if (argsAsList.size() < 1) {
            stdout.println("Missing command");
            printUsage(stdout);
            return;
        }
        char c = 0;
        String str = argsAsList.get(0);
        if (str.hashCode() != 2066249340 || !str.equals(CMD_CHECK_AND_INSTALL)) {
            c = 65535;
        }
        if (c == 0) {
            doCheckAndInstall(stdout);
        }
    }

    private void doCheckAndInstall(PrintStream printStream) throws DumpException {
        Task<Integer> checkForUpdatesAndInstallIfNecessary = this.mAutoUpdatesManager.checkForUpdatesAndInstallIfNecessary();
        try {
            checkForUpdatesAndInstallIfNecessary.waitForCompletion();
            if (checkForUpdatesAndInstallIfNecessary.isFaulted()) {
                Exception error = checkForUpdatesAndInstallIfNecessary.getError();
                throw new DumpException(error.getClass().getName() + ": " + error.getMessage());
            } else if (checkForUpdatesAndInstallIfNecessary.isCancelled()) {
                printStream.print("Auto updates cancelled");
            } else {
                printStream.format("Enqueued %d updates", checkForUpdatesAndInstallIfNecessary.getResult());
                printStream.println();
            }
        } catch (InterruptedException e) {
            throw new DumpException(e.getClass().getName() + ": " + e.getMessage());
        }
    }

    private static void printUsage(PrintStream printStream) {
        printStream.format("%s <command>\n", "Usage: " + "dumpapp autoupdates");
        printStream.format("%s %s\n", "       " + "dumpapp autoupdates", CMD_CHECK_AND_INSTALL);
        printStream.println();
        printStream.format("%s %s: Check for updates and install\n", "dumpapp autoupdates", CMD_CHECK_AND_INSTALL);
        printStream.println();
    }
}
