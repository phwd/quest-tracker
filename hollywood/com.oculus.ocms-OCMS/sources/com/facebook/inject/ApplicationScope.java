package com.facebook.inject;

import android.annotation.SuppressLint;
import android.content.Context;
import com.facebook.infer.annotation.Assertions;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.UL;
import com.google.inject.Key;
import java.lang.annotation.Annotation;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import javax.annotation.Nullable;
import javax.inject.Provider;

@ApplicationScoped
public class ApplicationScope implements Scope {
    private static final Map<Integer, Object> applicationScopedCache = Collections.synchronizedMap(new HashMap());
    private final Context mAppContext;
    private final FbInjector mInjector;
    private final ApplicationScopeAwareInjector mScopeAwareInjector = new ApplicationScopeAwareInjector(this.mInjector, this);

    @AutoGeneratedAccessMethod
    public static final ApplicationScope _UL__ULSEP_com_facebook_inject_ApplicationScope_ULSEP_ACCESS_METHOD(InjectorLike injectorLike) {
        return (ApplicationScope) UL.factorymap.get(BundledAndroidModule.UL_id._UL__ULSEP_com_facebook_inject_ApplicationScope_ULSEP_BINDING_ID, injectorLike);
    }

    public ApplicationScope(FbInjector fbInjector) {
        this.mInjector = fbInjector;
        this.mAppContext = fbInjector.getInjectorThreadStack().getContext();
    }

    @Override // com.facebook.inject.Scope
    public Class<? extends Annotation> annotationType() {
        return ApplicationScoped.class;
    }

    @Override // com.facebook.inject.Scope
    public <T> Provider<T> scope(Key<T> key, Provider<T> provider) {
        return new ApplicationScopeProvider(this, provider);
    }

    public InjectorThreadStack enterScope() {
        InjectorThreadStack injectorThreadStack = this.mInjector.getInjectorThreadStack();
        injectorThreadStack.enterAppContext();
        injectorThreadStack.pushInjector(this.mScopeAwareInjector);
        return injectorThreadStack;
    }

    public void exitScope(InjectorThreadStack injectorThreadStack) {
        injectorThreadStack.exitContext();
        injectorThreadStack.popInjector();
    }

    public Context getContext() {
        return this.mAppContext;
    }

    public static <T extends Scoped<ApplicationScope>> T get(Class<? extends T> cls) {
        return (T) get(cls, null);
    }

    public static <T extends Scoped<ApplicationScope>> T get(Class<? extends T> cls, @Nullable Class cls2) {
        Assertions.assertUnreachable("Fallback was called and not implemented yet");
        return (T) get(RuntimeBindingIdUtils.getBindingIdFromClasses(cls, cls2));
    }

    @SuppressLint({"BadArgument-FbInjector#get-0"})
    public static <T extends Scoped<ApplicationScope>> T get(int i) {
        T t = (T) ((Scoped) applicationScopedCache.get(Integer.valueOf(i)));
        if (t != null) {
            return t;
        }
        T t2 = (T) ((Scoped) Ultralight.get(i, (Context) Assertions.assertNotNull(FbInjector.getApplication())));
        applicationScopedCache.put(Integer.valueOf(i), t2);
        return t2;
    }

    public static <T extends Scoped<ApplicationScope>> Lazy<T> lazy(Class<? extends Scoped<ApplicationScope>> cls) {
        return lazy(cls, null);
    }

    public static <T extends Scoped<ApplicationScope>> Lazy<T> lazy(Class<? extends Scoped<ApplicationScope>> cls, @Nullable Class cls2) {
        Assertions.assertUnreachable("Fallback was called and not implemented yet");
        return new Lazy(RuntimeBindingIdUtils.getBindingIdFromClasses(cls, cls2));
    }

    public static <T extends Scoped<ApplicationScope>> Lazy<T> lazy(int i) {
        return new Lazy(i);
    }

    /* access modifiers changed from: private */
    public static class Lazy<T extends Scoped<ApplicationScope>> implements Lazy<T> {
        private final int mBindingId;
        private T mInstance;

        private Lazy(int i) {
            this.mBindingId = i;
        }

        @Override // com.facebook.inject.Lazy, javax.inject.Provider
        public T get() {
            if (this.mInstance == null) {
                this.mInstance = (T) ApplicationScope.get(this.mBindingId);
            }
            return this.mInstance;
        }
    }
}
