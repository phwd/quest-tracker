package com.oculus.auth.device;

import X.AbstractC02980bI;
import X.AbstractC02990bJ;
import X.AbstractC07240oz;
import X.AnonymousClass0Ld;
import X.AnonymousClass0Lh;
import X.AnonymousClass0NK;
import X.AnonymousClass0Qe;
import X.AnonymousClass0R7;
import X.AnonymousClass13m;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.IBinder;
import android.os.RemoteException;
import com.facebook.inject.ApplicationScoped;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.Dependencies;
import com.facebook.ultralight.Inject;
import com.oculus.aidl.IDeviceAuthService;
import com.oculus.util.constants.OculusConstants;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentLinkedDeque;
import javax.annotation.Nullable;

@Dependencies({"_UL__ULSEP_com_oculus_auth_device_DeviceAuthTokenSubscriber_ULSEP_BINDING_ID", "_UL__ULSEP_android_content_Context_ULSEP_com_facebook_inject_ForAppContext_ULSEP_BINDING_ID"})
@ApplicationScoped
public class DeviceAuthTokenStore {
    public static final String ACTION_REFRESH_TOKEN = "REFRESH_TOKEN";
    public static final String DEVICE_AUTH_SERVER_CLASS = "com.oculus.deviceauthserver.DeviceAuthService";
    public static final String DEVICE_AUTH_SERVER_PACKAGE = "com.oculus.deviceauthserver";
    public static final String TAG = "DeviceAuthTokenStore";
    public static volatile DeviceAuthTokenStore _UL__ULSEP_com_oculus_auth_device_DeviceAuthTokenStore_ULSEP_INSTANCE;
    public AnonymousClass0R7 _UL_mInjectionContext;
    @Nullable
    public String mAuthToken = null;
    public final ConcurrentLinkedDeque<CompletableFuture<String>> mFutures = new ConcurrentLinkedDeque<>();
    public final ServiceConnection mServiceConnection = new ServiceConnection() {
        /* class com.oculus.auth.device.DeviceAuthTokenStore.AnonymousClass1 */

        public void onServiceDisconnected(ComponentName componentName) {
        }

        public void onServiceConnected(ComponentName componentName, IBinder iBinder) {
            IDeviceAuthService asInterface = IDeviceAuthService.Stub.asInterface(iBinder);
            try {
                DeviceAuthTokenStore.this.mAuthToken = asInterface.getDeviceAuthToken(OculusConstants.ALPENGLOW_HW_LOGINTOKEN);
                DeviceAuthTokenStore deviceAuthTokenStore = DeviceAuthTokenStore.this;
                AnonymousClass0R7 r1 = deviceAuthTokenStore._UL_mInjectionContext;
                ((DeviceAuthTokenSubscriber) AnonymousClass0Lh.A03(0, 29, r1)).onTokenRefresh((Context) AnonymousClass0Lh.A03(1, 4, r1), deviceAuthTokenStore.mAuthToken);
                while (!DeviceAuthTokenStore.this.mFutures.isEmpty()) {
                    DeviceAuthTokenStore.this.mFutures.remove().complete(DeviceAuthTokenStore.this.mAuthToken);
                }
            } catch (RemoteException e) {
                AnonymousClass0NK.A04(DeviceAuthTokenStore.TAG, "failed to fetch auth token", e);
                while (!DeviceAuthTokenStore.this.mFutures.isEmpty()) {
                    DeviceAuthTokenStore.this.mFutures.remove().completeExceptionally(e);
                }
            } catch (Throwable th) {
                ((Context) AnonymousClass0Lh.A03(1, 4, DeviceAuthTokenStore.this._UL_mInjectionContext)).unbindService(this);
                throw th;
            }
            ((Context) AnonymousClass0Lh.A03(1, 4, DeviceAuthTokenStore.this._UL_mInjectionContext)).unbindService(this);
        }
    };

    @AutoGeneratedAccessMethod
    public static final AbstractC02980bI _UL__ULSEP_com_facebook_inject_Lazy_ULLT_com_oculus_auth_device_DeviceAuthTokenStore_ULGT__ULSEP_ACCESS_METHOD(AbstractC02990bJ r2) {
        return new AnonymousClass0Ld(112, r2);
    }

    @AutoGeneratedAccessMethod
    public static final DeviceAuthTokenStore _UL__ULSEP_com_oculus_auth_device_DeviceAuthTokenStore_ULSEP_ACCESS_METHOD(AbstractC02990bJ r1) {
        return (DeviceAuthTokenStore) AnonymousClass13m.A00(112, r1);
    }

    @AutoGeneratedFactoryMethod
    public static final DeviceAuthTokenStore _UL__ULSEP_com_oculus_auth_device_DeviceAuthTokenStore_ULSEP_FACTORY_METHOD(AbstractC02990bJ r4) {
        if (_UL__ULSEP_com_oculus_auth_device_DeviceAuthTokenStore_ULSEP_INSTANCE == null) {
            synchronized (DeviceAuthTokenStore.class) {
                AnonymousClass0Qe A00 = AnonymousClass0Qe.A00(_UL__ULSEP_com_oculus_auth_device_DeviceAuthTokenStore_ULSEP_INSTANCE, r4);
                if (A00 != null) {
                    try {
                        _UL__ULSEP_com_oculus_auth_device_DeviceAuthTokenStore_ULSEP_INSTANCE = new DeviceAuthTokenStore(r4.getApplicationInjector());
                    } finally {
                        A00.A01();
                    }
                }
            }
        }
        return _UL__ULSEP_com_oculus_auth_device_DeviceAuthTokenStore_ULSEP_INSTANCE;
    }

    @AutoGeneratedAccessMethod
    public static final AbstractC07240oz _UL__ULSEP_javax_inject_Provider_ULLT_com_oculus_auth_device_DeviceAuthTokenStore_ULGT__ULSEP_ACCESS_METHOD(AbstractC02990bJ r2) {
        return new AnonymousClass0Ld(112, r2);
    }

    public CompletableFuture<String> fetchToken() {
        CompletableFuture<String> completableFuture = new CompletableFuture<>();
        this.mFutures.add(completableFuture);
        Intent intent = new Intent();
        intent.setComponent(new ComponentName(DEVICE_AUTH_SERVER_PACKAGE, DEVICE_AUTH_SERVER_CLASS));
        if (!((Context) AnonymousClass0Lh.A03(1, 4, this._UL_mInjectionContext)).bindService(intent, this.mServiceConnection, 0)) {
            AnonymousClass0NK.A01(TAG, "failed to bind to device auth service");
            completableFuture.completeExceptionally(new Throwable("failed to bind to device auth service"));
            this.mFutures.remove(completableFuture);
        }
        return completableFuture;
    }

    public void forceTokenRefresh() {
        Intent intent = new Intent(ACTION_REFRESH_TOKEN);
        intent.setComponent(new ComponentName(DEVICE_AUTH_SERVER_PACKAGE, DEVICE_AUTH_SERVER_CLASS));
        ((Context) AnonymousClass0Lh.A03(1, 4, this._UL_mInjectionContext)).startService(intent);
    }

    @Nullable
    public String getAuthToken() {
        return this.mAuthToken;
    }

    @Inject
    public DeviceAuthTokenStore(AbstractC02990bJ r3) {
        this._UL_mInjectionContext = new AnonymousClass0R7(2, r3);
    }
}
