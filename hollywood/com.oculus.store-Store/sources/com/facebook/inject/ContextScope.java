package com.facebook.inject;

import android.annotation.SuppressLint;
import android.content.Context;
import com.facebook.common.cache.CacheLoader;
import com.facebook.common.cache.WeakKeyWeakValueLoadingCache;
import com.facebook.common.propertybag.PropertyBag;
import com.facebook.common.util.context.wrapper.ContextWrapperUtils;
import com.facebook.infer.annotation.Assertions;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.UL;
import com.google.inject.Key;
import java.lang.annotation.Annotation;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import javax.annotation.Nullable;
import javax.inject.Provider;

@ContextScoped
public class ContextScope implements Scope {
    private static final Map<Context, Map<Integer, Object>> contextKeyedScopeCache = Collections.synchronizedMap(new HashMap());
    private final Context mAppContext;
    private final WeakKeyWeakValueLoadingCache<Context, ContextScopeAwareInjector> mCachedInjectors = new WeakKeyWeakValueLoadingCache<>(new CacheLoader<Context, ContextScopeAwareInjector>() {
        /* class com.facebook.inject.ContextScope.AnonymousClass1 */

        public ContextScopeAwareInjector load(Context context) {
            return new ContextScopeAwareInjector(ContextScope.this.mFbInjector, context);
        }
    });
    private final FbInjector mFbInjector;

    @AutoGeneratedAccessMethod
    public static final ContextScope $ul_$xXXcom_facebook_inject_ContextScope$xXXACCESS_METHOD(InjectorLike $ul_injector) {
        return (ContextScope) UL.factorymap.get(BundledAndroidModule.UL_id.$ul_$xXXcom_facebook_inject_ContextScope$xXXBINDING_ID, $ul_injector);
    }

    public ContextScope(FbInjector injector) {
        this.mFbInjector = injector;
        this.mAppContext = injector.getInjectorThreadStack().getContext();
    }

    public Context getAppContext() {
        return this.mAppContext;
    }

    public InjectorThreadStack getInjectorThreadStack() {
        return this.mFbInjector.getInjectorThreadStack();
    }

    @Override // com.facebook.inject.Scope
    public <T> Provider<T> scope(Key<T> key, Provider<T> unScopedProvider) {
        return new ContextScopedProvider(this, unScopedProvider);
    }

    @Override // com.facebook.inject.Scope
    public Class<? extends Annotation> annotationType() {
        return ContextScoped.class;
    }

    public void enterScope(Context context, InjectorThreadStack injectorThreadStack) {
        injectorThreadStack.pushInjector(this.mCachedInjectors.get(context));
    }

    public void exitScope(InjectorThreadStack injectorThreadStack) {
        injectorThreadStack.popInjector();
    }

    @Nullable
    public PropertyBag getPropertyBagForContext(Context context) {
        return (PropertyBag) ContextWrapperUtils.findContextOfType(context, PropertyBag.class);
    }

    public static <T extends IsContextScoped> T get(Class<? extends T> clazz, Context context) {
        return (T) get(clazz, null, context);
    }

    public static <T extends IsContextScoped> T get(Class<? extends T> clazz, @Nullable Class bindingAnnotation, Context context) {
        Assertions.assertUnreachable("Fallback was called and not implemented yet");
        return (T) get(RuntimeBindingIdUtils.getBindingIdFromClasses(clazz, bindingAnnotation), context);
    }

    @SuppressLint({"BadArgument-FbInjector#get-0"})
    public static <T extends IsContextScoped> T get(int bindingId, Context context) {
        Map<Integer, Object> contextCache;
        if (FbInjector.getApplication() == context) {
            return (T) ((IsContextScoped) ApplicationScope.get(bindingId));
        }
        synchronized (contextKeyedScopeCache) {
            contextCache = contextKeyedScopeCache.get(context);
            if (contextCache == null) {
                contextCache = Collections.synchronizedMap(new HashMap());
                contextKeyedScopeCache.put(context, contextCache);
            }
        }
        T instance = (T) ((IsContextScoped) contextCache.get(Integer.valueOf(bindingId)));
        if (instance == null) {
            instance = (T) ((IsContextScoped) Ultralight.get(bindingId, context));
            contextCache.put(Integer.valueOf(bindingId), instance);
        }
        return instance;
    }
}
