package com.oculus.video.analytics;

import android.util.Pair;
import com.oculus.video.Settings;
import com.oculus.video.SyncMediaPlayer;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.json.JSONObject;

/* access modifiers changed from: package-private */
public class VideoAnalyticsSession {
    static final /* synthetic */ boolean $assertionsDisabled = false;
    private static final String EXTRA_BUFFERING_DURATION_MS = "buffering_duration_ms";
    private static final String EXTRA_BUFFER_AHEAD_DURATION_MS = "buffer_ahead_duration_ms";
    private static final String EXTRA_HQ_PLAYBACK_DURATION_MS = "hq_playback_duration_ms";
    private static final String EXTRA_PLAYBACK_DURATION_MS = "playback_duration_ms";
    private static final String EXTRA_RESPONSE_TIME_MS = "response_time_ms";
    private static final String EXTRA_RESUME_DURATION_MS = "resume_duration_ms";
    private static final String EXTRA_SEEK_DURATION_MS = "seek_duration_ms";
    private static final String EXTRA_STALL_DURATION_MS = "stall_duration_ms";
    private static final String EXTRA_STREAMING_BITRATE_BPS = "streaming_bitrate_bps";
    private static final String EXTRA_VIDEO_BITRATE = "video_bitrate";
    private static final String EXTRA_VIDEO_SIZE = "video_size";
    private static final String EXTRA_VQM = "vqm";
    String ID;
    long accumulatedDecodedFrames;
    long accumulatedDelayedDroppedFrames;
    long accumulatedDroppedFrames;
    long accumulatedDroppedFramesElapsedTimeMs;
    long accumulatedStreamedBytes;
    long accumulatedStreamingTimeMs;
    long accumulatedUnconsumedDroppedFrames;
    String audioChannelLayout;
    String audioMimeType;
    String audioRendererName;
    int audioTrackCount;
    List<Map<String, Object>> availableProfiles;
    DataSampler bufferAheadDurationMsPeriodicSampler;
    final DataSampler bufferAheadDurationMsSampler = new DataSampler(EXTRA_BUFFER_AHEAD_DURATION_MS);
    DataSampler bufferingDurationMsPeriodicSampler;
    final DataSampler bufferingDurationMsSampler = new DataSampler(EXTRA_BUFFERING_DURATION_MS);
    long bufferingStartTimeNs = 0;
    String channel;
    String clientAnalyticsData;
    String contentType;
    boolean didExtractAudio;
    boolean didExtractVideo;
    boolean didPauseBeforeLoad;
    boolean didPlaybackStart;
    long durationMs;
    String fatalErrorMessage;
    String fileExtension;
    float fovX;
    float fovY;
    float fps;
    int height;
    final DataSampler hqPlaybackDurationMsSampler = new DataSampler(EXTRA_HQ_PLAYBACK_DURATION_MS);
    LinkedList<Pair<Long, Long>> hqPlaybackTimeRangeMsList = new LinkedList<>();
    String httpMethod = null;
    int httpResponseCode;
    String httpUrl = null;
    boolean is3D;
    boolean isSeekable;
    boolean isSyncMedia;
    final Map<String, Long> lastEventTimeMs = new HashMap();
    long lastPlaybackEndTimeMs;
    long lastPlaybackStartTimeMs;
    long lastPlaylistUpdateTimeMs;
    Pair<String, Long> lastSubtitleSelectionTimeMs = null;
    long lastSyncPlaybackDelayMs = SyncMediaPlayer.SYNC_DELAY_UNSET_MS;
    long lastVideoFormatSampleTimeMs;
    long lastVideoSizeChangeTimeMs;
    Pair<Integer, Long> lastVideoTrackSelectionTimeMs = null;
    long loadDurationMs;
    long pauseStartTimeMs;
    int playListUpdatePeriodicCount;
    final Settings playbackSettings;
    String projection;
    String provider;
    String remoteIPAddress = null;
    DataSampler responseTimeMsPeriodicSampler;
    final DataSampler responseTimeMsSampler = new DataSampler(EXTRA_RESPONSE_TIME_MS);
    final DataSampler resumeDurationMsSampler = new DataSampler(EXTRA_RESUME_DURATION_MS);
    long resumeStartTimeMs;
    DataSampler seekDurationMsPeriodicSampler;
    final DataSampler seekDurationMsSampler = new DataSampler(EXTRA_SEEK_DURATION_MS);
    long seekStartTimeMs;
    Map<String, Object> selectedProfile;
    Map<String, Object> selectedProfileWithTimeline;
    JSONObject sphericalMetadata;
    DataSampler stallDurationMsPeriodicSampler;
    final DataSampler stallDurationMsSampler = new DataSampler(EXTRA_STALL_DURATION_MS);
    double startingChargeDrainedMah = 0.0d;
    VideoSessionState state = VideoSessionState.INIT;
    DataSampler streamingBitrateBpsPeriodicSampler;
    final DataSampler streamingBitrateBpsSampler = new DataSampler(EXTRA_STREAMING_BITRATE_BPS);
    long streamingUpdateDecodedFrames;
    long streamingUpdateDelayedDroppedFrames;
    long streamingUpdateDroppedFrames;
    long streamingUpdateFrameDecodeTimeMs;
    long streamingUpdateUnconsumedDroppedFrames;
    final HashMap<String, Long> subtitleDurationMs = new HashMap<>();
    String subtitleMimeType;
    long totalDecodedFrames;
    long totalDelayedDroppedFrames;
    long totalDroppedFrames;
    long totalPausedDurationMs;
    long totalStreamedBytes;
    long totalUnconsumedDroppedFrames;
    String url;
    int videoBitrate;
    final DataSampler videoBitrateSampler = new DataSampler(EXTRA_VIDEO_BITRATE);
    String videoID;
    String videoMimeType;
    String videoRendererName;
    final DataSampler videoSizeSampler = new DataSampler(EXTRA_VIDEO_SIZE);
    long videoStartTimeMs;
    int videoTrackCount;
    final HashMap<Integer, Long> videoTrackDurationMs = new HashMap<>();
    double vqm;
    final DataSampler vqmSampler = new DataSampler(EXTRA_VQM);
    int width;

    VideoAnalyticsSession(Settings settings) {
        this.playbackSettings = settings;
        resetPeriodicValues();
    }

    /* access modifiers changed from: package-private */
    public void resetPeriodicValues() {
        this.playListUpdatePeriodicCount = 0;
        this.responseTimeMsPeriodicSampler = new DataSampler(EXTRA_RESPONSE_TIME_MS);
        this.bufferAheadDurationMsPeriodicSampler = new DataSampler(EXTRA_BUFFER_AHEAD_DURATION_MS);
        this.streamingBitrateBpsPeriodicSampler = new DataSampler(EXTRA_STREAMING_BITRATE_BPS);
        this.stallDurationMsPeriodicSampler = new DataSampler(EXTRA_STALL_DURATION_MS);
        this.bufferingDurationMsPeriodicSampler = new DataSampler(EXTRA_BUFFERING_DURATION_MS);
        this.seekDurationMsPeriodicSampler = new DataSampler(EXTRA_SEEK_DURATION_MS);
    }
}
