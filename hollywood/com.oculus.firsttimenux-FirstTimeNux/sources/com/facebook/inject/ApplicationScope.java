package com.facebook.inject;

import android.annotation.SuppressLint;
import android.content.Context;
import com.facebook.infer.annotation.Assertions;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.UL;
import com.google.inject.Key;
import java.lang.annotation.Annotation;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import javax.annotation.Nullable;
import javax.inject.Provider;

@ApplicationScoped
public class ApplicationScope implements Scope {
    private static final Map<Integer, Object> applicationScopedCache = Collections.synchronizedMap(new HashMap());
    private final Context mAppContext;
    private final FbInjector mInjector;
    private final ApplicationScopeAwareInjector mScopeAwareInjector = new ApplicationScopeAwareInjector(this.mInjector, this);

    @AutoGeneratedAccessMethod
    public static final ApplicationScope $ul_$xXXcom_facebook_inject_ApplicationScope$xXXACCESS_METHOD(InjectorLike $ul_injector) {
        return (ApplicationScope) UL.factorymap.get(BundledAndroidModule.UL_id.$ul_$xXXcom_facebook_inject_ApplicationScope$xXXBINDING_ID, $ul_injector);
    }

    public ApplicationScope(FbInjector injector) {
        this.mInjector = injector;
        this.mAppContext = injector.getInjectorThreadStack().getContext();
    }

    @Override // com.facebook.inject.Scope
    public Class<? extends Annotation> annotationType() {
        return ApplicationScoped.class;
    }

    @Override // com.facebook.inject.Scope
    public <T> Provider<T> scope(Key<T> key, Provider<T> provider) {
        return new ApplicationScopeProvider(this, provider);
    }

    public InjectorThreadStack enterScope() {
        InjectorThreadStack injectorThreadStack = this.mInjector.getInjectorThreadStack();
        injectorThreadStack.enterAppContext();
        injectorThreadStack.pushInjector(this.mScopeAwareInjector);
        return injectorThreadStack;
    }

    public void exitScope(InjectorThreadStack injectorThreadStack) {
        injectorThreadStack.exitContext();
        injectorThreadStack.popInjector();
    }

    public Context getContext() {
        return this.mAppContext;
    }

    public static <T extends IsApplicationScoped> T get(Class<? extends T> clazz) {
        return (T) get(clazz, null);
    }

    public static <T extends IsApplicationScoped> T get(Class<? extends T> clazz, @Nullable Class bindingAnnotation) {
        Assertions.assertUnreachable("Fallback was called and not implemented yet");
        return (T) get(RuntimeBindingIdUtils.getBindingIdFromClasses(clazz, bindingAnnotation));
    }

    @SuppressLint({"BadArgument-FbInjector#get-0"})
    public static <T extends IsApplicationScoped> T get(int bindingId) {
        T instance = (T) ((IsApplicationScoped) applicationScopedCache.get(Integer.valueOf(bindingId)));
        if (instance != null) {
            return instance;
        }
        T instance2 = (T) ((IsApplicationScoped) Ultralight.get(bindingId, (Context) Assertions.assertNotNull(FbInjector.getApplication())));
        applicationScopedCache.put(Integer.valueOf(bindingId), instance2);
        return instance2;
    }
}
