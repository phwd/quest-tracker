package com.facebook.common.time;

import com.facebook.common.build.config.BuildConfig;
import com.facebook.infer.annotation.Nullsafe;
import com.facebook.inject.AbstractLibraryModule;
import com.facebook.inject.ApplicationScopeClassInit;
import com.facebook.inject.ApplicationScoped;
import com.facebook.inject.AutoGeneratedBinder;
import com.facebook.inject.Binder;
import com.facebook.inject.BundledAndroidModule;
import com.facebook.inject.InjectorLike;
import com.facebook.inject.InjectorModule;
import com.facebook.inject.Lazy;
import com.facebook.inject.ProviderMethod;
import com.facebook.inject.UltralightLazy;
import com.facebook.inject.UltralightProvider;
import com.facebook.inject.UltralightSingletonProvider;
import com.facebook.ultralight.AutoGeneratedAccessMethod;
import com.facebook.ultralight.AutoGeneratedFactoryMethod;
import com.facebook.ultralight.AutoGeneratedSwitchIdClass;
import com.facebook.ultralight.UL;
import com.google.inject.Key;
import java.lang.annotation.Annotation;
import java.util.GregorianCalendar;
import javax.inject.Provider;

@InjectorModule
@Nullsafe(Nullsafe.Mode.LOCAL)
public class TimeModule extends AbstractLibraryModule {
    private static volatile CurrentThreadTimeClock $ul_$xXXcom_facebook_common_time_CurrentThreadTimeClock$xXXINSTANCE;

    @AutoGeneratedSwitchIdClass
    public static final class UL_id {
        public static final int $ul_$xXXcom_facebook_common_time_AwakeTimeSinceBootClock$xXXBINDING_ID = (UL.USE_STATIC_DI ? UL.id.$ul_$xXXcom_facebook_common_time_AwakeTimeSinceBootClock$xXXBINDING_ID : UL.id.dynamicId(Key.get(AwakeTimeSinceBootClock.class)));
        public static final int $ul_$xXXcom_facebook_common_time_Clock$xXXBINDING_ID = (UL.USE_STATIC_DI ? UL.id.$ul_$xXXcom_facebook_common_time_Clock$xXXBINDING_ID : UL.id.dynamicId(Key.get(Clock.class)));
        public static final int $ul_$xXXcom_facebook_common_time_Clock$xXXcom_facebook_common_time_CurrentThreadTime$xXXBINDING_ID = (UL.USE_STATIC_DI ? UL.id.$ul_$xXXcom_facebook_common_time_Clock$xXXcom_facebook_common_time_CurrentThreadTime$xXXBINDING_ID : UL.id.dynamicId(Key.get(Clock.class, (Class<? extends Annotation>) CurrentThreadTime.class)));
        public static final int $ul_$xXXcom_facebook_common_time_CurrentThreadTimeClock$xXXBINDING_ID = (UL.USE_STATIC_DI ? UL.id.$ul_$xXXcom_facebook_common_time_CurrentThreadTimeClock$xXXBINDING_ID : UL.id.dynamicId(Key.get(CurrentThreadTimeClock.class)));
        public static final int $ul_$xXXcom_facebook_common_time_MonotonicClock$xXXBINDING_ID = (UL.USE_STATIC_DI ? UL.id.$ul_$xXXcom_facebook_common_time_MonotonicClock$xXXBINDING_ID : UL.id.dynamicId(Key.get(MonotonicClock.class)));
        public static final int $ul_$xXXcom_facebook_common_time_MonotonicClock$xXXcom_facebook_common_time_ElapsedAwakeTimeSinceBoot$xXXBINDING_ID = (UL.USE_STATIC_DI ? UL.id.$ul_$xXXcom_facebook_common_time_MonotonicClock$xXXcom_facebook_common_time_ElapsedAwakeTimeSinceBoot$xXXBINDING_ID : UL.id.dynamicId(Key.get(MonotonicClock.class, (Class<? extends Annotation>) ElapsedAwakeTimeSinceBoot.class)));
        public static final int $ul_$xXXcom_facebook_common_time_MonotonicClock$xXXcom_facebook_common_time_ElapsedRealtimeSinceBoot$xXXBINDING_ID = (UL.USE_STATIC_DI ? UL.id.$ul_$xXXcom_facebook_common_time_MonotonicClock$xXXcom_facebook_common_time_ElapsedRealtimeSinceBoot$xXXBINDING_ID : UL.id.dynamicId(Key.get(MonotonicClock.class, (Class<? extends Annotation>) ElapsedRealtimeSinceBoot.class)));
        public static final int $ul_$xXXcom_facebook_common_time_MonotonicNanoClock$xXXBINDING_ID = (UL.USE_STATIC_DI ? UL.id.$ul_$xXXcom_facebook_common_time_MonotonicNanoClock$xXXBINDING_ID : UL.id.dynamicId(Key.get(MonotonicNanoClock.class)));
        public static final int $ul_$xXXcom_facebook_common_time_RealtimeSinceBootClock$xXXBINDING_ID = (UL.USE_STATIC_DI ? UL.id.$ul_$xXXcom_facebook_common_time_RealtimeSinceBootClock$xXXBINDING_ID : UL.id.dynamicId(Key.get(RealtimeSinceBootClock.class)));
        public static final int $ul_$xXXcom_facebook_common_time_SystemClock$xXXBINDING_ID = (UL.USE_STATIC_DI ? UL.id.$ul_$xXXcom_facebook_common_time_SystemClock$xXXBINDING_ID : UL.id.dynamicId(Key.get(SystemClock.class)));
        public static final int $ul_$xXXjava_util_GregorianCalendar$xXXBINDING_ID = (UL.USE_STATIC_DI ? UL.id.$ul_$xXXjava_util_GregorianCalendar$xXXBINDING_ID : UL.id.dynamicId(Key.get(GregorianCalendar.class)));
    }

    @AutoGeneratedBinder
    static class AutoGeneratedBindingsForTimeModule {
        AutoGeneratedBindingsForTimeModule() {
        }

        static void bind(Binder binder) {
            if (!UL.USE_STATIC_DI) {
                binder.require(BundledAndroidModule.class);
                binder.bind(AwakeTimeSinceBootClock.class).toProvider(new AwakeTimeSinceBootClockMethodAutoProvider());
                binder.bind(Clock.class).annotatedWith(CurrentThreadTime.class).toProvider(new Clock_com_facebook_common_time_CurrentThreadTimeMethodAutoProvider());
                binder.bindDefault(Clock.class).toProvider(new ClockMethodAutoProvider());
                binder.bind(CurrentThreadTimeClock.class).toProvider(new CurrentThreadTimeClockMethodAutoProvider()).in(ApplicationScoped.class);
                binder.bind(MonotonicClock.class).annotatedWith(ElapsedAwakeTimeSinceBoot.class).toProvider(new MonotonicClock_com_facebook_common_time_ElapsedAwakeTimeSinceBootMethodAutoProvider());
                binder.bind(MonotonicClock.class).annotatedWith(ElapsedRealtimeSinceBoot.class).toProvider(new MonotonicClock_com_facebook_common_time_ElapsedRealtimeSinceBootMethodAutoProvider());
                binder.bindDefault(MonotonicClock.class).toProvider(new MonotonicClockMethodAutoProvider());
                binder.bind(MonotonicNanoClock.class).toProvider(new MonotonicNanoClockMethodAutoProvider());
                binder.bind(RealtimeSinceBootClock.class).toProvider(new RealtimeSinceBootClockMethodAutoProvider());
                binder.bind(SystemClock.class).toProvider(new SystemClockMethodAutoProvider());
                binder.bind(GregorianCalendar.class).toProvider(new GregorianCalendarMethodAutoProvider());
            }
        }
    }

    @AutoGeneratedAccessMethod
    public static final AwakeTimeSinceBootClock $ul_$xXXcom_facebook_common_time_AwakeTimeSinceBootClock$xXXACCESS_METHOD(InjectorLike $ul_injector) {
        return (AwakeTimeSinceBootClock) UL.factorymap.get(UL_id.$ul_$xXXcom_facebook_common_time_AwakeTimeSinceBootClock$xXXBINDING_ID, $ul_injector);
    }

    @AutoGeneratedFactoryMethod
    public static final AwakeTimeSinceBootClock $ul_$xXXcom_facebook_common_time_AwakeTimeSinceBootClock$xXXFACTORY_METHOD(InjectorLike $ul_injector) {
        return provideAwakeTimeSinceBootClock();
    }

    @AutoGeneratedAccessMethod
    public static final Clock $ul_$xXXcom_facebook_common_time_Clock$xXXACCESS_METHOD(InjectorLike $ul_injector) {
        return (Clock) UL.factorymap.get(UL_id.$ul_$xXXcom_facebook_common_time_Clock$xXXBINDING_ID, $ul_injector);
    }

    @AutoGeneratedFactoryMethod
    public static final Clock $ul_$xXXcom_facebook_common_time_Clock$xXXFACTORY_METHOD(InjectorLike $ul_injector) {
        return provideDefaultClock($ul_$xXXcom_facebook_common_time_SystemClock$xXXACCESS_METHOD($ul_injector));
    }

    @AutoGeneratedAccessMethod
    public static final Clock $ul_$xXXcom_facebook_common_time_Clock$xXXcom_facebook_common_time_CurrentThreadTime$xXXACCESS_METHOD(InjectorLike $ul_injector) {
        return (Clock) UL.factorymap.get(UL_id.$ul_$xXXcom_facebook_common_time_Clock$xXXcom_facebook_common_time_CurrentThreadTime$xXXBINDING_ID, $ul_injector);
    }

    @AutoGeneratedFactoryMethod
    public static final Clock $ul_$xXXcom_facebook_common_time_Clock$xXXcom_facebook_common_time_CurrentThreadTime$xXXFACTORY_METHOD(InjectorLike $ul_injector) {
        return provideCurrentThreadTimeClock($ul_$xXXcom_facebook_common_time_CurrentThreadTimeClock$xXXACCESS_METHOD($ul_injector));
    }

    @AutoGeneratedAccessMethod
    public static final CurrentThreadTimeClock $ul_$xXXcom_facebook_common_time_CurrentThreadTimeClock$xXXACCESS_METHOD(InjectorLike $ul_injector) {
        return (CurrentThreadTimeClock) UL.factorymap.get(UL_id.$ul_$xXXcom_facebook_common_time_CurrentThreadTimeClock$xXXBINDING_ID, $ul_injector);
    }

    @AutoGeneratedFactoryMethod
    public static final CurrentThreadTimeClock $ul_$xXXcom_facebook_common_time_CurrentThreadTimeClock$xXXFACTORY_METHOD(InjectorLike $ul_injector) {
        if ($ul_$xXXcom_facebook_common_time_CurrentThreadTimeClock$xXXINSTANCE == null) {
            synchronized (CurrentThreadTimeClock.class) {
                ApplicationScopeClassInit state = ApplicationScopeClassInit.start($ul_$xXXcom_facebook_common_time_CurrentThreadTimeClock$xXXINSTANCE, $ul_injector);
                if (state != null) {
                    try {
                        $ul_injector.getApplicationInjector();
                        $ul_$xXXcom_facebook_common_time_CurrentThreadTimeClock$xXXINSTANCE = provideCurrentThreadTimeClock();
                    } finally {
                        state.finish();
                    }
                }
            }
        }
        return $ul_$xXXcom_facebook_common_time_CurrentThreadTimeClock$xXXINSTANCE;
    }

    @AutoGeneratedAccessMethod
    public static final MonotonicClock $ul_$xXXcom_facebook_common_time_MonotonicClock$xXXACCESS_METHOD(InjectorLike $ul_injector) {
        return (MonotonicClock) UL.factorymap.get(UL_id.$ul_$xXXcom_facebook_common_time_MonotonicClock$xXXBINDING_ID, $ul_injector);
    }

    @AutoGeneratedFactoryMethod
    public static final MonotonicClock $ul_$xXXcom_facebook_common_time_MonotonicClock$xXXFACTORY_METHOD(InjectorLike $ul_injector) {
        return provideDefaultClock($ul_$xXXcom_facebook_common_time_AwakeTimeSinceBootClock$xXXACCESS_METHOD($ul_injector));
    }

    @AutoGeneratedAccessMethod
    public static final MonotonicClock $ul_$xXXcom_facebook_common_time_MonotonicClock$xXXcom_facebook_common_time_ElapsedAwakeTimeSinceBoot$xXXACCESS_METHOD(InjectorLike $ul_injector) {
        return (MonotonicClock) UL.factorymap.get(UL_id.$ul_$xXXcom_facebook_common_time_MonotonicClock$xXXcom_facebook_common_time_ElapsedAwakeTimeSinceBoot$xXXBINDING_ID, $ul_injector);
    }

    @AutoGeneratedFactoryMethod
    public static final MonotonicClock $ul_$xXXcom_facebook_common_time_MonotonicClock$xXXcom_facebook_common_time_ElapsedAwakeTimeSinceBoot$xXXFACTORY_METHOD(InjectorLike $ul_injector) {
        return provideElapsedAwakeTimeClock($ul_$xXXcom_facebook_common_time_AwakeTimeSinceBootClock$xXXACCESS_METHOD($ul_injector));
    }

    @AutoGeneratedAccessMethod
    public static final MonotonicClock $ul_$xXXcom_facebook_common_time_MonotonicClock$xXXcom_facebook_common_time_ElapsedRealtimeSinceBoot$xXXACCESS_METHOD(InjectorLike $ul_injector) {
        return (MonotonicClock) UL.factorymap.get(UL_id.$ul_$xXXcom_facebook_common_time_MonotonicClock$xXXcom_facebook_common_time_ElapsedRealtimeSinceBoot$xXXBINDING_ID, $ul_injector);
    }

    @AutoGeneratedFactoryMethod
    public static final MonotonicClock $ul_$xXXcom_facebook_common_time_MonotonicClock$xXXcom_facebook_common_time_ElapsedRealtimeSinceBoot$xXXFACTORY_METHOD(InjectorLike $ul_injector) {
        return provideElapsedRealtimeClock($ul_$xXXcom_facebook_common_time_RealtimeSinceBootClock$xXXACCESS_METHOD($ul_injector));
    }

    @AutoGeneratedAccessMethod
    public static final MonotonicNanoClock $ul_$xXXcom_facebook_common_time_MonotonicNanoClock$xXXACCESS_METHOD(InjectorLike $ul_injector) {
        return (MonotonicNanoClock) UL.factorymap.get(UL_id.$ul_$xXXcom_facebook_common_time_MonotonicNanoClock$xXXBINDING_ID, $ul_injector);
    }

    @AutoGeneratedFactoryMethod
    public static final MonotonicNanoClock $ul_$xXXcom_facebook_common_time_MonotonicNanoClock$xXXFACTORY_METHOD(InjectorLike $ul_injector) {
        return provideNanoClock();
    }

    @AutoGeneratedAccessMethod
    public static final RealtimeSinceBootClock $ul_$xXXcom_facebook_common_time_RealtimeSinceBootClock$xXXACCESS_METHOD(InjectorLike $ul_injector) {
        return (RealtimeSinceBootClock) UL.factorymap.get(UL_id.$ul_$xXXcom_facebook_common_time_RealtimeSinceBootClock$xXXBINDING_ID, $ul_injector);
    }

    @AutoGeneratedFactoryMethod
    public static final RealtimeSinceBootClock $ul_$xXXcom_facebook_common_time_RealtimeSinceBootClock$xXXFACTORY_METHOD(InjectorLike $ul_injector) {
        return provideRealtimeSinceBootClock();
    }

    @AutoGeneratedAccessMethod
    public static final SystemClock $ul_$xXXcom_facebook_common_time_SystemClock$xXXACCESS_METHOD(InjectorLike $ul_injector) {
        return (SystemClock) UL.factorymap.get(UL_id.$ul_$xXXcom_facebook_common_time_SystemClock$xXXBINDING_ID, $ul_injector);
    }

    @AutoGeneratedFactoryMethod
    public static final SystemClock $ul_$xXXcom_facebook_common_time_SystemClock$xXXFACTORY_METHOD(InjectorLike $ul_injector) {
        return provideSystemClock();
    }

    @AutoGeneratedAccessMethod
    public static final Lazy $ul_$xXXcom_facebook_inject_Lazy$x3Ccom_facebook_common_time_AwakeTimeSinceBootClock$x3E$xXXACCESS_METHOD(InjectorLike $ul_injector) {
        return UltralightLazy.get(UL_id.$ul_$xXXcom_facebook_common_time_AwakeTimeSinceBootClock$xXXBINDING_ID, $ul_injector);
    }

    @AutoGeneratedAccessMethod
    public static final Lazy $ul_$xXXcom_facebook_inject_Lazy$x3Ccom_facebook_common_time_Clock$x3E$xXXACCESS_METHOD(InjectorLike $ul_injector) {
        return UltralightLazy.get(UL_id.$ul_$xXXcom_facebook_common_time_Clock$xXXBINDING_ID, $ul_injector);
    }

    @AutoGeneratedAccessMethod
    public static final Lazy $ul_$xXXcom_facebook_inject_Lazy$x3Ccom_facebook_common_time_Clock$x3E$xXXcom_facebook_common_time_CurrentThreadTime$xXXACCESS_METHOD(InjectorLike $ul_injector) {
        return UltralightLazy.get(UL_id.$ul_$xXXcom_facebook_common_time_Clock$xXXcom_facebook_common_time_CurrentThreadTime$xXXBINDING_ID, $ul_injector);
    }

    @AutoGeneratedAccessMethod
    public static final Lazy $ul_$xXXcom_facebook_inject_Lazy$x3Ccom_facebook_common_time_CurrentThreadTimeClock$x3E$xXXACCESS_METHOD(InjectorLike $ul_injector) {
        return UltralightSingletonProvider.get(UL_id.$ul_$xXXcom_facebook_common_time_CurrentThreadTimeClock$xXXBINDING_ID, $ul_injector);
    }

    @AutoGeneratedAccessMethod
    public static final Lazy $ul_$xXXcom_facebook_inject_Lazy$x3Ccom_facebook_common_time_MonotonicClock$x3E$xXXACCESS_METHOD(InjectorLike $ul_injector) {
        return UltralightLazy.get(UL_id.$ul_$xXXcom_facebook_common_time_MonotonicClock$xXXBINDING_ID, $ul_injector);
    }

    @AutoGeneratedAccessMethod
    public static final Lazy $ul_$xXXcom_facebook_inject_Lazy$x3Ccom_facebook_common_time_MonotonicClock$x3E$xXXcom_facebook_common_time_ElapsedAwakeTimeSinceBoot$xXXACCESS_METHOD(InjectorLike $ul_injector) {
        return UltralightLazy.get(UL_id.$ul_$xXXcom_facebook_common_time_MonotonicClock$xXXcom_facebook_common_time_ElapsedAwakeTimeSinceBoot$xXXBINDING_ID, $ul_injector);
    }

    @AutoGeneratedAccessMethod
    public static final Lazy $ul_$xXXcom_facebook_inject_Lazy$x3Ccom_facebook_common_time_MonotonicClock$x3E$xXXcom_facebook_common_time_ElapsedRealtimeSinceBoot$xXXACCESS_METHOD(InjectorLike $ul_injector) {
        return UltralightLazy.get(UL_id.$ul_$xXXcom_facebook_common_time_MonotonicClock$xXXcom_facebook_common_time_ElapsedRealtimeSinceBoot$xXXBINDING_ID, $ul_injector);
    }

    @AutoGeneratedAccessMethod
    public static final Lazy $ul_$xXXcom_facebook_inject_Lazy$x3Ccom_facebook_common_time_MonotonicNanoClock$x3E$xXXACCESS_METHOD(InjectorLike $ul_injector) {
        return UltralightLazy.get(UL_id.$ul_$xXXcom_facebook_common_time_MonotonicNanoClock$xXXBINDING_ID, $ul_injector);
    }

    @AutoGeneratedAccessMethod
    public static final Lazy $ul_$xXXcom_facebook_inject_Lazy$x3Ccom_facebook_common_time_RealtimeSinceBootClock$x3E$xXXACCESS_METHOD(InjectorLike $ul_injector) {
        return UltralightLazy.get(UL_id.$ul_$xXXcom_facebook_common_time_RealtimeSinceBootClock$xXXBINDING_ID, $ul_injector);
    }

    @AutoGeneratedAccessMethod
    public static final Lazy $ul_$xXXcom_facebook_inject_Lazy$x3Ccom_facebook_common_time_SystemClock$x3E$xXXACCESS_METHOD(InjectorLike $ul_injector) {
        return UltralightLazy.get(UL_id.$ul_$xXXcom_facebook_common_time_SystemClock$xXXBINDING_ID, $ul_injector);
    }

    @AutoGeneratedAccessMethod
    public static final Lazy $ul_$xXXcom_facebook_inject_Lazy$x3Cjava_util_GregorianCalendar$x3E$xXXACCESS_METHOD(InjectorLike $ul_injector) {
        return UltralightLazy.get(UL_id.$ul_$xXXjava_util_GregorianCalendar$xXXBINDING_ID, $ul_injector);
    }

    @AutoGeneratedAccessMethod
    public static final GregorianCalendar $ul_$xXXjava_util_GregorianCalendar$xXXACCESS_METHOD(InjectorLike $ul_injector) {
        return (GregorianCalendar) UL.factorymap.get(UL_id.$ul_$xXXjava_util_GregorianCalendar$xXXBINDING_ID, $ul_injector);
    }

    @AutoGeneratedFactoryMethod
    public static final GregorianCalendar $ul_$xXXjava_util_GregorianCalendar$xXXFACTORY_METHOD(InjectorLike $ul_injector) {
        return provideGregorianCalendar();
    }

    @AutoGeneratedAccessMethod
    public static final Provider $ul_$xXXjavax_inject_Provider$x3Ccom_facebook_common_time_AwakeTimeSinceBootClock$x3E$xXXACCESS_METHOD(InjectorLike $ul_injector) {
        return UltralightProvider.get(UL_id.$ul_$xXXcom_facebook_common_time_AwakeTimeSinceBootClock$xXXBINDING_ID, $ul_injector);
    }

    @AutoGeneratedAccessMethod
    public static final Provider $ul_$xXXjavax_inject_Provider$x3Ccom_facebook_common_time_Clock$x3E$xXXACCESS_METHOD(InjectorLike $ul_injector) {
        return UltralightProvider.get(UL_id.$ul_$xXXcom_facebook_common_time_Clock$xXXBINDING_ID, $ul_injector);
    }

    @AutoGeneratedAccessMethod
    public static final Provider $ul_$xXXjavax_inject_Provider$x3Ccom_facebook_common_time_Clock$x3E$xXXcom_facebook_common_time_CurrentThreadTime$xXXACCESS_METHOD(InjectorLike $ul_injector) {
        return UltralightProvider.get(UL_id.$ul_$xXXcom_facebook_common_time_Clock$xXXcom_facebook_common_time_CurrentThreadTime$xXXBINDING_ID, $ul_injector);
    }

    @AutoGeneratedAccessMethod
    public static final Provider $ul_$xXXjavax_inject_Provider$x3Ccom_facebook_common_time_CurrentThreadTimeClock$x3E$xXXACCESS_METHOD(InjectorLike $ul_injector) {
        return UltralightSingletonProvider.get(UL_id.$ul_$xXXcom_facebook_common_time_CurrentThreadTimeClock$xXXBINDING_ID, $ul_injector);
    }

    @AutoGeneratedAccessMethod
    public static final Provider $ul_$xXXjavax_inject_Provider$x3Ccom_facebook_common_time_MonotonicClock$x3E$xXXACCESS_METHOD(InjectorLike $ul_injector) {
        return UltralightProvider.get(UL_id.$ul_$xXXcom_facebook_common_time_MonotonicClock$xXXBINDING_ID, $ul_injector);
    }

    @AutoGeneratedAccessMethod
    public static final Provider $ul_$xXXjavax_inject_Provider$x3Ccom_facebook_common_time_MonotonicClock$x3E$xXXcom_facebook_common_time_ElapsedAwakeTimeSinceBoot$xXXACCESS_METHOD(InjectorLike $ul_injector) {
        return UltralightProvider.get(UL_id.$ul_$xXXcom_facebook_common_time_MonotonicClock$xXXcom_facebook_common_time_ElapsedAwakeTimeSinceBoot$xXXBINDING_ID, $ul_injector);
    }

    @AutoGeneratedAccessMethod
    public static final Provider $ul_$xXXjavax_inject_Provider$x3Ccom_facebook_common_time_MonotonicClock$x3E$xXXcom_facebook_common_time_ElapsedRealtimeSinceBoot$xXXACCESS_METHOD(InjectorLike $ul_injector) {
        return UltralightProvider.get(UL_id.$ul_$xXXcom_facebook_common_time_MonotonicClock$xXXcom_facebook_common_time_ElapsedRealtimeSinceBoot$xXXBINDING_ID, $ul_injector);
    }

    @AutoGeneratedAccessMethod
    public static final Provider $ul_$xXXjavax_inject_Provider$x3Ccom_facebook_common_time_MonotonicNanoClock$x3E$xXXACCESS_METHOD(InjectorLike $ul_injector) {
        return UltralightProvider.get(UL_id.$ul_$xXXcom_facebook_common_time_MonotonicNanoClock$xXXBINDING_ID, $ul_injector);
    }

    @AutoGeneratedAccessMethod
    public static final Provider $ul_$xXXjavax_inject_Provider$x3Ccom_facebook_common_time_RealtimeSinceBootClock$x3E$xXXACCESS_METHOD(InjectorLike $ul_injector) {
        return UltralightProvider.get(UL_id.$ul_$xXXcom_facebook_common_time_RealtimeSinceBootClock$xXXBINDING_ID, $ul_injector);
    }

    @AutoGeneratedAccessMethod
    public static final Provider $ul_$xXXjavax_inject_Provider$x3Ccom_facebook_common_time_SystemClock$x3E$xXXACCESS_METHOD(InjectorLike $ul_injector) {
        return UltralightProvider.get(UL_id.$ul_$xXXcom_facebook_common_time_SystemClock$xXXBINDING_ID, $ul_injector);
    }

    @AutoGeneratedAccessMethod
    public static final Provider $ul_$xXXjavax_inject_Provider$x3Cjava_util_GregorianCalendar$x3E$xXXACCESS_METHOD(InjectorLike $ul_injector) {
        return UltralightProvider.get(UL_id.$ul_$xXXjava_util_GregorianCalendar$xXXBINDING_ID, $ul_injector);
    }

    @ProviderMethod
    public static SystemClock provideSystemClock() {
        return SystemClock.get();
    }

    @ProviderMethod
    public static AwakeTimeSinceBootClock provideAwakeTimeSinceBootClock() {
        return AwakeTimeSinceBootClock.get();
    }

    @ProviderMethod
    public static RealtimeSinceBootClock provideRealtimeSinceBootClock() {
        return RealtimeSinceBootClock.get();
    }

    @ProviderMethod
    public static MonotonicNanoClock provideNanoClock() {
        return AwakeTimeSinceBootClock.get();
    }

    @ApplicationScoped
    @ProviderMethod
    public static CurrentThreadTimeClock provideCurrentThreadTimeClock() {
        return new CurrentThreadTimeClock();
    }

    @ProviderMethod
    public static GregorianCalendar provideGregorianCalendar() {
        return new GregorianCalendar();
    }

    @ProviderMethod(asDefault = BuildConfig.IS_INTERNAL_BUILD)
    static Clock provideDefaultClock(SystemClock systemClock) {
        return systemClock;
    }

    @ProviderMethod(asDefault = BuildConfig.IS_INTERNAL_BUILD)
    static MonotonicClock provideDefaultClock(AwakeTimeSinceBootClock c) {
        return c;
    }

    @ElapsedRealtimeSinceBoot
    @ProviderMethod
    static MonotonicClock provideElapsedRealtimeClock(RealtimeSinceBootClock c) {
        return c;
    }

    @ProviderMethod
    @ElapsedAwakeTimeSinceBoot
    static MonotonicClock provideElapsedAwakeTimeClock(AwakeTimeSinceBootClock c) {
        return c;
    }

    @CurrentThreadTime
    @ProviderMethod
    static Clock provideCurrentThreadTimeClock(CurrentThreadTimeClock c) {
        return c;
    }
}
